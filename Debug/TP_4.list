
TP_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030f4  0800f698  0800f698  0001f698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801278c  0801278c  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801278c  0801278c  0002278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012794  08012794  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012794  08012794  00022794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012798  08012798  00022798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801279c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ba0  200000b4  08012850  000300b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008c54  08012850  00038c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035950  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006410  00000000  00000000  00065a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027f0  00000000  00000000  0006be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002568  00000000  00000000  0006e638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f0d2  00000000  00000000  00070ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ef10  00000000  00000000  0009fc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001182cf  00000000  00000000  000ceb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e6e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae68  00000000  00000000  001e6ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f680 	.word	0x0800f680

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f680 	.word	0x0800f680

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	20000184 	.word	0x20000184

080005ec <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <vApplicationGetTimerTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <vApplicationGetTimerTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	20000384 	.word	0x20000384
 800061c:	20000438 	.word	0x20000438

08000620 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800062a:	20c8      	movs	r0, #200	; 0xc8
 800062c:	f002 fb22 	bl	8002c74 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000630:	f000 fa7a 	bl	8000b28 <ft5336_I2C_InitializeIfRequired>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b084      	sub	sp, #16
 8000656:	af00      	add	r7, sp, #0
 8000658:	4603      	mov	r3, r0
 800065a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000664:	2300      	movs	r3, #0
 8000666:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000668:	f000 fa5e 	bl	8000b28 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e010      	b.n	8000694 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	21a8      	movs	r1, #168	; 0xa8
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fadd 	bl	8002c38 <TS_IO_Read>
 800067e:	4603      	mov	r3, r0
 8000680:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b51      	cmp	r3, #81	; 0x51
 8000688:	d101      	bne.n	800068e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	3301      	adds	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d802      	bhi.n	80006a0 <ft5336_ReadID+0x4e>
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0e8      	beq.n	8000672 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80006a0:	7b7b      	ldrb	r3, [r7, #13]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b29b      	uxth	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fa44 	bl	8000b48 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f932 	bl	800092c <ft5336_TS_DisableIT>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 faa7 	bl	8002c38 <TS_IO_Read>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d901      	bls.n	8000706 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <ft5336_TS_DetectTouch+0x50>)
 800070c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <ft5336_TS_DetectTouch+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	b2db      	uxtb	r3, r3
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000838 	.word	0x20000838

08000724 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000746:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 8000748:	789a      	ldrb	r2, [r3, #2]
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	429a      	cmp	r2, r3
 8000750:	f080 80cf 	bcs.w	80008f2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000754:	4b69      	ldr	r3, [pc, #420]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d871      	bhi.n	8000840 <ft5336_TS_GetXY+0x11c>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <ft5336_TS_GetXY+0x40>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	0800078d 	.word	0x0800078d
 8000768:	0800079f 	.word	0x0800079f
 800076c:	080007b1 	.word	0x080007b1
 8000770:	080007c3 	.word	0x080007c3
 8000774:	080007d5 	.word	0x080007d5
 8000778:	080007e7 	.word	0x080007e7
 800077c:	080007f9 	.word	0x080007f9
 8000780:	0800080b 	.word	0x0800080b
 8000784:	0800081d 	.word	0x0800081d
 8000788:	0800082f 	.word	0x0800082f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800078c:	2304      	movs	r3, #4
 800078e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000790:	2303      	movs	r3, #3
 8000792:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000794:	2306      	movs	r3, #6
 8000796:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000798:	2305      	movs	r3, #5
 800079a:	753b      	strb	r3, [r7, #20]
      break;
 800079c:	e051      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800079e:	230a      	movs	r3, #10
 80007a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80007a2:	2309      	movs	r3, #9
 80007a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80007a6:	230c      	movs	r3, #12
 80007a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007aa:	230b      	movs	r3, #11
 80007ac:	753b      	strb	r3, [r7, #20]
      break;
 80007ae:	e048      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007b0:	2310      	movs	r3, #16
 80007b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007b4:	230f      	movs	r3, #15
 80007b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b8:	2312      	movs	r3, #18
 80007ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007bc:	2311      	movs	r3, #17
 80007be:	753b      	strb	r3, [r7, #20]
      break;
 80007c0:	e03f      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007c2:	2316      	movs	r3, #22
 80007c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007c6:	2315      	movs	r3, #21
 80007c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007ca:	2318      	movs	r3, #24
 80007cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007ce:	2317      	movs	r3, #23
 80007d0:	753b      	strb	r3, [r7, #20]
      break;
 80007d2:	e036      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007d4:	231c      	movs	r3, #28
 80007d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d8:	231b      	movs	r3, #27
 80007da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007dc:	231e      	movs	r3, #30
 80007de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007e0:	231d      	movs	r3, #29
 80007e2:	753b      	strb	r3, [r7, #20]
      break;
 80007e4:	e02d      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007e6:	2322      	movs	r3, #34	; 0x22
 80007e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007ea:	2321      	movs	r3, #33	; 0x21
 80007ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007ee:	2324      	movs	r3, #36	; 0x24
 80007f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007f2:	2323      	movs	r3, #35	; 0x23
 80007f4:	753b      	strb	r3, [r7, #20]
      break;
 80007f6:	e024      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f8:	2328      	movs	r3, #40	; 0x28
 80007fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007fc:	2327      	movs	r3, #39	; 0x27
 80007fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000800:	232a      	movs	r3, #42	; 0x2a
 8000802:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000804:	2329      	movs	r3, #41	; 0x29
 8000806:	753b      	strb	r3, [r7, #20]
      break;
 8000808:	e01b      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800080a:	232e      	movs	r3, #46	; 0x2e
 800080c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000812:	2330      	movs	r3, #48	; 0x30
 8000814:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000816:	232f      	movs	r3, #47	; 0x2f
 8000818:	753b      	strb	r3, [r7, #20]
      break;
 800081a:	e012      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800081c:	2334      	movs	r3, #52	; 0x34
 800081e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000820:	2333      	movs	r3, #51	; 0x33
 8000822:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000824:	2336      	movs	r3, #54	; 0x36
 8000826:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000828:	2335      	movs	r3, #53	; 0x35
 800082a:	753b      	strb	r3, [r7, #20]
      break;
 800082c:	e009      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800082e:	233a      	movs	r3, #58	; 0x3a
 8000830:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000832:	2339      	movs	r3, #57	; 0x39
 8000834:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000836:	233c      	movs	r3, #60	; 0x3c
 8000838:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800083a:	233b      	movs	r3, #59	; 0x3b
 800083c:	753b      	strb	r3, [r7, #20]
      break;
 800083e:	e000      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000840:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	7dfa      	ldrb	r2, [r7, #23]
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f9f4 	bl	8002c38 <TS_IO_Read>
 8000850:	4603      	mov	r3, r0
 8000852:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800085c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	7dba      	ldrb	r2, [r7, #22]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f9e6 	bl	8002c38 <TS_IO_Read>
 800086c:	4603      	mov	r3, r0
 800086e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000870:	7cfb      	ldrb	r3, [r7, #19]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800088a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	7d7a      	ldrb	r2, [r7, #21]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f002 f9cb 	bl	8002c38 <TS_IO_Read>
 80008a2:	4603      	mov	r3, r0
 80008a4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008ae:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	7d3a      	ldrb	r2, [r7, #20]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 f9bd 	bl	8002c38 <TS_IO_Read>
 80008be:	4603      	mov	r3, r0
 80008c0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008c2:	7cfb      	ldrb	r3, [r7, #19]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008dc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 80008e8:	789b      	ldrb	r3, [r3, #2]
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 80008f0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000838 	.word	0x20000838
 8000900:	2000083c 	.word	0x2000083c

08000904 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	21a4      	movs	r1, #164	; 0xa4
 800091e:	4618      	mov	r0, r3
 8000920:	f002 f970 	bl	8002c04 <TS_IO_Write>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	21a4      	movs	r1, #164	; 0xa4
 8000946:	4618      	mov	r0, r3
 8000948:	f002 f95c 	bl	8002c04 <TS_IO_Write>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	6039      	str	r1, [r7, #0]
 800098c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2101      	movs	r1, #1
 8000998:	4618      	mov	r0, r3
 800099a:	f002 f94d 	bl	8002c38 <TS_IO_Read>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4603      	mov	r3, r0
 80009c2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <ft5336_TS_GetTouchInfo+0x158>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	461a      	mov	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	4293      	cmp	r3, r2
 80009de:	f080 8090 	bcs.w	8000b02 <ft5336_TS_GetTouchInfo+0x14e>
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	2b09      	cmp	r3, #9
 80009e6:	d85d      	bhi.n	8000aa4 <ft5336_TS_GetTouchInfo+0xf0>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <ft5336_TS_GetTouchInfo+0x3c>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a27 	.word	0x08000a27
 80009f8:	08000a35 	.word	0x08000a35
 80009fc:	08000a43 	.word	0x08000a43
 8000a00:	08000a51 	.word	0x08000a51
 8000a04:	08000a5f 	.word	0x08000a5f
 8000a08:	08000a6d 	.word	0x08000a6d
 8000a0c:	08000a7b 	.word	0x08000a7b
 8000a10:	08000a89 	.word	0x08000a89
 8000a14:	08000a97 	.word	0x08000a97
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a20:	2308      	movs	r3, #8
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e03f      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a26:	2309      	movs	r3, #9
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a2a:	230d      	movs	r3, #13
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a2e:	230e      	movs	r3, #14
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e038      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a34:	230f      	movs	r3, #15
 8000a36:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a38:	2313      	movs	r3, #19
 8000a3a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a3c:	2314      	movs	r3, #20
 8000a3e:	757b      	strb	r3, [r7, #21]
      break;
 8000a40:	e031      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a42:	2315      	movs	r3, #21
 8000a44:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a46:	2319      	movs	r3, #25
 8000a48:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a4a:	231a      	movs	r3, #26
 8000a4c:	757b      	strb	r3, [r7, #21]
      break;
 8000a4e:	e02a      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a50:	231b      	movs	r3, #27
 8000a52:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a54:	231f      	movs	r3, #31
 8000a56:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	757b      	strb	r3, [r7, #21]
      break;
 8000a5c:	e023      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a5e:	2321      	movs	r3, #33	; 0x21
 8000a60:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a62:	2325      	movs	r3, #37	; 0x25
 8000a64:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a66:	2326      	movs	r3, #38	; 0x26
 8000a68:	757b      	strb	r3, [r7, #21]
      break;
 8000a6a:	e01c      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a6c:	2327      	movs	r3, #39	; 0x27
 8000a6e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a70:	232b      	movs	r3, #43	; 0x2b
 8000a72:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a74:	232c      	movs	r3, #44	; 0x2c
 8000a76:	757b      	strb	r3, [r7, #21]
      break;
 8000a78:	e015      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a7a:	232d      	movs	r3, #45	; 0x2d
 8000a7c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a7e:	2331      	movs	r3, #49	; 0x31
 8000a80:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a82:	2332      	movs	r3, #50	; 0x32
 8000a84:	757b      	strb	r3, [r7, #21]
      break;
 8000a86:	e00e      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a88:	2333      	movs	r3, #51	; 0x33
 8000a8a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a8c:	2337      	movs	r3, #55	; 0x37
 8000a8e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a90:	2338      	movs	r3, #56	; 0x38
 8000a92:	757b      	strb	r3, [r7, #21]
      break;
 8000a94:	e007      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a96:	2339      	movs	r3, #57	; 0x39
 8000a98:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a9a:	233d      	movs	r3, #61	; 0x3d
 8000a9c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a9e:	233e      	movs	r3, #62	; 0x3e
 8000aa0:	757b      	strb	r3, [r7, #21]
      break;
 8000aa2:	e000      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000aa4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	7dfa      	ldrb	r2, [r7, #23]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 f8c2 	bl	8002c38 <TS_IO_Read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab8:	7d3b      	ldrb	r3, [r7, #20]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	119b      	asrs	r3, r3, #6
 8000abe:	f003 0203 	and.w	r2, r3, #3
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	7dba      	ldrb	r2, [r7, #22]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 f8b2 	bl	8002c38 <TS_IO_Read>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad8:	7d3b      	ldrb	r3, [r7, #20]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	7d7a      	ldrb	r2, [r7, #21]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 f8a4 	bl	8002c38 <TS_IO_Read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000af4:	7d3b      	ldrb	r3, [r7, #20]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	111b      	asrs	r3, r3, #4
 8000afa:	f003 0204 	and.w	r2, r3, #4
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000838 	.word	0x20000838

08000b10 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000838 	.word	0x20000838

08000b28 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b2c:	f7ff fff0 	bl	8000b10 <ft5336_Get_I2C_InitializedStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b36:	f002 f85b 	bl	8002bf0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b3a:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
  }
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000838 	.word	0x20000838

08000b48 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b5b0      	push	{r4, r5, r7, lr}
 8000b66:	b0e4      	sub	sp, #400	; 0x190
 8000b68:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	score = 0;
 8000b6a:	4bd9      	ldr	r3, [pc, #868]	; (8000ed0 <main+0x36c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	801a      	strh	r2, [r3, #0]
	char text[50]={};
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000b76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b7a:	222e      	movs	r2, #46	; 0x2e
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00e f8ee 	bl	800ed60 <memset>
	char textFromUart0[50]={};
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000b8a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b8e:	222e      	movs	r2, #46	; 0x2e
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00e f8e4 	bl	800ed60 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potlb,potl,potr,joystick_h, joystick_v;
	potlb = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	RTC_TimeTypeDef* sT = {0};
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	RTC_DateTypeDef* sD = {0};
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	uint8_t BP_old,BP_new;
	uint8_t light = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bca:	f004 fbbe 	bl	800534a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bce:	f000 fadb 	bl	8001188 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bd2:	f000 fb4b 	bl	800126c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f001 f8e1 	bl	8001d9c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000bda:	f000 fbc5 	bl	8001368 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000bde:	f000 fc3f 	bl	8001460 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000be2:	f001 f88b 	bl	8001cfc <MX_FMC_Init>
  MX_I2C1_Init();
 8000be6:	f000 fc6d 	bl	80014c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000bea:	f000 fcab 	bl	8001544 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000bee:	f000 fce9 	bl	80015c4 <MX_LTDC_Init>
  MX_RTC_Init();
 8000bf2:	f000 fd7d 	bl	80016f0 <MX_RTC_Init>
  MX_SPI2_Init();
 8000bf6:	f000 fe21 	bl	800183c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bfa:	f000 fe5d 	bl	80018b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bfe:	f000 feaf 	bl	8001960 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c02:	f000 fefb 	bl	80019fc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000c06:	f000 ff47 	bl	8001a98 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000c0a:	f000 ff93 	bl	8001b34 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000c0e:	f001 f815 	bl	8001c3c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000c12:	f001 f843 	bl	8001c9c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000c16:	f000 fb55 	bl	80012c4 <MX_ADC1_Init>
  MX_DAC_Init();
 8000c1a:	f000 fbf7 	bl	800140c <MX_DAC_Init>
  MX_UART7_Init();
 8000c1e:	f000 ffdd 	bl	8001bdc <MX_UART7_Init>
  MX_RNG_Init();
 8000c22:	f000 fd51 	bl	80016c8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000c26:	f002 f831 	bl	8002c8c <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000c2a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f002 f8c4 	bl	8002dbc <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000c34:	f002 f89a 	bl	8002d6c <BSP_LCD_GetXSize>
 8000c38:	4604      	mov	r4, r0
 8000c3a:	f002 f8ab 	bl	8002d94 <BSP_LCD_GetYSize>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	fb03 f304 	mul.w	r3, r3, r4
 8000c44:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f002 f8b5 	bl	8002dbc <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000c52:	f002 fe2d 	bl	80038b0 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f002 f910 	bl	8002e7c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8000c5c:	489d      	ldr	r0, [pc, #628]	; (8000ed4 <main+0x370>)
 8000c5e:	f002 f97f 	bl	8002f60 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(amongx,amongy,(uint8_t*)Amongus_bmp);
    //BSP_LCD_SelectLayer(1);
    //BSP_LCD_Clear(LCD_COLOR_RED);
    //BSP_LCD_DrawBitmap(250,120,(uint8_t*)Karim_bmp);
    BSP_LCD_SelectLayer(1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f002 f90a 	bl	8002e7c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8000c68:	489a      	ldr	r0, [pc, #616]	; (8000ed4 <main+0x370>)
 8000c6a:	f002 f979 	bl	8002f60 <BSP_LCD_Clear>
    BSP_LCD_Clear(00);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f002 f976 	bl	8002f60 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 8000c74:	4898      	ldr	r0, [pc, #608]	; (8000ed8 <main+0x374>)
 8000c76:	f002 f943 	bl	8002f00 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7e:	f002 f90d 	bl	8002e9c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(00);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f002 f922 	bl	8002ecc <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c88:	f002 f870 	bl	8002d6c <BSP_LCD_GetXSize>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b29c      	uxth	r4, r3
 8000c90:	f002 f880 	bl	8002d94 <BSP_LCD_GetYSize>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f003 fa1a 	bl	80040d4 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutexScreen */
  osMutexDef(mutexScreen);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  mutexScreenHandle = osMutexCreate(osMutex(mutexScreen));
 8000cac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00a ff45 	bl	800bb40 <osMutexCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a88      	ldr	r2, [pc, #544]	; (8000edc <main+0x378>)
 8000cba:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerAffichage */
  osTimerDef(TimerAffichage, CallbackDisplay);
 8000cbc:	4b88      	ldr	r3, [pc, #544]	; (8000ee0 <main+0x37c>)
 8000cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  TimerAffichageHandle = osTimerCreate(osTimer(TimerAffichage), osTimerOnce, NULL);
 8000cc8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00a febd 	bl	800ba50 <osTimerCreate>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a82      	ldr	r2, [pc, #520]	; (8000ee4 <main+0x380>)
 8000cda:	6013      	str	r3, [r2, #0]

  /* definition and creation of TimerLED */
  osTimerDef(TimerLED, CallbackLED);
 8000cdc:	4b82      	ldr	r3, [pc, #520]	; (8000ee8 <main+0x384>)
 8000cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  TimerLEDHandle = osTimerCreate(osTimer(TimerLED), osTimerPeriodic, NULL);
 8000ce8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00a fead 	bl	800ba50 <osTimerCreate>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a7c      	ldr	r2, [pc, #496]	; (8000eec <main+0x388>)
 8000cfa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  osTimerStart(TimerLEDHandle,1000);
 8000cfc:	4b7b      	ldr	r3, [pc, #492]	; (8000eec <main+0x388>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d04:	4618      	mov	r0, r3
 8000d06:	f00a fed7 	bl	800bab8 <osTimerStart>
  osTimerStart(TimerAffichageHandle,5000);
 8000d0a:	4b76      	ldr	r3, [pc, #472]	; (8000ee4 <main+0x380>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00a fed0 	bl	800bab8 <osTimerStart>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of swordsPos */
  osMessageQDef(swordsPos, 16, uint8_t);
 8000d18:	4b75      	ldr	r3, [pc, #468]	; (8000ef0 <main+0x38c>)
 8000d1a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  swordsPosHandle = osMessageCreate(osMessageQ(swordsPos), NULL);
 8000d24:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00a ff20 	bl	800bb70 <osMessageCreate>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a70      	ldr	r2, [pc, #448]	; (8000ef4 <main+0x390>)
 8000d34:	6013      	str	r3, [r2, #0]

  /* definition and creation of collideFlag */
  osMessageQDef(collideFlag, 16, uint32_t);
 8000d36:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <main+0x394>)
 8000d38:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000d3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  collideFlagHandle = osMessageCreate(osMessageQ(collideFlag), NULL);
 8000d42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00a ff11 	bl	800bb70 <osMessageCreate>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a6a      	ldr	r2, [pc, #424]	; (8000efc <main+0x398>)
 8000d52:	6013      	str	r3, [r2, #0]

  /* definition and creation of scoreIncrem */
  osMessageQDef(scoreIncrem, 8, uint16_t);
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <main+0x39c>)
 8000d56:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  scoreIncremHandle = osMessageCreate(osMessageQ(scoreIncrem), NULL);
 8000d60:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00a ff02 	bl	800bb70 <osMessageCreate>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a65      	ldr	r2, [pc, #404]	; (8000f04 <main+0x3a0>)
 8000d70:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d72:	4b65      	ldr	r3, [pc, #404]	; (8000f08 <main+0x3a4>)
 8000d74:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000d78:	461d      	mov	r5, r3
 8000d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00a fdfe 	bl	800b98e <osThreadCreate>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a5d      	ldr	r2, [pc, #372]	; (8000f0c <main+0x3a8>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* definition and creation of AffichageHeure */
  osThreadDef(AffichageHeure, displayTime, osPriorityNormal, 0, 1024);
 8000d98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d9c:	4a5c      	ldr	r2, [pc, #368]	; (8000f10 <main+0x3ac>)
 8000d9e:	461c      	mov	r4, r3
 8000da0:	4615      	mov	r5, r2
 8000da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageHeureHandle = osThreadCreate(osThread(AffichageHeure), NULL);
 8000dae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00a fdea 	bl	800b98e <osThreadCreate>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a55      	ldr	r2, [pc, #340]	; (8000f14 <main+0x3b0>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of AffichageJeu */
  osThreadDef(AffichageJeu, displayGame, osPriorityNormal, 0, 1024);
 8000dc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc4:	4a54      	ldr	r2, [pc, #336]	; (8000f18 <main+0x3b4>)
 8000dc6:	461c      	mov	r4, r3
 8000dc8:	4615      	mov	r5, r2
 8000dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageJeuHandle = osThreadCreate(osThread(AffichageJeu), NULL);
 8000dd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f00a fdd6 	bl	800b98e <osThreadCreate>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a4d      	ldr	r2, [pc, #308]	; (8000f1c <main+0x3b8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* definition and creation of GameOver */
  osThreadDef(GameOver, waitGameOver, osPriorityHigh, 0, 1024);
 8000de8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <main+0x3bc>)
 8000dee:	461c      	mov	r4, r3
 8000df0:	4615      	mov	r5, r2
 8000df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GameOverHandle = osThreadCreate(osThread(GameOver), NULL);
 8000dfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f00a fdc2 	bl	800b98e <osThreadCreate>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a45      	ldr	r2, [pc, #276]	; (8000f24 <main+0x3c0>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TacheMonocycle */
  osThreadDef(TacheMonocycle, obj_cycle, osPriorityNormal, 0, 1024);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <main+0x3c4>)
 8000e16:	461c      	mov	r4, r3
 8000e18:	4615      	mov	r5, r2
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TacheMonocycleHandle = osThreadCreate(osThread(TacheMonocycle), NULL);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00a fdae 	bl	800b98e <osThreadCreate>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a3d      	ldr	r2, [pc, #244]	; (8000f2c <main+0x3c8>)
 8000e36:	6013      	str	r3, [r2, #0]

  /* definition and creation of TacheEpee */
  osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4a3d      	ldr	r2, [pc, #244]	; (8000f30 <main+0x3cc>)
 8000e3c:	461c      	mov	r4, r3
 8000e3e:	4615      	mov	r5, r2
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f00a fd9c 	bl	800b98e <osThreadCreate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a36      	ldr	r2, [pc, #216]	; (8000f34 <main+0x3d0>)
 8000e5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e5c:	f00a fd90 	bl	800b980 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	4834      	ldr	r0, [pc, #208]	; (8000f38 <main+0x3d4>)
 8000e66:	f006 f88f 	bl	8006f88 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e72:	4832      	ldr	r0, [pc, #200]	; (8000f3c <main+0x3d8>)
 8000e74:	f006 f8a0 	bl	8006fb8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7c:	482e      	ldr	r0, [pc, #184]	; (8000f38 <main+0x3d4>)
 8000e7e:	f006 f883 	bl	8006f88 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	2120      	movs	r1, #32
 8000e88:	482d      	ldr	r0, [pc, #180]	; (8000f40 <main+0x3dc>)
 8000e8a:	f006 f895 	bl	8006fb8 <HAL_GPIO_WritePin>
	  	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4829      	ldr	r0, [pc, #164]	; (8000f38 <main+0x3d4>)
 8000e94:	f006 f878 	bl	8006f88 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000ea0:	4928      	ldr	r1, [pc, #160]	; (8000f44 <main+0x3e0>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00e f838 	bl	800ef18 <siprintf>
	  	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000ea8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000eac:	4619      	mov	r1, r3
 8000eae:	2005      	movs	r0, #5
 8000eb0:	f002 f98a 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>

	  	  sConfig.Channel = ADC_CHANNEL_6;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000eba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4821      	ldr	r0, [pc, #132]	; (8000f48 <main+0x3e4>)
 8000ec2:	f004 fc3d 	bl	8005740 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000ec6:	4820      	ldr	r0, [pc, #128]	; (8000f48 <main+0x3e4>)
 8000ec8:	f004 fad4 	bl	8005474 <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000ecc:	bf00      	nop
 8000ece:	e03d      	b.n	8000f4c <main+0x3e8>
 8000ed0:	200087dc 	.word	0x200087dc
 8000ed4:	ffffde00 	.word	0xffffde00
 8000ed8:	20000034 	.word	0x20000034
 8000edc:	20008640 	.word	0x20008640
 8000ee0:	080028b5 	.word	0x080028b5
 8000ee4:	20008828 	.word	0x20008828
 8000ee8:	080028f5 	.word	0x080028f5
 8000eec:	20008504 	.word	0x20008504
 8000ef0:	0800f758 	.word	0x0800f758
 8000ef4:	200084b0 	.word	0x200084b0
 8000ef8:	0800f768 	.word	0x0800f768
 8000efc:	20008694 	.word	0x20008694
 8000f00:	0800f778 	.word	0x0800f778
 8000f04:	20008978 	.word	0x20008978
 8000f08:	0800f788 	.word	0x0800f788
 8000f0c:	200084b4 	.word	0x200084b4
 8000f10:	0800f7a4 	.word	0x0800f7a4
 8000f14:	20008730 	.word	0x20008730
 8000f18:	0800f7c0 	.word	0x0800f7c0
 8000f1c:	20008690 	.word	0x20008690
 8000f20:	0800f7dc 	.word	0x0800f7dc
 8000f24:	20008a10 	.word	0x20008a10
 8000f28:	0800f7f8 	.word	0x0800f7f8
 8000f2c:	2000863c 	.word	0x2000863c
 8000f30:	0800f814 	.word	0x0800f814
 8000f34:	20008ad4 	.word	0x20008ad4
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40021c00 	.word	0x40021c00
 8000f40:	40021000 	.word	0x40021000
 8000f44:	0800f6ec 	.word	0x0800f6ec
 8000f48:	2000882c 	.word	0x2000882c
 8000f4c:	2164      	movs	r1, #100	; 0x64
 8000f4e:	4884      	ldr	r0, [pc, #528]	; (8001160 <main+0x5fc>)
 8000f50:	f004 fb5e 	bl	8005610 <HAL_ADC_PollForConversion>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f8      	bne.n	8000f4c <main+0x3e8>
	  	  potr = HAL_ADC_GetValue(&hadc3);
 8000f5a:	4881      	ldr	r0, [pc, #516]	; (8001160 <main+0x5fc>)
 8000f5c:	f004 fbe3 	bl	8005726 <HAL_ADC_GetValue>
 8000f60:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174

	  	  sConfig.Channel = ADC_CHANNEL_7;
 8000f64:	2307      	movs	r3, #7
 8000f66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000f6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	487b      	ldr	r0, [pc, #492]	; (8001160 <main+0x5fc>)
 8000f72:	f004 fbe5 	bl	8005740 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000f76:	487a      	ldr	r0, [pc, #488]	; (8001160 <main+0x5fc>)
 8000f78:	f004 fa7c 	bl	8005474 <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000f7c:	bf00      	nop
 8000f7e:	2164      	movs	r1, #100	; 0x64
 8000f80:	4877      	ldr	r0, [pc, #476]	; (8001160 <main+0x5fc>)
 8000f82:	f004 fb45 	bl	8005610 <HAL_ADC_PollForConversion>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f8      	bne.n	8000f7e <main+0x41a>
	  	  potl = HAL_ADC_GetValue(&hadc3);
 8000f8c:	4874      	ldr	r0, [pc, #464]	; (8001160 <main+0x5fc>)
 8000f8e:	f004 fbca 	bl	8005726 <HAL_ADC_GetValue>
 8000f92:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

	  	  sConfig.Channel = ADC_CHANNEL_8;
 8000f96:	2308      	movs	r3, #8
 8000f98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000f9c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	486f      	ldr	r0, [pc, #444]	; (8001160 <main+0x5fc>)
 8000fa4:	f004 fbcc 	bl	8005740 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000fa8:	486d      	ldr	r0, [pc, #436]	; (8001160 <main+0x5fc>)
 8000faa:	f004 fa63 	bl	8005474 <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000fae:	bf00      	nop
 8000fb0:	2164      	movs	r1, #100	; 0x64
 8000fb2:	486b      	ldr	r0, [pc, #428]	; (8001160 <main+0x5fc>)
 8000fb4:	f004 fb2c 	bl	8005610 <HAL_ADC_PollForConversion>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f8      	bne.n	8000fb0 <main+0x44c>
	  	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000fbe:	4868      	ldr	r0, [pc, #416]	; (8001160 <main+0x5fc>)
 8000fc0:	f004 fbb1 	bl	8005726 <HAL_ADC_GetValue>
 8000fc4:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c

	  	  HAL_ADC_Start(&hadc1);
 8000fc8:	4866      	ldr	r0, [pc, #408]	; (8001164 <main+0x600>)
 8000fca:	f004 fa53 	bl	8005474 <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000fce:	bf00      	nop
 8000fd0:	2164      	movs	r1, #100	; 0x64
 8000fd2:	4864      	ldr	r0, [pc, #400]	; (8001164 <main+0x600>)
 8000fd4:	f004 fb1c 	bl	8005610 <HAL_ADC_PollForConversion>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f8      	bne.n	8000fd0 <main+0x46c>
	  	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000fde:	4861      	ldr	r0, [pc, #388]	; (8001164 <main+0x600>)
 8000fe0:	f004 fba1 	bl	8005726 <HAL_ADC_GetValue>
 8000fe4:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

	  	  HAL_UART_Receive(&huart1, textFromUart0, 50, 10);
 8000fe8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000fec:	230a      	movs	r3, #10
 8000fee:	2232      	movs	r2, #50	; 0x32
 8000ff0:	485d      	ldr	r0, [pc, #372]	; (8001168 <main+0x604>)
 8000ff2:	f009 fecc 	bl	800ad8e <HAL_UART_Receive>
	  	  BSP_LCD_DisplayStringAtLine(15,(uint8_t*) textFromUart0);
 8000ff6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	200f      	movs	r0, #15
 8000ffe:	f002 f8e3 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>

	  	  if ((potl > potlb + 50) || (potlb > potl + 50))
 8001002:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001006:	3332      	adds	r3, #50	; 0x32
 8001008:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800100c:	429a      	cmp	r2, r3
 800100e:	d806      	bhi.n	800101e <main+0x4ba>
 8001010:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001014:	3332      	adds	r3, #50	; 0x32
 8001016:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800101a:	429a      	cmp	r2, r3
 800101c:	d918      	bls.n	8001050 <main+0x4ec>
	  	  {
	  		sprintf(text, "Potentio de Goche : %u\r\n", potl);
 800101e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001022:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8001026:	4951      	ldr	r1, [pc, #324]	; (800116c <main+0x608>)
 8001028:	4618      	mov	r0, r3
 800102a:	f00d ff75 	bl	800ef18 <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)text, strlen(text), 10);
 800102e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f8ec 	bl	8000210 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001040:	230a      	movs	r3, #10
 8001042:	4849      	ldr	r0, [pc, #292]	; (8001168 <main+0x604>)
 8001044:	f009 fe10 	bl	800ac68 <HAL_UART_Transmit>
	  		potlb = potl;
 8001048:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800104c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	  	  }

	  	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8001050:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8001054:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001064:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8001068:	4941      	ldr	r1, [pc, #260]	; (8001170 <main+0x60c>)
 800106a:	f00d ff55 	bl	800ef18 <siprintf>
	  	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 800106e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001072:	4619      	mov	r1, r3
 8001074:	2009      	movs	r0, #9
 8001076:	f002 f8a7 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>

	  	HAL_RTC_GetDate(&hrtc, sD, RTC_FORMAT_BCD);
 800107a:	2201      	movs	r2, #1
 800107c:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8001080:	483c      	ldr	r0, [pc, #240]	; (8001174 <main+0x610>)
 8001082:	f008 fd51 	bl	8009b28 <HAL_RTC_GetDate>
	  	  HAL_RTC_GetTime(&hrtc, sT, RTC_FORMAT_BCD);
 8001086:	2201      	movs	r2, #1
 8001088:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800108c:	4839      	ldr	r0, [pc, #228]	; (8001174 <main+0x610>)
 800108e:	f008 fc45 	bl	800991c <HAL_RTC_GetTime>


	  	sprintf(text,"il est %2u:%2u:%2u",sT->Hours,sT->Minutes,sT->Seconds);
 8001092:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800109e:	785b      	ldrb	r3, [r3, #1]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	f507 709a 	add.w	r0, r7, #308	; 0x134
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	460b      	mov	r3, r1
 80010b0:	4931      	ldr	r1, [pc, #196]	; (8001178 <main+0x614>)
 80010b2:	f00d ff31 	bl	800ef18 <siprintf>
	  	BSP_LCD_DisplayStringAtLine(11,(uint8_t*) text);
 80010b6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80010ba:	4619      	mov	r1, r3
 80010bc:	200b      	movs	r0, #11
 80010be:	f002 f883 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>

	  	if(decompte > 0)
 80010c2:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <main+0x570>
	  	{
	  		decompte--;
 80010ca:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
	  	}
	  	  BSP_TS_GetState(&TS_State);
 80010d4:	4829      	ldr	r0, [pc, #164]	; (800117c <main+0x618>)
 80010d6:	f003 f83d 	bl	8004154 <BSP_TS_GetState>
	  	  if(TS_State.touchDetected){
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <main+0x618>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f43f aebe 	beq.w	8000e60 <main+0x2fc>
	  		  if(TS_State.touchX[0] < 110 && TS_State.touchY[0] < 110)
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <main+0x618>)
 80010e6:	885b      	ldrh	r3, [r3, #2]
 80010e8:	2b6d      	cmp	r3, #109	; 0x6d
 80010ea:	d82f      	bhi.n	800114c <main+0x5e8>
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <main+0x618>)
 80010ee:	899b      	ldrh	r3, [r3, #12]
 80010f0:	2b6d      	cmp	r3, #109	; 0x6d
 80010f2:	d82b      	bhi.n	800114c <main+0x5e8>
	  		  {
	  			  if (decompte == 0){
 80010f4:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d12f      	bne.n	800115c <main+0x5f8>
					  light = (1-light);
 80010fc:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8001100:	f1c3 0301 	rsb	r3, r3, #1
 8001104:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
					  HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,light);
 8001108:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 800110c:	461a      	mov	r2, r3
 800110e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <main+0x61c>)
 8001114:	f005 ff50 	bl	8006fb8 <HAL_GPIO_WritePin>
					  if (light)
 8001118:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 800111c:	2b00      	cmp	r3, #0
 800111e:	d004      	beq.n	800112a <main+0x5c6>
					  {
						BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	f001 feba 	bl	8002e9c <BSP_LCD_SetTextColor>
 8001128:	e002      	b.n	8001130 <main+0x5cc>
					  }
					  else{
						BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <main+0x620>)
 800112c:	f001 feb6 	bl	8002e9c <BSP_LCD_SetTextColor>
					  }
					  BSP_LCD_FillRect(0,0,50,50);
 8001130:	2332      	movs	r3, #50	; 0x32
 8001132:	2232      	movs	r2, #50	; 0x32
 8001134:	2100      	movs	r1, #0
 8001136:	2000      	movs	r0, #0
 8001138:	f002 faa0 	bl	800367c <BSP_LCD_FillRect>
					  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001140:	f001 feac 	bl	8002e9c <BSP_LCD_SetTextColor>
					  decompte = 300;
 8001144:	232c      	movs	r3, #44	; 0x2c
 8001146:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
	  			  if (decompte == 0){
 800114a:	e007      	b.n	800115c <main+0x5f8>
	  			  }
	  		  } else {
	  			BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <main+0x618>)
 800114e:	885b      	ldrh	r3, [r3, #2]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <main+0x618>)
 8001152:	8991      	ldrh	r1, [r2, #12]
 8001154:	2204      	movs	r2, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fb0a 	bl	8003770 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 800115c:	e680      	b.n	8000e60 <main+0x2fc>
 800115e:	bf00      	nop
 8001160:	2000882c 	.word	0x2000882c
 8001164:	200087e0 	.word	0x200087e0
 8001168:	20008874 	.word	0x20008874
 800116c:	0800f6f8 	.word	0x0800f6f8
 8001170:	0800f714 	.word	0x0800f714
 8001174:	2000890c 	.word	0x2000890c
 8001178:	0800f744 	.word	0x0800f744
 800117c:	20000840 	.word	0x20000840
 8001180:	40021c00 	.word	0x40021c00
 8001184:	ffff0000 	.word	0xffff0000

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00d fde2 	bl	800ed60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011ac:	f007 f8ea 	bl	8008384 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <SystemClock_Config+0xdc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <SystemClock_Config+0xdc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <SystemClock_Config+0xdc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <SystemClock_Config+0xe0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <SystemClock_Config+0xe0>)
 80011ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <SystemClock_Config+0xe0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011e0:	2309      	movs	r3, #9
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011ea:	2301      	movs	r3, #1
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ee:	2302      	movs	r3, #2
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011f8:	2319      	movs	r3, #25
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80011fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001202:	2302      	movs	r3, #2
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001206:	2309      	movs	r3, #9
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f007 f918 	bl	8008444 <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800121a:	f001 fb8d 	bl	8002938 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800121e:	f007 f8c1 	bl	80083a4 <HAL_PWREx_EnableOverDrive>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001228:	f001 fb86 	bl	8002938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001238:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2106      	movs	r1, #6
 800124a:	4618      	mov	r0, r3
 800124c:	f007 fb9e 	bl	800898c <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001256:	f001 fb6f 	bl	8002938 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3750      	adds	r7, #80	; 0x50
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0a2      	sub	sp, #136	; 0x88
 8001270:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2284      	movs	r2, #132	; 0x84
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00d fd71 	bl	800ed60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <PeriphCommonClock_Config+0x54>)
 8001280:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001282:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001286:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001288:	2305      	movs	r3, #5
 800128a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800128c:	2302      	movs	r3, #2
 800128e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001290:	2303      	movs	r3, #3
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800129e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4618      	mov	r0, r3
 80012aa:	f007 fd77 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 80012b4:	f001 fb40 	bl	8002938 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3788      	adds	r7, #136	; 0x88
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	00200008 	.word	0x00200008

080012c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_ADC1_Init+0x98>)
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_ADC1_Init+0x98>)
 80012de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_ADC1_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_ADC1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_ADC1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_ADC1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_ADC1_Init+0x98>)
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <MX_ADC1_Init+0xa0>)
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_ADC1_Init+0x98>)
 8001312:	2201      	movs	r2, #1
 8001314:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_ADC1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_ADC1_Init+0x98>)
 8001320:	2201      	movs	r2, #1
 8001322:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_ADC1_Init+0x98>)
 8001326:	f004 f861 	bl	80053ec <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001330:	f001 fb02 	bl	8002938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001334:	2300      	movs	r3, #0
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_ADC1_Init+0x98>)
 8001346:	f004 f9fb 	bl	8005740 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001350:	f001 faf2 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200087e0 	.word	0x200087e0
 8001360:	40012000 	.word	0x40012000
 8001364:	0f000001 	.word	0x0f000001

08001368 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MX_ADC3_Init+0x98>)
 800137c:	4a21      	ldr	r2, [pc, #132]	; (8001404 <MX_ADC3_Init+0x9c>)
 800137e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_ADC3_Init+0x98>)
 8001382:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001386:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_ADC3_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_ADC3_Init+0x98>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_ADC3_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_ADC3_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_ADC3_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_ADC3_Init+0x98>)
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <MX_ADC3_Init+0xa0>)
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_ADC3_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_ADC3_Init+0x98>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_ADC3_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_ADC3_Init+0x98>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_ADC3_Init+0x98>)
 80013ca:	f004 f80f 	bl	80053ec <HAL_ADC_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80013d4:	f001 fab0 	bl	8002938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013d8:	2306      	movs	r3, #6
 80013da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013dc:	2301      	movs	r3, #1
 80013de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_ADC3_Init+0x98>)
 80013ea:	f004 f9a9 	bl	8005740 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80013f4:	f001 faa0 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000882c 	.word	0x2000882c
 8001404:	40012200 	.word	0x40012200
 8001408:	0f000001 	.word	0x0f000001

0800140c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_DAC_Init+0x4c>)
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <MX_DAC_Init+0x50>)
 800141e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_DAC_Init+0x4c>)
 8001422:	f004 fcbf 	bl	8005da4 <HAL_DAC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800142c:	f001 fa84 	bl	8002938 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_DAC_Init+0x4c>)
 8001440:	f004 fd36 	bl	8005eb0 <HAL_DAC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800144a:	f001 fa75 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200088f8 	.word	0x200088f8
 800145c:	40007400 	.word	0x40007400

08001460 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_DMA2D_Init+0x5c>)
 8001466:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <MX_DMA2D_Init+0x60>)
 8001468:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_DMA2D_Init+0x5c>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_DMA2D_Init+0x5c>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_DMA2D_Init+0x5c>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_DMA2D_Init+0x5c>)
 800147e:	2200      	movs	r2, #0
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_DMA2D_Init+0x5c>)
 8001484:	2200      	movs	r2, #0
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_DMA2D_Init+0x5c>)
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_DMA2D_Init+0x5c>)
 8001490:	2200      	movs	r2, #0
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <MX_DMA2D_Init+0x5c>)
 8001496:	f004 ff23 	bl	80062e0 <HAL_DMA2D_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80014a0:	f001 fa4a 	bl	8002938 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014a4:	2101      	movs	r1, #1
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_DMA2D_Init+0x5c>)
 80014a8:	f005 f988 	bl	80067bc <HAL_DMA2D_ConfigLayer>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014b2:	f001 fa41 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20008a14 	.word	0x20008a14
 80014c0:	4002b000 	.word	0x4002b000

080014c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_I2C1_Init+0x74>)
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <MX_I2C1_Init+0x78>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_I2C1_Init+0x74>)
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <MX_I2C1_Init+0x7c>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_I2C1_Init+0x74>)
 80014dc:	2201      	movs	r2, #1
 80014de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_I2C1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_I2C1_Init+0x74>)
 8001500:	f005 fd8e 	bl	8007020 <HAL_I2C_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800150a:	f001 fa15 	bl	8002938 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <MX_I2C1_Init+0x74>)
 8001512:	f006 fb27 	bl	8007b64 <HAL_I2CEx_ConfigAnalogFilter>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800151c:	f001 fa0c 	bl	8002938 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001520:	2100      	movs	r1, #0
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_I2C1_Init+0x74>)
 8001524:	f006 fb69 	bl	8007bfa <HAL_I2CEx_ConfigDigitalFilter>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800152e:	f001 fa03 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20008644 	.word	0x20008644
 800153c:	40005400 	.word	0x40005400
 8001540:	00c0eaff 	.word	0x00c0eaff

08001544 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_I2C3_Init+0x74>)
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <MX_I2C3_Init+0x78>)
 800154c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <MX_I2C3_Init+0x7c>)
 8001552:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_I2C3_Init+0x74>)
 800155c:	2201      	movs	r2, #1
 800155e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C3_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001580:	f005 fd4e 	bl	8007020 <HAL_I2C_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800158a:	f001 f9d5 	bl	8002938 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <MX_I2C3_Init+0x74>)
 8001592:	f006 fae7 	bl	8007b64 <HAL_I2CEx_ConfigAnalogFilter>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800159c:	f001 f9cc 	bl	8002938 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_I2C3_Init+0x74>)
 80015a4:	f006 fb29 	bl	8007bfa <HAL_I2CEx_ConfigDigitalFilter>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f001 f9c3 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200084b8 	.word	0x200084b8
 80015bc:	40005c00 	.word	0x40005c00
 80015c0:	00c0eaff 	.word	0x00c0eaff

080015c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08e      	sub	sp, #56	; 0x38
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2234      	movs	r2, #52	; 0x34
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00d fbc5 	bl	800ed60 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80015d8:	4a3a      	ldr	r2, [pc, #232]	; (80016c4 <MX_LTDC_Init+0x100>)
 80015da:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80015f6:	2228      	movs	r2, #40	; 0x28
 80015f8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80015fc:	2209      	movs	r2, #9
 80015fe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <MX_LTDC_Init+0xfc>)
 8001602:	2235      	movs	r2, #53	; 0x35
 8001604:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <MX_LTDC_Init+0xfc>)
 8001608:	220b      	movs	r2, #11
 800160a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <MX_LTDC_Init+0xfc>)
 800160e:	f240 2215 	movw	r2, #533	; 0x215
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <MX_LTDC_Init+0xfc>)
 8001616:	f240 121b 	movw	r2, #283	; 0x11b
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <MX_LTDC_Init+0xfc>)
 800161e:	f240 2235 	movw	r2, #565	; 0x235
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_LTDC_Init+0xfc>)
 8001626:	f240 121d 	movw	r2, #285	; 0x11d
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_LTDC_Init+0xfc>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_LTDC_Init+0xfc>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <MX_LTDC_Init+0xfc>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001644:	481e      	ldr	r0, [pc, #120]	; (80016c0 <MX_LTDC_Init+0xfc>)
 8001646:	f006 fb25 	bl	8007c94 <HAL_LTDC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001650:	f001 f972 	bl	8002938 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001658:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800165c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001662:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001666:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800166c:	23ff      	movs	r3, #255	; 0xff
 800166e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001674:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001678:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800167a:	2307      	movs	r3, #7
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800167e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001684:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800168a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_LTDC_Init+0xfc>)
 80016aa:	f006 fc85 	bl	8007fb8 <HAL_LTDC_ConfigLayer>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80016b4:	f001 f940 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20008734 	.word	0x20008734
 80016c4:	40016800 	.word	0x40016800

080016c8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_RNG_Init+0x20>)
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <MX_RNG_Init+0x24>)
 80016d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_RNG_Init+0x20>)
 80016d4:	f007 ff52 	bl	800957c <HAL_RNG_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80016de:	f001 f92b 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000897c 	.word	0x2000897c
 80016ec:	50060800 	.word	0x50060800

080016f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b092      	sub	sp, #72	; 0x48
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	222c      	movs	r2, #44	; 0x2c
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f00d fb24 	bl	800ed60 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <MX_RTC_Init+0x144>)
 800171a:	4a47      	ldr	r2, [pc, #284]	; (8001838 <MX_RTC_Init+0x148>)
 800171c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <MX_RTC_Init+0x144>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <MX_RTC_Init+0x144>)
 8001726:	227f      	movs	r2, #127	; 0x7f
 8001728:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <MX_RTC_Init+0x144>)
 800172c:	22ff      	movs	r2, #255	; 0xff
 800172e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <MX_RTC_Init+0x144>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <MX_RTC_Init+0x144>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <MX_RTC_Init+0x144>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001742:	483c      	ldr	r0, [pc, #240]	; (8001834 <MX_RTC_Init+0x144>)
 8001744:	f007 ff9a 	bl	800967c <HAL_RTC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800174e:	f001 f8f3 	bl	8002938 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800176c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	482f      	ldr	r0, [pc, #188]	; (8001834 <MX_RTC_Init+0x144>)
 8001776:	f008 f813 	bl	80097a0 <HAL_RTC_SetTime>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001780:	f001 f8da 	bl	8002938 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001784:	2301      	movs	r3, #1
 8001786:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800179c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a0:	2201      	movs	r2, #1
 80017a2:	4619      	mov	r1, r3
 80017a4:	4823      	ldr	r0, [pc, #140]	; (8001834 <MX_RTC_Init+0x144>)
 80017a6:	f008 f917 	bl	80099d8 <HAL_RTC_SetDate>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80017b0:	f001 f8c2 	bl	8002938 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017bc:	2300      	movs	r3, #0
 80017be:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80017d8:	2301      	movs	r3, #1
 80017da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80017de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	2201      	movs	r2, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	4812      	ldr	r0, [pc, #72]	; (8001834 <MX_RTC_Init+0x144>)
 80017ec:	f008 f9ec 	bl	8009bc8 <HAL_RTC_SetAlarm>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80017f6:	f001 f89f 	bl	8002938 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80017fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	2201      	movs	r2, #1
 8001804:	4619      	mov	r1, r3
 8001806:	480b      	ldr	r0, [pc, #44]	; (8001834 <MX_RTC_Init+0x144>)
 8001808:	f008 f9de 	bl	8009bc8 <HAL_RTC_SetAlarm>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001812:	f001 f891 	bl	8002938 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001816:	2202      	movs	r2, #2
 8001818:	2100      	movs	r1, #0
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <MX_RTC_Init+0x144>)
 800181c:	f008 fb7c 	bl	8009f18 <HAL_RTCEx_SetTimeStamp>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001826:	f001 f887 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	3748      	adds	r7, #72	; 0x48
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000890c 	.word	0x2000890c
 8001838:	40002800 	.word	0x40002800

0800183c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001842:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <MX_SPI2_Init+0x78>)
 8001844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800184c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001856:	f44f 7240 	mov.w	r2, #768	; 0x300
 800185a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI2_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI2_Init+0x74>)
 800186a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800186e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI2_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI2_Init+0x74>)
 800188a:	2207      	movs	r2, #7
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001896:	2208      	movs	r2, #8
 8001898:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_SPI2_Init+0x74>)
 800189c:	f008 fc23 	bl	800a0e6 <HAL_SPI_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018a6:	f001 f847 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20008508 	.word	0x20008508
 80018b4:	40003800 	.word	0x40003800

080018b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <MX_TIM1_Init+0xa0>)
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <MX_TIM1_Init+0xa4>)
 80018da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <MX_TIM1_Init+0xa0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <MX_TIM1_Init+0xa0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <MX_TIM1_Init+0xa0>)
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_TIM1_Init+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <MX_TIM1_Init+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_TIM1_Init+0xa0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001902:	4815      	ldr	r0, [pc, #84]	; (8001958 <MX_TIM1_Init+0xa0>)
 8001904:	f008 fc9a 	bl	800a23c <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800190e:	f001 f813 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	480e      	ldr	r0, [pc, #56]	; (8001958 <MX_TIM1_Init+0xa0>)
 8001920:	f008 fe7c 	bl	800a61c <HAL_TIM_ConfigClockSource>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800192a:	f001 f805 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <MX_TIM1_Init+0xa0>)
 8001940:	f009 f898 	bl	800aa74 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800194a:	f000 fff5 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000892c 	.word	0x2000892c
 800195c:	40010000 	.word	0x40010000

08001960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <MX_TIM2_Init+0x98>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001984:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_TIM2_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_TIM2_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <MX_TIM2_Init+0x98>)
 8001994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001998:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_TIM2_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019a8:	f008 fc48 	bl	800a23c <HAL_TIM_Base_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019b2:	f000 ffc1 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4619      	mov	r1, r3
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019c4:	f008 fe2a 	bl	800a61c <HAL_TIM_ConfigClockSource>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019ce:	f000 ffb3 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <MX_TIM2_Init+0x98>)
 80019e0:	f009 f848 	bl	800aa74 <HAL_TIMEx_MasterConfigSynchronization>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019ea:	f000 ffa5 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20008a54 	.word	0x20008a54

080019fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <MX_TIM3_Init+0x98>)
 8001a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a42:	f008 fbfb 	bl	800a23c <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a4c:	f000 ff74 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a5e:	f008 fddd 	bl	800a61c <HAL_TIM_ConfigClockSource>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a68:	f000 ff66 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM3_Init+0x94>)
 8001a7a:	f008 fffb 	bl	800aa74 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a84:	f000 ff58 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200086e4 	.word	0x200086e4
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <MX_TIM5_Init+0x98>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ace:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001ade:	f008 fbad 	bl	800a23c <HAL_TIM_Base_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ae8:	f000 ff26 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001afa:	f008 fd8f 	bl	800a61c <HAL_TIM_ConfigClockSource>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001b04:	f000 ff18 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_TIM5_Init+0x94>)
 8001b16:	f008 ffad 	bl	800aa74 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001b20:	f000 ff0a 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20008698 	.word	0x20008698
 8001b30:	40000c00 	.word	0x40000c00

08001b34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <MX_TIM8_Init+0xa4>)
 8001b56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b7e:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b80:	f008 fb5c 	bl	800a23c <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001b8a:	f000 fed5 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001b9c:	f008 fd3e 	bl	800a61c <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001ba6:	f000 fec7 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_TIM8_Init+0xa0>)
 8001bbc:	f008 ff5a 	bl	800aa74 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001bc6:	f000 feb7 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200085f0 	.word	0x200085f0
 8001bd8:	40010400 	.word	0x40010400

08001bdc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_UART7_Init+0x58>)
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <MX_UART7_Init+0x5c>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_UART7_Init+0x58>)
 8001be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_UART7_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_UART7_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_UART7_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_UART7_Init+0x58>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_UART7_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_UART7_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_UART7_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_UART7_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_UART7_Init+0x58>)
 8001c20:	f008 ffd4 	bl	800abcc <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001c2a:	f000 fe85 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000856c 	.word	0x2000856c
 8001c38:	40007800 	.word	0x40007800

08001c3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MX_USART1_UART_Init+0x5c>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USART1_UART_Init+0x58>)
 8001c80:	f008 ffa4 	bl	800abcc <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c8a:	f000 fe55 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20008874 	.word	0x20008874
 8001c98:	40011000 	.word	0x40011000

08001c9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001ca2:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <MX_USART6_UART_Init+0x5c>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_USART6_UART_Init+0x58>)
 8001ce0:	f008 ff74 	bl	800abcc <HAL_UART_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001cea:	f000 fe25 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000898c 	.word	0x2000898c
 8001cf8:	40011400 	.word	0x40011400

08001cfc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	615a      	str	r2, [r3, #20]
 8001d12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d16:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <MX_FMC_Init+0x9c>)
 8001d18:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d20:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d28:	2204      	movs	r2, #4
 8001d2a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d2e:	2210      	movs	r2, #16
 8001d30:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d34:	2240      	movs	r2, #64	; 0x40
 8001d36:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d3a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001d3e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001d60:	2307      	movs	r3, #7
 8001d62:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001d64:	2304      	movs	r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_FMC_Init+0x98>)
 8001d7e:	f008 f921 	bl	8009fc4 <HAL_SDRAM_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d88:	f000 fdd6 	bl	8002938 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d8c:	bf00      	nop
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20008aa0 	.word	0x20008aa0
 8001d98:	a0000140 	.word	0xa0000140

08001d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b090      	sub	sp, #64	; 0x40
 8001da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db2:	4baf      	ldr	r3, [pc, #700]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4aae      	ldr	r2, [pc, #696]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4bac      	ldr	r3, [pc, #688]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dca:	4ba9      	ldr	r3, [pc, #676]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4aa8      	ldr	r2, [pc, #672]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4ba6      	ldr	r3, [pc, #664]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4ba3      	ldr	r3, [pc, #652]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4aa2      	ldr	r2, [pc, #648]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4ba0      	ldr	r3, [pc, #640]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
 8001df8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	4b9d      	ldr	r3, [pc, #628]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a9c      	ldr	r2, [pc, #624]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b9a      	ldr	r3, [pc, #616]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	4b97      	ldr	r3, [pc, #604]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a96      	ldr	r2, [pc, #600]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b94      	ldr	r3, [pc, #592]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b91      	ldr	r3, [pc, #580]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a90      	ldr	r2, [pc, #576]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b8e      	ldr	r3, [pc, #568]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a8a      	ldr	r2, [pc, #552]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a84      	ldr	r2, [pc, #528]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8a:	4b79      	ldr	r3, [pc, #484]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a78      	ldr	r2, [pc, #480]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b70      	ldr	r3, [pc, #448]	; (8002070 <MX_GPIO_Init+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2160      	movs	r1, #96	; 0x60
 8001ebe:	486d      	ldr	r0, [pc, #436]	; (8002074 <MX_GPIO_Init+0x2d8>)
 8001ec0:	f005 f87a 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	486b      	ldr	r0, [pc, #428]	; (8002078 <MX_GPIO_Init+0x2dc>)
 8001eca:	f005 f875 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	4869      	ldr	r0, [pc, #420]	; (8002078 <MX_GPIO_Init+0x2dc>)
 8001ed4:	f005 f870 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2108      	movs	r1, #8
 8001edc:	4867      	ldr	r0, [pc, #412]	; (800207c <MX_GPIO_Init+0x2e0>)
 8001ede:	f005 f86b 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee8:	4865      	ldr	r0, [pc, #404]	; (8002080 <MX_GPIO_Init+0x2e4>)
 8001eea:	f005 f865 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001ef4:	4863      	ldr	r0, [pc, #396]	; (8002084 <MX_GPIO_Init+0x2e8>)
 8001ef6:	f005 f85f 	bl	8006fb8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	21c8      	movs	r1, #200	; 0xc8
 8001efe:	4862      	ldr	r0, [pc, #392]	; (8002088 <MX_GPIO_Init+0x2ec>)
 8001f00:	f005 f85a 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001f04:	2308      	movs	r3, #8
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f14:	4619      	mov	r1, r3
 8001f16:	4857      	ldr	r0, [pc, #348]	; (8002074 <MX_GPIO_Init+0x2d8>)
 8001f18:	f004 fd7e 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f2c:	2309      	movs	r3, #9
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f34:	4619      	mov	r1, r3
 8001f36:	484f      	ldr	r0, [pc, #316]	; (8002074 <MX_GPIO_Init+0x2d8>)
 8001f38:	f004 fd6e 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f3c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f4e:	230b      	movs	r3, #11
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	484b      	ldr	r0, [pc, #300]	; (8002088 <MX_GPIO_Init+0x2ec>)
 8001f5a:	f004 fd5d 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001f5e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f70:	230a      	movs	r3, #10
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4844      	ldr	r0, [pc, #272]	; (800208c <MX_GPIO_Init+0x2f0>)
 8001f7c:	f004 fd4c 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f90:	2308      	movs	r3, #8
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4837      	ldr	r0, [pc, #220]	; (8002078 <MX_GPIO_Init+0x2dc>)
 8001f9c:	f004 fd3c 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001fa0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4834      	ldr	r0, [pc, #208]	; (8002090 <MX_GPIO_Init+0x2f4>)
 8001fbe:	f004 fd2b 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001fc2:	f248 1340 	movw	r3, #33088	; 0x8140
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482f      	ldr	r0, [pc, #188]	; (8002094 <MX_GPIO_Init+0x2f8>)
 8001fd8:	f004 fd1e 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001fdc:	2360      	movs	r3, #96	; 0x60
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4820      	ldr	r0, [pc, #128]	; (8002074 <MX_GPIO_Init+0x2d8>)
 8001ff4:	f004 fd10 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002008:	230a      	movs	r3, #10
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002010:	4619      	mov	r1, r3
 8002012:	481e      	ldr	r0, [pc, #120]	; (800208c <MX_GPIO_Init+0x2f0>)
 8002014:	f004 fd00 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	4619      	mov	r1, r3
 800202c:	481a      	ldr	r0, [pc, #104]	; (8002098 <MX_GPIO_Init+0x2fc>)
 800202e:	f004 fcf3 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002032:	2340      	movs	r3, #64	; 0x40
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002036:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002044:	4619      	mov	r1, r3
 8002046:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_GPIO_Init+0x2dc>)
 8002048:	f004 fce6 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 800204c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800205e:	230a      	movs	r3, #10
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002066:	4619      	mov	r1, r3
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <MX_GPIO_Init+0x2f8>)
 800206a:	f004 fcd5 	bl	8006a18 <HAL_GPIO_Init>
 800206e:	e015      	b.n	800209c <MX_GPIO_Init+0x300>
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40022800 	.word	0x40022800
 8002080:	40022000 	.word	0x40022000
 8002084:	40021c00 	.word	0x40021c00
 8002088:	40021800 	.word	0x40021800
 800208c:	40020400 	.word	0x40020400
 8002090:	40020800 	.word	0x40020800
 8002094:	40020000 	.word	0x40020000
 8002098:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800209c:	23f0      	movs	r3, #240	; 0xf0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020ac:	230a      	movs	r3, #10
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	4891      	ldr	r0, [pc, #580]	; (80022fc <MX_GPIO_Init+0x560>)
 80020b8:	f004 fcae 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80020bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020ce:	230a      	movs	r3, #10
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d6:	4619      	mov	r1, r3
 80020d8:	4889      	ldr	r0, [pc, #548]	; (8002300 <MX_GPIO_Init+0x564>)
 80020da:	f004 fc9d 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80020de:	2328      	movs	r3, #40	; 0x28
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f2:	4619      	mov	r1, r3
 80020f4:	4883      	ldr	r0, [pc, #524]	; (8002304 <MX_GPIO_Init+0x568>)
 80020f6:	f004 fc8f 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80020fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210c:	4619      	mov	r1, r3
 800210e:	487e      	ldr	r0, [pc, #504]	; (8002308 <MX_GPIO_Init+0x56c>)
 8002110:	f004 fc82 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002114:	2308      	movs	r3, #8
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002128:	4619      	mov	r1, r3
 800212a:	4878      	ldr	r0, [pc, #480]	; (800230c <MX_GPIO_Init+0x570>)
 800212c:	f004 fc74 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002130:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	4619      	mov	r1, r3
 8002144:	486e      	ldr	r0, [pc, #440]	; (8002300 <MX_GPIO_Init+0x564>)
 8002146:	f004 fc67 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800214a:	2310      	movs	r3, #16
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215a:	4619      	mov	r1, r3
 800215c:	4869      	ldr	r0, [pc, #420]	; (8002304 <MX_GPIO_Init+0x568>)
 800215e:	f004 fc5b 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002162:	2304      	movs	r3, #4
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002172:	230c      	movs	r3, #12
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	4861      	ldr	r0, [pc, #388]	; (8002304 <MX_GPIO_Init+0x568>)
 800217e:	f004 fc4b 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002182:	f24a 0304 	movw	r3, #40964	; 0xa004
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002188:	2300      	movs	r3, #0
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002194:	4619      	mov	r1, r3
 8002196:	485e      	ldr	r0, [pc, #376]	; (8002310 <MX_GPIO_Init+0x574>)
 8002198:	f004 fc3e 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800219c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b2:	4619      	mov	r1, r3
 80021b4:	4851      	ldr	r0, [pc, #324]	; (80022fc <MX_GPIO_Init+0x560>)
 80021b6:	f004 fc2f 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80021ba:	f645 6340 	movw	r3, #24128	; 0x5e40
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d0:	4619      	mov	r1, r3
 80021d2:	484f      	ldr	r0, [pc, #316]	; (8002310 <MX_GPIO_Init+0x574>)
 80021d4:	f004 fc20 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80021d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ec:	4619      	mov	r1, r3
 80021ee:	4843      	ldr	r0, [pc, #268]	; (80022fc <MX_GPIO_Init+0x560>)
 80021f0:	f004 fc12 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80021f4:	2310      	movs	r3, #16
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002204:	230a      	movs	r3, #10
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220c:	4619      	mov	r1, r3
 800220e:	4840      	ldr	r0, [pc, #256]	; (8002310 <MX_GPIO_Init+0x574>)
 8002210:	f004 fc02 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002214:	23c8      	movs	r3, #200	; 0xc8
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002228:	4619      	mov	r1, r3
 800222a:	4835      	ldr	r0, [pc, #212]	; (8002300 <MX_GPIO_Init+0x564>)
 800222c:	f004 fbf4 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002230:	2305      	movs	r3, #5
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002240:	230a      	movs	r3, #10
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002248:	4619      	mov	r1, r3
 800224a:	482f      	ldr	r0, [pc, #188]	; (8002308 <MX_GPIO_Init+0x56c>)
 800224c:	f004 fbe4 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002250:	2332      	movs	r3, #50	; 0x32
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002260:	230b      	movs	r3, #11
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002268:	4619      	mov	r1, r3
 800226a:	4827      	ldr	r0, [pc, #156]	; (8002308 <MX_GPIO_Init+0x56c>)
 800226c:	f004 fbd4 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002270:	2304      	movs	r3, #4
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002280:	2309      	movs	r3, #9
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	4822      	ldr	r0, [pc, #136]	; (8002314 <MX_GPIO_Init+0x578>)
 800228c:	f004 fbc4 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002290:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022a2:	2309      	movs	r3, #9
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	4815      	ldr	r0, [pc, #84]	; (8002304 <MX_GPIO_Init+0x568>)
 80022ae:	f004 fbb3 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022b2:	2386      	movs	r3, #134	; 0x86
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022c2:	230b      	movs	r3, #11
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ca:	4619      	mov	r1, r3
 80022cc:	4812      	ldr	r0, [pc, #72]	; (8002318 <MX_GPIO_Init+0x57c>)
 80022ce:	f004 fba3 	bl	8006a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80022d2:	2328      	movs	r3, #40	; 0x28
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022e2:	230a      	movs	r3, #10
 80022e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ea:	4619      	mov	r1, r3
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <MX_GPIO_Init+0x57c>)
 80022ee:	f004 fb93 	bl	8006a18 <HAL_GPIO_Init>

}
 80022f2:	bf00      	nop
 80022f4:	3740      	adds	r7, #64	; 0x40
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40022000 	.word	0x40022000
 8002300:	40021800 	.word	0x40021800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40022800 	.word	0x40022800
 8002310:	40021c00 	.word	0x40021c00
 8002314:	40020400 	.word	0x40020400
 8002318:	40020000 	.word	0x40020000

0800231c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002324:	2001      	movs	r0, #1
 8002326:	f009 fb7e 	bl	800ba26 <osDelay>
 800232a:	e7fb      	b.n	8002324 <StartDefaultTask+0x8>

0800232c <displayTime>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTime */
void displayTime(void const * argument)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b094      	sub	sp, #80	; 0x50
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <displayTime+0x9c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800233c:	4618      	mov	r0, r3
 800233e:	f00a f919 	bl	800c574 <xQueueSemaphoreTake>
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	2200      	movs	r2, #0
 8002348:	4619      	mov	r1, r3
 800234a:	4820      	ldr	r0, [pc, #128]	; (80023cc <displayTime+0xa0>)
 800234c:	f007 fae6 	bl	800991c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	4619      	mov	r1, r3
 8002358:	481c      	ldr	r0, [pc, #112]	; (80023cc <displayTime+0xa0>)
 800235a:	f007 fbe5 	bl	8009b28 <HAL_RTC_GetDate>
	  sprintf(text, "%2u:%02u:%02u", time.Hours, time.Minutes, time.Seconds);
 800235e:	7c3b      	ldrb	r3, [r7, #16]
 8002360:	461a      	mov	r2, r3
 8002362:	7c7b      	ldrb	r3, [r7, #17]
 8002364:	4619      	mov	r1, r3
 8002366:	7cbb      	ldrb	r3, [r7, #18]
 8002368:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	460b      	mov	r3, r1
 8002370:	4917      	ldr	r1, [pc, #92]	; (80023d0 <displayTime+0xa4>)
 8002372:	f00c fdd1 	bl	800ef18 <siprintf>
	  BSP_LCD_SelectLayer(1);
 8002376:	2001      	movs	r0, #1
 8002378:	f000 fd80 	bl	8002e7c <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayStringAtLine(0,(uint8_t*) text);
 800237c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002380:	4619      	mov	r1, r3
 8002382:	2000      	movs	r0, #0
 8002384:	f000 ff20 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>
	  sprintf(text, "Score : %4u", score);
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <displayTime+0xa8>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	4911      	ldr	r1, [pc, #68]	; (80023d8 <displayTime+0xac>)
 8002394:	4618      	mov	r0, r3
 8002396:	f00c fdbf 	bl	800ef18 <siprintf>
	  BSP_LCD_SelectLayer(1);
 800239a:	2001      	movs	r0, #1
 800239c:	f000 fd6e 	bl	8002e7c <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayStringAtLine(1,(uint8_t*) text);
 80023a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a4:	4619      	mov	r1, r3
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 ff0e 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SelectLayer(1);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 fd65 	bl	8002e7c <BSP_LCD_SelectLayer>
	  xSemaphoreGive(mutexScreenHandle);
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <displayTime+0x9c>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	f009 fe4e 	bl	800c05c <xQueueGenericSend>
	  vTaskDelay(100);
 80023c0:	2064      	movs	r0, #100	; 0x64
 80023c2:	f00a fdb5 	bl	800cf30 <vTaskDelay>
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 80023c6:	e7b5      	b.n	8002334 <displayTime+0x8>
 80023c8:	20008640 	.word	0x20008640
 80023cc:	2000890c 	.word	0x2000890c
 80023d0:	0800f830 	.word	0x0800f830
 80023d4:	200087dc 	.word	0x200087dc
 80023d8:	0800f840 	.word	0x0800f840

080023dc <displayGame>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayGame */
void displayGame(void const * argument)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b094      	sub	sp, #80	; 0x50
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayGame */
	char text[50]={};
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	222e      	movs	r2, #46	; 0x2e
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f00c fcb5 	bl	800ed60 <memset>
	uint16_t amongx = BSP_LCD_GetXSize()/2 - 15;
 80023f6:	f000 fcb9 	bl	8002d6c <BSP_LCD_GetXSize>
 80023fa:	4603      	mov	r3, r0
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b0f      	subs	r3, #15
 8002402:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t amongy = BSP_LCD_GetYSize() - 30;
 8002406:	f000 fcc5 	bl	8002d94 <BSP_LCD_GetYSize>
 800240a:	4603      	mov	r3, r0
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b1e      	subs	r3, #30
 8002410:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t sword;
	uint16_t col;
  /* Infinite loop */
  for(;;)
  {
	  if (xQueueReceive(swordsPosHandle, &derive, 0)){
 8002414:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <displayGame+0x134>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f107 0117 	add.w	r1, r7, #23
 800241c:	2200      	movs	r2, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f009 ffc2 	bl	800c3a8 <xQueueReceive>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04d      	beq.n	80024c6 <displayGame+0xea>
		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <displayGame+0x138>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002432:	4618      	mov	r0, r3
 8002434:	f00a f89e 	bl	800c574 <xQueueSemaphoreTake>
		  BSP_LCD_SelectLayer(1);
 8002438:	2001      	movs	r0, #1
 800243a:	f000 fd1f 	bl	8002e7c <BSP_LCD_SelectLayer>
		  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 800243e:	4836      	ldr	r0, [pc, #216]	; (8002518 <displayGame+0x13c>)
 8002440:	f000 fd2c 	bl	8002e9c <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect(amongx, amongy, 30,30);
 8002444:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8002448:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 800244c:	231e      	movs	r3, #30
 800244e:	221e      	movs	r2, #30
 8002450:	f001 f914 	bl	800367c <BSP_LCD_FillRect>
		  if (derive == 1 && amongx < 450)
 8002454:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10d      	bne.n	8002478 <displayGame+0x9c>
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8002464:	d208      	bcs.n	8002478 <displayGame+0x9c>
		  {
			  amongx = amongx + derive;
 8002466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800246a:	b29a      	uxth	r2, r3
 800246c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002470:	4413      	add	r3, r2
 8002472:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002476:	e010      	b.n	800249a <displayGame+0xbe>
		  } else if (derive == -1 && amongx > 0){
 8002478:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002480:	d10b      	bne.n	800249a <displayGame+0xbe>
 8002482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <displayGame+0xbe>
			  amongx = amongx + derive;
 800248a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800248e:	b29a      	uxth	r2, r3
 8002490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002494:	4413      	add	r3, r2
 8002496:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  	  }
		  BSP_LCD_DrawBitmap(amongx, amongy,(uint8_t*)Amongus_bmp);
 800249a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800249e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80024a2:	4a1e      	ldr	r2, [pc, #120]	; (800251c <displayGame+0x140>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f837 	bl	8003518 <BSP_LCD_DrawBitmap>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80024aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ae:	f000 fcf5 	bl	8002e9c <BSP_LCD_SetTextColor>
		  BSP_LCD_SelectLayer(1);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f000 fce2 	bl	8002e7c <BSP_LCD_SelectLayer>
		  xSemaphoreGive(mutexScreenHandle);
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <displayGame+0x138>)
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	f009 fdcb 	bl	800c05c <xQueueGenericSend>
	  }
	  if(xQueueReceive(collideFlagHandle, &sword, 0))
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <displayGame+0x144>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f107 0110 	add.w	r1, r7, #16
 80024ce:	2200      	movs	r2, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f009 ff69 	bl	800c3a8 <xQueueReceive>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d015      	beq.n	8002508 <displayGame+0x12c>
	  {
		  if ((sword-amongx) < 30 || (amongx-sword) < 32){
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b1d      	cmp	r3, #29
 80024e6:	d905      	bls.n	80024f4 <displayGame+0x118>
 80024e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b1f      	cmp	r3, #31
 80024f2:	d809      	bhi.n	8002508 <displayGame+0x12c>
			  col = 30;
 80024f4:	231e      	movs	r3, #30
 80024f6:	81fb      	strh	r3, [r7, #14]
			  xQueueSend(scoreIncremHandle, &col, 0);
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <displayGame+0x148>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	f107 010e 	add.w	r1, r7, #14
 8002500:	2300      	movs	r3, #0
 8002502:	2200      	movs	r2, #0
 8002504:	f009 fdaa 	bl	800c05c <xQueueGenericSend>
		  }
	  }
	  osDelay(5);
 8002508:	2005      	movs	r0, #5
 800250a:	f009 fa8c 	bl	800ba26 <osDelay>
	  if (xQueueReceive(swordsPosHandle, &derive, 0)){
 800250e:	e781      	b.n	8002414 <displayGame+0x38>
 8002510:	200084b0 	.word	0x200084b0
 8002514:	20008640 	.word	0x20008640
 8002518:	ffffde00 	.word	0xffffde00
 800251c:	0800f884 	.word	0x0800f884
 8002520:	20008694 	.word	0x20008694
 8002524:	20008978 	.word	0x20008978

08002528 <waitGameOver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_waitGameOver */
void waitGameOver(void const * argument)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b098      	sub	sp, #96	; 0x60
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN waitGameOver */
	uint16_t temp;
	char text[30] = {};
 8002530:	2300      	movs	r3, #0
 8002532:	643b      	str	r3, [r7, #64]	; 0x40
 8002534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	831a      	strh	r2, [r3, #24]
	uint16_t gameov;
	/* definition and creation of TacheEpee */
	  osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <waitGameOver+0x140>)
 800254a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800254e:	461d      	mov	r5, r3
 8002550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f009 fa13 	bl	800b98e <osThreadCreate>
 8002568:	4603      	mov	r3, r0
 800256a:	4a40      	ldr	r2, [pc, #256]	; (800266c <waitGameOver+0x144>)
 800256c:	6013      	str	r3, [r2, #0]
	//osTmutexScreenHandlehreadId TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(scoreIncremHandle, &temp, 0)){
 800256e:	4b40      	ldr	r3, [pc, #256]	; (8002670 <waitGameOver+0x148>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8002576:	2200      	movs	r2, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f009 ff15 	bl	800c3a8 <xQueueReceive>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d069      	beq.n	8002658 <waitGameOver+0x130>
	  		  if (temp==1){
 8002584:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002588:	2b01      	cmp	r3, #1
 800258a:	d138      	bne.n	80025fe <waitGameOver+0xd6>
	  			vTaskDelete(TacheEpeeHandle);
 800258c:	4b37      	ldr	r3, [pc, #220]	; (800266c <waitGameOver+0x144>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f00a fc3b 	bl	800ce0c <vTaskDelete>
	  			xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002596:	4b37      	ldr	r3, [pc, #220]	; (8002674 <waitGameOver+0x14c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800259e:	4618      	mov	r0, r3
 80025a0:	f009 ffe8 	bl	800c574 <xQueueSemaphoreTake>
	  			BSP_LCD_SelectLayer(0);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f000 fc69 	bl	8002e7c <BSP_LCD_SelectLayer>
	  			BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 80025aa:	4833      	ldr	r0, [pc, #204]	; (8002678 <waitGameOver+0x150>)
 80025ac:	f000 fcd8 	bl	8002f60 <BSP_LCD_Clear>
	  			BSP_LCD_SelectLayer(1);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f000 fc63 	bl	8002e7c <BSP_LCD_SelectLayer>
	  			xSemaphoreGive(mutexScreenHandle);
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <waitGameOver+0x14c>)
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	f009 fd4c 	bl	800c05c <xQueueGenericSend>
	  			 score += 1;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <waitGameOver+0x154>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <waitGameOver+0x154>)
 80025ce:	801a      	strh	r2, [r3, #0]
	  			/* definition and creation of TacheEpee */
	  			  osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <waitGameOver+0x140>)
 80025d2:	f107 0408 	add.w	r4, r7, #8
 80025d6:	461d      	mov	r5, r3
 80025d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  			  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f009 f9cf 	bl	800b98e <osThreadCreate>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <waitGameOver+0x144>)
 80025f4:	6013      	str	r3, [r2, #0]
	  			 temp = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80025fc:	e02c      	b.n	8002658 <waitGameOver+0x130>
	  		  } else if (temp == 30) {
 80025fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002602:	2b1e      	cmp	r3, #30
 8002604:	d128      	bne.n	8002658 <waitGameOver+0x130>
	  			  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <waitGameOver+0x14c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800260e:	4618      	mov	r0, r3
 8002610:	f009 ffb0 	bl	800c574 <xQueueSemaphoreTake>
	  			  sprintf(text, "GAME OVER");
 8002614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002618:	4919      	ldr	r1, [pc, #100]	; (8002680 <waitGameOver+0x158>)
 800261a:	4618      	mov	r0, r3
 800261c:	f00c fc7c 	bl	800ef18 <siprintf>
	  			  BSP_LCD_SelectLayer(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f000 fc2b 	bl	8002e7c <BSP_LCD_SelectLayer>
	  			  BSP_LCD_DisplayStringAtLine(3,(uint8_t*) text);
 8002626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800262a:	4619      	mov	r1, r3
 800262c:	2003      	movs	r0, #3
 800262e:	f000 fdcb 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>
	  			  BSP_LCD_SelectLayer(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f000 fc22 	bl	8002e7c <BSP_LCD_SelectLayer>
	  			  xSemaphoreGive(mutexScreenHandle);
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <waitGameOver+0x14c>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	2300      	movs	r3, #0
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	f009 fd0b 	bl	800c05c <xQueueGenericSend>
	  			vTaskDelete(TacheEpeeHandle);
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <waitGameOver+0x144>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f00a fbde 	bl	800ce0c <vTaskDelete>
	  			temp = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  			  break;
 8002656:	e003      	b.n	8002660 <waitGameOver+0x138>
	  		  }
	  	  }
    osDelay(10);
 8002658:	200a      	movs	r0, #10
 800265a:	f009 f9e4 	bl	800ba26 <osDelay>
	  if(xQueueReceive(scoreIncremHandle, &temp, 0)){
 800265e:	e786      	b.n	800256e <waitGameOver+0x46>
  }
  /* USER CODE END waitGameOver */
}
 8002660:	bf00      	nop
 8002662:	3760      	adds	r7, #96	; 0x60
 8002664:	46bd      	mov	sp, r7
 8002666:	bdb0      	pop	{r4, r5, r7, pc}
 8002668:	0800f814 	.word	0x0800f814
 800266c:	20008ad4 	.word	0x20008ad4
 8002670:	20008978 	.word	0x20008978
 8002674:	20008640 	.word	0x20008640
 8002678:	ffffde00 	.word	0xffffde00
 800267c:	200087dc 	.word	0x200087dc
 8002680:	0800f84c 	.word	0x0800f84c

08002684 <obj_cycle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_obj_cycle */
void obj_cycle(void const * argument)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN obj_cycle */
	uint32_t joystick_h, joystick_v;
	int8_t derive;
	ADC_ChannelConfTypeDef sConfig = {0};
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800269a:	2301      	movs	r3, #1
 800269c:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  sConfig.Channel = ADC_CHANNEL_8;
 80026a2:	2308      	movs	r3, #8
 80026a4:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4619      	mov	r1, r3
 80026ac:	4820      	ldr	r0, [pc, #128]	; (8002730 <obj_cycle+0xac>)
 80026ae:	f003 f847 	bl	8005740 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 80026b2:	481f      	ldr	r0, [pc, #124]	; (8002730 <obj_cycle+0xac>)
 80026b4:	f002 fede 	bl	8005474 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80026b8:	bf00      	nop
 80026ba:	2164      	movs	r1, #100	; 0x64
 80026bc:	481c      	ldr	r0, [pc, #112]	; (8002730 <obj_cycle+0xac>)
 80026be:	f002 ffa7 	bl	8005610 <HAL_ADC_PollForConversion>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f8      	bne.n	80026ba <obj_cycle+0x36>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 80026c8:	4819      	ldr	r0, [pc, #100]	; (8002730 <obj_cycle+0xac>)
 80026ca:	f003 f82c 	bl	8005726 <HAL_ADC_GetValue>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24

	  HAL_ADC_Start(&hadc1);
 80026d0:	4818      	ldr	r0, [pc, #96]	; (8002734 <obj_cycle+0xb0>)
 80026d2:	f002 fecf 	bl	8005474 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80026d6:	bf00      	nop
 80026d8:	2164      	movs	r1, #100	; 0x64
 80026da:	4816      	ldr	r0, [pc, #88]	; (8002734 <obj_cycle+0xb0>)
 80026dc:	f002 ff98 	bl	8005610 <HAL_ADC_PollForConversion>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f8      	bne.n	80026d8 <obj_cycle+0x54>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 80026e6:	4813      	ldr	r0, [pc, #76]	; (8002734 <obj_cycle+0xb0>)
 80026e8:	f003 f81d 	bl	8005726 <HAL_ADC_GetValue>
 80026ec:	6238      	str	r0, [r7, #32]

	  if (joystick_h < 1024) {
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f4:	d20a      	bcs.n	800270c <obj_cycle+0x88>
		  derive = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	77fb      	strb	r3, [r7, #31]
		  xQueueSend(swordsPosHandle, &derive, 0);
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <obj_cycle+0xb4>)
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	f107 011f 	add.w	r1, r7, #31
 8002702:	2300      	movs	r3, #0
 8002704:	2200      	movs	r2, #0
 8002706:	f009 fca9 	bl	800c05c <xQueueGenericSend>
 800270a:	e00d      	b.n	8002728 <obj_cycle+0xa4>
	  } else if (joystick_h > 3072) {
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002712:	d909      	bls.n	8002728 <obj_cycle+0xa4>
		  derive = -1;
 8002714:	23ff      	movs	r3, #255	; 0xff
 8002716:	77fb      	strb	r3, [r7, #31]
		  xQueueSend(swordsPosHandle, &derive, 0);
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <obj_cycle+0xb4>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	f107 011f 	add.w	r1, r7, #31
 8002720:	2300      	movs	r3, #0
 8002722:	2200      	movs	r2, #0
 8002724:	f009 fc9a 	bl	800c05c <xQueueGenericSend>
	  amongx -= 1;
	  BSP_LCD_DrawBitmap(amongx, amongy,(uint8_t*)Amongus_bmp);
	  BSP_LCD_SelectLayer(1);
	  xSemaphoreGive(mutexScreenHandle);
	*/
	  vTaskDelay(10);
 8002728:	200a      	movs	r0, #10
 800272a:	f00a fc01 	bl	800cf30 <vTaskDelay>
	  sConfig.Channel = ADC_CHANNEL_8;
 800272e:	e7b8      	b.n	80026a2 <obj_cycle+0x1e>
 8002730:	2000882c 	.word	0x2000882c
 8002734:	200087e0 	.word	0x200087e0
 8002738:	200084b0 	.word	0x200084b0

0800273c <obj_sword>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_obj_sword */
void obj_sword(void const * argument)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b08f      	sub	sp, #60	; 0x3c
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN obj_sword */
	char text[30] = {};
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
 8002758:	615a      	str	r2, [r3, #20]
 800275a:	831a      	strh	r2, [r3, #24]
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	484d      	ldr	r0, [pc, #308]	; (8002898 <obj_sword+0x15c>)
 8002764:	f006 ff34 	bl	80095d0 <HAL_RNG_GenerateRandomNumber>
	uint32_t posx = (30 + (randomNumber% (BSP_LCD_GetXSize() - 60)));
 8002768:	697c      	ldr	r4, [r7, #20]
 800276a:	f000 faff 	bl	8002d6c <BSP_LCD_GetXSize>
 800276e:	4603      	mov	r3, r0
 8002770:	3b3c      	subs	r3, #60	; 0x3c
 8002772:	fbb4 f2f3 	udiv	r2, r4, r3
 8002776:	fb03 f302 	mul.w	r3, r3, r2
 800277a:	1ae3      	subs	r3, r4, r3
 800277c:	331e      	adds	r3, #30
 800277e:	613b      	str	r3, [r7, #16]
	uint16_t posy = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002784:	4b45      	ldr	r3, [pc, #276]	; (800289c <obj_sword+0x160>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800278c:	4618      	mov	r0, r3
 800278e:	f009 fef1 	bl	800c574 <xQueueSemaphoreTake>
	  BSP_LCD_SelectLayer(0);
 8002792:	2000      	movs	r0, #0
 8002794:	f000 fb72 	bl	8002e7c <BSP_LCD_SelectLayer>
	  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 8002798:	4841      	ldr	r0, [pc, #260]	; (80028a0 <obj_sword+0x164>)
 800279a:	f000 fb7f 	bl	8002e9c <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(posx, posy, 30,30);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	b298      	uxth	r0, r3
 80027a2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80027a4:	231e      	movs	r3, #30
 80027a6:	221e      	movs	r2, #30
 80027a8:	f000 ff68 	bl	800367c <BSP_LCD_FillRect>
	  posy += 1;
 80027ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ae:	3301      	adds	r3, #1
 80027b0:	86fb      	strh	r3, [r7, #54]	; 0x36
	  BSP_LCD_DrawBitmap(posx, posy,(uint8_t*)Block_bmp);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80027b6:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <obj_sword+0x168>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fead 	bl	8003518 <BSP_LCD_DrawBitmap>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80027be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c2:	f000 fb6b 	bl	8002e9c <BSP_LCD_SetTextColor>
	  BSP_LCD_SelectLayer(1);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f000 fb58 	bl	8002e7c <BSP_LCD_SelectLayer>
	  xSemaphoreGive(mutexScreenHandle);
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <obj_sword+0x160>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	2300      	movs	r3, #0
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	f009 fc41 	bl	800c05c <xQueueGenericSend>
	  if (posy > BSP_LCD_GetYSize()-59) {
 80027da:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 80027dc:	f000 fada 	bl	8002d94 <BSP_LCD_GetYSize>
 80027e0:	4603      	mov	r3, r0
 80027e2:	3b3b      	subs	r3, #59	; 0x3b
 80027e4:	429c      	cmp	r4, r3
 80027e6:	d907      	bls.n	80027f8 <obj_sword+0xbc>
		  xQueueSend(collideFlagHandle, &posx, 0);
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <obj_sword+0x16c>)
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	f107 0110 	add.w	r1, r7, #16
 80027f0:	2300      	movs	r3, #0
 80027f2:	2200      	movs	r2, #0
 80027f4:	f009 fc32 	bl	800c05c <xQueueGenericSend>
	  }
	  if (posy > BSP_LCD_GetYSize()-29)
 80027f8:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 80027fa:	f000 facb 	bl	8002d94 <BSP_LCD_GetYSize>
 80027fe:	4603      	mov	r3, r0
 8002800:	3b1d      	subs	r3, #29
 8002802:	429c      	cmp	r4, r3
 8002804:	d943      	bls.n	800288e <obj_sword+0x152>
	  {
		  sprintf(text, "OK");
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	4928      	ldr	r1, [pc, #160]	; (80028ac <obj_sword+0x170>)
 800280c:	4618      	mov	r0, r3
 800280e:	f00c fb83 	bl	800ef18 <siprintf>
		  BSP_LCD_SelectLayer(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f000 fb32 	bl	8002e7c <BSP_LCD_SelectLayer>
		  BSP_LCD_DisplayStringAtLine(7,(uint8_t*) text);
 8002818:	f107 0318 	add.w	r3, r7, #24
 800281c:	4619      	mov	r1, r3
 800281e:	2007      	movs	r0, #7
 8002820:	f000 fcd2 	bl	80031c8 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_SelectLayer(1);
 8002824:	2001      	movs	r0, #1
 8002826:	f000 fb29 	bl	8002e7c <BSP_LCD_SelectLayer>

  		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <obj_sword+0x160>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002832:	4618      	mov	r0, r3
 8002834:	f009 fe9e 	bl	800c574 <xQueueSemaphoreTake>
  		  BSP_LCD_SelectLayer(0);
 8002838:	2000      	movs	r0, #0
 800283a:	f000 fb1f 	bl	8002e7c <BSP_LCD_SelectLayer>
  		  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 800283e:	4818      	ldr	r0, [pc, #96]	; (80028a0 <obj_sword+0x164>)
 8002840:	f000 fb2c 	bl	8002e9c <BSP_LCD_SetTextColor>
  		  BSP_LCD_FillRect(posx, posy, 30,30);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	b298      	uxth	r0, r3
 8002848:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800284a:	231e      	movs	r3, #30
 800284c:	221e      	movs	r2, #30
 800284e:	f000 ff15 	bl	800367c <BSP_LCD_FillRect>
  		  /*posy = 0;
  		  posx = (30 + (rand()% (BSP_LCD_GetXSize() - 60)));
  		  BSP_LCD_DrawBitmap(posx, posy,(uint8_t*)Block_bmp);*/
  		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002856:	f000 fb21 	bl	8002e9c <BSP_LCD_SetTextColor>
  		  BSP_LCD_SelectLayer(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f000 fb0e 	bl	8002e7c <BSP_LCD_SelectLayer>
  		  xSemaphoreGive(mutexScreenHandle);
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <obj_sword+0x160>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	f009 fbf7 	bl	800c05c <xQueueGenericSend>
  		  uint16_t incr = 1;
 800286e:	2301      	movs	r3, #1
 8002870:	81fb      	strh	r3, [r7, #14]
  		  xQueueSend(scoreIncremHandle, &incr, 0);
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <obj_sword+0x174>)
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f107 010e 	add.w	r1, r7, #14
 800287a:	2300      	movs	r3, #0
 800287c:	2200      	movs	r2, #0
 800287e:	f009 fbed 	bl	800c05c <xQueueGenericSend>
  		  vTaskDelay(10);
 8002882:	200a      	movs	r0, #10
 8002884:	f00a fb54 	bl	800cf30 <vTaskDelay>
  		  vTaskDelete(NULL);
 8002888:	2000      	movs	r0, #0
 800288a:	f00a fabf 	bl	800ce0c <vTaskDelete>
	  }
	  vTaskDelay(3);
 800288e:	2003      	movs	r0, #3
 8002890:	f00a fb4e 	bl	800cf30 <vTaskDelay>
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002894:	e776      	b.n	8002784 <obj_sword+0x48>
 8002896:	bf00      	nop
 8002898:	2000897c 	.word	0x2000897c
 800289c:	20008640 	.word	0x20008640
 80028a0:	ffffde00 	.word	0xffffde00
 80028a4:	08010018 	.word	0x08010018
 80028a8:	20008694 	.word	0x20008694
 80028ac:	0800f858 	.word	0x0800f858
 80028b0:	20008978 	.word	0x20008978

080028b4 <CallbackDisplay>:
  /* USER CODE END obj_sword */
}

/* CallbackDisplay function */
void CallbackDisplay(void const * argument)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b090      	sub	sp, #64	; 0x40
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDisplay */
	char text[50];
	static uint8_t ligne = 10;
		sprintf(text,"CONGRATS !");
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	490a      	ldr	r1, [pc, #40]	; (80028ec <CallbackDisplay+0x38>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00c fb28 	bl	800ef18 <siprintf>
		BSP_LCD_DisplayStringAt(0,ligne*12,(uint8_t*) text,RIGHT_MODE);
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <CallbackDisplay+0x3c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	0052      	lsls	r2, r2, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	b299      	uxth	r1, r3
 80028d8:	f107 020c 	add.w	r2, r7, #12
 80028dc:	2302      	movs	r3, #2
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 fbaa 	bl	8003038 <BSP_LCD_DisplayStringAt>
  /* USER CODE END CallbackDisplay */
}
 80028e4:	bf00      	nop
 80028e6:	3740      	adds	r7, #64	; 0x40
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	0800f85c 	.word	0x0800f85c
 80028f0:	20000028 	.word	0x20000028

080028f4 <CallbackLED>:

/* CallbackLED function */
void CallbackLED(void const * argument)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackLED */
	HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 80028fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <CallbackLED+0x1c>)
 8002902:	f004 fb72 	bl	8006fea <HAL_GPIO_TogglePin>
  /* USER CODE END CallbackLED */
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021c00 	.word	0x40021c00

08002914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002926:	f002 fd1d 	bl	8005364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40001000 	.word	0x40001000

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
}
 800293e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002940:	e7fe      	b.n	8002940 <Error_Handler+0x8>
	...

08002944 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <I2Cx_MspInit+0x150>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d14d      	bne.n	80029f0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <I2Cx_MspInit+0x154>)
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	6313      	str	r3, [r2, #48]	; 0x30
 8002960:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002970:	2312      	movs	r3, #18
 8002972:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002978:	2302      	movs	r3, #2
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800297c:	2304      	movs	r3, #4
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	4619      	mov	r1, r3
 8002986:	4845      	ldr	r0, [pc, #276]	; (8002a9c <I2Cx_MspInit+0x158>)
 8002988:	f004 f846 	bl	8006a18 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800298c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	4840      	ldr	r0, [pc, #256]	; (8002a9c <I2Cx_MspInit+0x158>)
 800299a:	f004 f83d 	bl	8006a18 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a3d      	ldr	r2, [pc, #244]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a37      	ldr	r2, [pc, #220]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80029c2:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a34      	ldr	r2, [pc, #208]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029cc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	210f      	movs	r1, #15
 80029d2:	2048      	movs	r0, #72	; 0x48
 80029d4:	f003 f9bc 	bl	8005d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80029d8:	2048      	movs	r0, #72	; 0x48
 80029da:	f003 f9d5 	bl	8005d88 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	210f      	movs	r1, #15
 80029e2:	2049      	movs	r0, #73	; 0x49
 80029e4:	f003 f9b4 	bl	8005d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80029e8:	2049      	movs	r0, #73	; 0x49
 80029ea:	f003 f9cd 	bl	8005d88 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80029ee:	e04d      	b.n	8002a8c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <I2Cx_MspInit+0x154>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002a0e:	2312      	movs	r3, #18
 8002a10:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002a16:	2302      	movs	r3, #2
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	481e      	ldr	r0, [pc, #120]	; (8002aa0 <I2Cx_MspInit+0x15c>)
 8002a26:	f003 fff7 	bl	8006a18 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	481a      	ldr	r0, [pc, #104]	; (8002aa0 <I2Cx_MspInit+0x15c>)
 8002a38:	f003 ffee 	bl	8006a18 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a46:	6413      	str	r3, [r2, #64]	; 0x40
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a5e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <I2Cx_MspInit+0x154>)
 8002a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a6a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	210f      	movs	r1, #15
 8002a70:	201f      	movs	r0, #31
 8002a72:	f003 f96d 	bl	8005d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002a76:	201f      	movs	r0, #31
 8002a78:	f003 f986 	bl	8005d88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	210f      	movs	r1, #15
 8002a80:	2020      	movs	r0, #32
 8002a82:	f003 f965 	bl	8005d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002a86:	2020      	movs	r0, #32
 8002a88:	f003 f97e 	bl	8005d88 <HAL_NVIC_EnableIRQ>
}
 8002a8c:	bf00      	nop
 8002a8e:	3730      	adds	r7, #48	; 0x30
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2000086c 	.word	0x2000086c
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40020400 	.word	0x40020400

08002aa4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f004 fda5 	bl	80075fc <HAL_I2C_GetState>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d125      	bne.n	8002b04 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <I2Cx_Init+0x68>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <I2Cx_Init+0x6c>)
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e002      	b.n	8002ace <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <I2Cx_Init+0x70>)
 8002acc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <I2Cx_Init+0x74>)
 8002ad2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff23 	bl	8002944 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f004 fa8e 	bl	8007020 <HAL_I2C_Init>
  }
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000086c 	.word	0x2000086c
 8002b10:	40005c00 	.word	0x40005c00
 8002b14:	40005400 	.word	0x40005400
 8002b18:	40912732 	.word	0x40912732

08002b1c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af04      	add	r7, sp, #16
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	72fb      	strb	r3, [r7, #11]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	b299      	uxth	r1, r3
 8002b3e:	88f8      	ldrh	r0, [r7, #6]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4603      	mov	r3, r0
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f004 fc38 	bl	80073c8 <HAL_I2C_Mem_Read>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d004      	beq.n	8002b6c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	4619      	mov	r1, r3
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f832 	bl	8002bd0 <I2Cx_Error>
  }
  return status;    
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b08a      	sub	sp, #40	; 0x28
 8002b7a:	af04      	add	r7, sp, #16
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	4608      	mov	r0, r1
 8002b80:	4611      	mov	r1, r2
 8002b82:	461a      	mov	r2, r3
 8002b84:	4603      	mov	r3, r0
 8002b86:	72fb      	strb	r3, [r7, #11]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	813b      	strh	r3, [r7, #8]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	b299      	uxth	r1, r3
 8002b98:	88f8      	ldrh	r0, [r7, #6]
 8002b9a:	893a      	ldrh	r2, [r7, #8]
 8002b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba0:	9302      	str	r3, [sp, #8]
 8002ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f004 faf7 	bl	80071a0 <HAL_I2C_Mem_Write>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f805 	bl	8002bd0 <I2Cx_Error>
  }
  return status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f004 faaf 	bl	8007140 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ff5e 	bl	8002aa4 <I2Cx_Init>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TS_IO_Init+0x10>)
 8002bf6:	f7ff ff55 	bl	8002aa4 <I2Cx_Init>
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000086c 	.word	0x2000086c

08002c04 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	71bb      	strb	r3, [r7, #6]
 8002c12:	4613      	mov	r3, r2
 8002c14:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002c16:	79bb      	ldrb	r3, [r7, #6]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	79f9      	ldrb	r1, [r7, #7]
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	1d7b      	adds	r3, r7, #5
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2301      	movs	r3, #1
 8002c26:	4803      	ldr	r0, [pc, #12]	; (8002c34 <TS_IO_Write+0x30>)
 8002c28:	f7ff ffa5 	bl	8002b76 <I2Cx_WriteMultiple>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2000086c 	.word	0x2000086c

08002c38 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460a      	mov	r2, r1
 8002c42:	71fb      	strb	r3, [r7, #7]
 8002c44:	4613      	mov	r3, r2
 8002c46:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002c4c:	79bb      	ldrb	r3, [r7, #6]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	79f9      	ldrb	r1, [r7, #7]
 8002c52:	2301      	movs	r3, #1
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	f107 030f 	add.w	r3, r7, #15
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	4804      	ldr	r0, [pc, #16]	; (8002c70 <TS_IO_Read+0x38>)
 8002c60:	f7ff ff5c 	bl	8002b1c <I2Cx_ReadMultiple>

  return read_value;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000086c 	.word	0x2000086c

08002c74 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f002 fb91 	bl	80053a4 <HAL_Delay>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002c92:	2228      	movs	r2, #40	; 0x28
 8002c94:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002c98:	2209      	movs	r2, #9
 8002c9a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002c9e:	2235      	movs	r2, #53	; 0x35
 8002ca0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002ca4:	220b      	movs	r2, #11
 8002ca6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002caa:	f240 121b 	movw	r2, #283	; 0x11b
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cb2:	f240 2215 	movw	r2, #533	; 0x215
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cba:	f240 121d 	movw	r2, #285	; 0x11d
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cc2:	f240 2235 	movw	r2, #565	; 0x235
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4823      	ldr	r0, [pc, #140]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002ccc:	f000 fee8 	bl	8003aa0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002cd0:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cda:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002cde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <BSP_LCD_Init+0xd0>)
 8002d14:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002d16:	4810      	ldr	r0, [pc, #64]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002d18:	f005 f98c 	bl	8008034 <HAL_LTDC_GetState>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002d22:	2100      	movs	r1, #0
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002d26:	f000 fde1 	bl	80038ec <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002d2a:	480b      	ldr	r0, [pc, #44]	; (8002d58 <BSP_LCD_Init+0xcc>)
 8002d2c:	f004 ffb2 	bl	8007c94 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002d30:	2201      	movs	r2, #1
 8002d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d36:	480a      	ldr	r0, [pc, #40]	; (8002d60 <BSP_LCD_Init+0xd4>)
 8002d38:	f004 f93e 	bl	8006fb8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2108      	movs	r1, #8
 8002d40:	4808      	ldr	r0, [pc, #32]	; (8002d64 <BSP_LCD_Init+0xd8>)
 8002d42:	f004 f939 	bl	8006fb8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d46:	f001 f80f 	bl	8003d68 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <BSP_LCD_Init+0xdc>)
 8002d4c:	f000 f8d8 	bl	8002f00 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20008ad8 	.word	0x20008ad8
 8002d5c:	40016800 	.word	0x40016800
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40022800 	.word	0x40022800
 8002d68:	2000002c 	.word	0x2000002c

08002d6c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <BSP_LCD_GetXSize+0x20>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <BSP_LCD_GetXSize+0x24>)
 8002d76:	2134      	movs	r1, #52	; 0x34
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3360      	adds	r3, #96	; 0x60
 8002d80:	681b      	ldr	r3, [r3, #0]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	200008f8 	.word	0x200008f8
 8002d90:	20008ad8 	.word	0x20008ad8

08002d94 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <BSP_LCD_GetYSize+0x20>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <BSP_LCD_GetYSize+0x24>)
 8002d9e:	2134      	movs	r1, #52	; 0x34
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3364      	adds	r3, #100	; 0x64
 8002da8:	681b      	ldr	r3, [r3, #0]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	200008f8 	.word	0x200008f8
 8002db8:	20008ad8 	.word	0x20008ad8

08002dbc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b090      	sub	sp, #64	; 0x40
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002dcc:	f7ff ffce 	bl	8002d6c <BSP_LCD_GetXSize>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002dd8:	f7ff ffdc 	bl	8002d94 <BSP_LCD_GetYSize>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002de8:	23ff      	movs	r3, #255	; 0xff
 8002dea:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e08:	2307      	movs	r3, #7
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002e0c:	f7ff ffae 	bl	8002d6c <BSP_LCD_GetXSize>
 8002e10:	4603      	mov	r3, r0
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002e14:	f7ff ffbe 	bl	8002d94 <BSP_LCD_GetYSize>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	4619      	mov	r1, r3
 8002e24:	4812      	ldr	r0, [pc, #72]	; (8002e70 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002e26:	f005 f8c7 	bl	8007fb8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	4911      	ldr	r1, [pc, #68]	; (8002e74 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3304      	adds	r3, #4
 8002e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e3e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	490c      	ldr	r1, [pc, #48]	; (8002e74 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3308      	adds	r3, #8
 8002e50:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	4907      	ldr	r1, [pc, #28]	; (8002e74 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	3740      	adds	r7, #64	; 0x40
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20008ad8 	.word	0x20008ad8
 8002e74:	200008fc 	.word	0x200008fc
 8002e78:	2000002c 	.word	0x2000002c

08002e7c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <BSP_LCD_SelectLayer+0x1c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
} 
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	200008f8 	.word	0x200008f8

08002e9c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <BSP_LCD_SetTextColor+0x28>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <BSP_LCD_SetTextColor+0x2c>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	200008f8 	.word	0x200008f8
 8002ec8:	200008fc 	.word	0x200008fc

08002ecc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <BSP_LCD_SetBackColor+0x2c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4908      	ldr	r1, [pc, #32]	; (8002efc <BSP_LCD_SetBackColor+0x30>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200008f8 	.word	0x200008f8
 8002efc:	200008fc 	.word	0x200008fc

08002f00 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <BSP_LCD_SetFont+0x2c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4908      	ldr	r1, [pc, #32]	; (8002f30 <BSP_LCD_SetFont+0x30>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3308      	adds	r3, #8
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	601a      	str	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200008f8 	.word	0x200008f8
 8002f30:	200008fc 	.word	0x200008fc

08002f34 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <BSP_LCD_GetFont+0x24>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4907      	ldr	r1, [pc, #28]	; (8002f5c <BSP_LCD_GetFont+0x28>)
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3308      	adds	r3, #8
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	200008f8 	.word	0x200008f8
 8002f5c:	200008fc 	.word	0x200008fc

08002f60 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <BSP_LCD_Clear+0x48>)
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <BSP_LCD_Clear+0x48>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <BSP_LCD_Clear+0x4c>)
 8002f72:	2134      	movs	r1, #52	; 0x34
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	335c      	adds	r3, #92	; 0x5c
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461e      	mov	r6, r3
 8002f80:	f7ff fef4 	bl	8002d6c <BSP_LCD_GetXSize>
 8002f84:	4605      	mov	r5, r0
 8002f86:	f7ff ff05 	bl	8002d94 <BSP_LCD_GetYSize>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2300      	movs	r3, #0
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	462a      	mov	r2, r5
 8002f98:	4631      	mov	r1, r6
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f000 fe54 	bl	8003c48 <LL_FillBuffer>
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa8:	200008f8 	.word	0x200008f8
 8002fac:	20008ad8 	.word	0x20008ad8

08002fb0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	80bb      	strh	r3, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <BSP_LCD_DisplayChar+0x80>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	491b      	ldr	r1, [pc, #108]	; (8003034 <BSP_LCD_DisplayChar+0x84>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <BSP_LCD_DisplayChar+0x80>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4c14      	ldr	r4, [pc, #80]	; (8003034 <BSP_LCD_DisplayChar+0x84>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4423      	add	r3, r4
 8002fee:	3308      	adds	r3, #8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ff4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <BSP_LCD_DisplayChar+0x80>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	; (8003034 <BSP_LCD_DisplayChar+0x84>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4423      	add	r3, r4
 8003008:	3308      	adds	r3, #8
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	889b      	ldrh	r3, [r3, #4]
 800300e:	3307      	adds	r3, #7
 8003010:	2b00      	cmp	r3, #0
 8003012:	da00      	bge.n	8003016 <BSP_LCD_DisplayChar+0x66>
 8003014:	3307      	adds	r3, #7
 8003016:	10db      	asrs	r3, r3, #3
 8003018:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800301c:	18ca      	adds	r2, r1, r3
 800301e:	88b9      	ldrh	r1, [r7, #4]
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fd58 	bl	8003ad8 <DrawChar>
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}
 8003030:	200008f8 	.word	0x200008f8
 8003034:	200008fc 	.word	0x200008fc

08003038 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	60ba      	str	r2, [r7, #8]
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	81fb      	strh	r3, [r7, #14]
 8003046:	460b      	mov	r3, r1
 8003048:	81bb      	strh	r3, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800304e:	2301      	movs	r3, #1
 8003050:	83fb      	strh	r3, [r7, #30]
 8003052:	2300      	movs	r3, #0
 8003054:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003062:	e002      	b.n	800306a <BSP_LCD_DisplayStringAt+0x32>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	3301      	adds	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	617a      	str	r2, [r7, #20]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f6      	bne.n	8003064 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003076:	f7ff fe79 	bl	8002d6c <BSP_LCD_GetXSize>
 800307a:	4601      	mov	r1, r0
 800307c:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <BSP_LCD_DisplayStringAt+0x188>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4850      	ldr	r0, [pc, #320]	; (80031c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4403      	add	r3, r0
 800308c:	3308      	adds	r3, #8
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	889b      	ldrh	r3, [r3, #4]
 8003092:	fbb1 f3f3 	udiv	r3, r1, r3
 8003096:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d01c      	beq.n	80030d8 <BSP_LCD_DisplayStringAt+0xa0>
 800309e:	2b03      	cmp	r3, #3
 80030a0:	dc33      	bgt.n	800310a <BSP_LCD_DisplayStringAt+0xd2>
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d002      	beq.n	80030ac <BSP_LCD_DisplayStringAt+0x74>
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d019      	beq.n	80030de <BSP_LCD_DisplayStringAt+0xa6>
 80030aa:	e02e      	b.n	800310a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad1      	subs	r1, r2, r3
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <BSP_LCD_DisplayStringAt+0x188>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4843      	ldr	r0, [pc, #268]	; (80031c4 <BSP_LCD_DisplayStringAt+0x18c>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4403      	add	r3, r0
 80030c2:	3308      	adds	r3, #8
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	889b      	ldrh	r3, [r3, #4]
 80030c8:	fb03 f301 	mul.w	r3, r3, r1
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	89fb      	ldrh	r3, [r7, #14]
 80030d2:	4413      	add	r3, r2
 80030d4:	83fb      	strh	r3, [r7, #30]
      break;
 80030d6:	e01b      	b.n	8003110 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80030d8:	89fb      	ldrh	r3, [r7, #14]
 80030da:	83fb      	strh	r3, [r7, #30]
      break;
 80030dc:	e018      	b.n	8003110 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b299      	uxth	r1, r3
 80030e6:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <BSP_LCD_DisplayStringAt+0x188>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4836      	ldr	r0, [pc, #216]	; (80031c4 <BSP_LCD_DisplayStringAt+0x18c>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4403      	add	r3, r0
 80030f6:	3308      	adds	r3, #8
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	889b      	ldrh	r3, [r3, #4]
 80030fc:	fb11 f303 	smulbb	r3, r1, r3
 8003100:	b29a      	uxth	r2, r3
 8003102:	89fb      	ldrh	r3, [r7, #14]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	83fb      	strh	r3, [r7, #30]
      break;
 8003108:	e002      	b.n	8003110 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800310a:	89fb      	ldrh	r3, [r7, #14]
 800310c:	83fb      	strh	r3, [r7, #30]
      break;
 800310e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003110:	8bfb      	ldrh	r3, [r7, #30]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <BSP_LCD_DisplayStringAt+0xe6>
 8003116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800311a:	2b00      	cmp	r3, #0
 800311c:	da1d      	bge.n	800315a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003122:	e01a      	b.n	800315a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	89b9      	ldrh	r1, [r7, #12]
 800312a:	8bfb      	ldrh	r3, [r7, #30]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff3f 	bl	8002fb0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <BSP_LCD_DisplayStringAt+0x188>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4923      	ldr	r1, [pc, #140]	; (80031c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3308      	adds	r3, #8
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	889a      	ldrh	r2, [r3, #4]
 8003148:	8bfb      	ldrh	r3, [r7, #30]
 800314a:	4413      	add	r3, r2
 800314c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3301      	adds	r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
    i++;
 8003154:	8bbb      	ldrh	r3, [r7, #28]
 8003156:	3301      	adds	r3, #1
 8003158:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	b2dc      	uxtb	r4, r3
 8003168:	f7ff fe00 	bl	8002d6c <BSP_LCD_GetXSize>
 800316c:	8bb9      	ldrh	r1, [r7, #28]
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <BSP_LCD_DisplayStringAt+0x188>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4d14      	ldr	r5, [pc, #80]	; (80031c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	442b      	add	r3, r5
 800317e:	3308      	adds	r3, #8
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	889b      	ldrh	r3, [r3, #4]
 8003184:	fb03 f301 	mul.w	r3, r3, r1
 8003188:	1ac3      	subs	r3, r0, r3
 800318a:	b299      	uxth	r1, r3
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <BSP_LCD_DisplayStringAt+0x188>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4403      	add	r3, r0
 800319c:	3308      	adds	r3, #8
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	889b      	ldrh	r3, [r3, #4]
 80031a2:	4299      	cmp	r1, r3
 80031a4:	bf2c      	ite	cs
 80031a6:	2301      	movcs	r3, #1
 80031a8:	2300      	movcc	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	4023      	ands	r3, r4
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1b7      	bne.n	8003124 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}
 80031be:	bf00      	nop
 80031c0:	200008f8 	.word	0x200008f8
 80031c4:	200008fc 	.word	0x200008fc

080031c8 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80031d4:	f7ff feae 	bl	8002f34 <BSP_LCD_GetFont>
 80031d8:	4603      	mov	r3, r0
 80031da:	88db      	ldrh	r3, [r3, #6]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	fb12 f303 	smulbb	r3, r2, r3
 80031e2:	b299      	uxth	r1, r3
 80031e4:	2303      	movs	r3, #3
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7ff ff25 	bl	8003038 <BSP_LCD_DisplayStringAt>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	4603      	mov	r3, r0
 8003200:	80fb      	strh	r3, [r7, #6]
 8003202:	460b      	mov	r3, r1
 8003204:	80bb      	strh	r3, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <BSP_LCD_DrawHLine+0xb0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a26      	ldr	r2, [pc, #152]	; (80032ac <BSP_LCD_DrawHLine+0xb4>)
 8003214:	2134      	movs	r1, #52	; 0x34
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3348      	adds	r3, #72	; 0x48
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d114      	bne.n	800324e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <BSP_LCD_DrawHLine+0xb0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <BSP_LCD_DrawHLine+0xb4>)
 800322a:	2134      	movs	r1, #52	; 0x34
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	681c      	ldr	r4, [r3, #0]
 8003236:	f7ff fd99 	bl	8002d6c <BSP_LCD_GetXSize>
 800323a:	4602      	mov	r2, r0
 800323c:	88bb      	ldrh	r3, [r7, #4]
 800323e:	fb03 f202 	mul.w	r2, r3, r2
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4413      	add	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4423      	add	r3, r4
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e013      	b.n	8003276 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <BSP_LCD_DrawHLine+0xb0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a16      	ldr	r2, [pc, #88]	; (80032ac <BSP_LCD_DrawHLine+0xb4>)
 8003254:	2134      	movs	r1, #52	; 0x34
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	335c      	adds	r3, #92	; 0x5c
 800325e:	681c      	ldr	r4, [r3, #0]
 8003260:	f7ff fd84 	bl	8002d6c <BSP_LCD_GetXSize>
 8003264:	4602      	mov	r2, r0
 8003266:	88bb      	ldrh	r3, [r7, #4]
 8003268:	fb03 f202 	mul.w	r2, r3, r2
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4423      	add	r3, r4
 8003274:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <BSP_LCD_DrawHLine+0xb0>)
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	887c      	ldrh	r4, [r7, #2]
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <BSP_LCD_DrawHLine+0xb0>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4d0b      	ldr	r5, [pc, #44]	; (80032b0 <BSP_LCD_DrawHLine+0xb8>)
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	442b      	add	r3, r5
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	2300      	movs	r3, #0
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2301      	movs	r3, #1
 8003298:	4622      	mov	r2, r4
 800329a:	f000 fcd5 	bl	8003c48 <LL_FillBuffer>
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200008f8 	.word	0x200008f8
 80032ac:	20008ad8 	.word	0x20008ad8
 80032b0:	200008fc 	.word	0x200008fc

080032b4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	80fb      	strh	r3, [r7, #6]
 80032be:	460b      	mov	r3, r1
 80032c0:	80bb      	strh	r3, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	f1c3 0303 	rsb	r3, r3, #3
 80032ce:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80032d8:	e0c7      	b.n	800346a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	4413      	add	r3, r2
 80032e2:	b298      	uxth	r0, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	88ba      	ldrh	r2, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	b299      	uxth	r1, r3
 80032ee:	4b64      	ldr	r3, [pc, #400]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4c64      	ldr	r4, [pc, #400]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4423      	add	r3, r4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	f000 f8c1 	bl	8003488 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	b29b      	uxth	r3, r3
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	b298      	uxth	r0, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	b29b      	uxth	r3, r3
 8003314:	88ba      	ldrh	r2, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	b299      	uxth	r1, r3
 800331a:	4b59      	ldr	r3, [pc, #356]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4c59      	ldr	r4, [pc, #356]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4423      	add	r3, r4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	f000 f8ab 	bl	8003488 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	b29a      	uxth	r2, r3
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	4413      	add	r3, r2
 800333a:	b298      	uxth	r0, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29b      	uxth	r3, r3
 8003340:	88ba      	ldrh	r2, [r7, #4]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	b299      	uxth	r1, r3
 8003346:	4b4e      	ldr	r3, [pc, #312]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4c4e      	ldr	r4, [pc, #312]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4423      	add	r3, r4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	f000 f895 	bl	8003488 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	b29b      	uxth	r3, r3
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	b298      	uxth	r0, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	b29b      	uxth	r3, r3
 800336c:	88ba      	ldrh	r2, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	b299      	uxth	r1, r3
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4c43      	ldr	r4, [pc, #268]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4423      	add	r3, r4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	f000 f87f 	bl	8003488 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	b29a      	uxth	r2, r3
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4413      	add	r3, r2
 8003392:	b298      	uxth	r0, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	b29a      	uxth	r2, r3
 8003398:	88bb      	ldrh	r3, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	b299      	uxth	r1, r3
 800339e:	4b38      	ldr	r3, [pc, #224]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4c38      	ldr	r4, [pc, #224]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4423      	add	r3, r4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f000 f869 	bl	8003488 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b298      	uxth	r0, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	88bb      	ldrh	r3, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	b299      	uxth	r1, r3
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4c2d      	ldr	r4, [pc, #180]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 80033d0:	4613      	mov	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4423      	add	r3, r4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	f000 f853 	bl	8003488 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	4413      	add	r3, r2
 80033ea:	b298      	uxth	r0, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	88bb      	ldrh	r3, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	b299      	uxth	r1, r3
 80033f6:	4b22      	ldr	r3, [pc, #136]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4c22      	ldr	r4, [pc, #136]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4423      	add	r3, r4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	f000 f83d 	bl	8003488 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	b29b      	uxth	r3, r3
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	b298      	uxth	r0, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	b29a      	uxth	r2, r3
 800341c:	88bb      	ldrh	r3, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	b299      	uxth	r1, r3
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <BSP_LCD_DrawCircle+0x1cc>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4c17      	ldr	r4, [pc, #92]	; (8003484 <BSP_LCD_DrawCircle+0x1d0>)
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4423      	add	r3, r4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	f000 f827 	bl	8003488 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da06      	bge.n	800344e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	009a      	lsls	r2, r3, #2
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4413      	add	r3, r2
 8003448:	3306      	adds	r3, #6
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	e00a      	b.n	8003464 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4413      	add	r3, r2
 800345a:	330a      	adds	r3, #10
 800345c:	617b      	str	r3, [r7, #20]
      current_y--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3b01      	subs	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	3301      	adds	r3, #1
 8003468:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	429a      	cmp	r2, r3
 8003470:	f67f af33 	bls.w	80032da <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd90      	pop	{r4, r7, pc}
 800347e:	bf00      	nop
 8003480:	200008f8 	.word	0x200008f8
 8003484:	200008fc 	.word	0x200008fc

08003488 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	603a      	str	r2, [r7, #0]
 8003492:	80fb      	strh	r3, [r7, #6]
 8003494:	460b      	mov	r3, r1
 8003496:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <BSP_LCD_DrawPixel+0x88>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <BSP_LCD_DrawPixel+0x8c>)
 800349e:	2134      	movs	r1, #52	; 0x34
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3348      	adds	r3, #72	; 0x48
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d116      	bne.n	80034dc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <BSP_LCD_DrawPixel+0x88>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a18      	ldr	r2, [pc, #96]	; (8003514 <BSP_LCD_DrawPixel+0x8c>)
 80034b4:	2134      	movs	r1, #52	; 0x34
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	335c      	adds	r3, #92	; 0x5c
 80034be:	681c      	ldr	r4, [r3, #0]
 80034c0:	88bd      	ldrh	r5, [r7, #4]
 80034c2:	f7ff fc53 	bl	8002d6c <BSP_LCD_GetXSize>
 80034c6:	4603      	mov	r3, r0
 80034c8:	fb03 f205 	mul.w	r2, r3, r5
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	4413      	add	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4423      	add	r3, r4
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80034da:	e015      	b.n	8003508 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <BSP_LCD_DrawPixel+0x88>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <BSP_LCD_DrawPixel+0x8c>)
 80034e2:	2134      	movs	r1, #52	; 0x34
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	335c      	adds	r3, #92	; 0x5c
 80034ec:	681c      	ldr	r4, [r3, #0]
 80034ee:	88bd      	ldrh	r5, [r7, #4]
 80034f0:	f7ff fc3c 	bl	8002d6c <BSP_LCD_GetXSize>
 80034f4:	4603      	mov	r3, r0
 80034f6:	fb03 f205 	mul.w	r2, r3, r5
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4423      	add	r3, r4
 8003502:	461a      	mov	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bdb0      	pop	{r4, r5, r7, pc}
 8003510:	200008f8 	.word	0x200008f8
 8003514:	20008ad8 	.word	0x20008ad8

08003518 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b08b      	sub	sp, #44	; 0x2c
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	330a      	adds	r3, #10
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	330b      	adds	r3, #11
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	330c      	adds	r3, #12
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	441a      	add	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	330d      	adds	r3, #13
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	061b      	lsls	r3, r3, #24
 800355c:	4413      	add	r3, r2
 800355e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3312      	adds	r3, #18
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3313      	adds	r3, #19
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	441a      	add	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3314      	adds	r3, #20
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3315      	adds	r3, #21
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	4413      	add	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3316      	adds	r3, #22
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3317      	adds	r3, #23
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3318      	adds	r3, #24
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3319      	adds	r3, #25
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	4413      	add	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	331c      	adds	r3, #28
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	331d      	adds	r3, #29
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	4413      	add	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <BSP_LCD_DrawBitmap+0x15c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <BSP_LCD_DrawBitmap+0x160>)
 80035ca:	2134      	movs	r1, #52	; 0x34
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	335c      	adds	r3, #92	; 0x5c
 80035d4:	681c      	ldr	r4, [r3, #0]
 80035d6:	f7ff fbc9 	bl	8002d6c <BSP_LCD_GetXSize>
 80035da:	4602      	mov	r2, r0
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	fb03 f202 	mul.w	r2, r3, r2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4423      	add	r3, r4
 80035ea:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	3b20      	subs	r3, #32
 80035f0:	2b07      	cmp	r3, #7
 80035f2:	d802      	bhi.n	80035fa <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	e008      	b.n	800360c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	3b10      	subs	r3, #16
 80035fe:	2b07      	cmp	r3, #7
 8003600:	d802      	bhi.n	8003608 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003602:	2302      	movs	r3, #2
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e001      	b.n	800360c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003608:	2301      	movs	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3b01      	subs	r3, #1
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	08d2      	lsrs	r2, r2, #3
 800361a:	fb02 f203 	mul.w	r2, r2, r3
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	4413      	add	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
 800362c:	e018      	b.n	8003660 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800362e:	6a39      	ldr	r1, [r7, #32]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fb53 	bl	8003ce0 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800363a:	f7ff fb97 	bl	8002d6c <BSP_LCD_GetXSize>
 800363e:	4603      	mov	r3, r0
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	6a3a      	ldr	r2, [r7, #32]
 8003644:	4413      	add	r3, r2
 8003646:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	08db      	lsrs	r3, r3, #3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	425b      	negs	r3, r3
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	3301      	adds	r3, #1
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
 8003660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	d3e2      	bcc.n	800362e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	372c      	adds	r7, #44	; 0x2c
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	200008f8 	.word	0x200008f8
 8003678:	20008ad8 	.word	0x20008ad8

0800367c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af02      	add	r7, sp, #8
 8003684:	4604      	mov	r4, r0
 8003686:	4608      	mov	r0, r1
 8003688:	4611      	mov	r1, r2
 800368a:	461a      	mov	r2, r3
 800368c:	4623      	mov	r3, r4
 800368e:	80fb      	strh	r3, [r7, #6]
 8003690:	4603      	mov	r3, r0
 8003692:	80bb      	strh	r3, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80036a0:	4b30      	ldr	r3, [pc, #192]	; (8003764 <BSP_LCD_FillRect+0xe8>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4930      	ldr	r1, [pc, #192]	; (8003768 <BSP_LCD_FillRect+0xec>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fbf2 	bl	8002e9c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <BSP_LCD_FillRect+0xe8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2b      	ldr	r2, [pc, #172]	; (800376c <BSP_LCD_FillRect+0xf0>)
 80036be:	2134      	movs	r1, #52	; 0x34
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3348      	adds	r3, #72	; 0x48
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d114      	bne.n	80036f8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <BSP_LCD_FillRect+0xe8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <BSP_LCD_FillRect+0xf0>)
 80036d4:	2134      	movs	r1, #52	; 0x34
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	335c      	adds	r3, #92	; 0x5c
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	f7ff fb44 	bl	8002d6c <BSP_LCD_GetXSize>
 80036e4:	4602      	mov	r2, r0
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	fb03 f202 	mul.w	r2, r3, r2
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4423      	add	r3, r4
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e013      	b.n	8003720 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <BSP_LCD_FillRect+0xe8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <BSP_LCD_FillRect+0xf0>)
 80036fe:	2134      	movs	r1, #52	; 0x34
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	335c      	adds	r3, #92	; 0x5c
 8003708:	681c      	ldr	r4, [r3, #0]
 800370a:	f7ff fb2f 	bl	8002d6c <BSP_LCD_GetXSize>
 800370e:	4602      	mov	r2, r0
 8003710:	88bb      	ldrh	r3, [r7, #4]
 8003712:	fb03 f202 	mul.w	r2, r3, r2
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4423      	add	r3, r4
 800371e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <BSP_LCD_FillRect+0xe8>)
 8003722:	681c      	ldr	r4, [r3, #0]
 8003724:	68fd      	ldr	r5, [r7, #12]
 8003726:	887e      	ldrh	r6, [r7, #2]
 8003728:	f8b7 8000 	ldrh.w	r8, [r7]
 800372c:	f7ff fb1e 	bl	8002d6c <BSP_LCD_GetXSize>
 8003730:	4602      	mov	r2, r0
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	1ad1      	subs	r1, r2, r3
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <BSP_LCD_FillRect+0xe8>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	480b      	ldr	r0, [pc, #44]	; (8003768 <BSP_LCD_FillRect+0xec>)
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4403      	add	r3, r0
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	9100      	str	r1, [sp, #0]
 800374c:	4643      	mov	r3, r8
 800374e:	4632      	mov	r2, r6
 8003750:	4629      	mov	r1, r5
 8003752:	4620      	mov	r0, r4
 8003754:	f000 fa78 	bl	8003c48 <LL_FillBuffer>
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003762:	bf00      	nop
 8003764:	200008f8 	.word	0x200008f8
 8003768:	200008fc 	.word	0x200008fc
 800376c:	20008ad8 	.word	0x20008ad8

08003770 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	80fb      	strh	r3, [r7, #6]
 800377a:	460b      	mov	r3, r1
 800377c:	80bb      	strh	r3, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	f1c3 0303 	rsb	r3, r3, #3
 800378a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003794:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <BSP_LCD_FillCircle+0x138>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4944      	ldr	r1, [pc, #272]	; (80038ac <BSP_LCD_FillCircle+0x13c>)
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fb78 	bl	8002e9c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80037ac:	e061      	b.n	8003872 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d021      	beq.n	80037f8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	b298      	uxth	r0, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	88bb      	ldrh	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	b299      	uxth	r1, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	f7ff fd11 	bl	80031f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	b298      	uxth	r0, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	88ba      	ldrh	r2, [r7, #4]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	b299      	uxth	r1, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7ff fd00 	bl	80031f8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d021      	beq.n	8003842 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	b29b      	uxth	r3, r3
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	b298      	uxth	r0, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	b29b      	uxth	r3, r3
 800380c:	88ba      	ldrh	r2, [r7, #4]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	b299      	uxth	r1, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	b29b      	uxth	r3, r3
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	b29b      	uxth	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	f7ff fcec 	bl	80031f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	b29b      	uxth	r3, r3
 8003824:	88fa      	ldrh	r2, [r7, #6]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	b298      	uxth	r0, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	b29a      	uxth	r2, r3
 800382e:	88bb      	ldrh	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	b299      	uxth	r1, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	b29b      	uxth	r3, r3
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	f7ff fcdb 	bl	80031f8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da06      	bge.n	8003856 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	009a      	lsls	r2, r3, #2
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	4413      	add	r3, r2
 8003850:	3306      	adds	r3, #6
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e00a      	b.n	800386c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	009a      	lsls	r2, r3, #2
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4413      	add	r3, r2
 8003862:	330a      	adds	r3, #10
 8003864:	617b      	str	r3, [r7, #20]
      current_y--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3b01      	subs	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	3301      	adds	r3, #1
 8003870:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	429a      	cmp	r2, r3
 8003878:	d999      	bls.n	80037ae <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <BSP_LCD_FillCircle+0x138>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	490b      	ldr	r1, [pc, #44]	; (80038ac <BSP_LCD_FillCircle+0x13c>)
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fb05 	bl	8002e9c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	88b9      	ldrh	r1, [r7, #4]
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fd0b 	bl	80032b4 <BSP_LCD_DrawCircle>
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200008f8 	.word	0x200008f8
 80038ac:	200008fc 	.word	0x200008fc

080038b0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <BSP_LCD_DisplayOn+0x30>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <BSP_LCD_DisplayOn+0x30>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80038c4:	2201      	movs	r2, #1
 80038c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038ca:	4806      	ldr	r0, [pc, #24]	; (80038e4 <BSP_LCD_DisplayOn+0x34>)
 80038cc:	f003 fb74 	bl	8006fb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80038d0:	2201      	movs	r2, #1
 80038d2:	2108      	movs	r1, #8
 80038d4:	4804      	ldr	r0, [pc, #16]	; (80038e8 <BSP_LCD_DisplayOn+0x38>)
 80038d6:	f003 fb6f 	bl	8006fb8 <HAL_GPIO_WritePin>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20008ad8 	.word	0x20008ad8
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40022800 	.word	0x40022800

080038ec <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b090      	sub	sp, #64	; 0x40
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80038f6:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	4a63      	ldr	r2, [pc, #396]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80038fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a5d      	ldr	r2, [pc, #372]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003926:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 800392c:	f043 0310 	orr.w	r3, r3, #16
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b55      	ldr	r3, [pc, #340]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800393e:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a4b      	ldr	r2, [pc, #300]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a45      	ldr	r2, [pc, #276]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 800398c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a33      	ldr	r2, [pc, #204]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80039bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <BSP_LCD_MspInit+0x19c>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80039ce:	2310      	movs	r3, #16
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80039da:	2302      	movs	r3, #2
 80039dc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80039de:	230e      	movs	r3, #14
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80039e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e6:	4619      	mov	r1, r3
 80039e8:	4828      	ldr	r0, [pc, #160]	; (8003a8c <BSP_LCD_MspInit+0x1a0>)
 80039ea:	f003 f815 	bl	8006a18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80039ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80039f8:	2309      	movs	r3, #9
 80039fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80039fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a00:	4619      	mov	r1, r3
 8003a02:	4823      	ldr	r0, [pc, #140]	; (8003a90 <BSP_LCD_MspInit+0x1a4>)
 8003a04:	f003 f808 	bl	8006a18 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003a08:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003a12:	230e      	movs	r3, #14
 8003a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	481d      	ldr	r0, [pc, #116]	; (8003a94 <BSP_LCD_MspInit+0x1a8>)
 8003a1e:	f002 fffb 	bl	8006a18 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003a22:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003a2c:	230e      	movs	r3, #14
 8003a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a34:	4619      	mov	r1, r3
 8003a36:	4818      	ldr	r0, [pc, #96]	; (8003a98 <BSP_LCD_MspInit+0x1ac>)
 8003a38:	f002 ffee 	bl	8006a18 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003a3c:	23f7      	movs	r3, #247	; 0xf7
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003a44:	230e      	movs	r3, #14
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4813      	ldr	r0, [pc, #76]	; (8003a9c <BSP_LCD_MspInit+0x1b0>)
 8003a50:	f002 ffe2 	bl	8006a18 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a62:	4619      	mov	r1, r3
 8003a64:	480b      	ldr	r0, [pc, #44]	; (8003a94 <BSP_LCD_MspInit+0x1a8>)
 8003a66:	f002 ffd7 	bl	8006a18 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a76:	4619      	mov	r1, r3
 8003a78:	4808      	ldr	r0, [pc, #32]	; (8003a9c <BSP_LCD_MspInit+0x1b0>)
 8003a7a:	f002 ffcd 	bl	8006a18 <HAL_GPIO_Init>
}
 8003a7e:	bf00      	nop
 8003a80:	3740      	adds	r7, #64	; 0x40
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40021800 	.word	0x40021800
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022400 	.word	0x40022400
 8003a9c:	40022800 	.word	0x40022800

08003aa0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <BSP_LCD_ClockConfig+0x34>)
 8003aac:	2208      	movs	r2, #8
 8003aae:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <BSP_LCD_ClockConfig+0x34>)
 8003ab2:	22c0      	movs	r2, #192	; 0xc0
 8003ab4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <BSP_LCD_ClockConfig+0x34>)
 8003ab8:	2205      	movs	r2, #5
 8003aba:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <BSP_LCD_ClockConfig+0x34>)
 8003abe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003ac4:	4803      	ldr	r0, [pc, #12]	; (8003ad4 <BSP_LCD_ClockConfig+0x34>)
 8003ac6:	f005 f969 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000914 	.word	0x20000914

08003ad8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	603a      	str	r2, [r7, #0]
 8003ae2:	80fb      	strh	r3, [r7, #6]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <DrawChar+0x168>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4953      	ldr	r1, [pc, #332]	; (8003c44 <DrawChar+0x16c>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	3308      	adds	r3, #8
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	88db      	ldrh	r3, [r3, #6]
 8003b06:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003b08:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <DrawChar+0x168>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	494d      	ldr	r1, [pc, #308]	; (8003c44 <DrawChar+0x16c>)
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3308      	adds	r3, #8
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	889b      	ldrh	r3, [r3, #4]
 8003b1e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003b20:	8a3b      	ldrh	r3, [r7, #16]
 8003b22:	3307      	adds	r3, #7
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da00      	bge.n	8003b2a <DrawChar+0x52>
 8003b28:	3307      	adds	r3, #7
 8003b2a:	10db      	asrs	r3, r3, #3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	8a3b      	ldrh	r3, [r7, #16]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e076      	b.n	8003c2e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003b40:	8a3b      	ldrh	r3, [r7, #16]
 8003b42:	3307      	adds	r3, #7
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da00      	bge.n	8003b4a <DrawChar+0x72>
 8003b48:	3307      	adds	r3, #7
 8003b4a:	10db      	asrs	r3, r3, #3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fb03 f302 	mul.w	r3, r3, r2
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003b5a:	8a3b      	ldrh	r3, [r7, #16]
 8003b5c:	3307      	adds	r3, #7
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da00      	bge.n	8003b64 <DrawChar+0x8c>
 8003b62:	3307      	adds	r3, #7
 8003b64:	10db      	asrs	r3, r3, #3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d002      	beq.n	8003b70 <DrawChar+0x98>
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d004      	beq.n	8003b78 <DrawChar+0xa0>
 8003b6e:	e00c      	b.n	8003b8a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]
      break;
 8003b76:	e016      	b.n	8003ba6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	3201      	adds	r2, #1
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
      break;
 8003b88:	e00d      	b.n	8003ba6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	041a      	lsls	r2, r3, #16
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	3301      	adds	r3, #1
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	3202      	adds	r2, #2
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
      break;
 8003ba4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e036      	b.n	8003c1a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003bac:	8a3a      	ldrh	r2, [r7, #16]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad2      	subs	r2, r2, r3
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	2201      	movs	r2, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d012      	beq.n	8003bee <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	4413      	add	r3, r2
 8003bd0:	b298      	uxth	r0, r3
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <DrawChar+0x168>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	491b      	ldr	r1, [pc, #108]	; (8003c44 <DrawChar+0x16c>)
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	88bb      	ldrh	r3, [r7, #4]
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7ff fc4e 	bl	8003488 <BSP_LCD_DrawPixel>
 8003bec:	e012      	b.n	8003c14 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b298      	uxth	r0, r3
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <DrawChar+0x168>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4911      	ldr	r1, [pc, #68]	; (8003c44 <DrawChar+0x16c>)
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	88bb      	ldrh	r3, [r7, #4]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7ff fc3a 	bl	8003488 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	3301      	adds	r3, #1
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	8a3b      	ldrh	r3, [r7, #16]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3c4      	bcc.n	8003bac <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003c22:	88bb      	ldrh	r3, [r7, #4]
 8003c24:	3301      	adds	r3, #1
 8003c26:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	8a7b      	ldrh	r3, [r7, #18]
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d384      	bcc.n	8003b40 <DrawChar+0x68>
  }
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	200008f8 	.word	0x200008f8
 8003c44:	200008fc 	.word	0x200008fc

08003c48 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003c56:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003c58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c5c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <LL_FillBuffer+0x8c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <LL_FillBuffer+0x90>)
 8003c64:	2134      	movs	r1, #52	; 0x34
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3348      	adds	r3, #72	; 0x48
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d103      	bne.n	8003c7c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003c74:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003c76:	2202      	movs	r2, #2
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	e002      	b.n	8003c82 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003c8a:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <LL_FillBuffer+0x94>)
 8003c8c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003c8e:	4810      	ldr	r0, [pc, #64]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003c90:	f002 fb26 	bl	80062e0 <HAL_DMA2D_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d115      	bne.n	8003cc6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	480c      	ldr	r0, [pc, #48]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003c9e:	f002 fd8d 	bl	80067bc <HAL_DMA2D_ConfigLayer>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10e      	bne.n	8003cc6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69f9      	ldr	r1, [r7, #28]
 8003cb2:	4807      	ldr	r0, [pc, #28]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003cb4:	f002 fb5e 	bl	8006374 <HAL_DMA2D_Start>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003cbe:	210a      	movs	r1, #10
 8003cc0:	4803      	ldr	r0, [pc, #12]	; (8003cd0 <LL_FillBuffer+0x88>)
 8003cc2:	f002 fb82 	bl	80063ca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200008b8 	.word	0x200008b8
 8003cd4:	200008f8 	.word	0x200008f8
 8003cd8:	20008ad8 	.word	0x20008ad8
 8003cdc:	4002b000 	.word	0x4002b000

08003ce0 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003cf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cf4:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003d08:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d0a:	22ff      	movs	r2, #255	; 0xff
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003d0e:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003d14:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d1c:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <LL_ConvertLineToARGB8888+0x84>)
 8003d1e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003d20:	480f      	ldr	r0, [pc, #60]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d22:	f002 fadd 	bl	80062e0 <HAL_DMA2D_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d115      	bne.n	8003d58 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	480c      	ldr	r0, [pc, #48]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d30:	f002 fd44 	bl	80067bc <HAL_DMA2D_ConfigLayer>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10e      	bne.n	8003d58 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	2301      	movs	r3, #1
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4806      	ldr	r0, [pc, #24]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d46:	f002 fb15 	bl	8006374 <HAL_DMA2D_Start>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003d50:	210a      	movs	r1, #10
 8003d52:	4803      	ldr	r0, [pc, #12]	; (8003d60 <LL_ConvertLineToARGB8888+0x80>)
 8003d54:	f002 fb39 	bl	80063ca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200008b8 	.word	0x200008b8
 8003d64:	4002b000 	.word	0x4002b000

08003d68 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003d6e:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <BSP_SDRAM_Init+0xb0>)
 8003d70:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003d74:	2202      	movs	r2, #2
 8003d76:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003d80:	2204      	movs	r2, #4
 8003d82:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003d86:	2207      	movs	r2, #7
 8003d88:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003d92:	2202      	movs	r2, #2
 8003d94:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003d98:	2202      	movs	r2, #2
 8003d9a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003daa:	2204      	movs	r2, #4
 8003dac:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003db0:	2210      	movs	r2, #16
 8003db2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003db4:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003db6:	2240      	movs	r2, #64	; 0x40
 8003db8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dce:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003dde:	2100      	movs	r1, #0
 8003de0:	480c      	ldr	r0, [pc, #48]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003de2:	f000 f87f 	bl	8003ee4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003de6:	490d      	ldr	r1, [pc, #52]	; (8003e1c <BSP_SDRAM_Init+0xb4>)
 8003de8:	480a      	ldr	r0, [pc, #40]	; (8003e14 <BSP_SDRAM_Init+0xac>)
 8003dea:	f006 f8eb 	bl	8009fc4 <HAL_SDRAM_Init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <BSP_SDRAM_Init+0xb8>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e002      	b.n	8003e02 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <BSP_SDRAM_Init+0xb8>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003e02:	f240 6003 	movw	r0, #1539	; 0x603
 8003e06:	f000 f80d 	bl	8003e24 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <BSP_SDRAM_Init+0xb8>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20008b80 	.word	0x20008b80
 8003e18:	a0000140 	.word	0xa0000140
 8003e1c:	20000998 	.word	0x20000998
 8003e20:	2000003c 	.word	0x2000003c

08003e24 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e38:	2210      	movs	r2, #16
 8003e3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e4c:	4923      	ldr	r1, [pc, #140]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e4e:	4824      	ldr	r0, [pc, #144]	; (8003ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e50:	f006 f8ec 	bl	800a02c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e54:	2001      	movs	r0, #1
 8003e56:	f001 faa5 	bl	80053a4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e62:	2210      	movs	r2, #16
 8003e64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e76:	4919      	ldr	r1, [pc, #100]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e78:	4819      	ldr	r0, [pc, #100]	; (8003ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e7a:	f006 f8d7 	bl	800a02c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e80:	2203      	movs	r2, #3
 8003e82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e86:	2210      	movs	r2, #16
 8003e88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e90:	4b12      	ldr	r3, [pc, #72]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9a:	4910      	ldr	r1, [pc, #64]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e9c:	4810      	ldr	r0, [pc, #64]	; (8003ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e9e:	f006 f8c5 	bl	800a02c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003ea2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003ea6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eaa:	2204      	movs	r2, #4
 8003eac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a07      	ldr	r2, [pc, #28]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ebe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ec4:	4905      	ldr	r1, [pc, #20]	; (8003edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ec6:	4806      	ldr	r0, [pc, #24]	; (8003ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ec8:	f006 f8b0 	bl	800a02c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4804      	ldr	r0, [pc, #16]	; (8003ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ed0:	f006 f8e1 	bl	800a096 <HAL_SDRAM_ProgramRefreshRate>
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200009b4 	.word	0x200009b4
 8003ee0:	20008b80 	.word	0x20008b80

08003ee4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b090      	sub	sp, #64	; 0x40
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4a6f      	ldr	r2, [pc, #444]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6393      	str	r3, [r2, #56]	; 0x38
 8003efa:	4b6d      	ldr	r3, [pc, #436]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003f06:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a69      	ldr	r2, [pc, #420]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f1e:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a63      	ldr	r2, [pc, #396]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f36:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a5d      	ldr	r2, [pc, #372]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f3c:	f043 0308 	orr.w	r3, r3, #8
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30
 8003f42:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f4e:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a57      	ldr	r2, [pc, #348]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f54:	f043 0310 	orr.w	r3, r3, #16
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f66:	4b52      	ldr	r3, [pc, #328]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a51      	ldr	r2, [pc, #324]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f6c:	f043 0320 	orr.w	r3, r3, #32
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f7e:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a4b      	ldr	r2, [pc, #300]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f96:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a45      	ldr	r2, [pc, #276]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <BSP_SDRAM_MspInit+0x1cc>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003fba:	230c      	movs	r3, #12
 8003fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	483a      	ldr	r0, [pc, #232]	; (80040b4 <BSP_SDRAM_MspInit+0x1d0>)
 8003fca:	f002 fd25 	bl	8006a18 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003fce:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4837      	ldr	r0, [pc, #220]	; (80040b8 <BSP_SDRAM_MspInit+0x1d4>)
 8003fdc:	f002 fd1c 	bl	8006a18 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003fe0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fea:	4619      	mov	r1, r3
 8003fec:	4833      	ldr	r0, [pc, #204]	; (80040bc <BSP_SDRAM_MspInit+0x1d8>)
 8003fee:	f002 fd13 	bl	8006a18 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003ff2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4830      	ldr	r0, [pc, #192]	; (80040c0 <BSP_SDRAM_MspInit+0x1dc>)
 8004000:	f002 fd0a 	bl	8006a18 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004004:	f248 1333 	movw	r3, #33075	; 0x8133
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800400a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800400e:	4619      	mov	r1, r3
 8004010:	482c      	ldr	r0, [pc, #176]	; (80040c4 <BSP_SDRAM_MspInit+0x1e0>)
 8004012:	f002 fd01 	bl	8006a18 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004016:	2328      	movs	r3, #40	; 0x28
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800401a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800401e:	4619      	mov	r1, r3
 8004020:	4829      	ldr	r0, [pc, #164]	; (80040c8 <BSP_SDRAM_MspInit+0x1e4>)
 8004022:	f002 fcf9 	bl	8006a18 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004026:	4b29      	ldr	r3, [pc, #164]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004028:	2200      	movs	r2, #0
 800402a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004032:	4b26      	ldr	r3, [pc, #152]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004038:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 800403c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004040:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004048:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 800404c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004050:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004054:	2200      	movs	r2, #0
 8004056:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004058:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 800405a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800405e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004062:	2200      	movs	r2, #0
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004068:	2203      	movs	r2, #3
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 800406e:	2200      	movs	r2, #0
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 800407a:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <BSP_SDRAM_MspInit+0x1ec>)
 800407c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
 8004084:	4a11      	ldr	r2, [pc, #68]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800408a:	4810      	ldr	r0, [pc, #64]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 800408c:	f002 f818 	bl	80060c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004090:	480e      	ldr	r0, [pc, #56]	; (80040cc <BSP_SDRAM_MspInit+0x1e8>)
 8004092:	f001 ff67 	bl	8005f64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004096:	2200      	movs	r2, #0
 8004098:	210f      	movs	r1, #15
 800409a:	2038      	movs	r0, #56	; 0x38
 800409c:	f001 fe58 	bl	8005d50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80040a0:	2038      	movs	r0, #56	; 0x38
 80040a2:	f001 fe71 	bl	8005d88 <HAL_NVIC_EnableIRQ>
}
 80040a6:	bf00      	nop
 80040a8:	3740      	adds	r7, #64	; 0x40
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40021400 	.word	0x40021400
 80040c4:	40021800 	.word	0x40021800
 80040c8:	40021c00 	.word	0x40021c00
 80040cc:	200009c4 	.word	0x200009c4
 80040d0:	40026410 	.word	0x40026410

080040d4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	460a      	mov	r2, r1
 80040de:	80fb      	strh	r3, [r7, #6]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <BSP_TS_Init+0x68>)
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80040ee:	4a14      	ldr	r2, [pc, #80]	; (8004140 <BSP_TS_Init+0x6c>)
 80040f0:	88bb      	ldrh	r3, [r7, #4]
 80040f2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <BSP_TS_Init+0x70>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2070      	movs	r0, #112	; 0x70
 80040fa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <BSP_TS_Init+0x70>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2070      	movs	r0, #112	; 0x70
 8004102:	4798      	blx	r3
 8004104:	4603      	mov	r3, r0
 8004106:	2b51      	cmp	r3, #81	; 0x51
 8004108:	d111      	bne.n	800412e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <BSP_TS_Init+0x74>)
 800410c:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <BSP_TS_Init+0x70>)
 800410e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <BSP_TS_Init+0x78>)
 8004112:	2270      	movs	r2, #112	; 0x70
 8004114:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <BSP_TS_Init+0x7c>)
 8004118:	2208      	movs	r2, #8
 800411a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <BSP_TS_Init+0x74>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <BSP_TS_Init+0x78>)
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	b292      	uxth	r2, r2
 8004128:	4610      	mov	r0, r2
 800412a:	4798      	blx	r3
 800412c:	e001      	b.n	8004132 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800412e:	2303      	movs	r3, #3
 8004130:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000a28 	.word	0x20000a28
 8004140:	20000a2a 	.word	0x20000a2a
 8004144:	20000000 	.word	0x20000000
 8004148:	20000a24 	.word	0x20000a24
 800414c:	20000a2d 	.word	0x20000a2d
 8004150:	20000a2c 	.word	0x20000a2c

08004154 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b097      	sub	sp, #92	; 0x5c
 8004158:	af02      	add	r7, sp, #8
 800415a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800416e:	4b97      	ldr	r3, [pc, #604]	; (80043cc <BSP_TS_GetState+0x278>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4a96      	ldr	r2, [pc, #600]	; (80043d0 <BSP_TS_GetState+0x27c>)
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	b292      	uxth	r2, r2
 800417a:	4610      	mov	r0, r2
 800417c:	4798      	blx	r3
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 81a8 	beq.w	80044e0 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004190:	2300      	movs	r3, #0
 8004192:	64bb      	str	r3, [r7, #72]	; 0x48
 8004194:	e197      	b.n	80044c6 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004196:	4b8d      	ldr	r3, [pc, #564]	; (80043cc <BSP_TS_GetState+0x278>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	4a8c      	ldr	r2, [pc, #560]	; (80043d0 <BSP_TS_GetState+0x27c>)
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	b290      	uxth	r0, r2
 80041a2:	f107 0120 	add.w	r1, r7, #32
 80041a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041a8:	0052      	lsls	r2, r2, #1
 80041aa:	188c      	adds	r4, r1, r2
 80041ac:	f107 0114 	add.w	r1, r7, #20
 80041b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b2:	0052      	lsls	r2, r2, #1
 80041b4:	440a      	add	r2, r1
 80041b6:	4621      	mov	r1, r4
 80041b8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80041ba:	4b86      	ldr	r3, [pc, #536]	; (80043d4 <BSP_TS_GetState+0x280>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d11b      	bne.n	80041fa <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80041c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80041ca:	4413      	add	r3, r2
 80041cc:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80041d8:	440b      	add	r3, r1
 80041da:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80041e6:	4413      	add	r3, r2
 80041e8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80041ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80041f4:	440b      	add	r3, r1
 80041f6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80041fa:	4b76      	ldr	r3, [pc, #472]	; (80043d4 <BSP_TS_GetState+0x280>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800420e:	4413      	add	r3, r2
 8004210:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004214:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004218:	b29a      	uxth	r2, r3
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004222:	440b      	add	r3, r1
 8004224:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004228:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <BSP_TS_GetState+0x280>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800423c:	4413      	add	r3, r2
 800423e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004242:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004246:	b29a      	uxth	r2, r3
 8004248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004250:	440b      	add	r3, r1
 8004252:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <BSP_TS_GetState+0x280>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01b      	beq.n	800429a <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800426a:	4413      	add	r3, r2
 800426c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004278:	440b      	add	r3, r1
 800427a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800427e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004286:	4413      	add	r3, r2
 8004288:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800428c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004294:	440b      	add	r3, r1
 8004296:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800429a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80042a2:	4413      	add	r3, r2
 80042a4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80042a8:	4619      	mov	r1, r3
 80042aa:	4a4b      	ldr	r2, [pc, #300]	; (80043d8 <BSP_TS_GetState+0x284>)
 80042ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b2:	4299      	cmp	r1, r3
 80042b4:	d90e      	bls.n	80042d4 <BSP_TS_GetState+0x180>
 80042b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80042be:	4413      	add	r3, r2
 80042c0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80042c4:	4944      	ldr	r1, [pc, #272]	; (80043d8 <BSP_TS_GetState+0x284>)
 80042c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	e00d      	b.n	80042f0 <BSP_TS_GetState+0x19c>
 80042d4:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <BSP_TS_GetState+0x284>)
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80042e6:	440b      	add	r3, r1
 80042e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80042f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80042fc:	4413      	add	r3, r2
 80042fe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004302:	4619      	mov	r1, r3
 8004304:	4a35      	ldr	r2, [pc, #212]	; (80043dc <BSP_TS_GetState+0x288>)
 8004306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430c:	4299      	cmp	r1, r3
 800430e:	d90e      	bls.n	800432e <BSP_TS_GetState+0x1da>
 8004310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004318:	4413      	add	r3, r2
 800431a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800431e:	492f      	ldr	r1, [pc, #188]	; (80043dc <BSP_TS_GetState+0x288>)
 8004320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004322:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004326:	b29b      	uxth	r3, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	e00d      	b.n	800434a <BSP_TS_GetState+0x1f6>
 800432e:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <BSP_TS_GetState+0x288>)
 8004330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004336:	b29a      	uxth	r2, r3
 8004338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004340:	440b      	add	r3, r1
 8004342:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	b29b      	uxth	r3, r3
 800434a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800434e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004352:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004356:	4413      	add	r3, r2
 8004358:	2b05      	cmp	r3, #5
 800435a:	dd17      	ble.n	800438c <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800435c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004364:	4413      	add	r3, r2
 8004366:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800436a:	4619      	mov	r1, r3
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <BSP_TS_GetState+0x284>)
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800437c:	4413      	add	r3, r2
 800437e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004382:	4619      	mov	r1, r3
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <BSP_TS_GetState+0x288>)
 8004386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <BSP_TS_GetState+0x27c>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b70      	cmp	r3, #112	; 0x70
 8004392:	d125      	bne.n	80043e0 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800439c:	4413      	add	r3, r2
 800439e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	460a      	mov	r2, r1
 80043ac:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80043ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80043b6:	4413      	add	r3, r2
 80043b8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	3304      	adds	r3, #4
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	460a      	mov	r2, r1
 80043c8:	809a      	strh	r2, [r3, #4]
 80043ca:	e02c      	b.n	8004426 <BSP_TS_GetState+0x2d2>
 80043cc:	20000a24 	.word	0x20000a24
 80043d0:	20000a2d 	.word	0x20000a2d
 80043d4:	20000a2c 	.word	0x20000a2c
 80043d8:	20000a30 	.word	0x20000a30
 80043dc:	20000a44 	.word	0x20000a44
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <BSP_TS_GetState+0x398>)
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <BSP_TS_GetState+0x39c>)
 80043e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	fb03 f301 	mul.w	r3, r3, r1
 80043f2:	0b1b      	lsrs	r3, r3, #12
 80043f4:	b299      	uxth	r1, r3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4413      	add	r3, r2
 80043fe:	460a      	mov	r2, r1
 8004400:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004402:	4b3c      	ldr	r3, [pc, #240]	; (80044f4 <BSP_TS_GetState+0x3a0>)
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	4619      	mov	r1, r3
 8004408:	4a3b      	ldr	r2, [pc, #236]	; (80044f8 <BSP_TS_GetState+0x3a4>)
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004410:	fb03 f301 	mul.w	r3, r3, r1
 8004414:	0b1b      	lsrs	r3, r3, #12
 8004416:	b299      	uxth	r1, r3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441c:	3304      	adds	r3, #4
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	460a      	mov	r2, r1
 8004424:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004426:	4b35      	ldr	r3, [pc, #212]	; (80044fc <BSP_TS_GetState+0x3a8>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b298      	uxth	r0, r3
 800442c:	f107 010c 	add.w	r1, r7, #12
 8004430:	f107 0210 	add.w	r2, r7, #16
 8004434:	f107 0308 	add.w	r3, r7, #8
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	460b      	mov	r3, r1
 800443c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800443e:	f7fc fab9 	bl	80009b4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	b2d9      	uxtb	r1, r3
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444a:	4413      	add	r3, r2
 800444c:	3316      	adds	r3, #22
 800444e:	460a      	mov	r2, r1
 8004450:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	b2d9      	uxtb	r1, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445a:	4413      	add	r3, r2
 800445c:	3320      	adds	r3, #32
 800445e:	460a      	mov	r2, r1
 8004460:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d827      	bhi.n	80044b8 <BSP_TS_GetState+0x364>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <BSP_TS_GetState+0x31c>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	0800448f 	.word	0x0800448f
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044ab 	.word	0x080044ab
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004484:	4413      	add	r3, r2
 8004486:	331b      	adds	r3, #27
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
          break;
 800448c:	e018      	b.n	80044c0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004492:	4413      	add	r3, r2
 8004494:	331b      	adds	r3, #27
 8004496:	2202      	movs	r2, #2
 8004498:	701a      	strb	r2, [r3, #0]
          break;
 800449a:	e011      	b.n	80044c0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a0:	4413      	add	r3, r2
 80044a2:	331b      	adds	r3, #27
 80044a4:	2203      	movs	r2, #3
 80044a6:	701a      	strb	r2, [r3, #0]
          break;
 80044a8:	e00a      	b.n	80044c0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ae:	4413      	add	r3, r2
 80044b0:	331b      	adds	r3, #27
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
          break;
 80044b6:	e003      	b.n	80044c0 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80044be:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80044c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c2:	3301      	adds	r3, #1
 80044c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ce:	4293      	cmp	r3, r2
 80044d0:	f4ff ae61 	bcc.w	8004196 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f813 	bl	8004500 <BSP_TS_Get_GestureId>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80044e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3754      	adds	r7, #84	; 0x54
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd90      	pop	{r4, r7, pc}
 80044ec:	20000a28 	.word	0x20000a28
 80044f0:	20000a30 	.word	0x20000a30
 80044f4:	20000a2a 	.word	0x20000a2a
 80044f8:	20000a44 	.word	0x20000a44
 80044fc:	20000a2d 	.word	0x20000a2d

08004500 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <BSP_TS_Get_GestureId+0x100>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f107 0208 	add.w	r2, r7, #8
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f7fc fa30 	bl	8000982 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b49      	cmp	r3, #73	; 0x49
 8004526:	d05e      	beq.n	80045e6 <BSP_TS_Get_GestureId+0xe6>
 8004528:	2b49      	cmp	r3, #73	; 0x49
 800452a:	d860      	bhi.n	80045ee <BSP_TS_Get_GestureId+0xee>
 800452c:	2b1c      	cmp	r3, #28
 800452e:	d83f      	bhi.n	80045b0 <BSP_TS_Get_GestureId+0xb0>
 8004530:	2b1c      	cmp	r3, #28
 8004532:	d85c      	bhi.n	80045ee <BSP_TS_Get_GestureId+0xee>
 8004534:	a201      	add	r2, pc, #4	; (adr r2, 800453c <BSP_TS_Get_GestureId+0x3c>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	080045b7 	.word	0x080045b7
 8004540:	080045ef 	.word	0x080045ef
 8004544:	080045ef 	.word	0x080045ef
 8004548:	080045ef 	.word	0x080045ef
 800454c:	080045ef 	.word	0x080045ef
 8004550:	080045ef 	.word	0x080045ef
 8004554:	080045ef 	.word	0x080045ef
 8004558:	080045ef 	.word	0x080045ef
 800455c:	080045ef 	.word	0x080045ef
 8004560:	080045ef 	.word	0x080045ef
 8004564:	080045ef 	.word	0x080045ef
 8004568:	080045ef 	.word	0x080045ef
 800456c:	080045ef 	.word	0x080045ef
 8004570:	080045ef 	.word	0x080045ef
 8004574:	080045ef 	.word	0x080045ef
 8004578:	080045ef 	.word	0x080045ef
 800457c:	080045bf 	.word	0x080045bf
 8004580:	080045ef 	.word	0x080045ef
 8004584:	080045ef 	.word	0x080045ef
 8004588:	080045ef 	.word	0x080045ef
 800458c:	080045c7 	.word	0x080045c7
 8004590:	080045ef 	.word	0x080045ef
 8004594:	080045ef 	.word	0x080045ef
 8004598:	080045ef 	.word	0x080045ef
 800459c:	080045cf 	.word	0x080045cf
 80045a0:	080045ef 	.word	0x080045ef
 80045a4:	080045ef 	.word	0x080045ef
 80045a8:	080045ef 	.word	0x080045ef
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d014      	beq.n	80045de <BSP_TS_Get_GestureId+0xde>
 80045b4:	e01b      	b.n	80045ee <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045bc:	e01a      	b.n	80045f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045c4:	e016      	b.n	80045f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045cc:	e012      	b.n	80045f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2203      	movs	r2, #3
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045d4:	e00e      	b.n	80045f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2204      	movs	r2, #4
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045dc:	e00a      	b.n	80045f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2205      	movs	r2, #5
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045e4:	e006      	b.n	80045f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2206      	movs	r2, #6
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045ec:	e002      	b.n	80045f4 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      break;
 80045f2:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000a2d 	.word	0x20000a2d

08004604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <HAL_MspInit+0x4c>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_MspInit+0x4c>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <HAL_MspInit+0x4c>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_MspInit+0x4c>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <HAL_MspInit+0x4c>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_MspInit+0x4c>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	210f      	movs	r1, #15
 800463e:	f06f 0001 	mvn.w	r0, #1
 8004642:	f001 fb85 	bl	8005d50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800

08004654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	f107 031c 	add.w	r3, r7, #28
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2a      	ldr	r2, [pc, #168]	; (800471c <HAL_ADC_MspInit+0xc8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d124      	bne.n	80046c0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004676:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	4a29      	ldr	r2, [pc, #164]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004680:	6453      	str	r3, [r2, #68]	; 0x44
 8004682:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046a6:	2301      	movs	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046aa:	2303      	movs	r3, #3
 80046ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	4619      	mov	r1, r3
 80046b8:	481a      	ldr	r0, [pc, #104]	; (8004724 <HAL_ADC_MspInit+0xd0>)
 80046ba:	f002 f9ad 	bl	8006a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80046be:	e029      	b.n	8004714 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_ADC_MspInit+0xd4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d124      	bne.n	8004714 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	4a14      	ldr	r2, [pc, #80]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 80046d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d4:	6453      	str	r3, [r2, #68]	; 0x44
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 80046e8:	f043 0320 	orr.w	r3, r3, #32
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_ADC_MspInit+0xcc>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80046fa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80046fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004700:	2303      	movs	r3, #3
 8004702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	4619      	mov	r1, r3
 800470e:	4807      	ldr	r0, [pc, #28]	; (800472c <HAL_ADC_MspInit+0xd8>)
 8004710:	f002 f982 	bl	8006a18 <HAL_GPIO_Init>
}
 8004714:	bf00      	nop
 8004716:	3730      	adds	r7, #48	; 0x30
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40012000 	.word	0x40012000
 8004720:	40023800 	.word	0x40023800
 8004724:	40020000 	.word	0x40020000
 8004728:	40012200 	.word	0x40012200
 800472c:	40021400 	.word	0x40021400

08004730 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	609a      	str	r2, [r3, #8]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_DAC_MspInit+0x84>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d12b      	bne.n	80047aa <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_DAC_MspInit+0x88>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_DAC_MspInit+0x88>)
 8004758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800475c:	6413      	str	r3, [r2, #64]	; 0x40
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <HAL_DAC_MspInit+0x88>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <HAL_DAC_MspInit+0x88>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <HAL_DAC_MspInit+0x88>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_DAC_MspInit+0x88>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004782:	2310      	movs	r3, #16
 8004784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004786:	2303      	movs	r3, #3
 8004788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4619      	mov	r1, r3
 8004794:	4809      	ldr	r0, [pc, #36]	; (80047bc <HAL_DAC_MspInit+0x8c>)
 8004796:	f002 f93f 	bl	8006a18 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800479a:	2200      	movs	r2, #0
 800479c:	210f      	movs	r1, #15
 800479e:	2036      	movs	r0, #54	; 0x36
 80047a0:	f001 fad6 	bl	8005d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047a4:	2036      	movs	r0, #54	; 0x36
 80047a6:	f001 faef 	bl	8005d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80047aa:	bf00      	nop
 80047ac:	3728      	adds	r7, #40	; 0x28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40007400 	.word	0x40007400
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40020000 	.word	0x40020000

080047c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <HAL_DMA2D_MspInit+0x44>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d113      	bne.n	80047fa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <HAL_DMA2D_MspInit+0x48>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <HAL_DMA2D_MspInit+0x48>)
 80047d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_DMA2D_MspInit+0x48>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80047ea:	2200      	movs	r2, #0
 80047ec:	2105      	movs	r1, #5
 80047ee:	205a      	movs	r0, #90	; 0x5a
 80047f0:	f001 faae 	bl	8005d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80047f4:	205a      	movs	r0, #90	; 0x5a
 80047f6:	f001 fac7 	bl	8005d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	4002b000 	.word	0x4002b000
 8004808:	40023800 	.word	0x40023800

0800480c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0ac      	sub	sp, #176	; 0xb0
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004814:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004824:	f107 0318 	add.w	r3, r7, #24
 8004828:	2284      	movs	r2, #132	; 0x84
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f00a fa97 	bl	800ed60 <memset>
  if(hi2c->Instance==I2C1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a44      	ldr	r2, [pc, #272]	; (8004948 <HAL_I2C_MspInit+0x13c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d13d      	bne.n	80048b8 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800483c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004840:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004842:	2300      	movs	r3, #0
 8004844:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004846:	f107 0318 	add.w	r3, r7, #24
 800484a:	4618      	mov	r0, r3
 800484c:	f004 faa6 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004856:	f7fe f86f 	bl	8002938 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485a:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_I2C_MspInit+0x140>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	4a3b      	ldr	r2, [pc, #236]	; (800494c <HAL_I2C_MspInit+0x140>)
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	6313      	str	r3, [r2, #48]	; 0x30
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <HAL_I2C_MspInit+0x140>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800487a:	2312      	movs	r3, #18
 800487c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004886:	2303      	movs	r3, #3
 8004888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800488c:	2304      	movs	r3, #4
 800488e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004892:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004896:	4619      	mov	r1, r3
 8004898:	482d      	ldr	r0, [pc, #180]	; (8004950 <HAL_I2C_MspInit+0x144>)
 800489a:	f002 f8bd 	bl	8006a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800489e:	4b2b      	ldr	r3, [pc, #172]	; (800494c <HAL_I2C_MspInit+0x140>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a2a      	ldr	r2, [pc, #168]	; (800494c <HAL_I2C_MspInit+0x140>)
 80048a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b28      	ldr	r3, [pc, #160]	; (800494c <HAL_I2C_MspInit+0x140>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80048b6:	e042      	b.n	800493e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a25      	ldr	r2, [pc, #148]	; (8004954 <HAL_I2C_MspInit+0x148>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d13d      	bne.n	800493e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80048c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048ce:	f107 0318 	add.w	r3, r7, #24
 80048d2:	4618      	mov	r0, r3
 80048d4:	f004 fa62 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80048de:	f7fe f82b 	bl	8002938 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <HAL_I2C_MspInit+0x140>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4a19      	ldr	r2, [pc, #100]	; (800494c <HAL_I2C_MspInit+0x140>)
 80048e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <HAL_I2C_MspInit+0x140>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80048fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80048fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004902:	2312      	movs	r3, #18
 8004904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004908:	2301      	movs	r3, #1
 800490a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490e:	2303      	movs	r3, #3
 8004910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004914:	2304      	movs	r3, #4
 8004916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800491a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800491e:	4619      	mov	r1, r3
 8004920:	480d      	ldr	r0, [pc, #52]	; (8004958 <HAL_I2C_MspInit+0x14c>)
 8004922:	f002 f879 	bl	8006a18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <HAL_I2C_MspInit+0x140>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	4a08      	ldr	r2, [pc, #32]	; (800494c <HAL_I2C_MspInit+0x140>)
 800492c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004930:	6413      	str	r3, [r2, #64]	; 0x40
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_I2C_MspInit+0x140>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
}
 800493e:	bf00      	nop
 8004940:	37b0      	adds	r7, #176	; 0xb0
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40005400 	.word	0x40005400
 800494c:	40023800 	.word	0x40023800
 8004950:	40020400 	.word	0x40020400
 8004954:	40005c00 	.word	0x40005c00
 8004958:	40021c00 	.word	0x40021c00

0800495c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <HAL_I2C_MspDeInit+0x64>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d110      	bne.n	8004990 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_I2C_MspDeInit+0x68>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <HAL_I2C_MspDeInit+0x68>)
 8004974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800497a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800497e:	4812      	ldr	r0, [pc, #72]	; (80049c8 <HAL_I2C_MspDeInit+0x6c>)
 8004980:	f002 f9f6 	bl	8006d70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004988:	480f      	ldr	r0, [pc, #60]	; (80049c8 <HAL_I2C_MspDeInit+0x6c>)
 800498a:	f002 f9f1 	bl	8006d70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800498e:	e013      	b.n	80049b8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <HAL_I2C_MspDeInit+0x70>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10e      	bne.n	80049b8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <HAL_I2C_MspDeInit+0x68>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <HAL_I2C_MspDeInit+0x68>)
 80049a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049a4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	4809      	ldr	r0, [pc, #36]	; (80049d0 <HAL_I2C_MspDeInit+0x74>)
 80049aa:	f002 f9e1 	bl	8006d70 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80049ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049b2:	4807      	ldr	r0, [pc, #28]	; (80049d0 <HAL_I2C_MspDeInit+0x74>)
 80049b4:	f002 f9dc 	bl	8006d70 <HAL_GPIO_DeInit>
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40005400 	.word	0x40005400
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020400 	.word	0x40020400
 80049cc:	40005c00 	.word	0x40005c00
 80049d0:	40021c00 	.word	0x40021c00

080049d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08e      	sub	sp, #56	; 0x38
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a55      	ldr	r2, [pc, #340]	; (8004b48 <HAL_LTDC_MspInit+0x174>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f040 80a3 	bne.w	8004b3e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80049f8:	4b54      	ldr	r3, [pc, #336]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	4a53      	ldr	r2, [pc, #332]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 80049fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a02:	6453      	str	r3, [r2, #68]	; 0x44
 8004a04:	4b51      	ldr	r3, [pc, #324]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a0c:	623b      	str	r3, [r7, #32]
 8004a0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a10:	4b4e      	ldr	r3, [pc, #312]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4a4d      	ldr	r2, [pc, #308]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a16:	f043 0310 	orr.w	r3, r3, #16
 8004a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004a28:	4b48      	ldr	r3, [pc, #288]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	4a47      	ldr	r2, [pc, #284]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a32:	6313      	str	r3, [r2, #48]	; 0x30
 8004a34:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004a40:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	4a41      	ldr	r2, [pc, #260]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4c:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a58:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a62:	6313      	str	r3, [r2, #48]	; 0x30
 8004a64:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a70:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	4a35      	ldr	r2, [pc, #212]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_LTDC_MspInit+0x178>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004a88:	2310      	movs	r3, #16
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a94:	2300      	movs	r3, #0
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004a98:	230e      	movs	r3, #14
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	482b      	ldr	r0, [pc, #172]	; (8004b50 <HAL_LTDC_MspInit+0x17c>)
 8004aa4:	f001 ffb8 	bl	8006a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004aa8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004aba:	230e      	movs	r3, #14
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4823      	ldr	r0, [pc, #140]	; (8004b54 <HAL_LTDC_MspInit+0x180>)
 8004ac6:	f001 ffa7 	bl	8006a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004aca:	23f7      	movs	r3, #247	; 0xf7
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ada:	230e      	movs	r3, #14
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	481c      	ldr	r0, [pc, #112]	; (8004b58 <HAL_LTDC_MspInit+0x184>)
 8004ae6:	f001 ff97 	bl	8006a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af8:	2300      	movs	r3, #0
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004afc:	2309      	movs	r3, #9
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b04:	4619      	mov	r1, r3
 8004b06:	4815      	ldr	r0, [pc, #84]	; (8004b5c <HAL_LTDC_MspInit+0x188>)
 8004b08:	f001 ff86 	bl	8006a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004b0c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b12:	2302      	movs	r3, #2
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004b1e:	230e      	movs	r3, #14
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b26:	4619      	mov	r1, r3
 8004b28:	480d      	ldr	r0, [pc, #52]	; (8004b60 <HAL_LTDC_MspInit+0x18c>)
 8004b2a:	f001 ff75 	bl	8006a18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2105      	movs	r1, #5
 8004b32:	2058      	movs	r0, #88	; 0x58
 8004b34:	f001 f90c 	bl	8005d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004b38:	2058      	movs	r0, #88	; 0x58
 8004b3a:	f001 f925 	bl	8005d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004b3e:	bf00      	nop
 8004b40:	3738      	adds	r7, #56	; 0x38
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40016800 	.word	0x40016800
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40022400 	.word	0x40022400
 8004b58:	40022800 	.word	0x40022800
 8004b5c:	40021800 	.word	0x40021800
 8004b60:	40022000 	.word	0x40022000

08004b64 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <HAL_RNG_MspInit+0x38>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10b      	bne.n	8004b8e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RNG_MspInit+0x3c>)
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <HAL_RNG_MspInit+0x3c>)
 8004b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b80:	6353      	str	r3, [r2, #52]	; 0x34
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <HAL_RNG_MspInit+0x3c>)
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	50060800 	.word	0x50060800
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b0a4      	sub	sp, #144	; 0x90
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	2284      	movs	r2, #132	; 0x84
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f00a f8d3 	bl	800ed60 <memset>
  if(hrtc->Instance==RTC)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <HAL_RTC_MspInit+0x54>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d114      	bne.n	8004bee <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f004 f8e2 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004bde:	f7fd feab 	bl	8002938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RTC_MspInit+0x58>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <HAL_RTC_MspInit+0x58>)
 8004be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bee:	bf00      	nop
 8004bf0:	3790      	adds	r7, #144	; 0x90
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40002800 	.word	0x40002800
 8004bfc:	40023800 	.word	0x40023800

08004c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	f107 0314 	add.w	r3, r7, #20
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <HAL_SPI_MspInit+0xb4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d144      	bne.n	8004cac <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c22:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2e:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c44:	6313      	str	r3, [r2, #48]	; 0x30
 8004c46:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c52:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <HAL_SPI_MspInit+0xb8>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c76:	2303      	movs	r3, #3
 8004c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c7a:	2305      	movs	r3, #5
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	4619      	mov	r1, r3
 8004c84:	480d      	ldr	r0, [pc, #52]	; (8004cbc <HAL_SPI_MspInit+0xbc>)
 8004c86:	f001 fec7 	bl	8006a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004c8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	2302      	movs	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c9c:	2305      	movs	r3, #5
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4806      	ldr	r0, [pc, #24]	; (8004cc0 <HAL_SPI_MspInit+0xc0>)
 8004ca8:	f001 feb6 	bl	8006a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004cac:	bf00      	nop
 8004cae:	3728      	adds	r7, #40	; 0x28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40003800 	.word	0x40003800
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	40020400 	.word	0x40020400

08004cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a3b      	ldr	r2, [pc, #236]	; (8004dd0 <HAL_TIM_Base_MspInit+0x10c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10c      	bne.n	8004d00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	4a3a      	ldr	r2, [pc, #232]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf2:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	623b      	str	r3, [r7, #32]
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004cfe:	e062      	b.n	8004dc6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d10c      	bne.n	8004d24 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d0a:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	4a31      	ldr	r2, [pc, #196]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	69fb      	ldr	r3, [r7, #28]
}
 8004d22:	e050      	b.n	8004dc6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2b      	ldr	r2, [pc, #172]	; (8004dd8 <HAL_TIM_Base_MspInit+0x114>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10c      	bne.n	8004d48 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d2e:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a28      	ldr	r2, [pc, #160]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	69bb      	ldr	r3, [r7, #24]
}
 8004d46:	e03e      	b.n	8004dc6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <HAL_TIM_Base_MspInit+0x118>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10c      	bne.n	8004d6c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	697b      	ldr	r3, [r7, #20]
}
 8004d6a:	e02c      	b.n	8004dc6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIM_Base_MspInit+0x11c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d127      	bne.n	8004dc6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d76:	4b17      	ldr	r3, [pc, #92]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	6453      	str	r3, [r2, #68]	; 0x44
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004d8e:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <HAL_TIM_Base_MspInit+0x110>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004da6:	2304      	movs	r3, #4
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004daa:	2302      	movs	r3, #2
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db2:	2300      	movs	r3, #0
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004db6:	2303      	movs	r3, #3
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4808      	ldr	r0, [pc, #32]	; (8004de4 <HAL_TIM_Base_MspInit+0x120>)
 8004dc2:	f001 fe29 	bl	8006a18 <HAL_GPIO_Init>
}
 8004dc6:	bf00      	nop
 8004dc8:	3738      	adds	r7, #56	; 0x38
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40022000 	.word	0x40022000

08004de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b0b0      	sub	sp, #192	; 0xc0
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e04:	2284      	movs	r2, #132	; 0x84
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f009 ffa9 	bl	800ed60 <memset>
  if(huart->Instance==UART7)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a75      	ldr	r2, [pc, #468]	; (8004fe8 <HAL_UART_MspInit+0x200>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d13d      	bne.n	8004e94 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f003 ffb7 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004e34:	f7fd fd80 	bl	8002938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004e38:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	4a6b      	ldr	r2, [pc, #428]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e42:	6413      	str	r3, [r2, #64]	; 0x40
 8004e44:	4b69      	ldr	r3, [pc, #420]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e50:	4b66      	ldr	r3, [pc, #408]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	4a65      	ldr	r2, [pc, #404]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004e56:	f043 0320 	orr.w	r3, r3, #32
 8004e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5c:	4b63      	ldr	r3, [pc, #396]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004e68:	23c0      	movs	r3, #192	; 0xc0
 8004e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004e80:	2308      	movs	r3, #8
 8004e82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4858      	ldr	r0, [pc, #352]	; (8004ff0 <HAL_UART_MspInit+0x208>)
 8004e8e:	f001 fdc3 	bl	8006a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004e92:	e0a4      	b.n	8004fde <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a56      	ldr	r2, [pc, #344]	; (8004ff4 <HAL_UART_MspInit+0x20c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d15d      	bne.n	8004f5a <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f003 ff76 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004eb6:	f7fd fd3f 	bl	8002938 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004eba:	4b4c      	ldr	r3, [pc, #304]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	4a4b      	ldr	r2, [pc, #300]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ec0:	f043 0310 	orr.w	r3, r3, #16
 8004ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ec6:	4b49      	ldr	r3, [pc, #292]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	4b46      	ldr	r3, [pc, #280]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	4a45      	ldr	r2, [pc, #276]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ed8:	f043 0302 	orr.w	r3, r3, #2
 8004edc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ede:	4b43      	ldr	r3, [pc, #268]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eea:	4b40      	ldr	r3, [pc, #256]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	4a3f      	ldr	r2, [pc, #252]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef6:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f1a:	2307      	movs	r3, #7
 8004f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004f20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f24:	4619      	mov	r1, r3
 8004f26:	4834      	ldr	r0, [pc, #208]	; (8004ff8 <HAL_UART_MspInit+0x210>)
 8004f28:	f001 fd76 	bl	8006a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f46:	2307      	movs	r3, #7
 8004f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004f4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f50:	4619      	mov	r1, r3
 8004f52:	482a      	ldr	r0, [pc, #168]	; (8004ffc <HAL_UART_MspInit+0x214>)
 8004f54:	f001 fd60 	bl	8006a18 <HAL_GPIO_Init>
}
 8004f58:	e041      	b.n	8004fde <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_UART_MspInit+0x218>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d13c      	bne.n	8004fde <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f74:	4618      	mov	r0, r3
 8004f76:	f003 ff11 	bl	8008d9c <HAL_RCCEx_PeriphCLKConfig>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004f80:	f7fd fcda 	bl	8002938 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	4a18      	ldr	r2, [pc, #96]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004f8a:	f043 0320 	orr.w	r3, r3, #32
 8004f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	4a12      	ldr	r2, [pc, #72]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004fa2:	f043 0304 	orr.w	r3, r3, #4
 8004fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa8:	4b10      	ldr	r3, [pc, #64]	; (8004fec <HAL_UART_MspInit+0x204>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004fb4:	23c0      	movs	r3, #192	; 0xc0
 8004fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fd2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	480a      	ldr	r0, [pc, #40]	; (8005004 <HAL_UART_MspInit+0x21c>)
 8004fda:	f001 fd1d 	bl	8006a18 <HAL_GPIO_Init>
}
 8004fde:	bf00      	nop
 8004fe0:	37c0      	adds	r7, #192	; 0xc0
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40007800 	.word	0x40007800
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40021400 	.word	0x40021400
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	40020400 	.word	0x40020400
 8004ffc:	40020000 	.word	0x40020000
 8005000:	40011400 	.word	0x40011400
 8005004:	40020800 	.word	0x40020800

08005008 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800501c:	4b3a      	ldr	r3, [pc, #232]	; (8005108 <HAL_FMC_MspInit+0x100>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d16d      	bne.n	8005100 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005024:	4b38      	ldr	r3, [pc, #224]	; (8005108 <HAL_FMC_MspInit+0x100>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800502a:	4b38      	ldr	r3, [pc, #224]	; (800510c <HAL_FMC_MspInit+0x104>)
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	4a37      	ldr	r2, [pc, #220]	; (800510c <HAL_FMC_MspInit+0x104>)
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	6393      	str	r3, [r2, #56]	; 0x38
 8005036:	4b35      	ldr	r3, [pc, #212]	; (800510c <HAL_FMC_MspInit+0x104>)
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005042:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005046:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005048:	2302      	movs	r3, #2
 800504a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005050:	2303      	movs	r3, #3
 8005052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005054:	230c      	movs	r3, #12
 8005056:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	4619      	mov	r1, r3
 800505c:	482c      	ldr	r0, [pc, #176]	; (8005110 <HAL_FMC_MspInit+0x108>)
 800505e:	f001 fcdb 	bl	8006a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005062:	f248 1333 	movw	r3, #33075	; 0x8133
 8005066:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2302      	movs	r3, #2
 800506a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005070:	2303      	movs	r3, #3
 8005072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005074:	230c      	movs	r3, #12
 8005076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005078:	1d3b      	adds	r3, r7, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4825      	ldr	r0, [pc, #148]	; (8005114 <HAL_FMC_MspInit+0x10c>)
 800507e:	f001 fccb 	bl	8006a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005082:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005086:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	2302      	movs	r3, #2
 800508a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005090:	2303      	movs	r3, #3
 8005092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005094:	230c      	movs	r3, #12
 8005096:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	4619      	mov	r1, r3
 800509c:	481e      	ldr	r0, [pc, #120]	; (8005118 <HAL_FMC_MspInit+0x110>)
 800509e:	f001 fcbb 	bl	8006a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80050a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80050a6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a8:	2302      	movs	r3, #2
 80050aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	2303      	movs	r3, #3
 80050b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050b4:	230c      	movs	r3, #12
 80050b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	4619      	mov	r1, r3
 80050bc:	4817      	ldr	r0, [pc, #92]	; (800511c <HAL_FMC_MspInit+0x114>)
 80050be:	f001 fcab 	bl	8006a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80050c2:	2328      	movs	r3, #40	; 0x28
 80050c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c6:	2302      	movs	r3, #2
 80050c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ce:	2303      	movs	r3, #3
 80050d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050d2:	230c      	movs	r3, #12
 80050d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4811      	ldr	r0, [pc, #68]	; (8005120 <HAL_FMC_MspInit+0x118>)
 80050dc:	f001 fc9c 	bl	8006a18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80050e0:	2308      	movs	r3, #8
 80050e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e4:	2302      	movs	r3, #2
 80050e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ec:	2303      	movs	r3, #3
 80050ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050f0:	230c      	movs	r3, #12
 80050f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	480a      	ldr	r0, [pc, #40]	; (8005124 <HAL_FMC_MspInit+0x11c>)
 80050fa:	f001 fc8d 	bl	8006a18 <HAL_GPIO_Init>
 80050fe:	e000      	b.n	8005102 <HAL_FMC_MspInit+0xfa>
    return;
 8005100:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000a58 	.word	0x20000a58
 800510c:	40023800 	.word	0x40023800
 8005110:	40021000 	.word	0x40021000
 8005114:	40021800 	.word	0x40021800
 8005118:	40020c00 	.word	0x40020c00
 800511c:	40021400 	.word	0x40021400
 8005120:	40021c00 	.word	0x40021c00
 8005124:	40020800 	.word	0x40020800

08005128 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005130:	f7ff ff6a 	bl	8005008 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08c      	sub	sp, #48	; 0x30
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800514c:	2200      	movs	r2, #0
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	2036      	movs	r0, #54	; 0x36
 8005152:	f000 fdfd 	bl	8005d50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005156:	2036      	movs	r0, #54	; 0x36
 8005158:	f000 fe16 	bl	8005d88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800515c:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <HAL_InitTick+0xa0>)
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <HAL_InitTick+0xa0>)
 8005162:	f043 0310 	orr.w	r3, r3, #16
 8005166:	6413      	str	r3, [r2, #64]	; 0x40
 8005168:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <HAL_InitTick+0xa0>)
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005174:	f107 0210 	add.w	r2, r7, #16
 8005178:	f107 0314 	add.w	r3, r7, #20
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f003 fdda 	bl	8008d38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005184:	f003 fdb0 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 8005188:	4603      	mov	r3, r0
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <HAL_InitTick+0xa4>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0c9b      	lsrs	r3, r3, #18
 8005198:	3b01      	subs	r3, #1
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HAL_InitTick+0xa8>)
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <HAL_InitTick+0xac>)
 80051a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <HAL_InitTick+0xa8>)
 80051a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <HAL_InitTick+0xa8>)
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_InitTick+0xa8>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_InitTick+0xa8>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80051bc:	4809      	ldr	r0, [pc, #36]	; (80051e4 <HAL_InitTick+0xa8>)
 80051be:	f005 f83d 	bl	800a23c <HAL_TIM_Base_Init>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80051c8:	4806      	ldr	r0, [pc, #24]	; (80051e4 <HAL_InitTick+0xa8>)
 80051ca:	f005 f88f 	bl	800a2ec <HAL_TIM_Base_Start_IT>
 80051ce:	4603      	mov	r3, r0
 80051d0:	e000      	b.n	80051d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3730      	adds	r7, #48	; 0x30
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40023800 	.word	0x40023800
 80051e0:	431bde83 	.word	0x431bde83
 80051e4:	20008bb4 	.word	0x20008bb4
 80051e8:	40001000 	.word	0x40001000

080051ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051f0:	e7fe      	b.n	80051f0 <NMI_Handler+0x4>

080051f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051f6:	e7fe      	b.n	80051f6 <HardFault_Handler+0x4>

080051f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051fc:	e7fe      	b.n	80051fc <MemManage_Handler+0x4>

080051fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005202:	e7fe      	b.n	8005202 <BusFault_Handler+0x4>

08005204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005208:	e7fe      	b.n	8005208 <UsageFault_Handler+0x4>

0800520a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800520a:	b480      	push	{r7}
 800520c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <TIM6_DAC_IRQHandler+0x20>)
 800521e:	791b      	ldrb	r3, [r3, #4]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8005226:	4804      	ldr	r0, [pc, #16]	; (8005238 <TIM6_DAC_IRQHandler+0x20>)
 8005228:	f000 fdde 	bl	8005de8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800522c:	4803      	ldr	r0, [pc, #12]	; (800523c <TIM6_DAC_IRQHandler+0x24>)
 800522e:	f005 f8d5 	bl	800a3dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200088f8 	.word	0x200088f8
 800523c:	20008bb4 	.word	0x20008bb4

08005240 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005244:	4802      	ldr	r0, [pc, #8]	; (8005250 <LTDC_IRQHandler+0x10>)
 8005246:	f002 fdf5 	bl	8007e34 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20008734 	.word	0x20008734

08005254 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <DMA2D_IRQHandler+0x10>)
 800525a:	f001 f99f 	bl	800659c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20008a14 	.word	0x20008a14

08005268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005270:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <_sbrk+0x5c>)
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <_sbrk+0x60>)
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800527c:	4b13      	ldr	r3, [pc, #76]	; (80052cc <_sbrk+0x64>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <_sbrk+0x64>)
 8005286:	4a12      	ldr	r2, [pc, #72]	; (80052d0 <_sbrk+0x68>)
 8005288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <_sbrk+0x64>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d207      	bcs.n	80052a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005298:	f009 fd28 	bl	800ecec <__errno>
 800529c:	4603      	mov	r3, r0
 800529e:	220c      	movs	r2, #12
 80052a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a6:	e009      	b.n	80052bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052a8:	4b08      	ldr	r3, [pc, #32]	; (80052cc <_sbrk+0x64>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <_sbrk+0x64>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4413      	add	r3, r2
 80052b6:	4a05      	ldr	r2, [pc, #20]	; (80052cc <_sbrk+0x64>)
 80052b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ba:	68fb      	ldr	r3, [r7, #12]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20050000 	.word	0x20050000
 80052c8:	00000400 	.word	0x00000400
 80052cc:	20000a5c 	.word	0x20000a5c
 80052d0:	20008c58 	.word	0x20008c58

080052d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <SystemInit+0x20>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <SystemInit+0x20>)
 80052e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052e8:	bf00      	nop
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052fc:	480d      	ldr	r0, [pc, #52]	; (8005334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052fe:	490e      	ldr	r1, [pc, #56]	; (8005338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005300:	4a0e      	ldr	r2, [pc, #56]	; (800533c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005304:	e002      	b.n	800530c <LoopCopyDataInit>

08005306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800530a:	3304      	adds	r3, #4

0800530c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800530c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800530e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005310:	d3f9      	bcc.n	8005306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005312:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005314:	4c0b      	ldr	r4, [pc, #44]	; (8005344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005318:	e001      	b.n	800531e <LoopFillZerobss>

0800531a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800531a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800531c:	3204      	adds	r2, #4

0800531e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800531e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005320:	d3fb      	bcc.n	800531a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005322:	f7ff ffd7 	bl	80052d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005326:	f009 fce7 	bl	800ecf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800532a:	f7fb fc1b 	bl	8000b64 <main>
  bx  lr    
 800532e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005330:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005338:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800533c:	0801279c 	.word	0x0801279c
  ldr r2, =_sbss
 8005340:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8005344:	20008c54 	.word	0x20008c54

08005348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005348:	e7fe      	b.n	8005348 <ADC_IRQHandler>

0800534a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800534e:	2003      	movs	r0, #3
 8005350:	f000 fcf3 	bl	8005d3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005354:	200f      	movs	r0, #15
 8005356:	f7ff fef1 	bl	800513c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800535a:	f7ff f953 	bl	8004604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_IncTick+0x20>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_IncTick+0x24>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4413      	add	r3, r2
 8005374:	4a04      	ldr	r2, [pc, #16]	; (8005388 <HAL_IncTick+0x24>)
 8005376:	6013      	str	r3, [r2, #0]
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000048 	.word	0x20000048
 8005388:	20008c00 	.word	0x20008c00

0800538c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return uwTick;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <HAL_GetTick+0x14>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20008c00 	.word	0x20008c00

080053a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053ac:	f7ff ffee 	bl	800538c <HAL_GetTick>
 80053b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053bc:	d005      	beq.n	80053ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <HAL_Delay+0x44>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053ca:	bf00      	nop
 80053cc:	f7ff ffde 	bl	800538c <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d8f7      	bhi.n	80053cc <HAL_Delay+0x28>
  {
  }
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000048 	.word	0x20000048

080053ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e031      	b.n	8005466 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff f922 	bl	8004654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_ADC_Init+0x84>)
 8005430:	4013      	ands	r3, r2
 8005432:	f043 0202 	orr.w	r2, r3, #2
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fad6 	bl	80059ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
 8005456:	e001      	b.n	800545c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	ffffeefd 	.word	0xffffeefd

08005474 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_ADC_Start+0x1a>
 800548a:	2302      	movs	r3, #2
 800548c:	e0ad      	b.n	80055ea <HAL_ADC_Start+0x176>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d018      	beq.n	80054d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80054b4:	4b50      	ldr	r3, [pc, #320]	; (80055f8 <HAL_ADC_Start+0x184>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a50      	ldr	r2, [pc, #320]	; (80055fc <HAL_ADC_Start+0x188>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0c9a      	lsrs	r2, r3, #18
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80054c8:	e002      	b.n	80054d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f9      	bne.n	80054ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d175      	bne.n	80055d0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e8:	4b45      	ldr	r3, [pc, #276]	; (8005600 <HAL_ADC_Start+0x18c>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800550a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551e:	d106      	bne.n	800552e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f023 0206 	bic.w	r2, r3, #6
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	645a      	str	r2, [r3, #68]	; 0x44
 800552c:	e002      	b.n	8005534 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005544:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_ADC_Start+0x190>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d143      	bne.n	80055e8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	e03a      	b.n	80055e8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a24      	ldr	r2, [pc, #144]	; (8005608 <HAL_ADC_Start+0x194>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10e      	bne.n	800559a <HAL_ADC_Start+0x126>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d107      	bne.n	800559a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005598:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_ADC_Start+0x190>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d120      	bne.n	80055e8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_ADC_Start+0x198>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d11b      	bne.n	80055e8 <HAL_ADC_Start+0x174>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d114      	bne.n	80055e8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055cc:	609a      	str	r2, [r3, #8]
 80055ce:	e00b      	b.n	80055e8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0210 	orr.w	r2, r3, #16
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000040 	.word	0x20000040
 80055fc:	431bde83 	.word	0x431bde83
 8005600:	fffff8fe 	.word	0xfffff8fe
 8005604:	40012300 	.word	0x40012300
 8005608:	40012000 	.word	0x40012000
 800560c:	40012200 	.word	0x40012200

08005610 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562c:	d113      	bne.n	8005656 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563c:	d10b      	bne.n	8005656 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e063      	b.n	800571e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005656:	f7ff fe99 	bl	800538c <HAL_GetTick>
 800565a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800565c:	e021      	b.n	80056a2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005664:	d01d      	beq.n	80056a2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_ADC_PollForConversion+0x6c>
 800566c:	f7ff fe8e 	bl	800538c <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d212      	bcs.n	80056a2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d00b      	beq.n	80056a2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f043 0204 	orr.w	r2, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e03d      	b.n	800571e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d1d6      	bne.n	800565e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0212 	mvn.w	r2, #18
 80056b8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d123      	bne.n	800571c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11f      	bne.n	800571c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d006      	beq.n	80056f8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d111      	bne.n	800571c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f043 0201 	orr.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_ADC_ConfigChannel+0x1c>
 8005758:	2302      	movs	r3, #2
 800575a:	e136      	b.n	80059ca <HAL_ADC_ConfigChannel+0x28a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b09      	cmp	r3, #9
 800576a:	d93a      	bls.n	80057e2 <HAL_ADC_ConfigChannel+0xa2>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005774:	d035      	beq.n	80057e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68d9      	ldr	r1, [r3, #12]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	4613      	mov	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	3b1e      	subs	r3, #30
 800578c:	2207      	movs	r2, #7
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	400a      	ands	r2, r1
 800579a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a8d      	ldr	r2, [pc, #564]	; (80059d8 <HAL_ADC_ConfigChannel+0x298>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10a      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68d9      	ldr	r1, [r3, #12]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	061a      	lsls	r2, r3, #24
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057ba:	e035      	b.n	8005828 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68d9      	ldr	r1, [r3, #12]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4618      	mov	r0, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4403      	add	r3, r0
 80057d4:	3b1e      	subs	r3, #30
 80057d6:	409a      	lsls	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057e0:	e022      	b.n	8005828 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6919      	ldr	r1, [r3, #16]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	4613      	mov	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	2207      	movs	r2, #7
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43da      	mvns	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	400a      	ands	r2, r1
 8005804:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6919      	ldr	r1, [r3, #16]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	4618      	mov	r0, r3
 8005818:	4603      	mov	r3, r0
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4403      	add	r3, r0
 800581e:	409a      	lsls	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d824      	bhi.n	800587a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	3b05      	subs	r3, #5
 8005842:	221f      	movs	r2, #31
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43da      	mvns	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	400a      	ands	r2, r1
 8005850:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	4618      	mov	r0, r3
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	3b05      	subs	r3, #5
 800586c:	fa00 f203 	lsl.w	r2, r0, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	635a      	str	r2, [r3, #52]	; 0x34
 8005878:	e04c      	b.n	8005914 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d824      	bhi.n	80058cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	3b23      	subs	r3, #35	; 0x23
 8005894:	221f      	movs	r2, #31
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43da      	mvns	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	400a      	ands	r2, r1
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4618      	mov	r0, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	3b23      	subs	r3, #35	; 0x23
 80058be:	fa00 f203 	lsl.w	r2, r0, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
 80058ca:	e023      	b.n	8005914 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	3b41      	subs	r3, #65	; 0x41
 80058de:	221f      	movs	r2, #31
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43da      	mvns	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	400a      	ands	r2, r1
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	4618      	mov	r0, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	3b41      	subs	r3, #65	; 0x41
 8005908:	fa00 f203 	lsl.w	r2, r0, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a30      	ldr	r2, [pc, #192]	; (80059dc <HAL_ADC_ConfigChannel+0x29c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10a      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x1f4>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005926:	d105      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005928:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a2c      	ldr	r2, [pc, #176]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800592e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005932:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a28      	ldr	r2, [pc, #160]	; (80059dc <HAL_ADC_ConfigChannel+0x29c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10f      	bne.n	800595e <HAL_ADC_ConfigChannel+0x21e>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b12      	cmp	r3, #18
 8005944:	d10b      	bne.n	800595e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4a25      	ldr	r2, [pc, #148]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800594c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005950:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005952:	4b23      	ldr	r3, [pc, #140]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4a22      	ldr	r2, [pc, #136]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800595c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <HAL_ADC_ConfigChannel+0x29c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d12b      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x280>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <HAL_ADC_ConfigChannel+0x298>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <HAL_ADC_ConfigChannel+0x23a>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b11      	cmp	r3, #17
 8005978:	d122      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800597a:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005980:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005984:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <HAL_ADC_ConfigChannel+0x2a0>)
 800598c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005990:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <HAL_ADC_ConfigChannel+0x298>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d111      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800599c:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <HAL_ADC_ConfigChannel+0x2a4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a11      	ldr	r2, [pc, #68]	; (80059e8 <HAL_ADC_ConfigChannel+0x2a8>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0c9a      	lsrs	r2, r3, #18
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80059b2:	e002      	b.n	80059ba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f9      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	10000012 	.word	0x10000012
 80059dc:	40012000 	.word	0x40012000
 80059e0:	40012300 	.word	0x40012300
 80059e4:	20000040 	.word	0x20000040
 80059e8:	431bde83 	.word	0x431bde83

080059ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80059f4:	4b78      	ldr	r3, [pc, #480]	; (8005bd8 <ADC_Init+0x1ec>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a77      	ldr	r2, [pc, #476]	; (8005bd8 <ADC_Init+0x1ec>)
 80059fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80059fe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005a00:	4b75      	ldr	r3, [pc, #468]	; (8005bd8 <ADC_Init+0x1ec>)
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4973      	ldr	r1, [pc, #460]	; (8005bd8 <ADC_Init+0x1ec>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	021a      	lsls	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6859      	ldr	r1, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6899      	ldr	r1, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	4a58      	ldr	r2, [pc, #352]	; (8005bdc <ADC_Init+0x1f0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d022      	beq.n	8005ac6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6899      	ldr	r1, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	e00f      	b.n	8005ae6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ae4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0202 	bic.w	r2, r2, #2
 8005af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6899      	ldr	r1, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	005a      	lsls	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01b      	beq.n	8005b4c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005b32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	035a      	lsls	r2, r3, #13
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	e007      	b.n	8005b5c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	051a      	lsls	r2, r3, #20
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b9e:	025a      	lsls	r2, r3, #9
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6899      	ldr	r1, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	029a      	lsls	r2, r3, #10
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40012300 	.word	0x40012300
 8005bdc:	0f000001 	.word	0x0f000001

08005be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <__NVIC_SetPriorityGrouping+0x40>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <__NVIC_SetPriorityGrouping+0x44>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c0e:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <__NVIC_SetPriorityGrouping+0x40>)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	60d3      	str	r3, [r2, #12]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	e000ed00 	.word	0xe000ed00
 8005c24:	05fa0000 	.word	0x05fa0000

08005c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <__NVIC_GetPriorityGrouping+0x18>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	f003 0307 	and.w	r3, r3, #7
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	e000ed00 	.word	0xe000ed00

08005c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	db0b      	blt.n	8005c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	f003 021f 	and.w	r2, r3, #31
 8005c5c:	4907      	ldr	r1, [pc, #28]	; (8005c7c <__NVIC_EnableIRQ+0x38>)
 8005c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2001      	movs	r0, #1
 8005c66:	fa00 f202 	lsl.w	r2, r0, r2
 8005c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	e000e100 	.word	0xe000e100

08005c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	6039      	str	r1, [r7, #0]
 8005c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db0a      	blt.n	8005caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	490c      	ldr	r1, [pc, #48]	; (8005ccc <__NVIC_SetPriority+0x4c>)
 8005c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9e:	0112      	lsls	r2, r2, #4
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ca8:	e00a      	b.n	8005cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	4908      	ldr	r1, [pc, #32]	; (8005cd0 <__NVIC_SetPriority+0x50>)
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	3b04      	subs	r3, #4
 8005cb8:	0112      	lsls	r2, r2, #4
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	761a      	strb	r2, [r3, #24]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	e000e100 	.word	0xe000e100
 8005cd0:	e000ed00 	.word	0xe000ed00

08005cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b089      	sub	sp, #36	; 0x24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f1c3 0307 	rsb	r3, r3, #7
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	bf28      	it	cs
 8005cf2:	2304      	movcs	r3, #4
 8005cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d902      	bls.n	8005d04 <NVIC_EncodePriority+0x30>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3b03      	subs	r3, #3
 8005d02:	e000      	b.n	8005d06 <NVIC_EncodePriority+0x32>
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43da      	mvns	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	401a      	ands	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	fa01 f303 	lsl.w	r3, r1, r3
 8005d26:	43d9      	mvns	r1, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d2c:	4313      	orrs	r3, r2
         );
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3724      	adds	r7, #36	; 0x24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff ff4c 	bl	8005be0 <__NVIC_SetPriorityGrouping>
}
 8005d48:	bf00      	nop
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d62:	f7ff ff61 	bl	8005c28 <__NVIC_GetPriorityGrouping>
 8005d66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	6978      	ldr	r0, [r7, #20]
 8005d6e:	f7ff ffb1 	bl	8005cd4 <NVIC_EncodePriority>
 8005d72:	4602      	mov	r2, r0
 8005d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff ff80 	bl	8005c80 <__NVIC_SetPriority>
}
 8005d80:	bf00      	nop
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ff54 	bl	8005c44 <__NVIC_EnableIRQ>
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e014      	b.n	8005de0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fe fcb2 	bl	8004730 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	d120      	bne.n	8005e42 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0e:	d118      	bne.n	8005e42 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2204      	movs	r2, #4
 8005e14:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f043 0201 	orr.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e3a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f82d 	bl	8005e9c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e50:	d120      	bne.n	8005e94 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e60:	d118      	bne.n	8005e94 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2204      	movs	r2, #4
 8005e66:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f043 0202 	orr.w	r2, r3, #2
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e8c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f85d 	bl	8005f4e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	795b      	ldrb	r3, [r3, #5]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_DAC_ConfigChannel+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e03c      	b.n	8005f42 <HAL_DAC_ConfigChannel+0x92>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	22c0      	movs	r2, #192	; 0xc0
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43da      	mvns	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	400a      	ands	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f70:	f7ff fa0c 	bl	800538c <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e099      	b.n	80060b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fa0:	e00f      	b.n	8005fc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fa2:	f7ff f9f3 	bl	800538c <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b05      	cmp	r3, #5
 8005fae:	d908      	bls.n	8005fc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2203      	movs	r2, #3
 8005fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e078      	b.n	80060b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e8      	bne.n	8005fa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4b38      	ldr	r3, [pc, #224]	; (80060bc <HAL_DMA_Init+0x158>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b04      	cmp	r3, #4
 800601a:	d107      	bne.n	800602c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	4313      	orrs	r3, r2
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0307 	bic.w	r3, r3, #7
 8006042:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b04      	cmp	r3, #4
 8006054:	d117      	bne.n	8006086 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8bd 	bl	80061e8 <DMA_CheckFifoParam>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006082:	2301      	movs	r3, #1
 8006084:	e016      	b.n	80060b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f874 	bl	800617c <DMA_CalcBaseAndBitshift>
 8006094:	4603      	mov	r3, r0
 8006096:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609c:	223f      	movs	r2, #63	; 0x3f
 800609e:	409a      	lsls	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	f010803f 	.word	0xf010803f

080060c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e050      	b.n	8006174 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d101      	bne.n	80060e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
 80060e0:	e048      	b.n	8006174 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2200      	movs	r2, #0
 8006100:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2200      	movs	r2, #0
 8006110:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2221      	movs	r2, #33	; 0x21
 8006120:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f82a 	bl	800617c <DMA_CalcBaseAndBitshift>
 8006128:	4603      	mov	r3, r0
 800612a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006130:	223f      	movs	r2, #63	; 0x3f
 8006132:	409a      	lsls	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	3b10      	subs	r3, #16
 800618c:	4a13      	ldr	r2, [pc, #76]	; (80061dc <DMA_CalcBaseAndBitshift+0x60>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	091b      	lsrs	r3, r3, #4
 8006194:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006196:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <DMA_CalcBaseAndBitshift+0x64>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d908      	bls.n	80061bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <DMA_CalcBaseAndBitshift+0x68>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	659a      	str	r2, [r3, #88]	; 0x58
 80061ba:	e006      	b.n	80061ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <DMA_CalcBaseAndBitshift+0x68>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	aaaaaaab 	.word	0xaaaaaaab
 80061e0:	080126f0 	.word	0x080126f0
 80061e4:	fffffc00 	.word	0xfffffc00

080061e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d11f      	bne.n	8006242 <DMA_CheckFifoParam+0x5a>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b03      	cmp	r3, #3
 8006206:	d856      	bhi.n	80062b6 <DMA_CheckFifoParam+0xce>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <DMA_CheckFifoParam+0x28>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006221 	.word	0x08006221
 8006214:	08006233 	.word	0x08006233
 8006218:	08006221 	.word	0x08006221
 800621c:	080062b7 	.word	0x080062b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d046      	beq.n	80062ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006230:	e043      	b.n	80062ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800623a:	d140      	bne.n	80062be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006240:	e03d      	b.n	80062be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624a:	d121      	bne.n	8006290 <DMA_CheckFifoParam+0xa8>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d837      	bhi.n	80062c2 <DMA_CheckFifoParam+0xda>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <DMA_CheckFifoParam+0x70>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006269 	.word	0x08006269
 800625c:	0800626f 	.word	0x0800626f
 8006260:	08006269 	.word	0x08006269
 8006264:	08006281 	.word	0x08006281
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e030      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d025      	beq.n	80062c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800627e:	e022      	b.n	80062c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006288:	d11f      	bne.n	80062ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800628e:	e01c      	b.n	80062ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d903      	bls.n	800629e <DMA_CheckFifoParam+0xb6>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b03      	cmp	r3, #3
 800629a:	d003      	beq.n	80062a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800629c:	e018      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
      break;
 80062a2:	e015      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00e      	beq.n	80062ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
      break;
 80062b4:	e00b      	b.n	80062ce <DMA_CheckFifoParam+0xe6>
      break;
 80062b6:	bf00      	nop
 80062b8:	e00a      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      break;
 80062ba:	bf00      	nop
 80062bc:	e008      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      break;
 80062be:	bf00      	nop
 80062c0:	e006      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      break;
 80062c2:	bf00      	nop
 80062c4:	e004      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      break;
 80062c6:	bf00      	nop
 80062c8:	e002      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80062ca:	bf00      	nop
 80062cc:	e000      	b.n	80062d0 <DMA_CheckFifoParam+0xe8>
      break;
 80062ce:	bf00      	nop
    }
  } 
  
  return status; 
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop

080062e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e039      	b.n	8006366 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fe fa5a 	bl	80047c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006330:	f023 0107 	bic.w	r1, r3, #7
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_DMA2D_Init+0x90>)
 8006348:	4013      	ands	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68d1      	ldr	r1, [r2, #12]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	430b      	orrs	r3, r1
 8006354:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	ffffc000 	.word	0xffffc000

08006374 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af02      	add	r7, sp, #8
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_DMA2D_Start+0x1c>
 800638c:	2302      	movs	r3, #2
 800638e:	e018      	b.n	80063c2 <HAL_DMA2D_Start+0x4e>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fa98 	bl	80068e0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d056      	beq.n	8006494 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80063e6:	f7fe ffd1 	bl	800538c <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80063ec:	e04b      	b.n	8006486 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d023      	beq.n	8006448 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	f043 0202 	orr.w	r2, r3, #2
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	f043 0201 	orr.w	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2221      	movs	r2, #33	; 0x21
 8006432:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0a5      	b.n	8006594 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644e:	d01a      	beq.n	8006486 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006450:	f7fe ff9c 	bl	800538c <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d302      	bcc.n	8006466 <HAL_DMA2D_PollForTransfer+0x9c>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2203      	movs	r2, #3
 8006476:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e086      	b.n	8006594 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0ac      	beq.n	80063ee <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d061      	beq.n	800657a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80064b6:	f7fe ff69 	bl	800538c <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80064bc:	e056      	b.n	800656c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02e      	beq.n	800652e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	f043 0202 	orr.w	r2, r3, #2
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	f043 0201 	orr.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2229      	movs	r2, #41	; 0x29
 8006518:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2204      	movs	r2, #4
 800651e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e032      	b.n	8006594 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006534:	d01a      	beq.n	800656c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fe ff29 	bl	800538c <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <HAL_DMA2D_PollForTransfer+0x182>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10f      	bne.n	800656c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2203      	movs	r2, #3
 800655c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e013      	b.n	8006594 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0a1      	beq.n	80064be <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2212      	movs	r2, #18
 8006580:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d026      	beq.n	800660c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d021      	beq.n	800660c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065d6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	f043 0201 	orr.w	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2201      	movs	r2, #1
 80065ea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2204      	movs	r2, #4
 80065f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d026      	beq.n	8006664 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d021      	beq.n	8006664 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800662e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2220      	movs	r2, #32
 8006636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663c:	f043 0202 	orr.w	r2, r3, #2
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2204      	movs	r2, #4
 8006648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d026      	beq.n	80066bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006674:	2b00      	cmp	r3, #0
 8006676:	d021      	beq.n	80066bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006686:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2208      	movs	r2, #8
 800668e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006694:	f043 0204 	orr.w	r2, r3, #4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2204      	movs	r2, #4
 80066a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d013      	beq.n	80066ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2204      	movs	r2, #4
 80066e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f853 	bl	8006794 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d024      	beq.n	8006742 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01f      	beq.n	8006742 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006710:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2202      	movs	r2, #2
 8006718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01f      	beq.n	800678c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01a      	beq.n	800678c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006764:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2210      	movs	r2, #16
 800676c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f80e 	bl	80067a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_DMA2D_ConfigLayer+0x20>
 80067d8:	2302      	movs	r3, #2
 80067da:	e079      	b.n	80068d0 <HAL_DMA2D_ConfigLayer+0x114>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	3318      	adds	r3, #24
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006806:	4b35      	ldr	r3, [pc, #212]	; (80068dc <HAL_DMA2D_ConfigLayer+0x120>)
 8006808:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b0a      	cmp	r3, #10
 8006810:	d003      	beq.n	800681a <HAL_DMA2D_ConfigLayer+0x5e>
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b09      	cmp	r3, #9
 8006818:	d107      	bne.n	800682a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e005      	b.n	8006836 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	061b      	lsls	r3, r3, #24
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d120      	bne.n	800687e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	43db      	mvns	r3, r3
 8006846:	ea02 0103 	and.w	r1, r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	430a      	orrs	r2, r1
 8006852:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b0a      	cmp	r3, #10
 8006864:	d003      	beq.n	800686e <HAL_DMA2D_ConfigLayer+0xb2>
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b09      	cmp	r3, #9
 800686c:	d127      	bne.n	80068be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
 800687c:	e01f      	b.n	80068be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	43db      	mvns	r3, r3
 8006888:	ea02 0103 	and.w	r1, r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	430a      	orrs	r2, r1
 8006894:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b0a      	cmp	r3, #10
 80068a6:	d003      	beq.n	80068b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b09      	cmp	r3, #9
 80068ae:	d106      	bne.n	80068be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80068bc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	ff03000f 	.word	0xff03000f

080068e0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b08b      	sub	sp, #44	; 0x2c
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	041a      	lsls	r2, r3, #16
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	431a      	orrs	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006918:	d174      	bne.n	8006a04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006920:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006928:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006930:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d108      	bne.n	8006952 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	431a      	orrs	r2, r3
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	4313      	orrs	r3, r2
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
 8006950:	e053      	b.n	80069fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d106      	bne.n	8006968 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4313      	orrs	r3, r2
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	e048      	b.n	80069fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d111      	bne.n	8006994 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	0cdb      	lsrs	r3, r3, #19
 8006974:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	0a9b      	lsrs	r3, r3, #10
 800697a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	02db      	lsls	r3, r3, #11
 800698a:	4313      	orrs	r3, r2
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
 8006992:	e032      	b.n	80069fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d117      	bne.n	80069cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	0fdb      	lsrs	r3, r3, #31
 80069a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	0cdb      	lsrs	r3, r3, #19
 80069a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	0adb      	lsrs	r3, r3, #11
 80069ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	08db      	lsrs	r3, r3, #3
 80069b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	431a      	orrs	r2, r3
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	03db      	lsls	r3, r3, #15
 80069c2:	4313      	orrs	r3, r2
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ca:	e016      	b.n	80069fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	0f1b      	lsrs	r3, r3, #28
 80069d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	0d1b      	lsrs	r3, r3, #20
 80069d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	0b1b      	lsrs	r3, r3, #12
 80069dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	011a      	lsls	r2, r3, #4
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	431a      	orrs	r2, r3
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	031b      	lsls	r3, r3, #12
 80069f2:	4313      	orrs	r3, r2
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006a02:	e003      	b.n	8006a0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	60da      	str	r2, [r3, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	372c      	adds	r7, #44	; 0x2c
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b089      	sub	sp, #36	; 0x24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	e175      	b.n	8006d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006a38:	2201      	movs	r2, #1
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	f040 8164 	bne.w	8006d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d005      	beq.n	8006a6e <HAL_GPIO_Init+0x56>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d130      	bne.n	8006ad0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	2203      	movs	r2, #3
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4013      	ands	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	43db      	mvns	r3, r3
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 0201 	and.w	r2, r3, #1
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d017      	beq.n	8006b0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d123      	bne.n	8006b60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	08da      	lsrs	r2, r3, #3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3208      	adds	r2, #8
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	220f      	movs	r2, #15
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	43db      	mvns	r3, r3
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	08da      	lsrs	r2, r3, #3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3208      	adds	r2, #8
 8006b5a:	69b9      	ldr	r1, [r7, #24]
 8006b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	43db      	mvns	r3, r3
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	4013      	ands	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f003 0203 	and.w	r2, r3, #3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80be 	beq.w	8006d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ba2:	4b66      	ldr	r3, [pc, #408]	; (8006d3c <HAL_GPIO_Init+0x324>)
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	4a65      	ldr	r2, [pc, #404]	; (8006d3c <HAL_GPIO_Init+0x324>)
 8006ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bac:	6453      	str	r3, [r2, #68]	; 0x44
 8006bae:	4b63      	ldr	r3, [pc, #396]	; (8006d3c <HAL_GPIO_Init+0x324>)
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006bba:	4a61      	ldr	r2, [pc, #388]	; (8006d40 <HAL_GPIO_Init+0x328>)
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	089b      	lsrs	r3, r3, #2
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	220f      	movs	r2, #15
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a58      	ldr	r2, [pc, #352]	; (8006d44 <HAL_GPIO_Init+0x32c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d037      	beq.n	8006c56 <HAL_GPIO_Init+0x23e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a57      	ldr	r2, [pc, #348]	; (8006d48 <HAL_GPIO_Init+0x330>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d031      	beq.n	8006c52 <HAL_GPIO_Init+0x23a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a56      	ldr	r2, [pc, #344]	; (8006d4c <HAL_GPIO_Init+0x334>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d02b      	beq.n	8006c4e <HAL_GPIO_Init+0x236>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a55      	ldr	r2, [pc, #340]	; (8006d50 <HAL_GPIO_Init+0x338>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d025      	beq.n	8006c4a <HAL_GPIO_Init+0x232>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a54      	ldr	r2, [pc, #336]	; (8006d54 <HAL_GPIO_Init+0x33c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01f      	beq.n	8006c46 <HAL_GPIO_Init+0x22e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a53      	ldr	r2, [pc, #332]	; (8006d58 <HAL_GPIO_Init+0x340>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d019      	beq.n	8006c42 <HAL_GPIO_Init+0x22a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a52      	ldr	r2, [pc, #328]	; (8006d5c <HAL_GPIO_Init+0x344>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <HAL_GPIO_Init+0x226>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a51      	ldr	r2, [pc, #324]	; (8006d60 <HAL_GPIO_Init+0x348>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00d      	beq.n	8006c3a <HAL_GPIO_Init+0x222>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a50      	ldr	r2, [pc, #320]	; (8006d64 <HAL_GPIO_Init+0x34c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d007      	beq.n	8006c36 <HAL_GPIO_Init+0x21e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a4f      	ldr	r2, [pc, #316]	; (8006d68 <HAL_GPIO_Init+0x350>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d101      	bne.n	8006c32 <HAL_GPIO_Init+0x21a>
 8006c2e:	2309      	movs	r3, #9
 8006c30:	e012      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c32:	230a      	movs	r3, #10
 8006c34:	e010      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c36:	2308      	movs	r3, #8
 8006c38:	e00e      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c3a:	2307      	movs	r3, #7
 8006c3c:	e00c      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c3e:	2306      	movs	r3, #6
 8006c40:	e00a      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c42:	2305      	movs	r3, #5
 8006c44:	e008      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c46:	2304      	movs	r3, #4
 8006c48:	e006      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e004      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e002      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <HAL_GPIO_Init+0x240>
 8006c56:	2300      	movs	r3, #0
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	f002 0203 	and.w	r2, r2, #3
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	4093      	lsls	r3, r2
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006c68:	4935      	ldr	r1, [pc, #212]	; (8006d40 <HAL_GPIO_Init+0x328>)
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	089b      	lsrs	r3, r3, #2
 8006c6e:	3302      	adds	r3, #2
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c76:	4b3d      	ldr	r3, [pc, #244]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4013      	ands	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c9a:	4a34      	ldr	r2, [pc, #208]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ca0:	4b32      	ldr	r3, [pc, #200]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	4013      	ands	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cc4:	4a29      	ldr	r2, [pc, #164]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006cca:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cee:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4013      	ands	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d18:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <HAL_GPIO_Init+0x354>)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3301      	adds	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	f67f ae86 	bls.w	8006a38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	3724      	adds	r7, #36	; 0x24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40013800 	.word	0x40013800
 8006d44:	40020000 	.word	0x40020000
 8006d48:	40020400 	.word	0x40020400
 8006d4c:	40020800 	.word	0x40020800
 8006d50:	40020c00 	.word	0x40020c00
 8006d54:	40021000 	.word	0x40021000
 8006d58:	40021400 	.word	0x40021400
 8006d5c:	40021800 	.word	0x40021800
 8006d60:	40021c00 	.word	0x40021c00
 8006d64:	40022000 	.word	0x40022000
 8006d68:	40022400 	.word	0x40022400
 8006d6c:	40013c00 	.word	0x40013c00

08006d70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e0d9      	b.n	8006f40 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	f040 80c9 	bne.w	8006f3a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006da8:	4a6b      	ldr	r2, [pc, #428]	; (8006f58 <HAL_GPIO_DeInit+0x1e8>)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	089b      	lsrs	r3, r3, #2
 8006dae:	3302      	adds	r3, #2
 8006db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	220f      	movs	r2, #15
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a63      	ldr	r2, [pc, #396]	; (8006f5c <HAL_GPIO_DeInit+0x1ec>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d037      	beq.n	8006e42 <HAL_GPIO_DeInit+0xd2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a62      	ldr	r2, [pc, #392]	; (8006f60 <HAL_GPIO_DeInit+0x1f0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d031      	beq.n	8006e3e <HAL_GPIO_DeInit+0xce>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a61      	ldr	r2, [pc, #388]	; (8006f64 <HAL_GPIO_DeInit+0x1f4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d02b      	beq.n	8006e3a <HAL_GPIO_DeInit+0xca>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a60      	ldr	r2, [pc, #384]	; (8006f68 <HAL_GPIO_DeInit+0x1f8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d025      	beq.n	8006e36 <HAL_GPIO_DeInit+0xc6>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a5f      	ldr	r2, [pc, #380]	; (8006f6c <HAL_GPIO_DeInit+0x1fc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01f      	beq.n	8006e32 <HAL_GPIO_DeInit+0xc2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a5e      	ldr	r2, [pc, #376]	; (8006f70 <HAL_GPIO_DeInit+0x200>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d019      	beq.n	8006e2e <HAL_GPIO_DeInit+0xbe>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a5d      	ldr	r2, [pc, #372]	; (8006f74 <HAL_GPIO_DeInit+0x204>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_GPIO_DeInit+0xba>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a5c      	ldr	r2, [pc, #368]	; (8006f78 <HAL_GPIO_DeInit+0x208>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00d      	beq.n	8006e26 <HAL_GPIO_DeInit+0xb6>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a5b      	ldr	r2, [pc, #364]	; (8006f7c <HAL_GPIO_DeInit+0x20c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d007      	beq.n	8006e22 <HAL_GPIO_DeInit+0xb2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a5a      	ldr	r2, [pc, #360]	; (8006f80 <HAL_GPIO_DeInit+0x210>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <HAL_GPIO_DeInit+0xae>
 8006e1a:	2309      	movs	r3, #9
 8006e1c:	e012      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e1e:	230a      	movs	r3, #10
 8006e20:	e010      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e22:	2308      	movs	r3, #8
 8006e24:	e00e      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e26:	2307      	movs	r3, #7
 8006e28:	e00c      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e2a:	2306      	movs	r3, #6
 8006e2c:	e00a      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e2e:	2305      	movs	r3, #5
 8006e30:	e008      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e32:	2304      	movs	r3, #4
 8006e34:	e006      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e36:	2303      	movs	r3, #3
 8006e38:	e004      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e002      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <HAL_GPIO_DeInit+0xd4>
 8006e42:	2300      	movs	r3, #0
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	f002 0203 	and.w	r2, r2, #3
 8006e4a:	0092      	lsls	r2, r2, #2
 8006e4c:	4093      	lsls	r3, r2
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d132      	bne.n	8006eba <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006e54:	4b4b      	ldr	r3, [pc, #300]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	43db      	mvns	r3, r3
 8006e5c:	4949      	ldr	r1, [pc, #292]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006e62:	4b48      	ldr	r3, [pc, #288]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	4946      	ldr	r1, [pc, #280]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006e70:	4b44      	ldr	r3, [pc, #272]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	43db      	mvns	r3, r3
 8006e78:	4942      	ldr	r1, [pc, #264]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006e7e:	4b41      	ldr	r3, [pc, #260]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	43db      	mvns	r3, r3
 8006e86:	493f      	ldr	r1, [pc, #252]	; (8006f84 <HAL_GPIO_DeInit+0x214>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	220f      	movs	r2, #15
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006e9c:	4a2e      	ldr	r2, [pc, #184]	; (8006f58 <HAL_GPIO_DeInit+0x1e8>)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	089b      	lsrs	r3, r3, #2
 8006ea2:	3302      	adds	r3, #2
 8006ea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	43da      	mvns	r2, r3
 8006eac:	482a      	ldr	r0, [pc, #168]	; (8006f58 <HAL_GPIO_DeInit+0x1e8>)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	089b      	lsrs	r3, r3, #2
 8006eb2:	400a      	ands	r2, r1
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	2103      	movs	r1, #3
 8006ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	401a      	ands	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	08da      	lsrs	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3208      	adds	r2, #8
 8006ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	220f      	movs	r2, #15
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	08d2      	lsrs	r2, r2, #3
 8006ef0:	4019      	ands	r1, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3208      	adds	r2, #8
 8006ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	2103      	movs	r1, #3
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	2101      	movs	r1, #1
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	401a      	ands	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	2103      	movs	r1, #3
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	43db      	mvns	r3, r3
 8006f34:	401a      	ands	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2b0f      	cmp	r3, #15
 8006f44:	f67f af22 	bls.w	8006d8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40013800 	.word	0x40013800
 8006f5c:	40020000 	.word	0x40020000
 8006f60:	40020400 	.word	0x40020400
 8006f64:	40020800 	.word	0x40020800
 8006f68:	40020c00 	.word	0x40020c00
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	40021400 	.word	0x40021400
 8006f74:	40021800 	.word	0x40021800
 8006f78:	40021c00 	.word	0x40021c00
 8006f7c:	40022000 	.word	0x40022000
 8006f80:	40022400 	.word	0x40022400
 8006f84:	40013c00 	.word	0x40013c00

08006f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	887b      	ldrh	r3, [r7, #2]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
 8006fa4:	e001      	b.n	8006faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	807b      	strh	r3, [r7, #2]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fc8:	787b      	ldrb	r3, [r7, #1]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006fd4:	e003      	b.n	8006fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006fd6:	887b      	ldrh	r3, [r7, #2]
 8006fd8:	041a      	lsls	r2, r3, #16
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	619a      	str	r2, [r3, #24]
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ffc:	887a      	ldrh	r2, [r7, #2]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4013      	ands	r3, r2
 8007002:	041a      	lsls	r2, r3, #16
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	43d9      	mvns	r1, r3
 8007008:	887b      	ldrh	r3, [r7, #2]
 800700a:	400b      	ands	r3, r1
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	619a      	str	r2, [r3, #24]
}
 8007012:	bf00      	nop
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e07f      	b.n	8007132 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fd fbe0 	bl	800480c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2224      	movs	r2, #36	; 0x24
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d107      	bne.n	800709a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007096:	609a      	str	r2, [r3, #8]
 8007098:	e006      	b.n	80070a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80070a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d104      	bne.n	80070ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6859      	ldr	r1, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4b1d      	ldr	r3, [pc, #116]	; (800713c <HAL_I2C_Init+0x11c>)
 80070c6:	430b      	orrs	r3, r1
 80070c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69d9      	ldr	r1, [r3, #28]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	02008000 	.word	0x02008000

08007140 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e021      	b.n	8007196 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2224      	movs	r2, #36	; 0x24
 8007156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0201 	bic.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fd fbf6 	bl	800495c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	461a      	mov	r2, r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	817b      	strh	r3, [r7, #10]
 80071b2:	460b      	mov	r3, r1
 80071b4:	813b      	strh	r3, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	f040 80f9 	bne.w	80073ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_I2C_Mem_Write+0x34>
 80071ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d105      	bne.n	80071e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e0ed      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_I2C_Mem_Write+0x4e>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e0e6      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071f6:	f7fe f8c9 	bl	800538c <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2319      	movs	r3, #25
 8007202:	2201      	movs	r2, #1
 8007204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fad1 	bl	80077b0 <I2C_WaitOnFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e0d1      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2221      	movs	r2, #33	; 0x21
 800721c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2240      	movs	r2, #64	; 0x40
 8007224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a3a      	ldr	r2, [r7, #32]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007240:	88f8      	ldrh	r0, [r7, #6]
 8007242:	893a      	ldrh	r2, [r7, #8]
 8007244:	8979      	ldrh	r1, [r7, #10]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	4603      	mov	r3, r0
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f9e1 	bl	8007618 <I2C_RequestMemoryWrite>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e0a9      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726c:	b29b      	uxth	r3, r3
 800726e:	2bff      	cmp	r3, #255	; 0xff
 8007270:	d90e      	bls.n	8007290 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727c:	b2da      	uxtb	r2, r3
 800727e:	8979      	ldrh	r1, [r7, #10]
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fc39 	bl	8007b00 <I2C_TransferConfig>
 800728e:	e00f      	b.n	80072b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	8979      	ldrh	r1, [r7, #10]
 80072a2:	2300      	movs	r3, #0
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fc28 	bl	8007b00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fabb 	bl	8007830 <I2C_WaitOnTXISFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e07b      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	781a      	ldrb	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d034      	beq.n	8007368 <HAL_I2C_Mem_Write+0x1c8>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	d130      	bne.n	8007368 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	2200      	movs	r2, #0
 800730e:	2180      	movs	r1, #128	; 0x80
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fa4d 	bl	80077b0 <I2C_WaitOnFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e04d      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007324:	b29b      	uxth	r3, r3
 8007326:	2bff      	cmp	r3, #255	; 0xff
 8007328:	d90e      	bls.n	8007348 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	22ff      	movs	r2, #255	; 0xff
 800732e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007334:	b2da      	uxtb	r2, r3
 8007336:	8979      	ldrh	r1, [r7, #10]
 8007338:	2300      	movs	r3, #0
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fbdd 	bl	8007b00 <I2C_TransferConfig>
 8007346:	e00f      	b.n	8007368 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	b2da      	uxtb	r2, r3
 8007358:	8979      	ldrh	r1, [r7, #10]
 800735a:	2300      	movs	r3, #0
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fbcc 	bl	8007b00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d19e      	bne.n	80072b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 fa9a 	bl	80078b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e01a      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2220      	movs	r2, #32
 800738c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6859      	ldr	r1, [r3, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <HAL_I2C_Mem_Write+0x224>)
 800739a:	400b      	ands	r3, r1
 800739c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
  }
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	fe00e800 	.word	0xfe00e800

080073c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	817b      	strh	r3, [r7, #10]
 80073da:	460b      	mov	r3, r1
 80073dc:	813b      	strh	r3, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	f040 80fd 	bne.w	80075ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_I2C_Mem_Read+0x34>
 80073f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007402:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0f1      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_I2C_Mem_Read+0x4e>
 8007412:	2302      	movs	r3, #2
 8007414:	e0ea      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800741e:	f7fd ffb5 	bl	800538c <HAL_GetTick>
 8007422:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2319      	movs	r3, #25
 800742a:	2201      	movs	r2, #1
 800742c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f9bd 	bl	80077b0 <I2C_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0d5      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2222      	movs	r2, #34	; 0x22
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2240      	movs	r2, #64	; 0x40
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007468:	88f8      	ldrh	r0, [r7, #6]
 800746a:	893a      	ldrh	r2, [r7, #8]
 800746c:	8979      	ldrh	r1, [r7, #10]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4603      	mov	r3, r0
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f921 	bl	80076c0 <I2C_RequestMemoryRead>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e0ad      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2bff      	cmp	r3, #255	; 0xff
 8007498:	d90e      	bls.n	80074b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	22ff      	movs	r2, #255	; 0xff
 800749e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	8979      	ldrh	r1, [r7, #10]
 80074a8:	4b52      	ldr	r3, [pc, #328]	; (80075f4 <HAL_I2C_Mem_Read+0x22c>)
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 fb25 	bl	8007b00 <I2C_TransferConfig>
 80074b6:	e00f      	b.n	80074d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	8979      	ldrh	r1, [r7, #10]
 80074ca:	4b4a      	ldr	r3, [pc, #296]	; (80075f4 <HAL_I2C_Mem_Read+0x22c>)
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 fb14 	bl	8007b00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	2200      	movs	r2, #0
 80074e0:	2104      	movs	r1, #4
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f964 	bl	80077b0 <I2C_WaitOnFlagUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e07c      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d034      	beq.n	8007598 <HAL_I2C_Mem_Read+0x1d0>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	d130      	bne.n	8007598 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	2200      	movs	r2, #0
 800753e:	2180      	movs	r1, #128	; 0x80
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f935 	bl	80077b0 <I2C_WaitOnFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e04d      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	2bff      	cmp	r3, #255	; 0xff
 8007558:	d90e      	bls.n	8007578 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	22ff      	movs	r2, #255	; 0xff
 800755e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007564:	b2da      	uxtb	r2, r3
 8007566:	8979      	ldrh	r1, [r7, #10]
 8007568:	2300      	movs	r3, #0
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fac5 	bl	8007b00 <I2C_TransferConfig>
 8007576:	e00f      	b.n	8007598 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007586:	b2da      	uxtb	r2, r3
 8007588:	8979      	ldrh	r1, [r7, #10]
 800758a:	2300      	movs	r3, #0
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fab4 	bl	8007b00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d19a      	bne.n	80074d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f982 	bl	80078b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e01a      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2220      	movs	r2, #32
 80075bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6859      	ldr	r1, [r3, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <HAL_I2C_Mem_Read+0x230>)
 80075ca:	400b      	ands	r3, r1
 80075cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e000      	b.n	80075ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80075ea:	2302      	movs	r3, #2
  }
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	80002400 	.word	0x80002400
 80075f8:	fe00e800 	.word	0xfe00e800

080075fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800760a:	b2db      	uxtb	r3, r3
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	4608      	mov	r0, r1
 8007622:	4611      	mov	r1, r2
 8007624:	461a      	mov	r2, r3
 8007626:	4603      	mov	r3, r0
 8007628:	817b      	strh	r3, [r7, #10]
 800762a:	460b      	mov	r3, r1
 800762c:	813b      	strh	r3, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	8979      	ldrh	r1, [r7, #10]
 8007638:	4b20      	ldr	r3, [pc, #128]	; (80076bc <I2C_RequestMemoryWrite+0xa4>)
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fa5d 	bl	8007b00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	69b9      	ldr	r1, [r7, #24]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f8f0 	bl	8007830 <I2C_WaitOnTXISFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e02c      	b.n	80076b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d105      	bne.n	800766c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007660:	893b      	ldrh	r3, [r7, #8]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	629a      	str	r2, [r3, #40]	; 0x28
 800766a:	e015      	b.n	8007698 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800766c:	893b      	ldrh	r3, [r7, #8]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	b29b      	uxth	r3, r3
 8007672:	b2da      	uxtb	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	69b9      	ldr	r1, [r7, #24]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f8d6 	bl	8007830 <I2C_WaitOnTXISFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e012      	b.n	80076b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800768e:	893b      	ldrh	r3, [r7, #8]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	2200      	movs	r2, #0
 80076a0:	2180      	movs	r1, #128	; 0x80
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f884 	bl	80077b0 <I2C_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	80002000 	.word	0x80002000

080076c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	817b      	strh	r3, [r7, #10]
 80076d2:	460b      	mov	r3, r1
 80076d4:	813b      	strh	r3, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	8979      	ldrh	r1, [r7, #10]
 80076e0:	4b20      	ldr	r3, [pc, #128]	; (8007764 <I2C_RequestMemoryRead+0xa4>)
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fa0a 	bl	8007b00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	69b9      	ldr	r1, [r7, #24]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f89d 	bl	8007830 <I2C_WaitOnTXISFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e02c      	b.n	800775a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d105      	bne.n	8007712 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007706:	893b      	ldrh	r3, [r7, #8]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28
 8007710:	e015      	b.n	800773e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007712:	893b      	ldrh	r3, [r7, #8]
 8007714:	0a1b      	lsrs	r3, r3, #8
 8007716:	b29b      	uxth	r3, r3
 8007718:	b2da      	uxtb	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	69b9      	ldr	r1, [r7, #24]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f883 	bl	8007830 <I2C_WaitOnTXISFlagUntilTimeout>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e012      	b.n	800775a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	2200      	movs	r2, #0
 8007746:	2140      	movs	r1, #64	; 0x40
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f831 	bl	80077b0 <I2C_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	80002000 	.word	0x80002000

08007768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b02      	cmp	r3, #2
 800777c:	d103      	bne.n	8007786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b01      	cmp	r3, #1
 8007792:	d007      	beq.n	80077a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	619a      	str	r2, [r3, #24]
  }
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077c0:	e022      	b.n	8007808 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c8:	d01e      	beq.n	8007808 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ca:	f7fd fddf 	bl	800538c <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d302      	bcc.n	80077e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d113      	bne.n	8007808 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e4:	f043 0220 	orr.w	r2, r3, #32
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e00f      	b.n	8007828 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4013      	ands	r3, r2
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	429a      	cmp	r2, r3
 8007816:	bf0c      	ite	eq
 8007818:	2301      	moveq	r3, #1
 800781a:	2300      	movne	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	429a      	cmp	r2, r3
 8007824:	d0cd      	beq.n	80077c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800783c:	e02c      	b.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f870 	bl	8007928 <I2C_IsErrorOccurred>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e02a      	b.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007858:	d01e      	beq.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785a:	f7fd fd97 	bl	800538c <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d113      	bne.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e007      	b.n	80078a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d1cb      	bne.n	800783e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078bc:	e028      	b.n	8007910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f830 	bl	8007928 <I2C_IsErrorOccurred>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e026      	b.n	8007920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d2:	f7fd fd5b 	bl	800538c <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d113      	bne.n	8007910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	f043 0220 	orr.w	r2, r3, #32
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e007      	b.n	8007920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b20      	cmp	r3, #32
 800791c:	d1cf      	bne.n	80078be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	f003 0310 	and.w	r3, r3, #16
 8007950:	2b00      	cmp	r3, #0
 8007952:	d075      	beq.n	8007a40 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2210      	movs	r2, #16
 800795a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800795c:	e056      	b.n	8007a0c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007964:	d052      	beq.n	8007a0c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007966:	f7fd fd11 	bl	800538c <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	d302      	bcc.n	800797c <I2C_IsErrorOccurred+0x54>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d147      	bne.n	8007a0c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007986:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800798e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799e:	d12e      	bne.n	80079fe <I2C_IsErrorOccurred+0xd6>
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079a6:	d02a      	beq.n	80079fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80079a8:	7cfb      	ldrb	r3, [r7, #19]
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d027      	beq.n	80079fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079bc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079be:	f7fd fce5 	bl	800538c <HAL_GetTick>
 80079c2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079c4:	e01b      	b.n	80079fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80079c6:	f7fd fce1 	bl	800538c <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b19      	cmp	r3, #25
 80079d2:	d914      	bls.n	80079fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d8:	f043 0220 	orr.w	r2, r3, #32
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d1dc      	bne.n	80079c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d003      	beq.n	8007a22 <I2C_IsErrorOccurred+0xfa>
 8007a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d09d      	beq.n	800795e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d103      	bne.n	8007a32 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f043 0304 	orr.w	r3, r3, #4
 8007a38:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00b      	beq.n	8007a6a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	f043 0308 	orr.w	r3, r3, #8
 8007a7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f043 0302 	orr.w	r3, r3, #2
 8007a9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01c      	beq.n	8007af0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff fe56 	bl	8007768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6859      	ldr	r1, [r3, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <I2C_IsErrorOccurred+0x1d4>)
 8007ac8:	400b      	ands	r3, r1
 8007aca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3728      	adds	r7, #40	; 0x28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	fe00e800 	.word	0xfe00e800

08007b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	607b      	str	r3, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	817b      	strh	r3, [r7, #10]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b12:	897b      	ldrh	r3, [r7, #10]
 8007b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b18:	7a7b      	ldrb	r3, [r7, #9]
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b20:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b2e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	0d5b      	lsrs	r3, r3, #21
 8007b3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b3e:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <I2C_TransferConfig+0x60>)
 8007b40:	430b      	orrs	r3, r1
 8007b42:	43db      	mvns	r3, r3
 8007b44:	ea02 0103 	and.w	r1, r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	03ff63ff 	.word	0x03ff63ff

08007b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d138      	bne.n	8007bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e032      	b.n	8007bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	; 0x24
 8007b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6819      	ldr	r1, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0201 	orr.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e000      	b.n	8007bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d139      	bne.n	8007c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e033      	b.n	8007c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2224      	movs	r2, #36	; 0x24
 8007c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	e000      	b.n	8007c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c84:	2302      	movs	r3, #2
  }
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
	...

08007c94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e0bf      	b.n	8007e26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fc fe8a 	bl	80049d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699a      	ldr	r2, [r3, #24]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007cd6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6999      	ldr	r1, [r3, #24]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007cec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6899      	ldr	r1, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b4a      	ldr	r3, [pc, #296]	; (8007e30 <HAL_LTDC_Init+0x19c>)
 8007d08:	400b      	ands	r3, r1
 8007d0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	041b      	lsls	r3, r3, #16
 8007d12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6899      	ldr	r1, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	431a      	orrs	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68d9      	ldr	r1, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b3e      	ldr	r3, [pc, #248]	; (8007e30 <HAL_LTDC_Init+0x19c>)
 8007d36:	400b      	ands	r3, r1
 8007d38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	041b      	lsls	r3, r3, #16
 8007d40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68d9      	ldr	r1, [r3, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1a      	ldr	r2, [r3, #32]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6919      	ldr	r1, [r3, #16]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b33      	ldr	r3, [pc, #204]	; (8007e30 <HAL_LTDC_Init+0x19c>)
 8007d64:	400b      	ands	r3, r1
 8007d66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	041b      	lsls	r3, r3, #16
 8007d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6919      	ldr	r1, [r3, #16]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6959      	ldr	r1, [r3, #20]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <HAL_LTDC_Init+0x19c>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6959      	ldr	r1, [r3, #20]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0206 	orr.w	r2, r2, #6
 8007e02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	f000f800 	.word	0xf000f800

08007e34 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d023      	beq.n	8007e9e <HAL_LTDC_IRQHandler+0x6a>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01e      	beq.n	8007e9e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0204 	bic.w	r2, r2, #4
 8007e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2204      	movs	r2, #4
 8007e76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e7e:	f043 0201 	orr.w	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f86f 	bl	8007f7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d023      	beq.n	8007ef0 <HAL_LTDC_IRQHandler+0xbc>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01e      	beq.n	8007ef0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0202 	bic.w	r2, r2, #2
 8007ec0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ed0:	f043 0202 	orr.w	r2, r3, #2
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2204      	movs	r2, #4
 8007ede:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f846 	bl	8007f7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01b      	beq.n	8007f32 <HAL_LTDC_IRQHandler+0xfe>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d016      	beq.n	8007f32 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f82f 	bl	8007f90 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01b      	beq.n	8007f74 <HAL_LTDC_IRQHandler+0x140>
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d016      	beq.n	8007f74 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0208 	bic.w	r2, r2, #8
 8007f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2208      	movs	r2, #8
 8007f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f818 	bl	8007fa4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007f74:	bf00      	nop
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007fb8:	b5b0      	push	{r4, r5, r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <HAL_LTDC_ConfigLayer+0x1a>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e02c      	b.n	800802c <HAL_LTDC_ConfigLayer+0x74>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2134      	movs	r1, #52	; 0x34
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	461d      	mov	r5, r3
 8007ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 f81f 	bl	8008050 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2201      	movs	r2, #1
 8008018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bdb0      	pop	{r4, r5, r7, pc}

08008034 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008042:	b2db      	uxtb	r3, r3
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008050:	b480      	push	{r7}
 8008052:	b089      	sub	sp, #36	; 0x24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	0c1b      	lsrs	r3, r3, #16
 8008068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800806c:	4413      	add	r3, r2
 800806e:	041b      	lsls	r3, r3, #16
 8008070:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	01db      	lsls	r3, r3, #7
 800807c:	4413      	add	r3, r2
 800807e:	3384      	adds	r3, #132	; 0x84
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	4611      	mov	r1, r2
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	01d2      	lsls	r2, r2, #7
 800808c:	440a      	add	r2, r1
 800808e:	3284      	adds	r2, #132	; 0x84
 8008090:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008094:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a6:	4413      	add	r3, r2
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4619      	mov	r1, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	01db      	lsls	r3, r3, #7
 80080b4:	440b      	add	r3, r1
 80080b6:	3384      	adds	r3, #132	; 0x84
 80080b8:	4619      	mov	r1, r3
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	4313      	orrs	r3, r2
 80080be:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ce:	4413      	add	r3, r2
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	01db      	lsls	r3, r3, #7
 80080de:	4413      	add	r3, r2
 80080e0:	3384      	adds	r3, #132	; 0x84
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	4611      	mov	r1, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	01d2      	lsls	r2, r2, #7
 80080ee:	440a      	add	r2, r1
 80080f0:	3284      	adds	r2, #132	; 0x84
 80080f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80080f6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008106:	4413      	add	r3, r2
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4619      	mov	r1, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	01db      	lsls	r3, r3, #7
 8008114:	440b      	add	r3, r1
 8008116:	3384      	adds	r3, #132	; 0x84
 8008118:	4619      	mov	r1, r3
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	4313      	orrs	r3, r2
 800811e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	01db      	lsls	r3, r3, #7
 800812a:	4413      	add	r3, r2
 800812c:	3384      	adds	r3, #132	; 0x84
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	6812      	ldr	r2, [r2, #0]
 8008134:	4611      	mov	r1, r2
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	01d2      	lsls	r2, r2, #7
 800813a:	440a      	add	r2, r1
 800813c:	3284      	adds	r2, #132	; 0x84
 800813e:	f023 0307 	bic.w	r3, r3, #7
 8008142:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	01db      	lsls	r3, r3, #7
 800814e:	4413      	add	r3, r2
 8008150:	3384      	adds	r3, #132	; 0x84
 8008152:	461a      	mov	r2, r3
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800816a:	041b      	lsls	r3, r3, #16
 800816c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	061b      	lsls	r3, r3, #24
 8008174:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	01db      	lsls	r3, r3, #7
 8008180:	4413      	add	r3, r2
 8008182:	3384      	adds	r3, #132	; 0x84
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	01db      	lsls	r3, r3, #7
 8008190:	4413      	add	r3, r2
 8008192:	3384      	adds	r3, #132	; 0x84
 8008194:	461a      	mov	r2, r3
 8008196:	2300      	movs	r3, #0
 8008198:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081a0:	461a      	mov	r2, r3
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	431a      	orrs	r2, r3
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	431a      	orrs	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4619      	mov	r1, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	01db      	lsls	r3, r3, #7
 80081b4:	440b      	add	r3, r1
 80081b6:	3384      	adds	r3, #132	; 0x84
 80081b8:	4619      	mov	r1, r3
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	01db      	lsls	r3, r3, #7
 80081ca:	4413      	add	r3, r2
 80081cc:	3384      	adds	r3, #132	; 0x84
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	6812      	ldr	r2, [r2, #0]
 80081d4:	4611      	mov	r1, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	01d2      	lsls	r2, r2, #7
 80081da:	440a      	add	r2, r1
 80081dc:	3284      	adds	r2, #132	; 0x84
 80081de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	01db      	lsls	r3, r3, #7
 80081ee:	4413      	add	r3, r2
 80081f0:	3384      	adds	r3, #132	; 0x84
 80081f2:	461a      	mov	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	01db      	lsls	r3, r3, #7
 8008204:	4413      	add	r3, r2
 8008206:	3384      	adds	r3, #132	; 0x84
 8008208:	69da      	ldr	r2, [r3, #28]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4619      	mov	r1, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	01db      	lsls	r3, r3, #7
 8008214:	440b      	add	r3, r1
 8008216:	3384      	adds	r3, #132	; 0x84
 8008218:	4619      	mov	r1, r3
 800821a:	4b58      	ldr	r3, [pc, #352]	; (800837c <LTDC_SetConfig+0x32c>)
 800821c:	4013      	ands	r3, r2
 800821e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	68f9      	ldr	r1, [r7, #12]
 800822a:	6809      	ldr	r1, [r1, #0]
 800822c:	4608      	mov	r0, r1
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	01c9      	lsls	r1, r1, #7
 8008232:	4401      	add	r1, r0
 8008234:	3184      	adds	r1, #132	; 0x84
 8008236:	4313      	orrs	r3, r2
 8008238:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	01db      	lsls	r3, r3, #7
 8008244:	4413      	add	r3, r2
 8008246:	3384      	adds	r3, #132	; 0x84
 8008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	01db      	lsls	r3, r3, #7
 8008254:	4413      	add	r3, r2
 8008256:	3384      	adds	r3, #132	; 0x84
 8008258:	461a      	mov	r2, r3
 800825a:	2300      	movs	r3, #0
 800825c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	01db      	lsls	r3, r3, #7
 8008268:	4413      	add	r3, r2
 800826a:	3384      	adds	r3, #132	; 0x84
 800826c:	461a      	mov	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800827c:	2304      	movs	r3, #4
 800827e:	61fb      	str	r3, [r7, #28]
 8008280:	e01b      	b.n	80082ba <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d102      	bne.n	8008290 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800828a:	2303      	movs	r3, #3
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	e014      	b.n	80082ba <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b04      	cmp	r3, #4
 8008296:	d00b      	beq.n	80082b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800829c:	2b02      	cmp	r3, #2
 800829e:	d007      	beq.n	80082b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d003      	beq.n	80082b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082ac:	2b07      	cmp	r3, #7
 80082ae:	d102      	bne.n	80082b6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80082b0:	2302      	movs	r3, #2
 80082b2:	61fb      	str	r3, [r7, #28]
 80082b4:	e001      	b.n	80082ba <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80082b6:	2301      	movs	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	01db      	lsls	r3, r3, #7
 80082c4:	4413      	add	r3, r2
 80082c6:	3384      	adds	r3, #132	; 0x84
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	4611      	mov	r1, r2
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	01d2      	lsls	r2, r2, #7
 80082d4:	440a      	add	r2, r1
 80082d6:	3284      	adds	r2, #132	; 0x84
 80082d8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80082dc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	fb02 f303 	mul.w	r3, r2, r3
 80082e8:	041a      	lsls	r2, r3, #16
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6859      	ldr	r1, [r3, #4]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	1acb      	subs	r3, r1, r3
 80082f4:	69f9      	ldr	r1, [r7, #28]
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	3303      	adds	r3, #3
 80082fc:	68f9      	ldr	r1, [r7, #12]
 80082fe:	6809      	ldr	r1, [r1, #0]
 8008300:	4608      	mov	r0, r1
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	01c9      	lsls	r1, r1, #7
 8008306:	4401      	add	r1, r0
 8008308:	3184      	adds	r1, #132	; 0x84
 800830a:	4313      	orrs	r3, r2
 800830c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	01db      	lsls	r3, r3, #7
 8008318:	4413      	add	r3, r2
 800831a:	3384      	adds	r3, #132	; 0x84
 800831c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4619      	mov	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	01db      	lsls	r3, r3, #7
 8008328:	440b      	add	r3, r1
 800832a:	3384      	adds	r3, #132	; 0x84
 800832c:	4619      	mov	r1, r3
 800832e:	4b14      	ldr	r3, [pc, #80]	; (8008380 <LTDC_SetConfig+0x330>)
 8008330:	4013      	ands	r3, r2
 8008332:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	01db      	lsls	r3, r3, #7
 800833e:	4413      	add	r3, r2
 8008340:	3384      	adds	r3, #132	; 0x84
 8008342:	461a      	mov	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	01db      	lsls	r3, r3, #7
 8008354:	4413      	add	r3, r2
 8008356:	3384      	adds	r3, #132	; 0x84
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	4611      	mov	r1, r2
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	01d2      	lsls	r2, r2, #7
 8008364:	440a      	add	r2, r1
 8008366:	3284      	adds	r2, #132	; 0x84
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	6013      	str	r3, [r2, #0]
}
 800836e:	bf00      	nop
 8008370:	3724      	adds	r7, #36	; 0x24
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	fffff8f8 	.word	0xfffff8f8
 8008380:	fffff800 	.word	0xfffff800

08008384 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a04      	ldr	r2, [pc, #16]	; (80083a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800838e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008392:	6013      	str	r3, [r2, #0]
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40007000 	.word	0x40007000

080083a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80083ae:	4b23      	ldr	r3, [pc, #140]	; (800843c <HAL_PWREx_EnableOverDrive+0x98>)
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	4a22      	ldr	r2, [pc, #136]	; (800843c <HAL_PWREx_EnableOverDrive+0x98>)
 80083b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b8:	6413      	str	r3, [r2, #64]	; 0x40
 80083ba:	4b20      	ldr	r3, [pc, #128]	; (800843c <HAL_PWREx_EnableOverDrive+0x98>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80083c6:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1d      	ldr	r2, [pc, #116]	; (8008440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083d2:	f7fc ffdb 	bl	800538c <HAL_GetTick>
 80083d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80083d8:	e009      	b.n	80083ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80083da:	f7fc ffd7 	bl	800538c <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083e8:	d901      	bls.n	80083ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e022      	b.n	8008434 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80083ee:	4b14      	ldr	r3, [pc, #80]	; (8008440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fa:	d1ee      	bne.n	80083da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80083fc:	4b10      	ldr	r3, [pc, #64]	; (8008440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a0f      	ldr	r2, [pc, #60]	; (8008440 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008406:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008408:	f7fc ffc0 	bl	800538c <HAL_GetTick>
 800840c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800840e:	e009      	b.n	8008424 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008410:	f7fc ffbc 	bl	800538c <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800841e:	d901      	bls.n	8008424 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e007      	b.n	8008434 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008424:	4b06      	ldr	r3, [pc, #24]	; (8008440 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008430:	d1ee      	bne.n	8008410 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40023800 	.word	0x40023800
 8008440:	40007000 	.word	0x40007000

08008444 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800844c:	2300      	movs	r3, #0
 800844e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e291      	b.n	800897e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8087 	beq.w	8008576 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008468:	4b96      	ldr	r3, [pc, #600]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 030c 	and.w	r3, r3, #12
 8008470:	2b04      	cmp	r3, #4
 8008472:	d00c      	beq.n	800848e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008474:	4b93      	ldr	r3, [pc, #588]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f003 030c 	and.w	r3, r3, #12
 800847c:	2b08      	cmp	r3, #8
 800847e:	d112      	bne.n	80084a6 <HAL_RCC_OscConfig+0x62>
 8008480:	4b90      	ldr	r3, [pc, #576]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800848c:	d10b      	bne.n	80084a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800848e:	4b8d      	ldr	r3, [pc, #564]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d06c      	beq.n	8008574 <HAL_RCC_OscConfig+0x130>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d168      	bne.n	8008574 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e26b      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ae:	d106      	bne.n	80084be <HAL_RCC_OscConfig+0x7a>
 80084b0:	4b84      	ldr	r3, [pc, #528]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a83      	ldr	r2, [pc, #524]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	e02e      	b.n	800851c <HAL_RCC_OscConfig+0xd8>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10c      	bne.n	80084e0 <HAL_RCC_OscConfig+0x9c>
 80084c6:	4b7f      	ldr	r3, [pc, #508]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a7e      	ldr	r2, [pc, #504]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	4b7c      	ldr	r3, [pc, #496]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a7b      	ldr	r2, [pc, #492]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	e01d      	b.n	800851c <HAL_RCC_OscConfig+0xd8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084e8:	d10c      	bne.n	8008504 <HAL_RCC_OscConfig+0xc0>
 80084ea:	4b76      	ldr	r3, [pc, #472]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a75      	ldr	r2, [pc, #468]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	4b73      	ldr	r3, [pc, #460]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a72      	ldr	r2, [pc, #456]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80084fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	e00b      	b.n	800851c <HAL_RCC_OscConfig+0xd8>
 8008504:	4b6f      	ldr	r3, [pc, #444]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a6e      	ldr	r2, [pc, #440]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 800850a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	4b6c      	ldr	r3, [pc, #432]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a6b      	ldr	r2, [pc, #428]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800851a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d013      	beq.n	800854c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008524:	f7fc ff32 	bl	800538c <HAL_GetTick>
 8008528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800852c:	f7fc ff2e 	bl	800538c <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b64      	cmp	r3, #100	; 0x64
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e21f      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800853e:	4b61      	ldr	r3, [pc, #388]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <HAL_RCC_OscConfig+0xe8>
 800854a:	e014      	b.n	8008576 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854c:	f7fc ff1e 	bl	800538c <HAL_GetTick>
 8008550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008554:	f7fc ff1a 	bl	800538c <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b64      	cmp	r3, #100	; 0x64
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e20b      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008566:	4b57      	ldr	r3, [pc, #348]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f0      	bne.n	8008554 <HAL_RCC_OscConfig+0x110>
 8008572:	e000      	b.n	8008576 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d069      	beq.n	8008656 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008582:	4b50      	ldr	r3, [pc, #320]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 030c 	and.w	r3, r3, #12
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800858e:	4b4d      	ldr	r3, [pc, #308]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 030c 	and.w	r3, r3, #12
 8008596:	2b08      	cmp	r3, #8
 8008598:	d11c      	bne.n	80085d4 <HAL_RCC_OscConfig+0x190>
 800859a:	4b4a      	ldr	r3, [pc, #296]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d116      	bne.n	80085d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085a6:	4b47      	ldr	r3, [pc, #284]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <HAL_RCC_OscConfig+0x17a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d001      	beq.n	80085be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e1df      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085be:	4b41      	ldr	r3, [pc, #260]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	493d      	ldr	r1, [pc, #244]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085d2:	e040      	b.n	8008656 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d023      	beq.n	8008624 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085dc:	4b39      	ldr	r3, [pc, #228]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a38      	ldr	r2, [pc, #224]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80085e2:	f043 0301 	orr.w	r3, r3, #1
 80085e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e8:	f7fc fed0 	bl	800538c <HAL_GetTick>
 80085ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ee:	e008      	b.n	8008602 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085f0:	f7fc fecc 	bl	800538c <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e1bd      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008602:	4b30      	ldr	r3, [pc, #192]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f0      	beq.n	80085f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800860e:	4b2d      	ldr	r3, [pc, #180]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	4929      	ldr	r1, [pc, #164]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 800861e:	4313      	orrs	r3, r2
 8008620:	600b      	str	r3, [r1, #0]
 8008622:	e018      	b.n	8008656 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008624:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a26      	ldr	r2, [pc, #152]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 800862a:	f023 0301 	bic.w	r3, r3, #1
 800862e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008630:	f7fc feac 	bl	800538c <HAL_GetTick>
 8008634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008636:	e008      	b.n	800864a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008638:	f7fc fea8 	bl	800538c <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d901      	bls.n	800864a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e199      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800864a:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1f0      	bne.n	8008638 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d038      	beq.n	80086d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d019      	beq.n	800869e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800866a:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 800866c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866e:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008670:	f043 0301 	orr.w	r3, r3, #1
 8008674:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008676:	f7fc fe89 	bl	800538c <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800867c:	e008      	b.n	8008690 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800867e:	f7fc fe85 	bl	800538c <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d901      	bls.n	8008690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e176      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 8008692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0f0      	beq.n	800867e <HAL_RCC_OscConfig+0x23a>
 800869c:	e01a      	b.n	80086d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800869e:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80086a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a2:	4a08      	ldr	r2, [pc, #32]	; (80086c4 <HAL_RCC_OscConfig+0x280>)
 80086a4:	f023 0301 	bic.w	r3, r3, #1
 80086a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086aa:	f7fc fe6f 	bl	800538c <HAL_GetTick>
 80086ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086b0:	e00a      	b.n	80086c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086b2:	f7fc fe6b 	bl	800538c <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d903      	bls.n	80086c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e15c      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
 80086c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086c8:	4b91      	ldr	r3, [pc, #580]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80086ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1ee      	bne.n	80086b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80a4 	beq.w	800882a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086e2:	4b8b      	ldr	r3, [pc, #556]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10d      	bne.n	800870a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ee:	4b88      	ldr	r3, [pc, #544]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	4a87      	ldr	r2, [pc, #540]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80086f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f8:	6413      	str	r3, [r2, #64]	; 0x40
 80086fa:	4b85      	ldr	r3, [pc, #532]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008706:	2301      	movs	r3, #1
 8008708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800870a:	4b82      	ldr	r3, [pc, #520]	; (8008914 <HAL_RCC_OscConfig+0x4d0>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008712:	2b00      	cmp	r3, #0
 8008714:	d118      	bne.n	8008748 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008716:	4b7f      	ldr	r3, [pc, #508]	; (8008914 <HAL_RCC_OscConfig+0x4d0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a7e      	ldr	r2, [pc, #504]	; (8008914 <HAL_RCC_OscConfig+0x4d0>)
 800871c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008722:	f7fc fe33 	bl	800538c <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872a:	f7fc fe2f 	bl	800538c <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b64      	cmp	r3, #100	; 0x64
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e120      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800873c:	4b75      	ldr	r3, [pc, #468]	; (8008914 <HAL_RCC_OscConfig+0x4d0>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0f0      	beq.n	800872a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d106      	bne.n	800875e <HAL_RCC_OscConfig+0x31a>
 8008750:	4b6f      	ldr	r3, [pc, #444]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008754:	4a6e      	ldr	r2, [pc, #440]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	6713      	str	r3, [r2, #112]	; 0x70
 800875c:	e02d      	b.n	80087ba <HAL_RCC_OscConfig+0x376>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10c      	bne.n	8008780 <HAL_RCC_OscConfig+0x33c>
 8008766:	4b6a      	ldr	r3, [pc, #424]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876a:	4a69      	ldr	r2, [pc, #420]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	6713      	str	r3, [r2, #112]	; 0x70
 8008772:	4b67      	ldr	r3, [pc, #412]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	4a66      	ldr	r2, [pc, #408]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008778:	f023 0304 	bic.w	r3, r3, #4
 800877c:	6713      	str	r3, [r2, #112]	; 0x70
 800877e:	e01c      	b.n	80087ba <HAL_RCC_OscConfig+0x376>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	2b05      	cmp	r3, #5
 8008786:	d10c      	bne.n	80087a2 <HAL_RCC_OscConfig+0x35e>
 8008788:	4b61      	ldr	r3, [pc, #388]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 800878a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878c:	4a60      	ldr	r2, [pc, #384]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 800878e:	f043 0304 	orr.w	r3, r3, #4
 8008792:	6713      	str	r3, [r2, #112]	; 0x70
 8008794:	4b5e      	ldr	r3, [pc, #376]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008798:	4a5d      	ldr	r2, [pc, #372]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	6713      	str	r3, [r2, #112]	; 0x70
 80087a0:	e00b      	b.n	80087ba <HAL_RCC_OscConfig+0x376>
 80087a2:	4b5b      	ldr	r3, [pc, #364]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	4a5a      	ldr	r2, [pc, #360]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	6713      	str	r3, [r2, #112]	; 0x70
 80087ae:	4b58      	ldr	r3, [pc, #352]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	4a57      	ldr	r2, [pc, #348]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80087b4:	f023 0304 	bic.w	r3, r3, #4
 80087b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d015      	beq.n	80087ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c2:	f7fc fde3 	bl	800538c <HAL_GetTick>
 80087c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087c8:	e00a      	b.n	80087e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ca:	f7fc fddf 	bl	800538c <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d8:	4293      	cmp	r3, r2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e0ce      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e0:	4b4b      	ldr	r3, [pc, #300]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80087e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0ee      	beq.n	80087ca <HAL_RCC_OscConfig+0x386>
 80087ec:	e014      	b.n	8008818 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ee:	f7fc fdcd 	bl	800538c <HAL_GetTick>
 80087f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087f4:	e00a      	b.n	800880c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087f6:	f7fc fdc9 	bl	800538c <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	f241 3288 	movw	r2, #5000	; 0x1388
 8008804:	4293      	cmp	r3, r2
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e0b8      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800880c:	4b40      	ldr	r3, [pc, #256]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 800880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1ee      	bne.n	80087f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d105      	bne.n	800882a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800881e:	4b3c      	ldr	r3, [pc, #240]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	4a3b      	ldr	r2, [pc, #236]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008828:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 80a4 	beq.w	800897c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 030c 	and.w	r3, r3, #12
 800883c:	2b08      	cmp	r3, #8
 800883e:	d06b      	beq.n	8008918 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d149      	bne.n	80088dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008848:	4b31      	ldr	r3, [pc, #196]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a30      	ldr	r2, [pc, #192]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 800884e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008854:	f7fc fd9a 	bl	800538c <HAL_GetTick>
 8008858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800885c:	f7fc fd96 	bl	800538c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e087      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800886e:	4b28      	ldr	r3, [pc, #160]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f0      	bne.n	800885c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	69da      	ldr	r2, [r3, #28]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	019b      	lsls	r3, r3, #6
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	085b      	lsrs	r3, r3, #1
 8008892:	3b01      	subs	r3, #1
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	061b      	lsls	r3, r3, #24
 800889e:	4313      	orrs	r3, r2
 80088a0:	4a1b      	ldr	r2, [pc, #108]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80088a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088a8:	4b19      	ldr	r3, [pc, #100]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80088ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b4:	f7fc fd6a 	bl	800538c <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088bc:	f7fc fd66 	bl	800538c <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e057      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ce:	4b10      	ldr	r3, [pc, #64]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCC_OscConfig+0x478>
 80088da:	e04f      	b.n	800897c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088dc:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a0b      	ldr	r2, [pc, #44]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 80088e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fc fd50 	bl	800538c <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088f0:	f7fc fd4c 	bl	800538c <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e03d      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008902:	4b03      	ldr	r3, [pc, #12]	; (8008910 <HAL_RCC_OscConfig+0x4cc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x4ac>
 800890e:	e035      	b.n	800897c <HAL_RCC_OscConfig+0x538>
 8008910:	40023800 	.word	0x40023800
 8008914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008918:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <HAL_RCC_OscConfig+0x544>)
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d028      	beq.n	8008978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008930:	429a      	cmp	r2, r3
 8008932:	d121      	bne.n	8008978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800893e:	429a      	cmp	r2, r3
 8008940:	d11a      	bne.n	8008978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008948:	4013      	ands	r3, r2
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800894e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008950:	4293      	cmp	r3, r2
 8008952:	d111      	bne.n	8008978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	085b      	lsrs	r3, r3, #1
 8008960:	3b01      	subs	r3, #1
 8008962:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008964:	429a      	cmp	r2, r3
 8008966:	d107      	bne.n	8008978 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008974:	429a      	cmp	r2, r3
 8008976:	d001      	beq.n	800897c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	40023800 	.word	0x40023800

0800898c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0d0      	b.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089a4:	4b6a      	ldr	r3, [pc, #424]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 030f 	and.w	r3, r3, #15
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d910      	bls.n	80089d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089b2:	4b67      	ldr	r3, [pc, #412]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f023 020f 	bic.w	r2, r3, #15
 80089ba:	4965      	ldr	r1, [pc, #404]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	4313      	orrs	r3, r2
 80089c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089c2:	4b63      	ldr	r3, [pc, #396]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d001      	beq.n	80089d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e0b8      	b.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d020      	beq.n	8008a22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089ec:	4b59      	ldr	r3, [pc, #356]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	4a58      	ldr	r2, [pc, #352]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 80089f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80089f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a04:	4b53      	ldr	r3, [pc, #332]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	4a52      	ldr	r2, [pc, #328]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a10:	4b50      	ldr	r3, [pc, #320]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	494d      	ldr	r1, [pc, #308]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d040      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d107      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a36:	4b47      	ldr	r3, [pc, #284]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d115      	bne.n	8008a6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e07f      	b.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a4e:	4b41      	ldr	r3, [pc, #260]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e073      	b.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a5e:	4b3d      	ldr	r3, [pc, #244]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e06b      	b.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a6e:	4b39      	ldr	r3, [pc, #228]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f023 0203 	bic.w	r2, r3, #3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	4936      	ldr	r1, [pc, #216]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a80:	f7fc fc84 	bl	800538c <HAL_GetTick>
 8008a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a86:	e00a      	b.n	8008a9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a88:	f7fc fc80 	bl	800538c <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e053      	b.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a9e:	4b2d      	ldr	r3, [pc, #180]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 020c 	and.w	r2, r3, #12
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d1eb      	bne.n	8008a88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ab0:	4b27      	ldr	r3, [pc, #156]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d210      	bcs.n	8008ae0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008abe:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f023 020f 	bic.w	r2, r3, #15
 8008ac6:	4922      	ldr	r1, [pc, #136]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ace:	4b20      	ldr	r3, [pc, #128]	; (8008b50 <HAL_RCC_ClockConfig+0x1c4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d001      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e032      	b.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d008      	beq.n	8008afe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008aec:	4b19      	ldr	r3, [pc, #100]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4916      	ldr	r1, [pc, #88]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d009      	beq.n	8008b1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008b0a:	4b12      	ldr	r3, [pc, #72]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	490e      	ldr	r1, [pc, #56]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008b1e:	f000 f821 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 8008b22:	4602      	mov	r2, r0
 8008b24:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <HAL_RCC_ClockConfig+0x1c8>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	091b      	lsrs	r3, r3, #4
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	490a      	ldr	r1, [pc, #40]	; (8008b58 <HAL_RCC_ClockConfig+0x1cc>)
 8008b30:	5ccb      	ldrb	r3, [r1, r3]
 8008b32:	fa22 f303 	lsr.w	r3, r2, r3
 8008b36:	4a09      	ldr	r2, [pc, #36]	; (8008b5c <HAL_RCC_ClockConfig+0x1d0>)
 8008b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b3a:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <HAL_RCC_ClockConfig+0x1d4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fc fafc 	bl	800513c <HAL_InitTick>

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	40023c00 	.word	0x40023c00
 8008b54:	40023800 	.word	0x40023800
 8008b58:	080126d8 	.word	0x080126d8
 8008b5c:	20000040 	.word	0x20000040
 8008b60:	20000044 	.word	0x20000044

08008b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b64:	b5b0      	push	{r4, r5, r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6079      	str	r1, [r7, #4]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	60f9      	str	r1, [r7, #12]
 8008b72:	2100      	movs	r1, #0
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008b76:	2100      	movs	r1, #0
 8008b78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b7a:	4952      	ldr	r1, [pc, #328]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008b7c:	6889      	ldr	r1, [r1, #8]
 8008b7e:	f001 010c 	and.w	r1, r1, #12
 8008b82:	2908      	cmp	r1, #8
 8008b84:	d00d      	beq.n	8008ba2 <HAL_RCC_GetSysClockFreq+0x3e>
 8008b86:	2908      	cmp	r1, #8
 8008b88:	f200 8094 	bhi.w	8008cb4 <HAL_RCC_GetSysClockFreq+0x150>
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	d002      	beq.n	8008b96 <HAL_RCC_GetSysClockFreq+0x32>
 8008b90:	2904      	cmp	r1, #4
 8008b92:	d003      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0x38>
 8008b94:	e08e      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b96:	4b4c      	ldr	r3, [pc, #304]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8008b98:	60bb      	str	r3, [r7, #8]
      break;
 8008b9a:	e08e      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b9c:	4b4b      	ldr	r3, [pc, #300]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8008b9e:	60bb      	str	r3, [r7, #8]
      break;
 8008ba0:	e08b      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ba2:	4948      	ldr	r1, [pc, #288]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ba4:	6849      	ldr	r1, [r1, #4]
 8008ba6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008baa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008bac:	4945      	ldr	r1, [pc, #276]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bae:	6849      	ldr	r1, [r1, #4]
 8008bb0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d024      	beq.n	8008c02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bb8:	4942      	ldr	r1, [pc, #264]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bba:	6849      	ldr	r1, [r1, #4]
 8008bbc:	0989      	lsrs	r1, r1, #6
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	f04f 0100 	mov.w	r1, #0
 8008bc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008bc8:	f04f 0500 	mov.w	r5, #0
 8008bcc:	ea00 0204 	and.w	r2, r0, r4
 8008bd0:	ea01 0305 	and.w	r3, r1, r5
 8008bd4:	493d      	ldr	r1, [pc, #244]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8008bd6:	fb01 f003 	mul.w	r0, r1, r3
 8008bda:	2100      	movs	r1, #0
 8008bdc:	fb01 f102 	mul.w	r1, r1, r2
 8008be0:	1844      	adds	r4, r0, r1
 8008be2:	493a      	ldr	r1, [pc, #232]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8008be4:	fba2 0101 	umull	r0, r1, r2, r1
 8008be8:	1863      	adds	r3, r4, r1
 8008bea:	4619      	mov	r1, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	f7f7 fb64 	bl	80002c0 <__aeabi_uldivmod>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e04a      	b.n	8008c98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c02:	4b30      	ldr	r3, [pc, #192]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	099b      	lsrs	r3, r3, #6
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c12:	f04f 0100 	mov.w	r1, #0
 8008c16:	ea02 0400 	and.w	r4, r2, r0
 8008c1a:	ea03 0501 	and.w	r5, r3, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f04f 0200 	mov.w	r2, #0
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	014b      	lsls	r3, r1, #5
 8008c2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008c30:	0142      	lsls	r2, r0, #5
 8008c32:	4610      	mov	r0, r2
 8008c34:	4619      	mov	r1, r3
 8008c36:	1b00      	subs	r0, r0, r4
 8008c38:	eb61 0105 	sbc.w	r1, r1, r5
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	018b      	lsls	r3, r1, #6
 8008c46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008c4a:	0182      	lsls	r2, r0, #6
 8008c4c:	1a12      	subs	r2, r2, r0
 8008c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f04f 0100 	mov.w	r1, #0
 8008c5a:	00d9      	lsls	r1, r3, #3
 8008c5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c60:	00d0      	lsls	r0, r2, #3
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	1912      	adds	r2, r2, r4
 8008c68:	eb45 0303 	adc.w	r3, r5, r3
 8008c6c:	f04f 0000 	mov.w	r0, #0
 8008c70:	f04f 0100 	mov.w	r1, #0
 8008c74:	0299      	lsls	r1, r3, #10
 8008c76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008c7a:	0290      	lsls	r0, r2, #10
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4610      	mov	r0, r2
 8008c82:	4619      	mov	r1, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	461a      	mov	r2, r3
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	f7f7 fb18 	bl	80002c0 <__aeabi_uldivmod>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4613      	mov	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	0c1b      	lsrs	r3, r3, #16
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb0:	60bb      	str	r3, [r7, #8]
      break;
 8008cb2:	e002      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cb4:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8008cb6:	60bb      	str	r3, [r7, #8]
      break;
 8008cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cba:	68bb      	ldr	r3, [r7, #8]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	00f42400 	.word	0x00f42400
 8008ccc:	017d7840 	.word	0x017d7840

08008cd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cd4:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20000040 	.word	0x20000040

08008ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008cec:	f7ff fff0 	bl	8008cd0 <HAL_RCC_GetHCLKFreq>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	0a9b      	lsrs	r3, r3, #10
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	4903      	ldr	r1, [pc, #12]	; (8008d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cfe:	5ccb      	ldrb	r3, [r1, r3]
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40023800 	.word	0x40023800
 8008d0c:	080126e8 	.word	0x080126e8

08008d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d14:	f7ff ffdc 	bl	8008cd0 <HAL_RCC_GetHCLKFreq>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	0b5b      	lsrs	r3, r3, #13
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	4903      	ldr	r1, [pc, #12]	; (8008d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d26:	5ccb      	ldrb	r3, [r1, r3]
 8008d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	40023800 	.word	0x40023800
 8008d34:	080126e8 	.word	0x080126e8

08008d38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	220f      	movs	r2, #15
 8008d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d48:	4b12      	ldr	r3, [pc, #72]	; (8008d94 <HAL_RCC_GetClockConfig+0x5c>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 0203 	and.w	r2, r3, #3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d54:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <HAL_RCC_GetClockConfig+0x5c>)
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008d60:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <HAL_RCC_GetClockConfig+0x5c>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008d6c:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <HAL_RCC_GetClockConfig+0x5c>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	08db      	lsrs	r3, r3, #3
 8008d72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d7a:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <HAL_RCC_GetClockConfig+0x60>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 020f 	and.w	r2, r3, #15
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	601a      	str	r2, [r3, #0]
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40023800 	.word	0x40023800
 8008d98:	40023c00 	.word	0x40023c00

08008d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d012      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008dc4:	4b69      	ldr	r3, [pc, #420]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	4a68      	ldr	r2, [pc, #416]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008dce:	6093      	str	r3, [r2, #8]
 8008dd0:	4b66      	ldr	r3, [pc, #408]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	4964      	ldr	r1, [pc, #400]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008de6:	2301      	movs	r3, #1
 8008de8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d017      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008df6:	4b5d      	ldr	r3, [pc, #372]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e04:	4959      	ldr	r1, [pc, #356]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e14:	d101      	bne.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008e16:	2301      	movs	r3, #1
 8008e18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008e22:	2301      	movs	r3, #1
 8008e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d017      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e32:	4b4e      	ldr	r3, [pc, #312]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e40:	494a      	ldr	r1, [pc, #296]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e50:	d101      	bne.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008e52:	2301      	movs	r3, #1
 8008e54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 808b 	beq.w	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e80:	4b3a      	ldr	r3, [pc, #232]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	4a39      	ldr	r2, [pc, #228]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e8c:	4b37      	ldr	r3, [pc, #220]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008e98:	4b35      	ldr	r3, [pc, #212]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a34      	ldr	r2, [pc, #208]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea4:	f7fc fa72 	bl	800538c <HAL_GetTick>
 8008ea8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eac:	f7fc fa6e 	bl	800538c <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b64      	cmp	r3, #100	; 0x64
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e357      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008ebe:	4b2c      	ldr	r3, [pc, #176]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008eca:	4b28      	ldr	r3, [pc, #160]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d035      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d02e      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ee8:	4b20      	ldr	r3, [pc, #128]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ef2:	4b1e      	ldr	r3, [pc, #120]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	4a1d      	ldr	r2, [pc, #116]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008efc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008efe:	4b1b      	ldr	r3, [pc, #108]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f02:	4a1a      	ldr	r2, [pc, #104]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008f0a:	4a18      	ldr	r2, [pc, #96]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f10:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d114      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f1c:	f7fc fa36 	bl	800538c <HAL_GetTick>
 8008f20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f22:	e00a      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f24:	f7fc fa32 	bl	800538c <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e319      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0ee      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f52:	d111      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008f54:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008f60:	4b04      	ldr	r3, [pc, #16]	; (8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008f62:	400b      	ands	r3, r1
 8008f64:	4901      	ldr	r1, [pc, #4]	; (8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	608b      	str	r3, [r1, #8]
 8008f6a:	e00b      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	40007000 	.word	0x40007000
 8008f74:	0ffffcff 	.word	0x0ffffcff
 8008f78:	4bb1      	ldr	r3, [pc, #708]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	4ab0      	ldr	r2, [pc, #704]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f82:	6093      	str	r3, [r2, #8]
 8008f84:	4bae      	ldr	r3, [pc, #696]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f90:	49ab      	ldr	r1, [pc, #684]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0310 	and.w	r3, r3, #16
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d010      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fa2:	4ba7      	ldr	r3, [pc, #668]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa8:	4aa5      	ldr	r2, [pc, #660]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008fb2:	4ba3      	ldr	r3, [pc, #652]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	49a0      	ldr	r1, [pc, #640]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fd0:	4b9b      	ldr	r3, [pc, #620]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fde:	4998      	ldr	r1, [pc, #608]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ff2:	4b93      	ldr	r3, [pc, #588]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009000:	498f      	ldr	r1, [pc, #572]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009014:	4b8a      	ldr	r3, [pc, #552]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009022:	4987      	ldr	r1, [pc, #540]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009036:	4b82      	ldr	r3, [pc, #520]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800903c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009044:	497e      	ldr	r1, [pc, #504]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009058:	4b79      	ldr	r3, [pc, #484]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800905e:	f023 0203 	bic.w	r2, r3, #3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009066:	4976      	ldr	r1, [pc, #472]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800907a:	4b71      	ldr	r3, [pc, #452]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800907c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009080:	f023 020c 	bic.w	r2, r3, #12
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009088:	496d      	ldr	r1, [pc, #436]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800908a:	4313      	orrs	r3, r2
 800908c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800909c:	4b68      	ldr	r3, [pc, #416]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800909e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	4965      	ldr	r1, [pc, #404]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80090be:	4b60      	ldr	r3, [pc, #384]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090cc:	495c      	ldr	r1, [pc, #368]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80090e0:	4b57      	ldr	r3, [pc, #348]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	4954      	ldr	r1, [pc, #336]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009102:	4b4f      	ldr	r3, [pc, #316]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009108:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	494b      	ldr	r1, [pc, #300]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009124:	4b46      	ldr	r3, [pc, #280]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800912a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009132:	4943      	ldr	r1, [pc, #268]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009134:	4313      	orrs	r3, r2
 8009136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009146:	4b3e      	ldr	r3, [pc, #248]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800914c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009154:	493a      	ldr	r1, [pc, #232]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009168:	4b35      	ldr	r3, [pc, #212]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800916a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800916e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009176:	4932      	ldr	r1, [pc, #200]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d011      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800918a:	4b2d      	ldr	r3, [pc, #180]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800918c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009190:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009198:	4929      	ldr	r1, [pc, #164]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800919a:	4313      	orrs	r3, r2
 800919c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a8:	d101      	bne.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80091aa:	2301      	movs	r3, #1
 80091ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80091ba:	2301      	movs	r3, #1
 80091bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091ca:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d8:	4919      	ldr	r1, [pc, #100]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00b      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80091ec:	4b14      	ldr	r3, [pc, #80]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80091ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091fc:	4910      	ldr	r1, [pc, #64]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d006      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80d9 	beq.w	80093ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009218:	4b09      	ldr	r3, [pc, #36]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a08      	ldr	r2, [pc, #32]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800921e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009224:	f7fc f8b2 	bl	800538c <HAL_GetTick>
 8009228:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800922a:	e00b      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800922c:	f7fc f8ae 	bl	800538c <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	2b64      	cmp	r3, #100	; 0x64
 8009238:	d904      	bls.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e197      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800923e:	bf00      	nop
 8009240:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009244:	4b6c      	ldr	r3, [pc, #432]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1ed      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d021      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	2b00      	cmp	r3, #0
 8009262:	d11d      	bne.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009264:	4b64      	ldr	r3, [pc, #400]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926a:	0c1b      	lsrs	r3, r3, #16
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009272:	4b61      	ldr	r3, [pc, #388]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009278:	0e1b      	lsrs	r3, r3, #24
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	019a      	lsls	r2, r3, #6
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	041b      	lsls	r3, r3, #16
 800928a:	431a      	orrs	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	061b      	lsls	r3, r3, #24
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	071b      	lsls	r3, r3, #28
 8009298:	4957      	ldr	r1, [pc, #348]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800929a:	4313      	orrs	r3, r2
 800929c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092b4:	d00a      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02e      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ca:	d129      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80092cc:	4b4a      	ldr	r3, [pc, #296]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d2:	0c1b      	lsrs	r3, r3, #16
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092da:	4b47      	ldr	r3, [pc, #284]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e0:	0f1b      	lsrs	r3, r3, #28
 80092e2:	f003 0307 	and.w	r3, r3, #7
 80092e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	019a      	lsls	r2, r3, #6
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	061b      	lsls	r3, r3, #24
 80092fa:	431a      	orrs	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	071b      	lsls	r3, r3, #28
 8009300:	493d      	ldr	r1, [pc, #244]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009308:	4b3b      	ldr	r3, [pc, #236]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800930a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800930e:	f023 021f 	bic.w	r2, r3, #31
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	3b01      	subs	r3, #1
 8009318:	4937      	ldr	r1, [pc, #220]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800931a:	4313      	orrs	r3, r2
 800931c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01d      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800932c:	4b32      	ldr	r3, [pc, #200]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800932e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009332:	0e1b      	lsrs	r3, r3, #24
 8009334:	f003 030f 	and.w	r3, r3, #15
 8009338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800933a:	4b2f      	ldr	r3, [pc, #188]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800933c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009340:	0f1b      	lsrs	r3, r3, #28
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	019a      	lsls	r2, r3, #6
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	041b      	lsls	r3, r3, #16
 8009354:	431a      	orrs	r2, r3
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	061b      	lsls	r3, r3, #24
 800935a:	431a      	orrs	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	071b      	lsls	r3, r3, #28
 8009360:	4925      	ldr	r1, [pc, #148]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009362:	4313      	orrs	r3, r2
 8009364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d011      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	019a      	lsls	r2, r3, #6
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	061b      	lsls	r3, r3, #24
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	071b      	lsls	r3, r3, #28
 8009390:	4919      	ldr	r1, [pc, #100]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009398:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a16      	ldr	r2, [pc, #88]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800939e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093a4:	f7fb fff2 	bl	800538c <HAL_GetTick>
 80093a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093aa:	e008      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80093ac:	f7fb ffee 	bl	800538c <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b64      	cmp	r3, #100	; 0x64
 80093b8:	d901      	bls.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e0d7      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093be:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0f0      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	f040 80cd 	bne.w	800956c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a08      	ldr	r2, [pc, #32]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093de:	f7fb ffd5 	bl	800538c <HAL_GetTick>
 80093e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093e4:	e00a      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80093e6:	f7fb ffd1 	bl	800538c <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	2b64      	cmp	r3, #100	; 0x64
 80093f2:	d903      	bls.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e0ba      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80093f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093fc:	4b5e      	ldr	r3, [pc, #376]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009408:	d0ed      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d009      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009426:	2b00      	cmp	r3, #0
 8009428:	d02e      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d12a      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009432:	4b51      	ldr	r3, [pc, #324]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009438:	0c1b      	lsrs	r3, r3, #16
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009440:	4b4d      	ldr	r3, [pc, #308]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009446:	0f1b      	lsrs	r3, r3, #28
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	019a      	lsls	r2, r3, #6
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	041b      	lsls	r3, r3, #16
 8009458:	431a      	orrs	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	061b      	lsls	r3, r3, #24
 8009460:	431a      	orrs	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	071b      	lsls	r3, r3, #28
 8009466:	4944      	ldr	r1, [pc, #272]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009468:	4313      	orrs	r3, r2
 800946a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800946e:	4b42      	ldr	r3, [pc, #264]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009474:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	3b01      	subs	r3, #1
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	493d      	ldr	r1, [pc, #244]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d022      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800949c:	d11d      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800949e:	4b36      	ldr	r3, [pc, #216]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a4:	0e1b      	lsrs	r3, r3, #24
 80094a6:	f003 030f 	and.w	r3, r3, #15
 80094aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b2:	0f1b      	lsrs	r3, r3, #28
 80094b4:	f003 0307 	and.w	r3, r3, #7
 80094b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	019a      	lsls	r2, r3, #6
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	041b      	lsls	r3, r3, #16
 80094c6:	431a      	orrs	r2, r3
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	061b      	lsls	r3, r3, #24
 80094cc:	431a      	orrs	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	071b      	lsls	r3, r3, #28
 80094d2:	4929      	ldr	r1, [pc, #164]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d028      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094e6:	4b24      	ldr	r3, [pc, #144]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80094f4:	4b20      	ldr	r3, [pc, #128]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fa:	0c1b      	lsrs	r3, r3, #16
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	019a      	lsls	r2, r3, #6
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	041b      	lsls	r3, r3, #16
 800950c:	431a      	orrs	r2, r3
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	061b      	lsls	r3, r3, #24
 8009512:	431a      	orrs	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	071b      	lsls	r3, r3, #28
 800951a:	4917      	ldr	r1, [pc, #92]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800951c:	4313      	orrs	r3, r2
 800951e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009522:	4b15      	ldr	r3, [pc, #84]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	4911      	ldr	r1, [pc, #68]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009532:	4313      	orrs	r3, r2
 8009534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009538:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a0e      	ldr	r2, [pc, #56]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800953e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009544:	f7fb ff22 	bl	800538c <HAL_GetTick>
 8009548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800954a:	e008      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800954c:	f7fb ff1e 	bl	800538c <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b64      	cmp	r3, #100	; 0x64
 8009558:	d901      	bls.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e007      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800955e:	4b06      	ldr	r3, [pc, #24]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800956a:	d1ef      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3720      	adds	r7, #32
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40023800 	.word	0x40023800

0800957c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e01c      	b.n	80095c8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	795b      	ldrb	r3, [r3, #5]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d105      	bne.n	80095a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7fb fae0 	bl	8004b64 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f042 0204 	orr.w	r2, r2, #4
 80095b8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	791b      	ldrb	r3, [r3, #4]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_RNG_GenerateRandomNumber+0x1a>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e044      	b.n	8009674 <HAL_RNG_GenerateRandomNumber+0xa4>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	795b      	ldrb	r3, [r3, #5]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d133      	bne.n	8009662 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2202      	movs	r2, #2
 80095fe:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009600:	f7fb fec4 	bl	800538c <HAL_GetTick>
 8009604:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009606:	e018      	b.n	800963a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009608:	f7fb fec0 	bl	800538c <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	2b02      	cmp	r3, #2
 8009614:	d911      	bls.n	800963a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b01      	cmp	r3, #1
 8009622:	d00a      	beq.n	800963a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2202      	movs	r2, #2
 800962e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e01c      	b.n	8009674 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b01      	cmp	r3, #1
 8009646:	d1df      	bne.n	8009608 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	715a      	strb	r2, [r3, #5]
 8009660:	e004      	b.n	800966c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2204      	movs	r2, #4
 8009666:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	711a      	strb	r2, [r3, #4]

  return status;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e081      	b.n	8009792 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	7f5b      	ldrb	r3, [r3, #29]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d105      	bne.n	80096a4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7fb fa80 	bl	8004ba4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	22ca      	movs	r2, #202	; 0xca
 80096b0:	625a      	str	r2, [r3, #36]	; 0x24
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2253      	movs	r2, #83	; 0x53
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fbc4 	bl	8009e48 <RTC_EnterInitMode>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d008      	beq.n	80096d8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	22ff      	movs	r2, #255	; 0xff
 80096cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2204      	movs	r2, #4
 80096d2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e05c      	b.n	8009792 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6899      	ldr	r1, [r3, #8]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	4b2e      	ldr	r3, [pc, #184]	; (800979c <HAL_RTC_Init+0x120>)
 80096e4:	400b      	ands	r3, r1
 80096e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6899      	ldr	r1, [r3, #8]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	431a      	orrs	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	68d2      	ldr	r2, [r2, #12]
 800970e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6919      	ldr	r1, [r3, #16]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	041a      	lsls	r2, r3, #16
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009732:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 0320 	and.w	r3, r3, #32
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10e      	bne.n	8009760 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fb58 	bl	8009df8 <HAL_RTC_WaitForSynchro>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d008      	beq.n	8009760 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	22ff      	movs	r2, #255	; 0xff
 8009754:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2204      	movs	r2, #4
 800975a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e018      	b.n	8009792 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0208 	bic.w	r2, r2, #8
 800976e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	699a      	ldr	r2, [r3, #24]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	22ff      	movs	r2, #255	; 0xff
 8009788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009790:	2300      	movs	r3, #0
  }
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	ff8fffbf 	.word	0xff8fffbf

080097a0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80097a0:	b590      	push	{r4, r7, lr}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	7f1b      	ldrb	r3, [r3, #28]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d101      	bne.n	80097bc <HAL_RTC_SetTime+0x1c>
 80097b8:	2302      	movs	r3, #2
 80097ba:	e0a8      	b.n	800990e <HAL_RTC_SetTime+0x16e>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2202      	movs	r2, #2
 80097c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d126      	bne.n	800981c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2200      	movs	r2, #0
 80097e0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fb5a 	bl	8009ea0 <RTC_ByteToBcd2>
 80097ec:	4603      	mov	r3, r0
 80097ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fb53 	bl	8009ea0 <RTC_ByteToBcd2>
 80097fa:	4603      	mov	r3, r0
 80097fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80097fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	789b      	ldrb	r3, [r3, #2]
 8009804:	4618      	mov	r0, r3
 8009806:	f000 fb4b 	bl	8009ea0 <RTC_ByteToBcd2>
 800980a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800980c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	7b1b      	ldrb	r3, [r3, #12]
 8009814:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	e018      	b.n	800984e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2200      	movs	r2, #0
 800982e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	785b      	ldrb	r3, [r3, #1]
 800983a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800983c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009842:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7b1b      	ldrb	r3, [r3, #12]
 8009848:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	22ca      	movs	r2, #202	; 0xca
 8009854:	625a      	str	r2, [r3, #36]	; 0x24
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2253      	movs	r2, #83	; 0x53
 800985c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 faf2 	bl	8009e48 <RTC_EnterInitMode>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	22ff      	movs	r2, #255	; 0xff
 8009870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2204      	movs	r2, #4
 8009876:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e045      	b.n	800990e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	6979      	ldr	r1, [r7, #20]
 8009888:	4b23      	ldr	r3, [pc, #140]	; (8009918 <HAL_RTC_SetTime+0x178>)
 800988a:	400b      	ands	r3, r1
 800988c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800989c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6899      	ldr	r1, [r3, #8]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d111      	bne.n	80098f8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 fa8f 	bl	8009df8 <HAL_RTC_WaitForSynchro>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00b      	beq.n	80098f8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2204      	movs	r2, #4
 80098ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e00a      	b.n	800990e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	22ff      	movs	r2, #255	; 0xff
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800990c:	2300      	movs	r3, #0
  }
}
 800990e:	4618      	mov	r0, r3
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	bd90      	pop	{r4, r7, pc}
 8009916:	bf00      	nop
 8009918:	007f7f7f 	.word	0x007f7f7f

0800991c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b22      	ldr	r3, [pc, #136]	; (80099d4 <HAL_RTC_GetTime+0xb8>)
 800994c:	4013      	ands	r3, r2
 800994e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	0c1b      	lsrs	r3, r3, #16
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800995a:	b2da      	uxtb	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996a:	b2da      	uxtb	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009978:	b2da      	uxtb	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	0c1b      	lsrs	r3, r3, #16
 8009982:	b2db      	uxtb	r3, r3
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	b2da      	uxtb	r2, r3
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d11a      	bne.n	80099ca <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f000 fa9f 	bl	8009edc <RTC_Bcd2ToByte>
 800999e:	4603      	mov	r3, r0
 80099a0:	461a      	mov	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	785b      	ldrb	r3, [r3, #1]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fa96 	bl	8009edc <RTC_Bcd2ToByte>
 80099b0:	4603      	mov	r3, r0
 80099b2:	461a      	mov	r2, r3
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	789b      	ldrb	r3, [r3, #2]
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fa8d 	bl	8009edc <RTC_Bcd2ToByte>
 80099c2:	4603      	mov	r3, r0
 80099c4:	461a      	mov	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	007f7f7f 	.word	0x007f7f7f

080099d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80099d8:	b590      	push	{r4, r7, lr}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	7f1b      	ldrb	r3, [r3, #28]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_RTC_SetDate+0x1c>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e092      	b.n	8009b1a <HAL_RTC_SetDate+0x142>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2202      	movs	r2, #2
 80099fe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10e      	bne.n	8009a24 <HAL_RTC_SetDate+0x4c>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	f003 0310 	and.w	r3, r3, #16
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d008      	beq.n	8009a24 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	785b      	ldrb	r3, [r3, #1]
 8009a16:	f023 0310 	bic.w	r3, r3, #16
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	330a      	adds	r3, #10
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d11c      	bne.n	8009a64 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	78db      	ldrb	r3, [r3, #3]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 fa36 	bl	8009ea0 <RTC_ByteToBcd2>
 8009a34:	4603      	mov	r3, r0
 8009a36:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	785b      	ldrb	r3, [r3, #1]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 fa2f 	bl	8009ea0 <RTC_ByteToBcd2>
 8009a42:	4603      	mov	r3, r0
 8009a44:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009a46:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	789b      	ldrb	r3, [r3, #2]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fa27 	bl	8009ea0 <RTC_ByteToBcd2>
 8009a52:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009a54:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	e00e      	b.n	8009a82 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	78db      	ldrb	r3, [r3, #3]
 8009a68:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	785b      	ldrb	r3, [r3, #1]
 8009a6e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009a70:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009a76:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	22ca      	movs	r2, #202	; 0xca
 8009a88:	625a      	str	r2, [r3, #36]	; 0x24
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2253      	movs	r2, #83	; 0x53
 8009a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f9d8 	bl	8009e48 <RTC_EnterInitMode>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	22ff      	movs	r2, #255	; 0xff
 8009aa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2204      	movs	r2, #4
 8009aaa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e031      	b.n	8009b1a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	6979      	ldr	r1, [r7, #20]
 8009abc:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <HAL_RTC_SetDate+0x14c>)
 8009abe:	400b      	ands	r3, r1
 8009ac0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68da      	ldr	r2, [r3, #12]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ad0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d111      	bne.n	8009b04 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 f989 	bl	8009df8 <HAL_RTC_WaitForSynchro>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	22ff      	movs	r2, #255	; 0xff
 8009af2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2204      	movs	r2, #4
 8009af8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e00a      	b.n	8009b1a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	22ff      	movs	r2, #255	; 0xff
 8009b0a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009b18:	2300      	movs	r3, #0
  }
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd90      	pop	{r4, r7, pc}
 8009b22:	bf00      	nop
 8009b24:	00ffff3f 	.word	0x00ffff3f

08009b28 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	4b21      	ldr	r3, [pc, #132]	; (8009bc4 <HAL_RTC_GetDate+0x9c>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	0c1b      	lsrs	r3, r3, #16
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	0a1b      	lsrs	r3, r3, #8
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 031f 	and.w	r3, r3, #31
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	0b5b      	lsrs	r3, r3, #13
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d11a      	bne.n	8009bb8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	78db      	ldrb	r3, [r3, #3]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f9a8 	bl	8009edc <RTC_Bcd2ToByte>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f99f 	bl	8009edc <RTC_Bcd2ToByte>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	789b      	ldrb	r3, [r3, #2]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f996 	bl	8009edc <RTC_Bcd2ToByte>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	00ffff3f 	.word	0x00ffff3f

08009bc8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b089      	sub	sp, #36	; 0x24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	7f1b      	ldrb	r3, [r3, #28]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_RTC_SetAlarm+0x24>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e101      	b.n	8009df0 <HAL_RTC_SetAlarm+0x228>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d137      	bne.n	8009c6e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f942 	bl	8009ea0 <RTC_ByteToBcd2>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f93b 	bl	8009ea0 <RTC_ByteToBcd2>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009c2e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	789b      	ldrb	r3, [r3, #2]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f933 	bl	8009ea0 <RTC_ByteToBcd2>
 8009c3a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009c3c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	7b1b      	ldrb	r3, [r3, #12]
 8009c44:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009c46:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 f925 	bl	8009ea0 <RTC_ByteToBcd2>
 8009c56:	4603      	mov	r3, r0
 8009c58:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009c5a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009c62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	61fb      	str	r3, [r7, #28]
 8009c6c:	e023      	b.n	8009cb6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009c8e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009c94:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	7b1b      	ldrb	r3, [r3, #12]
 8009c9a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009c9c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ca4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009ca6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009cac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	22ca      	movs	r2, #202	; 0xca
 8009cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2253      	movs	r2, #83	; 0x53
 8009cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cda:	d13f      	bne.n	8009d5c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689a      	ldr	r2, [r3, #8]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cfa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009cfc:	f7fb fb46 	bl	800538c <HAL_GetTick>
 8009d00:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009d02:	e013      	b.n	8009d2c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d04:	f7fb fb42 	bl	800538c <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d12:	d90b      	bls.n	8009d2c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	22ff      	movs	r2, #255	; 0xff
 8009d1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2203      	movs	r2, #3
 8009d20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e061      	b.n	8009df0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0e4      	beq.n	8009d04 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d58:	609a      	str	r2, [r3, #8]
 8009d5a:	e03e      	b.n	8009dda <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009d6a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d7a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d7c:	f7fb fb06 	bl	800538c <HAL_GetTick>
 8009d80:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009d82:	e013      	b.n	8009dac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d84:	f7fb fb02 	bl	800538c <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d92:	d90b      	bls.n	8009dac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	22ff      	movs	r2, #255	; 0xff
 8009d9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2203      	movs	r2, #3
 8009da0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e021      	b.n	8009df0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0e4      	beq.n	8009d84 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	22ff      	movs	r2, #255	; 0xff
 8009de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2201      	movs	r2, #1
 8009de6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3724      	adds	r7, #36	; 0x24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd90      	pop	{r4, r7, pc}

08009df8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68da      	ldr	r2, [r3, #12]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e12:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e14:	f7fb faba 	bl	800538c <HAL_GetTick>
 8009e18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009e1a:	e009      	b.n	8009e30 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e1c:	f7fb fab6 	bl	800538c <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e2a:	d901      	bls.n	8009e30 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e007      	b.n	8009e40 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0ee      	beq.n	8009e1c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d119      	bne.n	8009e96 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e6a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e6c:	f7fb fa8e 	bl	800538c <HAL_GetTick>
 8009e70:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009e72:	e009      	b.n	8009e88 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e74:	f7fb fa8a 	bl	800538c <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e82:	d901      	bls.n	8009e88 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e007      	b.n	8009e98 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0ee      	beq.n	8009e74 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009eae:	e005      	b.n	8009ebc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	3b0a      	subs	r3, #10
 8009eba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	2b09      	cmp	r3, #9
 8009ec0:	d8f6      	bhi.n	8009eb0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	b2db      	uxtb	r3, r3
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	091b      	lsrs	r3, r3, #4
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	f003 030f 	and.w	r3, r3, #15
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	4413      	add	r3, r2
 8009f0a:	b2db      	uxtb	r3, r3
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	7f1b      	ldrb	r3, [r3, #28]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e03e      	b.n	8009fb2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2201      	movs	r2, #1
 8009f38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689a      	ldr	r2, [r3, #8]
 8009f46:	4b1e      	ldr	r3, [pc, #120]	; (8009fc0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	22ca      	movs	r2, #202	; 0xca
 8009f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2253      	movs	r2, #83	; 0x53
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0206 	bic.w	r2, r2, #6
 8009f72:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	430a      	orrs	r2, r1
 8009f82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f9a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	22ff      	movs	r2, #255	; 0xff
 8009fa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	fffff7f7 	.word	0xfffff7f7

08009fc4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e025      	b.n	800a024 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7fb f89b 	bl	8005128 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3304      	adds	r3, #4
 800a002:	4619      	mov	r1, r3
 800a004:	4610      	mov	r0, r2
 800a006:	f001 fb8f 	bl	800b728 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	461a      	mov	r2, r3
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	f001 fbe3 	bl	800b7e0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a03e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d101      	bne.n	800a04a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a046:	2302      	movs	r3, #2
 800a048:	e021      	b.n	800a08e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d002      	beq.n	800a056 <HAL_SDRAM_SendCommand+0x2a>
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	2b05      	cmp	r3, #5
 800a054:	d118      	bne.n	800a088 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2202      	movs	r2, #2
 800a05a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fc24 	bl	800b8b4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d104      	bne.n	800a07e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2205      	movs	r2, #5
 800a078:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a07c:	e006      	b.n	800a08c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a086:	e001      	b.n	800a08c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e000      	b.n	800a08e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d101      	bne.n	800a0b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e016      	b.n	800a0de <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d10f      	bne.n	800a0dc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f001 fc16 	bl	800b8fc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e000      	b.n	800a0de <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e09d      	b.n	800a234 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d108      	bne.n	800a112 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a108:	d009      	beq.n	800a11e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	61da      	str	r2, [r3, #28]
 800a110:	e005      	b.n	800a11e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7fa fd61 	bl	8004c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2202      	movs	r2, #2
 800a142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a154:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a15e:	d902      	bls.n	800a166 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a160:	2300      	movs	r3, #0
 800a162:	60fb      	str	r3, [r7, #12]
 800a164:	e002      	b.n	800a16c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a16a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a174:	d007      	beq.n	800a186 <HAL_SPI_Init+0xa0>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a17e:	d002      	beq.n	800a186 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	f003 0302 	and.w	r3, r3, #2
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c8:	ea42 0103 	orr.w	r1, r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	0c1b      	lsrs	r3, r3, #16
 800a1e2:	f003 0204 	and.w	r2, r3, #4
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	f003 0310 	and.w	r3, r3, #16
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a202:	ea42 0103 	orr.w	r1, r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	69da      	ldr	r2, [r3, #28]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a222:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e049      	b.n	800a2e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d106      	bne.n	800a268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7fa fd2e 	bl	8004cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3304      	adds	r3, #4
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f000 fac0 	bl	800a800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d001      	beq.n	800a304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e054      	b.n	800a3ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2202      	movs	r2, #2
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0201 	orr.w	r2, r2, #1
 800a31a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a26      	ldr	r2, [pc, #152]	; (800a3bc <HAL_TIM_Base_Start_IT+0xd0>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d022      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x80>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a32e:	d01d      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x80>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a22      	ldr	r2, [pc, #136]	; (800a3c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d018      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x80>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a21      	ldr	r2, [pc, #132]	; (800a3c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d013      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x80>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1f      	ldr	r2, [pc, #124]	; (800a3c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00e      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x80>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a1e      	ldr	r2, [pc, #120]	; (800a3cc <HAL_TIM_Base_Start_IT+0xe0>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d009      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x80>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d004      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x80>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1b      	ldr	r2, [pc, #108]	; (800a3d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d115      	bne.n	800a398 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	689a      	ldr	r2, [r3, #8]
 800a372:	4b19      	ldr	r3, [pc, #100]	; (800a3d8 <HAL_TIM_Base_Start_IT+0xec>)
 800a374:	4013      	ands	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b06      	cmp	r3, #6
 800a37c:	d015      	beq.n	800a3aa <HAL_TIM_Base_Start_IT+0xbe>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a384:	d011      	beq.n	800a3aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f042 0201 	orr.w	r2, r2, #1
 800a394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a396:	e008      	b.n	800a3aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f042 0201 	orr.w	r2, r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	e000      	b.n	800a3ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40010000 	.word	0x40010000
 800a3c0:	40000400 	.word	0x40000400
 800a3c4:	40000800 	.word	0x40000800
 800a3c8:	40000c00 	.word	0x40000c00
 800a3cc:	40010400 	.word	0x40010400
 800a3d0:	40014000 	.word	0x40014000
 800a3d4:	40001800 	.word	0x40001800
 800a3d8:	00010007 	.word	0x00010007

0800a3dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d122      	bne.n	800a438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d11b      	bne.n	800a438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f06f 0202 	mvn.w	r2, #2
 800a408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	f003 0303 	and.w	r3, r3, #3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f9d0 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a424:	e005      	b.n	800a432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f9c2 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f9d3 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f003 0304 	and.w	r3, r3, #4
 800a442:	2b04      	cmp	r3, #4
 800a444:	d122      	bne.n	800a48c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b04      	cmp	r3, #4
 800a452:	d11b      	bne.n	800a48c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f06f 0204 	mvn.w	r2, #4
 800a45c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2202      	movs	r2, #2
 800a462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f9a6 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a478:	e005      	b.n	800a486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f998 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f9a9 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	f003 0308 	and.w	r3, r3, #8
 800a496:	2b08      	cmp	r3, #8
 800a498:	d122      	bne.n	800a4e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b08      	cmp	r3, #8
 800a4a6:	d11b      	bne.n	800a4e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f06f 0208 	mvn.w	r2, #8
 800a4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2204      	movs	r2, #4
 800a4b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f003 0303 	and.w	r3, r3, #3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f97c 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a4cc:	e005      	b.n	800a4da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f96e 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f97f 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	f003 0310 	and.w	r3, r3, #16
 800a4ea:	2b10      	cmp	r3, #16
 800a4ec:	d122      	bne.n	800a534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b10      	cmp	r3, #16
 800a4fa:	d11b      	bne.n	800a534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0210 	mvn.w	r2, #16
 800a504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2208      	movs	r2, #8
 800a50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f952 	bl	800a7c4 <HAL_TIM_IC_CaptureCallback>
 800a520:	e005      	b.n	800a52e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f944 	bl	800a7b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f955 	bl	800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d10e      	bne.n	800a560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d107      	bne.n	800a560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f06f 0201 	mvn.w	r2, #1
 800a558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7f8 f9da 	bl	8002914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56a:	2b80      	cmp	r3, #128	; 0x80
 800a56c:	d10e      	bne.n	800a58c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a578:	2b80      	cmp	r3, #128	; 0x80
 800a57a:	d107      	bne.n	800a58c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fb0c 	bl	800aba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a59a:	d10e      	bne.n	800a5ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	2b80      	cmp	r3, #128	; 0x80
 800a5a8:	d107      	bne.n	800a5ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a5b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 faff 	bl	800abb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c4:	2b40      	cmp	r3, #64	; 0x40
 800a5c6:	d10e      	bne.n	800a5e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d2:	2b40      	cmp	r3, #64	; 0x40
 800a5d4:	d107      	bne.n	800a5e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f903 	bl	800a7ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b20      	cmp	r3, #32
 800a5f2:	d10e      	bne.n	800a612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	f003 0320 	and.w	r3, r3, #32
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d107      	bne.n	800a612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f06f 0220 	mvn.w	r2, #32
 800a60a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fabf 	bl	800ab90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_TIM_ConfigClockSource+0x1c>
 800a634:	2302      	movs	r3, #2
 800a636:	e0b4      	b.n	800a7a2 <HAL_TIM_ConfigClockSource+0x186>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	4b56      	ldr	r3, [pc, #344]	; (800a7ac <HAL_TIM_ConfigClockSource+0x190>)
 800a654:	4013      	ands	r3, r2
 800a656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a65e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a670:	d03e      	beq.n	800a6f0 <HAL_TIM_ConfigClockSource+0xd4>
 800a672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a676:	f200 8087 	bhi.w	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67e:	f000 8086 	beq.w	800a78e <HAL_TIM_ConfigClockSource+0x172>
 800a682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a686:	d87f      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a688:	2b70      	cmp	r3, #112	; 0x70
 800a68a:	d01a      	beq.n	800a6c2 <HAL_TIM_ConfigClockSource+0xa6>
 800a68c:	2b70      	cmp	r3, #112	; 0x70
 800a68e:	d87b      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a690:	2b60      	cmp	r3, #96	; 0x60
 800a692:	d050      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0x11a>
 800a694:	2b60      	cmp	r3, #96	; 0x60
 800a696:	d877      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a698:	2b50      	cmp	r3, #80	; 0x50
 800a69a:	d03c      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0xfa>
 800a69c:	2b50      	cmp	r3, #80	; 0x50
 800a69e:	d873      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d058      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x13a>
 800a6a4:	2b40      	cmp	r3, #64	; 0x40
 800a6a6:	d86f      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a6a8:	2b30      	cmp	r3, #48	; 0x30
 800a6aa:	d064      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x15a>
 800a6ac:	2b30      	cmp	r3, #48	; 0x30
 800a6ae:	d86b      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a6b0:	2b20      	cmp	r3, #32
 800a6b2:	d060      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x15a>
 800a6b4:	2b20      	cmp	r3, #32
 800a6b6:	d867      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d05c      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x15a>
 800a6bc:	2b10      	cmp	r3, #16
 800a6be:	d05a      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x15a>
 800a6c0:	e062      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	6899      	ldr	r1, [r3, #8]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f000 f9af 	bl	800aa34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	609a      	str	r2, [r3, #8]
      break;
 800a6ee:	e04f      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6818      	ldr	r0, [r3, #0]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	6899      	ldr	r1, [r3, #8]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f000 f998 	bl	800aa34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a712:	609a      	str	r2, [r3, #8]
      break;
 800a714:	e03c      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	6859      	ldr	r1, [r3, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	461a      	mov	r2, r3
 800a724:	f000 f90c 	bl	800a940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2150      	movs	r1, #80	; 0x50
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f965 	bl	800a9fe <TIM_ITRx_SetConfig>
      break;
 800a734:	e02c      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	6859      	ldr	r1, [r3, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	461a      	mov	r2, r3
 800a744:	f000 f92b 	bl	800a99e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2160      	movs	r1, #96	; 0x60
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 f955 	bl	800a9fe <TIM_ITRx_SetConfig>
      break;
 800a754:	e01c      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6859      	ldr	r1, [r3, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	461a      	mov	r2, r3
 800a764:	f000 f8ec 	bl	800a940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2140      	movs	r1, #64	; 0x40
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 f945 	bl	800a9fe <TIM_ITRx_SetConfig>
      break;
 800a774:	e00c      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4619      	mov	r1, r3
 800a780:	4610      	mov	r0, r2
 800a782:	f000 f93c 	bl	800a9fe <TIM_ITRx_SetConfig>
      break;
 800a786:	e003      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	73fb      	strb	r3, [r7, #15]
      break;
 800a78c:	e000      	b.n	800a790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a78e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	fffeff88 	.word	0xfffeff88

0800a7b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a40      	ldr	r2, [pc, #256]	; (800a914 <TIM_Base_SetConfig+0x114>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d013      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81e:	d00f      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a3d      	ldr	r2, [pc, #244]	; (800a918 <TIM_Base_SetConfig+0x118>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d00b      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a3c      	ldr	r2, [pc, #240]	; (800a91c <TIM_Base_SetConfig+0x11c>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d007      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a3b      	ldr	r2, [pc, #236]	; (800a920 <TIM_Base_SetConfig+0x120>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d003      	beq.n	800a840 <TIM_Base_SetConfig+0x40>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a3a      	ldr	r2, [pc, #232]	; (800a924 <TIM_Base_SetConfig+0x124>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d108      	bne.n	800a852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a2f      	ldr	r2, [pc, #188]	; (800a914 <TIM_Base_SetConfig+0x114>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d02b      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a860:	d027      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a2c      	ldr	r2, [pc, #176]	; (800a918 <TIM_Base_SetConfig+0x118>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d023      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a2b      	ldr	r2, [pc, #172]	; (800a91c <TIM_Base_SetConfig+0x11c>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d01f      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a2a      	ldr	r2, [pc, #168]	; (800a920 <TIM_Base_SetConfig+0x120>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d01b      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a29      	ldr	r2, [pc, #164]	; (800a924 <TIM_Base_SetConfig+0x124>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d017      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a28      	ldr	r2, [pc, #160]	; (800a928 <TIM_Base_SetConfig+0x128>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d013      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a27      	ldr	r2, [pc, #156]	; (800a92c <TIM_Base_SetConfig+0x12c>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00f      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a26      	ldr	r2, [pc, #152]	; (800a930 <TIM_Base_SetConfig+0x130>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00b      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a25      	ldr	r2, [pc, #148]	; (800a934 <TIM_Base_SetConfig+0x134>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d007      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a24      	ldr	r2, [pc, #144]	; (800a938 <TIM_Base_SetConfig+0x138>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d003      	beq.n	800a8b2 <TIM_Base_SetConfig+0xb2>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a23      	ldr	r2, [pc, #140]	; (800a93c <TIM_Base_SetConfig+0x13c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d108      	bne.n	800a8c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a0a      	ldr	r2, [pc, #40]	; (800a914 <TIM_Base_SetConfig+0x114>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d003      	beq.n	800a8f8 <TIM_Base_SetConfig+0xf8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a0c      	ldr	r2, [pc, #48]	; (800a924 <TIM_Base_SetConfig+0x124>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d103      	bne.n	800a900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	615a      	str	r2, [r3, #20]
}
 800a906:	bf00      	nop
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	40010000 	.word	0x40010000
 800a918:	40000400 	.word	0x40000400
 800a91c:	40000800 	.word	0x40000800
 800a920:	40000c00 	.word	0x40000c00
 800a924:	40010400 	.word	0x40010400
 800a928:	40014000 	.word	0x40014000
 800a92c:	40014400 	.word	0x40014400
 800a930:	40014800 	.word	0x40014800
 800a934:	40001800 	.word	0x40001800
 800a938:	40001c00 	.word	0x40001c00
 800a93c:	40002000 	.word	0x40002000

0800a940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	f023 0201 	bic.w	r2, r3, #1
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a96a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	4313      	orrs	r3, r2
 800a974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f023 030a 	bic.w	r3, r3, #10
 800a97c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	4313      	orrs	r3, r2
 800a984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	621a      	str	r2, [r3, #32]
}
 800a992:	bf00      	nop
 800a994:	371c      	adds	r7, #28
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b087      	sub	sp, #28
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	60f8      	str	r0, [r7, #12]
 800a9a6:	60b9      	str	r1, [r7, #8]
 800a9a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	f023 0210 	bic.w	r2, r3, #16
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	031b      	lsls	r3, r3, #12
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	011b      	lsls	r3, r3, #4
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	621a      	str	r2, [r3, #32]
}
 800a9f2:	bf00      	nop
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	f043 0307 	orr.w	r3, r3, #7
 800aa20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	609a      	str	r2, [r3, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	021a      	lsls	r2, r3, #8
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	431a      	orrs	r2, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	609a      	str	r2, [r3, #8]
}
 800aa68:	bf00      	nop
 800aa6a:	371c      	adds	r7, #28
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d101      	bne.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	e06d      	b.n	800ab68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a30      	ldr	r2, [pc, #192]	; (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d004      	beq.n	800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a2f      	ldr	r2, [pc, #188]	; (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d108      	bne.n	800aad2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aac6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a20      	ldr	r2, [pc, #128]	; (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d022      	beq.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aafe:	d01d      	beq.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a1d      	ldr	r2, [pc, #116]	; (800ab7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d018      	beq.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a1c      	ldr	r2, [pc, #112]	; (800ab80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d013      	beq.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d00e      	beq.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d009      	beq.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a16      	ldr	r2, [pc, #88]	; (800ab88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d004      	beq.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a15      	ldr	r2, [pc, #84]	; (800ab8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d10c      	bne.n	800ab56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	40010000 	.word	0x40010000
 800ab78:	40010400 	.word	0x40010400
 800ab7c:	40000400 	.word	0x40000400
 800ab80:	40000800 	.word	0x40000800
 800ab84:	40000c00 	.word	0x40000c00
 800ab88:	40014000 	.word	0x40014000
 800ab8c:	40001800 	.word	0x40001800

0800ab90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	e040      	b.n	800ac60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d106      	bne.n	800abf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7fa f8fa 	bl	8004de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2224      	movs	r2, #36	; 0x24
 800abf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f022 0201 	bic.w	r2, r2, #1
 800ac08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f990 	bl	800af30 <UART_SetConfig>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d101      	bne.n	800ac1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e022      	b.n	800ac60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fbe6 	bl	800b3f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0201 	orr.w	r2, r2, #1
 800ac56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fc6d 	bl	800b538 <UART_CheckIdleState>
 800ac5e:	4603      	mov	r3, r0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08a      	sub	sp, #40	; 0x28
 800ac6c:	af02      	add	r7, sp, #8
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	4613      	mov	r3, r2
 800ac76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac7c:	2b20      	cmp	r3, #32
 800ac7e:	f040 8081 	bne.w	800ad84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <HAL_UART_Transmit+0x26>
 800ac88:	88fb      	ldrh	r3, [r7, #6]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e079      	b.n	800ad86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d101      	bne.n	800aca0 <HAL_UART_Transmit+0x38>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e072      	b.n	800ad86 <HAL_UART_Transmit+0x11e>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2221      	movs	r2, #33	; 0x21
 800acb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acb6:	f7fa fb69 	bl	800538c <HAL_GetTick>
 800acba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	88fa      	ldrh	r2, [r7, #6]
 800acc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	88fa      	ldrh	r2, [r7, #6]
 800acc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd4:	d108      	bne.n	800ace8 <HAL_UART_Transmit+0x80>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d104      	bne.n	800ace8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	61bb      	str	r3, [r7, #24]
 800ace6:	e003      	b.n	800acf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800acf8:	e02c      	b.n	800ad54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2200      	movs	r2, #0
 800ad02:	2180      	movs	r1, #128	; 0x80
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 fc4a 	bl	800b59e <UART_WaitOnFlagUntilTimeout>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e038      	b.n	800ad86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10b      	bne.n	800ad32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	61bb      	str	r3, [r7, #24]
 800ad30:	e007      	b.n	800ad42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1cc      	bne.n	800acfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2200      	movs	r2, #0
 800ad68:	2140      	movs	r1, #64	; 0x40
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 fc17 	bl	800b59e <UART_WaitOnFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e005      	b.n	800ad86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e000      	b.n	800ad86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800ad84:	2302      	movs	r3, #2
  }
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3720      	adds	r7, #32
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b08a      	sub	sp, #40	; 0x28
 800ad92:	af02      	add	r7, sp, #8
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	603b      	str	r3, [r7, #0]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	f040 80be 	bne.w	800af24 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <HAL_UART_Receive+0x26>
 800adae:	88fb      	ldrh	r3, [r7, #6]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e0b6      	b.n	800af26 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <HAL_UART_Receive+0x38>
 800adc2:	2302      	movs	r3, #2
 800adc4:	e0af      	b.n	800af26 <HAL_UART_Receive+0x198>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2222      	movs	r2, #34	; 0x22
 800adda:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ade2:	f7fa fad3 	bl	800538c <HAL_GetTick>
 800ade6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	88fa      	ldrh	r2, [r7, #6]
 800adec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	88fa      	ldrh	r2, [r7, #6]
 800adf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae00:	d10e      	bne.n	800ae20 <HAL_UART_Receive+0x92>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d105      	bne.n	800ae16 <HAL_UART_Receive+0x88>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ae10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae14:	e02d      	b.n	800ae72 <HAL_UART_Receive+0xe4>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	22ff      	movs	r2, #255	; 0xff
 800ae1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae1e:	e028      	b.n	800ae72 <HAL_UART_Receive+0xe4>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10d      	bne.n	800ae44 <HAL_UART_Receive+0xb6>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d104      	bne.n	800ae3a <HAL_UART_Receive+0xac>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	22ff      	movs	r2, #255	; 0xff
 800ae34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae38:	e01b      	b.n	800ae72 <HAL_UART_Receive+0xe4>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	227f      	movs	r2, #127	; 0x7f
 800ae3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae42:	e016      	b.n	800ae72 <HAL_UART_Receive+0xe4>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae4c:	d10d      	bne.n	800ae6a <HAL_UART_Receive+0xdc>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d104      	bne.n	800ae60 <HAL_UART_Receive+0xd2>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	227f      	movs	r2, #127	; 0x7f
 800ae5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae5e:	e008      	b.n	800ae72 <HAL_UART_Receive+0xe4>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	223f      	movs	r2, #63	; 0x3f
 800ae64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae68:	e003      	b.n	800ae72 <HAL_UART_Receive+0xe4>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae82:	d108      	bne.n	800ae96 <HAL_UART_Receive+0x108>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d104      	bne.n	800ae96 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	e003      	b.n	800ae9e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800aea6:	e032      	b.n	800af0e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2120      	movs	r1, #32
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 fb73 	bl	800b59e <UART_WaitOnFlagUntilTimeout>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e031      	b.n	800af26 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10c      	bne.n	800aee2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	b29a      	uxth	r2, r3
 800aed0:	8a7b      	ldrh	r3, [r7, #18]
 800aed2:	4013      	ands	r3, r2
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	3302      	adds	r3, #2
 800aede:	61bb      	str	r3, [r7, #24]
 800aee0:	e00c      	b.n	800aefc <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	8a7b      	ldrh	r3, [r7, #18]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	4013      	ands	r3, r2
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	3301      	adds	r3, #1
 800aefa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af02:	b29b      	uxth	r3, r3
 800af04:	3b01      	subs	r3, #1
 800af06:	b29a      	uxth	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1c6      	bne.n	800aea8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2220      	movs	r2, #32
 800af1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800af20:	2300      	movs	r3, #0
 800af22:	e000      	b.n	800af26 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800af24:	2302      	movs	r3, #2
  }
}
 800af26:	4618      	mov	r0, r3
 800af28:	3720      	adds	r7, #32
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689a      	ldr	r2, [r3, #8]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	431a      	orrs	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	69db      	ldr	r3, [r3, #28]
 800af50:	4313      	orrs	r3, r2
 800af52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	4ba7      	ldr	r3, [pc, #668]	; (800b1f8 <UART_SetConfig+0x2c8>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	6812      	ldr	r2, [r2, #0]
 800af62:	6979      	ldr	r1, [r7, #20]
 800af64:	430b      	orrs	r3, r1
 800af66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a95      	ldr	r2, [pc, #596]	; (800b1fc <UART_SetConfig+0x2cc>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d120      	bne.n	800afee <UART_SetConfig+0xbe>
 800afac:	4b94      	ldr	r3, [pc, #592]	; (800b200 <UART_SetConfig+0x2d0>)
 800afae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afb2:	f003 0303 	and.w	r3, r3, #3
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d816      	bhi.n	800afe8 <UART_SetConfig+0xb8>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <UART_SetConfig+0x90>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800afdd 	.word	0x0800afdd
 800afc8:	0800afd7 	.word	0x0800afd7
 800afcc:	0800afe3 	.word	0x0800afe3
 800afd0:	2301      	movs	r3, #1
 800afd2:	77fb      	strb	r3, [r7, #31]
 800afd4:	e14f      	b.n	800b276 <UART_SetConfig+0x346>
 800afd6:	2302      	movs	r3, #2
 800afd8:	77fb      	strb	r3, [r7, #31]
 800afda:	e14c      	b.n	800b276 <UART_SetConfig+0x346>
 800afdc:	2304      	movs	r3, #4
 800afde:	77fb      	strb	r3, [r7, #31]
 800afe0:	e149      	b.n	800b276 <UART_SetConfig+0x346>
 800afe2:	2308      	movs	r3, #8
 800afe4:	77fb      	strb	r3, [r7, #31]
 800afe6:	e146      	b.n	800b276 <UART_SetConfig+0x346>
 800afe8:	2310      	movs	r3, #16
 800afea:	77fb      	strb	r3, [r7, #31]
 800afec:	e143      	b.n	800b276 <UART_SetConfig+0x346>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a84      	ldr	r2, [pc, #528]	; (800b204 <UART_SetConfig+0x2d4>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d132      	bne.n	800b05e <UART_SetConfig+0x12e>
 800aff8:	4b81      	ldr	r3, [pc, #516]	; (800b200 <UART_SetConfig+0x2d0>)
 800affa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affe:	f003 030c 	and.w	r3, r3, #12
 800b002:	2b0c      	cmp	r3, #12
 800b004:	d828      	bhi.n	800b058 <UART_SetConfig+0x128>
 800b006:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <UART_SetConfig+0xdc>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b041 	.word	0x0800b041
 800b010:	0800b059 	.word	0x0800b059
 800b014:	0800b059 	.word	0x0800b059
 800b018:	0800b059 	.word	0x0800b059
 800b01c:	0800b04d 	.word	0x0800b04d
 800b020:	0800b059 	.word	0x0800b059
 800b024:	0800b059 	.word	0x0800b059
 800b028:	0800b059 	.word	0x0800b059
 800b02c:	0800b047 	.word	0x0800b047
 800b030:	0800b059 	.word	0x0800b059
 800b034:	0800b059 	.word	0x0800b059
 800b038:	0800b059 	.word	0x0800b059
 800b03c:	0800b053 	.word	0x0800b053
 800b040:	2300      	movs	r3, #0
 800b042:	77fb      	strb	r3, [r7, #31]
 800b044:	e117      	b.n	800b276 <UART_SetConfig+0x346>
 800b046:	2302      	movs	r3, #2
 800b048:	77fb      	strb	r3, [r7, #31]
 800b04a:	e114      	b.n	800b276 <UART_SetConfig+0x346>
 800b04c:	2304      	movs	r3, #4
 800b04e:	77fb      	strb	r3, [r7, #31]
 800b050:	e111      	b.n	800b276 <UART_SetConfig+0x346>
 800b052:	2308      	movs	r3, #8
 800b054:	77fb      	strb	r3, [r7, #31]
 800b056:	e10e      	b.n	800b276 <UART_SetConfig+0x346>
 800b058:	2310      	movs	r3, #16
 800b05a:	77fb      	strb	r3, [r7, #31]
 800b05c:	e10b      	b.n	800b276 <UART_SetConfig+0x346>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a69      	ldr	r2, [pc, #420]	; (800b208 <UART_SetConfig+0x2d8>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d120      	bne.n	800b0aa <UART_SetConfig+0x17a>
 800b068:	4b65      	ldr	r3, [pc, #404]	; (800b200 <UART_SetConfig+0x2d0>)
 800b06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b06e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b072:	2b30      	cmp	r3, #48	; 0x30
 800b074:	d013      	beq.n	800b09e <UART_SetConfig+0x16e>
 800b076:	2b30      	cmp	r3, #48	; 0x30
 800b078:	d814      	bhi.n	800b0a4 <UART_SetConfig+0x174>
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	d009      	beq.n	800b092 <UART_SetConfig+0x162>
 800b07e:	2b20      	cmp	r3, #32
 800b080:	d810      	bhi.n	800b0a4 <UART_SetConfig+0x174>
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <UART_SetConfig+0x15c>
 800b086:	2b10      	cmp	r3, #16
 800b088:	d006      	beq.n	800b098 <UART_SetConfig+0x168>
 800b08a:	e00b      	b.n	800b0a4 <UART_SetConfig+0x174>
 800b08c:	2300      	movs	r3, #0
 800b08e:	77fb      	strb	r3, [r7, #31]
 800b090:	e0f1      	b.n	800b276 <UART_SetConfig+0x346>
 800b092:	2302      	movs	r3, #2
 800b094:	77fb      	strb	r3, [r7, #31]
 800b096:	e0ee      	b.n	800b276 <UART_SetConfig+0x346>
 800b098:	2304      	movs	r3, #4
 800b09a:	77fb      	strb	r3, [r7, #31]
 800b09c:	e0eb      	b.n	800b276 <UART_SetConfig+0x346>
 800b09e:	2308      	movs	r3, #8
 800b0a0:	77fb      	strb	r3, [r7, #31]
 800b0a2:	e0e8      	b.n	800b276 <UART_SetConfig+0x346>
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	77fb      	strb	r3, [r7, #31]
 800b0a8:	e0e5      	b.n	800b276 <UART_SetConfig+0x346>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a57      	ldr	r2, [pc, #348]	; (800b20c <UART_SetConfig+0x2dc>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d120      	bne.n	800b0f6 <UART_SetConfig+0x1c6>
 800b0b4:	4b52      	ldr	r3, [pc, #328]	; (800b200 <UART_SetConfig+0x2d0>)
 800b0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b0be:	2bc0      	cmp	r3, #192	; 0xc0
 800b0c0:	d013      	beq.n	800b0ea <UART_SetConfig+0x1ba>
 800b0c2:	2bc0      	cmp	r3, #192	; 0xc0
 800b0c4:	d814      	bhi.n	800b0f0 <UART_SetConfig+0x1c0>
 800b0c6:	2b80      	cmp	r3, #128	; 0x80
 800b0c8:	d009      	beq.n	800b0de <UART_SetConfig+0x1ae>
 800b0ca:	2b80      	cmp	r3, #128	; 0x80
 800b0cc:	d810      	bhi.n	800b0f0 <UART_SetConfig+0x1c0>
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <UART_SetConfig+0x1a8>
 800b0d2:	2b40      	cmp	r3, #64	; 0x40
 800b0d4:	d006      	beq.n	800b0e4 <UART_SetConfig+0x1b4>
 800b0d6:	e00b      	b.n	800b0f0 <UART_SetConfig+0x1c0>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	77fb      	strb	r3, [r7, #31]
 800b0dc:	e0cb      	b.n	800b276 <UART_SetConfig+0x346>
 800b0de:	2302      	movs	r3, #2
 800b0e0:	77fb      	strb	r3, [r7, #31]
 800b0e2:	e0c8      	b.n	800b276 <UART_SetConfig+0x346>
 800b0e4:	2304      	movs	r3, #4
 800b0e6:	77fb      	strb	r3, [r7, #31]
 800b0e8:	e0c5      	b.n	800b276 <UART_SetConfig+0x346>
 800b0ea:	2308      	movs	r3, #8
 800b0ec:	77fb      	strb	r3, [r7, #31]
 800b0ee:	e0c2      	b.n	800b276 <UART_SetConfig+0x346>
 800b0f0:	2310      	movs	r3, #16
 800b0f2:	77fb      	strb	r3, [r7, #31]
 800b0f4:	e0bf      	b.n	800b276 <UART_SetConfig+0x346>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a45      	ldr	r2, [pc, #276]	; (800b210 <UART_SetConfig+0x2e0>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d125      	bne.n	800b14c <UART_SetConfig+0x21c>
 800b100:	4b3f      	ldr	r3, [pc, #252]	; (800b200 <UART_SetConfig+0x2d0>)
 800b102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b10a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b10e:	d017      	beq.n	800b140 <UART_SetConfig+0x210>
 800b110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b114:	d817      	bhi.n	800b146 <UART_SetConfig+0x216>
 800b116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b11a:	d00b      	beq.n	800b134 <UART_SetConfig+0x204>
 800b11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b120:	d811      	bhi.n	800b146 <UART_SetConfig+0x216>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d003      	beq.n	800b12e <UART_SetConfig+0x1fe>
 800b126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b12a:	d006      	beq.n	800b13a <UART_SetConfig+0x20a>
 800b12c:	e00b      	b.n	800b146 <UART_SetConfig+0x216>
 800b12e:	2300      	movs	r3, #0
 800b130:	77fb      	strb	r3, [r7, #31]
 800b132:	e0a0      	b.n	800b276 <UART_SetConfig+0x346>
 800b134:	2302      	movs	r3, #2
 800b136:	77fb      	strb	r3, [r7, #31]
 800b138:	e09d      	b.n	800b276 <UART_SetConfig+0x346>
 800b13a:	2304      	movs	r3, #4
 800b13c:	77fb      	strb	r3, [r7, #31]
 800b13e:	e09a      	b.n	800b276 <UART_SetConfig+0x346>
 800b140:	2308      	movs	r3, #8
 800b142:	77fb      	strb	r3, [r7, #31]
 800b144:	e097      	b.n	800b276 <UART_SetConfig+0x346>
 800b146:	2310      	movs	r3, #16
 800b148:	77fb      	strb	r3, [r7, #31]
 800b14a:	e094      	b.n	800b276 <UART_SetConfig+0x346>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a30      	ldr	r2, [pc, #192]	; (800b214 <UART_SetConfig+0x2e4>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d125      	bne.n	800b1a2 <UART_SetConfig+0x272>
 800b156:	4b2a      	ldr	r3, [pc, #168]	; (800b200 <UART_SetConfig+0x2d0>)
 800b158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b15c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b164:	d017      	beq.n	800b196 <UART_SetConfig+0x266>
 800b166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b16a:	d817      	bhi.n	800b19c <UART_SetConfig+0x26c>
 800b16c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b170:	d00b      	beq.n	800b18a <UART_SetConfig+0x25a>
 800b172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b176:	d811      	bhi.n	800b19c <UART_SetConfig+0x26c>
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <UART_SetConfig+0x254>
 800b17c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b180:	d006      	beq.n	800b190 <UART_SetConfig+0x260>
 800b182:	e00b      	b.n	800b19c <UART_SetConfig+0x26c>
 800b184:	2301      	movs	r3, #1
 800b186:	77fb      	strb	r3, [r7, #31]
 800b188:	e075      	b.n	800b276 <UART_SetConfig+0x346>
 800b18a:	2302      	movs	r3, #2
 800b18c:	77fb      	strb	r3, [r7, #31]
 800b18e:	e072      	b.n	800b276 <UART_SetConfig+0x346>
 800b190:	2304      	movs	r3, #4
 800b192:	77fb      	strb	r3, [r7, #31]
 800b194:	e06f      	b.n	800b276 <UART_SetConfig+0x346>
 800b196:	2308      	movs	r3, #8
 800b198:	77fb      	strb	r3, [r7, #31]
 800b19a:	e06c      	b.n	800b276 <UART_SetConfig+0x346>
 800b19c:	2310      	movs	r3, #16
 800b19e:	77fb      	strb	r3, [r7, #31]
 800b1a0:	e069      	b.n	800b276 <UART_SetConfig+0x346>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a1c      	ldr	r2, [pc, #112]	; (800b218 <UART_SetConfig+0x2e8>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d137      	bne.n	800b21c <UART_SetConfig+0x2ec>
 800b1ac:	4b14      	ldr	r3, [pc, #80]	; (800b200 <UART_SetConfig+0x2d0>)
 800b1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b1b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1ba:	d017      	beq.n	800b1ec <UART_SetConfig+0x2bc>
 800b1bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1c0:	d817      	bhi.n	800b1f2 <UART_SetConfig+0x2c2>
 800b1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1c6:	d00b      	beq.n	800b1e0 <UART_SetConfig+0x2b0>
 800b1c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1cc:	d811      	bhi.n	800b1f2 <UART_SetConfig+0x2c2>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <UART_SetConfig+0x2aa>
 800b1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1d6:	d006      	beq.n	800b1e6 <UART_SetConfig+0x2b6>
 800b1d8:	e00b      	b.n	800b1f2 <UART_SetConfig+0x2c2>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	77fb      	strb	r3, [r7, #31]
 800b1de:	e04a      	b.n	800b276 <UART_SetConfig+0x346>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	77fb      	strb	r3, [r7, #31]
 800b1e4:	e047      	b.n	800b276 <UART_SetConfig+0x346>
 800b1e6:	2304      	movs	r3, #4
 800b1e8:	77fb      	strb	r3, [r7, #31]
 800b1ea:	e044      	b.n	800b276 <UART_SetConfig+0x346>
 800b1ec:	2308      	movs	r3, #8
 800b1ee:	77fb      	strb	r3, [r7, #31]
 800b1f0:	e041      	b.n	800b276 <UART_SetConfig+0x346>
 800b1f2:	2310      	movs	r3, #16
 800b1f4:	77fb      	strb	r3, [r7, #31]
 800b1f6:	e03e      	b.n	800b276 <UART_SetConfig+0x346>
 800b1f8:	efff69f3 	.word	0xefff69f3
 800b1fc:	40011000 	.word	0x40011000
 800b200:	40023800 	.word	0x40023800
 800b204:	40004400 	.word	0x40004400
 800b208:	40004800 	.word	0x40004800
 800b20c:	40004c00 	.word	0x40004c00
 800b210:	40005000 	.word	0x40005000
 800b214:	40011400 	.word	0x40011400
 800b218:	40007800 	.word	0x40007800
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a71      	ldr	r2, [pc, #452]	; (800b3e8 <UART_SetConfig+0x4b8>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d125      	bne.n	800b272 <UART_SetConfig+0x342>
 800b226:	4b71      	ldr	r3, [pc, #452]	; (800b3ec <UART_SetConfig+0x4bc>)
 800b228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b234:	d017      	beq.n	800b266 <UART_SetConfig+0x336>
 800b236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b23a:	d817      	bhi.n	800b26c <UART_SetConfig+0x33c>
 800b23c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b240:	d00b      	beq.n	800b25a <UART_SetConfig+0x32a>
 800b242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b246:	d811      	bhi.n	800b26c <UART_SetConfig+0x33c>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <UART_SetConfig+0x324>
 800b24c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b250:	d006      	beq.n	800b260 <UART_SetConfig+0x330>
 800b252:	e00b      	b.n	800b26c <UART_SetConfig+0x33c>
 800b254:	2300      	movs	r3, #0
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e00d      	b.n	800b276 <UART_SetConfig+0x346>
 800b25a:	2302      	movs	r3, #2
 800b25c:	77fb      	strb	r3, [r7, #31]
 800b25e:	e00a      	b.n	800b276 <UART_SetConfig+0x346>
 800b260:	2304      	movs	r3, #4
 800b262:	77fb      	strb	r3, [r7, #31]
 800b264:	e007      	b.n	800b276 <UART_SetConfig+0x346>
 800b266:	2308      	movs	r3, #8
 800b268:	77fb      	strb	r3, [r7, #31]
 800b26a:	e004      	b.n	800b276 <UART_SetConfig+0x346>
 800b26c:	2310      	movs	r3, #16
 800b26e:	77fb      	strb	r3, [r7, #31]
 800b270:	e001      	b.n	800b276 <UART_SetConfig+0x346>
 800b272:	2310      	movs	r3, #16
 800b274:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b27e:	d15a      	bne.n	800b336 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b280:	7ffb      	ldrb	r3, [r7, #31]
 800b282:	2b08      	cmp	r3, #8
 800b284:	d827      	bhi.n	800b2d6 <UART_SetConfig+0x3a6>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <UART_SetConfig+0x35c>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2b1 	.word	0x0800b2b1
 800b290:	0800b2b9 	.word	0x0800b2b9
 800b294:	0800b2c1 	.word	0x0800b2c1
 800b298:	0800b2d7 	.word	0x0800b2d7
 800b29c:	0800b2c7 	.word	0x0800b2c7
 800b2a0:	0800b2d7 	.word	0x0800b2d7
 800b2a4:	0800b2d7 	.word	0x0800b2d7
 800b2a8:	0800b2d7 	.word	0x0800b2d7
 800b2ac:	0800b2cf 	.word	0x0800b2cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2b0:	f7fd fd1a 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 800b2b4:	61b8      	str	r0, [r7, #24]
        break;
 800b2b6:	e013      	b.n	800b2e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2b8:	f7fd fd2a 	bl	8008d10 <HAL_RCC_GetPCLK2Freq>
 800b2bc:	61b8      	str	r0, [r7, #24]
        break;
 800b2be:	e00f      	b.n	800b2e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2c0:	4b4b      	ldr	r3, [pc, #300]	; (800b3f0 <UART_SetConfig+0x4c0>)
 800b2c2:	61bb      	str	r3, [r7, #24]
        break;
 800b2c4:	e00c      	b.n	800b2e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2c6:	f7fd fc4d 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 800b2ca:	61b8      	str	r0, [r7, #24]
        break;
 800b2cc:	e008      	b.n	800b2e0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2d2:	61bb      	str	r3, [r7, #24]
        break;
 800b2d4:	e004      	b.n	800b2e0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	77bb      	strb	r3, [r7, #30]
        break;
 800b2de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d074      	beq.n	800b3d0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	005a      	lsls	r2, r3, #1
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	085b      	lsrs	r3, r3, #1
 800b2f0:	441a      	add	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2b0f      	cmp	r3, #15
 800b300:	d916      	bls.n	800b330 <UART_SetConfig+0x400>
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b308:	d212      	bcs.n	800b330 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f023 030f 	bic.w	r3, r3, #15
 800b312:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	b29b      	uxth	r3, r3
 800b31a:	f003 0307 	and.w	r3, r3, #7
 800b31e:	b29a      	uxth	r2, r3
 800b320:	89fb      	ldrh	r3, [r7, #14]
 800b322:	4313      	orrs	r3, r2
 800b324:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	89fa      	ldrh	r2, [r7, #14]
 800b32c:	60da      	str	r2, [r3, #12]
 800b32e:	e04f      	b.n	800b3d0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	77bb      	strb	r3, [r7, #30]
 800b334:	e04c      	b.n	800b3d0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b336:	7ffb      	ldrb	r3, [r7, #31]
 800b338:	2b08      	cmp	r3, #8
 800b33a:	d828      	bhi.n	800b38e <UART_SetConfig+0x45e>
 800b33c:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <UART_SetConfig+0x414>)
 800b33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b342:	bf00      	nop
 800b344:	0800b369 	.word	0x0800b369
 800b348:	0800b371 	.word	0x0800b371
 800b34c:	0800b379 	.word	0x0800b379
 800b350:	0800b38f 	.word	0x0800b38f
 800b354:	0800b37f 	.word	0x0800b37f
 800b358:	0800b38f 	.word	0x0800b38f
 800b35c:	0800b38f 	.word	0x0800b38f
 800b360:	0800b38f 	.word	0x0800b38f
 800b364:	0800b387 	.word	0x0800b387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b368:	f7fd fcbe 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 800b36c:	61b8      	str	r0, [r7, #24]
        break;
 800b36e:	e013      	b.n	800b398 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b370:	f7fd fcce 	bl	8008d10 <HAL_RCC_GetPCLK2Freq>
 800b374:	61b8      	str	r0, [r7, #24]
        break;
 800b376:	e00f      	b.n	800b398 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b378:	4b1d      	ldr	r3, [pc, #116]	; (800b3f0 <UART_SetConfig+0x4c0>)
 800b37a:	61bb      	str	r3, [r7, #24]
        break;
 800b37c:	e00c      	b.n	800b398 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b37e:	f7fd fbf1 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 800b382:	61b8      	str	r0, [r7, #24]
        break;
 800b384:	e008      	b.n	800b398 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b38a:	61bb      	str	r3, [r7, #24]
        break;
 800b38c:	e004      	b.n	800b398 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b38e:	2300      	movs	r3, #0
 800b390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	77bb      	strb	r3, [r7, #30]
        break;
 800b396:	bf00      	nop
    }

    if (pclk != 0U)
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d018      	beq.n	800b3d0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	085a      	lsrs	r2, r3, #1
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	441a      	add	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	2b0f      	cmp	r3, #15
 800b3b6:	d909      	bls.n	800b3cc <UART_SetConfig+0x49c>
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3be:	d205      	bcs.n	800b3cc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60da      	str	r2, [r3, #12]
 800b3ca:	e001      	b.n	800b3d0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b3dc:	7fbb      	ldrb	r3, [r7, #30]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3720      	adds	r7, #32
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	40007c00 	.word	0x40007c00
 800b3ec:	40023800 	.word	0x40023800
 800b3f0:	00f42400 	.word	0x00f42400

0800b3f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00a      	beq.n	800b41e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00a      	beq.n	800b440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	430a      	orrs	r2, r1
 800b43e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b444:	f003 0304 	and.w	r3, r3, #4
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00a      	beq.n	800b462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	430a      	orrs	r2, r1
 800b460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	f003 0308 	and.w	r3, r3, #8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	f003 0310 	and.w	r3, r3, #16
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00a      	beq.n	800b4a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	430a      	orrs	r2, r1
 800b4a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	f003 0320 	and.w	r3, r3, #32
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00a      	beq.n	800b4c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	430a      	orrs	r2, r1
 800b4c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d01a      	beq.n	800b50a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4f2:	d10a      	bne.n	800b50a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	430a      	orrs	r2, r1
 800b52a:	605a      	str	r2, [r3, #4]
  }
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b548:	f7f9 ff20 	bl	800538c <HAL_GetTick>
 800b54c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0308 	and.w	r3, r3, #8
 800b558:	2b08      	cmp	r3, #8
 800b55a:	d10e      	bne.n	800b57a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b55c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f817 	bl	800b59e <UART_WaitOnFlagUntilTimeout>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e00d      	b.n	800b596 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2220      	movs	r2, #32
 800b57e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2220      	movs	r2, #32
 800b584:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b09c      	sub	sp, #112	; 0x70
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	603b      	str	r3, [r7, #0]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5ae:	e0a5      	b.n	800b6fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5b6:	f000 80a1 	beq.w	800b6fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5ba:	f7f9 fee7 	bl	800538c <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d302      	bcc.n	800b5d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b5ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d13e      	bne.n	800b64e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5e4:	667b      	str	r3, [r7, #100]	; 0x64
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e6      	bne.n	800b5d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3308      	adds	r3, #8
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	f023 0301 	bic.w	r3, r3, #1
 800b618:	663b      	str	r3, [r7, #96]	; 0x60
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3308      	adds	r3, #8
 800b620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b622:	64ba      	str	r2, [r7, #72]	; 0x48
 800b624:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1e5      	bne.n	800b602 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2220      	movs	r2, #32
 800b63a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2220      	movs	r2, #32
 800b640:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e067      	b.n	800b71e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0304 	and.w	r3, r3, #4
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d04f      	beq.n	800b6fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b66a:	d147      	bne.n	800b6fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b674:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	e853 3f00 	ldrex	r3, [r3]
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b68a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b694:	637b      	str	r3, [r7, #52]	; 0x34
 800b696:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b69a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b69c:	e841 2300 	strex	r3, r2, [r1]
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e6      	bne.n	800b676 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	e853 3f00 	ldrex	r3, [r3]
 800b6b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	f023 0301 	bic.w	r3, r3, #1
 800b6be:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6c8:	623a      	str	r2, [r7, #32]
 800b6ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6cc:	69f9      	ldr	r1, [r7, #28]
 800b6ce:	6a3a      	ldr	r2, [r7, #32]
 800b6d0:	e841 2300 	strex	r3, r2, [r1]
 800b6d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e5      	bne.n	800b6a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2220      	movs	r2, #32
 800b6ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e010      	b.n	800b71e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	69da      	ldr	r2, [r3, #28]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4013      	ands	r3, r2
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	429a      	cmp	r2, r3
 800b70a:	bf0c      	ite	eq
 800b70c:	2301      	moveq	r3, #1
 800b70e:	2300      	movne	r3, #0
 800b710:	b2db      	uxtb	r3, r3
 800b712:	461a      	mov	r2, r3
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	429a      	cmp	r2, r3
 800b718:	f43f af4a 	beq.w	800b5b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3770      	adds	r7, #112	; 0x70
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d121      	bne.n	800b77e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b27      	ldr	r3, [pc, #156]	; (800b7dc <FMC_SDRAM_Init+0xb4>)
 800b740:	4013      	ands	r3, r2
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	6851      	ldr	r1, [r2, #4]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	6892      	ldr	r2, [r2, #8]
 800b74a:	4311      	orrs	r1, r2
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	68d2      	ldr	r2, [r2, #12]
 800b750:	4311      	orrs	r1, r2
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	6912      	ldr	r2, [r2, #16]
 800b756:	4311      	orrs	r1, r2
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	6952      	ldr	r2, [r2, #20]
 800b75c:	4311      	orrs	r1, r2
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	6992      	ldr	r2, [r2, #24]
 800b762:	4311      	orrs	r1, r2
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	69d2      	ldr	r2, [r2, #28]
 800b768:	4311      	orrs	r1, r2
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	6a12      	ldr	r2, [r2, #32]
 800b76e:	4311      	orrs	r1, r2
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b774:	430a      	orrs	r2, r1
 800b776:	431a      	orrs	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e026      	b.n	800b7cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	69d9      	ldr	r1, [r3, #28]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	4319      	orrs	r1, r3
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b794:	430b      	orrs	r3, r1
 800b796:	431a      	orrs	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	4b0e      	ldr	r3, [pc, #56]	; (800b7dc <FMC_SDRAM_Init+0xb4>)
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	6851      	ldr	r1, [r2, #4]
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	6892      	ldr	r2, [r2, #8]
 800b7ac:	4311      	orrs	r1, r2
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	68d2      	ldr	r2, [r2, #12]
 800b7b2:	4311      	orrs	r1, r2
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	6912      	ldr	r2, [r2, #16]
 800b7b8:	4311      	orrs	r1, r2
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	6952      	ldr	r2, [r2, #20]
 800b7be:	4311      	orrs	r1, r2
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	6992      	ldr	r2, [r2, #24]
 800b7c4:	430a      	orrs	r2, r1
 800b7c6:	431a      	orrs	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	ffff8000 	.word	0xffff8000

0800b7e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d128      	bne.n	800b844 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	1e59      	subs	r1, r3, #1
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	3b01      	subs	r3, #1
 800b806:	011b      	lsls	r3, r3, #4
 800b808:	4319      	orrs	r1, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	3b01      	subs	r3, #1
 800b810:	021b      	lsls	r3, r3, #8
 800b812:	4319      	orrs	r1, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	3b01      	subs	r3, #1
 800b81a:	031b      	lsls	r3, r3, #12
 800b81c:	4319      	orrs	r1, r3
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	3b01      	subs	r3, #1
 800b824:	041b      	lsls	r3, r3, #16
 800b826:	4319      	orrs	r1, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	051b      	lsls	r3, r3, #20
 800b830:	4319      	orrs	r1, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	3b01      	subs	r3, #1
 800b838:	061b      	lsls	r3, r3, #24
 800b83a:	430b      	orrs	r3, r1
 800b83c:	431a      	orrs	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	609a      	str	r2, [r3, #8]
 800b842:	e02d      	b.n	800b8a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	689a      	ldr	r2, [r3, #8]
 800b848:	4b19      	ldr	r3, [pc, #100]	; (800b8b0 <FMC_SDRAM_Timing_Init+0xd0>)
 800b84a:	4013      	ands	r3, r2
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	68d2      	ldr	r2, [r2, #12]
 800b850:	3a01      	subs	r2, #1
 800b852:	0311      	lsls	r1, r2, #12
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	6952      	ldr	r2, [r2, #20]
 800b858:	3a01      	subs	r2, #1
 800b85a:	0512      	lsls	r2, r2, #20
 800b85c:	430a      	orrs	r2, r1
 800b85e:	431a      	orrs	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	1e59      	subs	r1, r3, #1
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	3b01      	subs	r3, #1
 800b878:	011b      	lsls	r3, r3, #4
 800b87a:	4319      	orrs	r1, r3
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	3b01      	subs	r3, #1
 800b882:	021b      	lsls	r3, r3, #8
 800b884:	4319      	orrs	r1, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	3b01      	subs	r3, #1
 800b88c:	041b      	lsls	r3, r3, #16
 800b88e:	4319      	orrs	r1, r3
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	3b01      	subs	r3, #1
 800b896:	061b      	lsls	r3, r3, #24
 800b898:	430b      	orrs	r3, r1
 800b89a:	431a      	orrs	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	ff0f0fff 	.word	0xff0f0fff

0800b8b4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	691a      	ldr	r2, [r3, #16]
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <FMC_SDRAM_SendCommand+0x44>)
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	6811      	ldr	r1, [r2, #0]
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	6852      	ldr	r2, [r2, #4]
 800b8d0:	4311      	orrs	r1, r2
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	6892      	ldr	r2, [r2, #8]
 800b8d6:	3a01      	subs	r2, #1
 800b8d8:	0152      	lsls	r2, r2, #5
 800b8da:	4311      	orrs	r1, r2
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	68d2      	ldr	r2, [r2, #12]
 800b8e0:	0252      	lsls	r2, r2, #9
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	ffc00000 	.word	0xffc00000

0800b8fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	695a      	ldr	r2, [r3, #20]
 800b90a:	4b07      	ldr	r3, [pc, #28]	; (800b928 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b90c:	4013      	ands	r3, r2
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	0052      	lsls	r2, r2, #1
 800b912:	431a      	orrs	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	ffffc001 	.word	0xffffc001

0800b92c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b93a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b93e:	2b84      	cmp	r3, #132	; 0x84
 800b940:	d005      	beq.n	800b94e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b942:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4413      	add	r3, r2
 800b94a:	3303      	adds	r3, #3
 800b94c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b94e:	68fb      	ldr	r3, [r7, #12]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b962:	f3ef 8305 	mrs	r3, IPSR
 800b966:	607b      	str	r3, [r7, #4]
  return(result);
 800b968:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	bf14      	ite	ne
 800b96e:	2301      	movne	r3, #1
 800b970:	2300      	moveq	r3, #0
 800b972:	b2db      	uxtb	r3, r3
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b984:	f001 fb0a 	bl	800cf9c <vTaskStartScheduler>
  
  return osOK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b98e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b990:	b089      	sub	sp, #36	; 0x24
 800b992:	af04      	add	r7, sp, #16
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d020      	beq.n	800b9e2 <osThreadCreate+0x54>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01c      	beq.n	800b9e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685c      	ldr	r4, [r3, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681d      	ldr	r5, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691e      	ldr	r6, [r3, #16]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ffb6 	bl	800b92c <makeFreeRtosPriority>
 800b9c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9ca:	9202      	str	r2, [sp, #8]
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	9100      	str	r1, [sp, #0]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f001 f866 	bl	800caa8 <xTaskCreateStatic>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	60fb      	str	r3, [r7, #12]
 800b9e0:	e01c      	b.n	800ba1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685c      	ldr	r4, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9ee:	b29e      	uxth	r6, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff ff98 	bl	800b92c <makeFreeRtosPriority>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	9200      	str	r2, [sp, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	4632      	mov	r2, r6
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f001 f8ae 	bl	800cb6e <xTaskCreate>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d001      	beq.n	800ba1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e000      	b.n	800ba1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <osDelay+0x16>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	e000      	b.n	800ba3e <osDelay+0x18>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 fa76 	bl	800cf30 <vTaskDelay>
  
  return osOK;
 800ba44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	607a      	str	r2, [r7, #4]
 800ba5c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d013      	beq.n	800ba8e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d101      	bne.n	800ba70 <osTimerCreate+0x20>
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	e000      	b.n	800ba72 <osTimerCreate+0x22>
 800ba70:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800ba7a:	9201      	str	r2, [sp, #4]
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	460a      	mov	r2, r1
 800ba82:	2101      	movs	r1, #1
 800ba84:	480b      	ldr	r0, [pc, #44]	; (800bab4 <osTimerCreate+0x64>)
 800ba86:	f002 f99e 	bl	800ddc6 <xTimerCreateStatic>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	e00e      	b.n	800baac <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800ba8e:	7afb      	ldrb	r3, [r7, #11]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <osTimerCreate+0x48>
 800ba94:	2201      	movs	r2, #1
 800ba96:	e000      	b.n	800ba9a <osTimerCreate+0x4a>
 800ba98:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2101      	movs	r1, #1
 800baa4:	4803      	ldr	r0, [pc, #12]	; (800bab4 <osTimerCreate+0x64>)
 800baa6:	f002 f96d 	bl	800dd84 <xTimerCreate>
 800baaa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	0800f868 	.word	0x0800f868

0800bab8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af02      	add	r7, sp, #8
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d101      	bne.n	800bad8 <osTimerStart+0x20>
    ticks = 1;
 800bad4:	2301      	movs	r3, #1
 800bad6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800bad8:	f7ff ff40 	bl	800b95c <inHandlerMode>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d01a      	beq.n	800bb18 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800bae2:	f107 030c 	add.w	r3, r7, #12
 800bae6:	2200      	movs	r2, #0
 800bae8:	9200      	str	r2, [sp, #0]
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	2109      	movs	r1, #9
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f002 f9e8 	bl	800dec4 <xTimerGenericCommand>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d002      	beq.n	800bb00 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800bafa:	23ff      	movs	r3, #255	; 0xff
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	e018      	b.n	800bb32 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d015      	beq.n	800bb32 <osTimerStart+0x7a>
 800bb06:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <osTimerStart+0x84>)
 800bb08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	e00c      	b.n	800bb32 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	2104      	movs	r1, #4
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f002 f9ce 	bl	800dec4 <xTimerGenericCommand>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d001      	beq.n	800bb32 <osTimerStart+0x7a>
      result = osErrorOS;
 800bb2e:	23ff      	movs	r3, #255	; 0xff
 800bb30:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800bb32:	697b      	ldr	r3, [r7, #20]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d007      	beq.n	800bb60 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	4619      	mov	r1, r3
 800bb56:	2001      	movs	r0, #1
 800bb58:	f000 fa65 	bl	800c026 <xQueueCreateMutexStatic>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	e003      	b.n	800bb68 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bb60:	2001      	movs	r0, #1
 800bb62:	f000 fa48 	bl	800bff6 <xQueueCreateMutex>
 800bb66:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bb70:	b590      	push	{r4, r7, lr}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d011      	beq.n	800bba6 <osMessageCreate+0x36>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00d      	beq.n	800bba6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6818      	ldr	r0, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6859      	ldr	r1, [r3, #4]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	689a      	ldr	r2, [r3, #8]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2400      	movs	r4, #0
 800bb9c:	9400      	str	r4, [sp, #0]
 800bb9e:	f000 f92d 	bl	800bdfc <xQueueGenericCreateStatic>
 800bba2:	4603      	mov	r3, r0
 800bba4:	e008      	b.n	800bbb8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	f000 f9a5 	bl	800bf00 <xQueueGenericCreate>
 800bbb6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd90      	pop	{r4, r7, pc}

0800bbc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f103 0208 	add.w	r2, r3, #8
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f103 0208 	add.w	r2, r3, #8
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f103 0208 	add.w	r2, r3, #8
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc0e:	bf00      	nop
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b085      	sub	sp, #20
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	601a      	str	r2, [r3, #0]
}
 800bc56:	bf00      	nop
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc62:	b480      	push	{r7}
 800bc64:	b085      	sub	sp, #20
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc78:	d103      	bne.n	800bc82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e00c      	b.n	800bc9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3308      	adds	r3, #8
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	e002      	b.n	800bc90 <vListInsert+0x2e>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d2f6      	bcs.n	800bc8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	601a      	str	r2, [r3, #0]
}
 800bcc8:	bf00      	nop
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	6892      	ldr	r2, [r2, #8]
 800bcea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	6852      	ldr	r2, [r2, #4]
 800bcf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d103      	bne.n	800bd08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	689a      	ldr	r2, [r3, #8]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	1e5a      	subs	r2, r3, #1
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10c      	bne.n	800bd56 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	b672      	cpsid	i
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	b662      	cpsie	i
 800bd50:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd52:	bf00      	nop
 800bd54:	e7fe      	b.n	800bd54 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800bd56:	f002 fcb9 	bl	800e6cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd62:	68f9      	ldr	r1, [r7, #12]
 800bd64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd66:	fb01 f303 	mul.w	r3, r1, r3
 800bd6a:	441a      	add	r2, r3
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd86:	3b01      	subs	r3, #1
 800bd88:	68f9      	ldr	r1, [r7, #12]
 800bd8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd8c:	fb01 f303 	mul.w	r3, r1, r3
 800bd90:	441a      	add	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	22ff      	movs	r2, #255	; 0xff
 800bd9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	22ff      	movs	r2, #255	; 0xff
 800bda2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d114      	bne.n	800bdd6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d01a      	beq.n	800bdea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3310      	adds	r3, #16
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f001 fb91 	bl	800d4e0 <xTaskRemoveFromEventList>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d012      	beq.n	800bdea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdc4:	4b0c      	ldr	r3, [pc, #48]	; (800bdf8 <xQueueGenericReset+0xd0>)
 800bdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	e009      	b.n	800bdea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3310      	adds	r3, #16
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fef0 	bl	800bbc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3324      	adds	r3, #36	; 0x24
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff feeb 	bl	800bbc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bdea:	f002 fca3 	bl	800e734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bdee:	2301      	movs	r3, #1
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	e000ed04 	.word	0xe000ed04

0800bdfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08e      	sub	sp, #56	; 0x38
 800be00:	af02      	add	r7, sp, #8
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
 800be08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10c      	bne.n	800be2a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	b672      	cpsid	i
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	b662      	cpsie	i
 800be24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10c      	bne.n	800be4a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	b672      	cpsid	i
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	b662      	cpsie	i
 800be44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <xQueueGenericCreateStatic+0x5a>
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <xQueueGenericCreateStatic+0x5e>
 800be56:	2301      	movs	r3, #1
 800be58:	e000      	b.n	800be5c <xQueueGenericCreateStatic+0x60>
 800be5a:	2300      	movs	r3, #0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10c      	bne.n	800be7a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	b672      	cpsid	i
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	b662      	cpsie	i
 800be74:	623b      	str	r3, [r7, #32]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d102      	bne.n	800be86 <xQueueGenericCreateStatic+0x8a>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <xQueueGenericCreateStatic+0x8e>
 800be86:	2301      	movs	r3, #1
 800be88:	e000      	b.n	800be8c <xQueueGenericCreateStatic+0x90>
 800be8a:	2300      	movs	r3, #0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10c      	bne.n	800beaa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	b672      	cpsid	i
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	b662      	cpsie	i
 800bea4:	61fb      	str	r3, [r7, #28]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800beaa:	2348      	movs	r3, #72	; 0x48
 800beac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b48      	cmp	r3, #72	; 0x48
 800beb2:	d00c      	beq.n	800bece <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	b672      	cpsid	i
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	b662      	cpsie	i
 800bec8:	61bb      	str	r3, [r7, #24]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bece:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00d      	beq.n	800bef6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800beda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bedc:	2201      	movs	r2, #1
 800bede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bee2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	4613      	mov	r3, r2
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	68b9      	ldr	r1, [r7, #8]
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f000 f847 	bl	800bf84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bef8:	4618      	mov	r0, r3
 800befa:	3730      	adds	r7, #48	; 0x30
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10c      	bne.n	800bf2e <xQueueGenericCreate+0x2e>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	b672      	cpsid	i
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	b662      	cpsie	i
 800bf28:	613b      	str	r3, [r7, #16]
}
 800bf2a:	bf00      	nop
 800bf2c:	e7fe      	b.n	800bf2c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d102      	bne.n	800bf3a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	61fb      	str	r3, [r7, #28]
 800bf38:	e004      	b.n	800bf44 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	fb02 f303 	mul.w	r3, r2, r3
 800bf42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	3348      	adds	r3, #72	; 0x48
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f002 fceb 	bl	800e924 <pvPortMalloc>
 800bf4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d011      	beq.n	800bf7a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	3348      	adds	r3, #72	; 0x48
 800bf5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf68:	79fa      	ldrb	r2, [r7, #7]
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	697a      	ldr	r2, [r7, #20]
 800bf72:	68b9      	ldr	r1, [r7, #8]
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f000 f805 	bl	800bf84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
	}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3720      	adds	r7, #32
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d103      	bne.n	800bfa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	e002      	b.n	800bfa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	69b8      	ldr	r0, [r7, #24]
 800bfb6:	f7ff feb7 	bl	800bd28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfba:	bf00      	nop
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00e      	beq.n	800bfee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f837 	bl	800c05c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b086      	sub	sp, #24
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	4603      	mov	r3, r0
 800bffe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c000:	2301      	movs	r3, #1
 800c002:	617b      	str	r3, [r7, #20]
 800c004:	2300      	movs	r3, #0
 800c006:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c008:	79fb      	ldrb	r3, [r7, #7]
 800c00a:	461a      	mov	r2, r3
 800c00c:	6939      	ldr	r1, [r7, #16]
 800c00e:	6978      	ldr	r0, [r7, #20]
 800c010:	f7ff ff76 	bl	800bf00 <xQueueGenericCreate>
 800c014:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff ffd3 	bl	800bfc2 <prvInitialiseMutex>

		return xNewQueue;
 800c01c:	68fb      	ldr	r3, [r7, #12]
	}
 800c01e:	4618      	mov	r0, r3
 800c020:	3718      	adds	r7, #24
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c026:	b580      	push	{r7, lr}
 800c028:	b088      	sub	sp, #32
 800c02a:	af02      	add	r7, sp, #8
 800c02c:	4603      	mov	r3, r0
 800c02e:	6039      	str	r1, [r7, #0]
 800c030:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c032:	2301      	movs	r3, #1
 800c034:	617b      	str	r3, [r7, #20]
 800c036:	2300      	movs	r3, #0
 800c038:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c03a:	79fb      	ldrb	r3, [r7, #7]
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2200      	movs	r2, #0
 800c042:	6939      	ldr	r1, [r7, #16]
 800c044:	6978      	ldr	r0, [r7, #20]
 800c046:	f7ff fed9 	bl	800bdfc <xQueueGenericCreateStatic>
 800c04a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f7ff ffb8 	bl	800bfc2 <prvInitialiseMutex>

		return xNewQueue;
 800c052:	68fb      	ldr	r3, [r7, #12]
	}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08e      	sub	sp, #56	; 0x38
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c06a:	2300      	movs	r3, #0
 800c06c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10c      	bne.n	800c092 <xQueueGenericSend+0x36>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	b672      	cpsid	i
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	b662      	cpsie	i
 800c08c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d103      	bne.n	800c0a0 <xQueueGenericSend+0x44>
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <xQueueGenericSend+0x48>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e000      	b.n	800c0a6 <xQueueGenericSend+0x4a>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10c      	bne.n	800c0c4 <xQueueGenericSend+0x68>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	b672      	cpsid	i
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	b662      	cpsie	i
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0c0:	bf00      	nop
 800c0c2:	e7fe      	b.n	800c0c2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d103      	bne.n	800c0d2 <xQueueGenericSend+0x76>
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d101      	bne.n	800c0d6 <xQueueGenericSend+0x7a>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e000      	b.n	800c0d8 <xQueueGenericSend+0x7c>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10c      	bne.n	800c0f6 <xQueueGenericSend+0x9a>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	b672      	cpsid	i
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	b662      	cpsie	i
 800c0f0:	623b      	str	r3, [r7, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0f6:	f001 fbbb 	bl	800d870 <xTaskGetSchedulerState>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d102      	bne.n	800c106 <xQueueGenericSend+0xaa>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <xQueueGenericSend+0xae>
 800c106:	2301      	movs	r3, #1
 800c108:	e000      	b.n	800c10c <xQueueGenericSend+0xb0>
 800c10a:	2300      	movs	r3, #0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10c      	bne.n	800c12a <xQueueGenericSend+0xce>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	b672      	cpsid	i
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	b662      	cpsie	i
 800c124:	61fb      	str	r3, [r7, #28]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c12a:	f002 facf 	bl	800e6cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c136:	429a      	cmp	r2, r3
 800c138:	d302      	bcc.n	800c140 <xQueueGenericSend+0xe4>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d129      	bne.n	800c194 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	68b9      	ldr	r1, [r7, #8]
 800c144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c146:	f000 fb41 	bl	800c7cc <prvCopyDataToQueue>
 800c14a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	2b00      	cmp	r3, #0
 800c152:	d010      	beq.n	800c176 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	3324      	adds	r3, #36	; 0x24
 800c158:	4618      	mov	r0, r3
 800c15a:	f001 f9c1 	bl	800d4e0 <xTaskRemoveFromEventList>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d013      	beq.n	800c18c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c164:	4b3f      	ldr	r3, [pc, #252]	; (800c264 <xQueueGenericSend+0x208>)
 800c166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c16a:	601a      	str	r2, [r3, #0]
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	e00a      	b.n	800c18c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d007      	beq.n	800c18c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c17c:	4b39      	ldr	r3, [pc, #228]	; (800c264 <xQueueGenericSend+0x208>)
 800c17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c18c:	f002 fad2 	bl	800e734 <vPortExitCritical>
				return pdPASS;
 800c190:	2301      	movs	r3, #1
 800c192:	e063      	b.n	800c25c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d103      	bne.n	800c1a2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c19a:	f002 facb 	bl	800e734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e05c      	b.n	800c25c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d106      	bne.n	800c1b6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1a8:	f107 0314 	add.w	r3, r7, #20
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f001 f9fb 	bl	800d5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1b6:	f002 fabd 	bl	800e734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1ba:	f000 ff63 	bl	800d084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1be:	f002 fa85 	bl	800e6cc <vPortEnterCritical>
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1c8:	b25b      	sxtb	r3, r3
 800c1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ce:	d103      	bne.n	800c1d8 <xQueueGenericSend+0x17c>
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1de:	b25b      	sxtb	r3, r3
 800c1e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1e4:	d103      	bne.n	800c1ee <xQueueGenericSend+0x192>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1ee:	f002 faa1 	bl	800e734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1f2:	1d3a      	adds	r2, r7, #4
 800c1f4:	f107 0314 	add.w	r3, r7, #20
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f001 f9ea 	bl	800d5d4 <xTaskCheckForTimeOut>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d124      	bne.n	800c250 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c208:	f000 fbd8 	bl	800c9bc <prvIsQueueFull>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d018      	beq.n	800c244 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	3310      	adds	r3, #16
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	4611      	mov	r1, r2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f001 f90c 	bl	800d438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c222:	f000 fb63 	bl	800c8ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c226:	f000 ff3b 	bl	800d0a0 <xTaskResumeAll>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f47f af7c 	bne.w	800c12a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c232:	4b0c      	ldr	r3, [pc, #48]	; (800c264 <xQueueGenericSend+0x208>)
 800c234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	e772      	b.n	800c12a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c246:	f000 fb51 	bl	800c8ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c24a:	f000 ff29 	bl	800d0a0 <xTaskResumeAll>
 800c24e:	e76c      	b.n	800c12a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c252:	f000 fb4b 	bl	800c8ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c256:	f000 ff23 	bl	800d0a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c25a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3738      	adds	r7, #56	; 0x38
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	e000ed04 	.word	0xe000ed04

0800c268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08e      	sub	sp, #56	; 0x38
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10c      	bne.n	800c29a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	b672      	cpsid	i
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	b662      	cpsie	i
 800c294:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c296:	bf00      	nop
 800c298:	e7fe      	b.n	800c298 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d103      	bne.n	800c2a8 <xQueueGenericSendFromISR+0x40>
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <xQueueGenericSendFromISR+0x44>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e000      	b.n	800c2ae <xQueueGenericSendFromISR+0x46>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10c      	bne.n	800c2cc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	b672      	cpsid	i
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	b662      	cpsie	i
 800c2c6:	623b      	str	r3, [r7, #32]
}
 800c2c8:	bf00      	nop
 800c2ca:	e7fe      	b.n	800c2ca <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d103      	bne.n	800c2da <xQueueGenericSendFromISR+0x72>
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d101      	bne.n	800c2de <xQueueGenericSendFromISR+0x76>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e000      	b.n	800c2e0 <xQueueGenericSendFromISR+0x78>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10c      	bne.n	800c2fe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	b672      	cpsid	i
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	b662      	cpsie	i
 800c2f8:	61fb      	str	r3, [r7, #28]
}
 800c2fa:	bf00      	nop
 800c2fc:	e7fe      	b.n	800c2fc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2fe:	f002 facd 	bl	800e89c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c302:	f3ef 8211 	mrs	r2, BASEPRI
 800c306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30a:	b672      	cpsid	i
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	b662      	cpsie	i
 800c31a:	61ba      	str	r2, [r7, #24]
 800c31c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c31e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c320:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d302      	bcc.n	800c334 <xQueueGenericSendFromISR+0xcc>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b02      	cmp	r3, #2
 800c332:	d12c      	bne.n	800c38e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c344:	f000 fa42 	bl	800c7cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c348:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c34c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c350:	d112      	bne.n	800c378 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c356:	2b00      	cmp	r3, #0
 800c358:	d016      	beq.n	800c388 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	3324      	adds	r3, #36	; 0x24
 800c35e:	4618      	mov	r0, r3
 800c360:	f001 f8be 	bl	800d4e0 <xTaskRemoveFromEventList>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00e      	beq.n	800c388 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	e007      	b.n	800c388 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c378:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c37c:	3301      	adds	r3, #1
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	b25a      	sxtb	r2, r3
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c388:	2301      	movs	r3, #1
 800c38a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c38c:	e001      	b.n	800c392 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	637b      	str	r3, [r7, #52]	; 0x34
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c39c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3738      	adds	r7, #56	; 0x38
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08c      	sub	sp, #48	; 0x30
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10c      	bne.n	800c3dc <xQueueReceive+0x34>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	b672      	cpsid	i
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	b662      	cpsie	i
 800c3d6:	623b      	str	r3, [r7, #32]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d103      	bne.n	800c3ea <xQueueReceive+0x42>
 800c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <xQueueReceive+0x46>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e000      	b.n	800c3f0 <xQueueReceive+0x48>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10c      	bne.n	800c40e <xQueueReceive+0x66>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	b672      	cpsid	i
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	b662      	cpsie	i
 800c408:	61fb      	str	r3, [r7, #28]
}
 800c40a:	bf00      	nop
 800c40c:	e7fe      	b.n	800c40c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c40e:	f001 fa2f 	bl	800d870 <xTaskGetSchedulerState>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <xQueueReceive+0x76>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <xQueueReceive+0x7a>
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <xQueueReceive+0x7c>
 800c422:	2300      	movs	r3, #0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10c      	bne.n	800c442 <xQueueReceive+0x9a>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	b672      	cpsid	i
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	b662      	cpsie	i
 800c43c:	61bb      	str	r3, [r7, #24]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c442:	f002 f943 	bl	800e6cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d01f      	beq.n	800c492 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c452:	68b9      	ldr	r1, [r7, #8]
 800c454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c456:	f000 fa23 	bl	800c8a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	1e5a      	subs	r2, r3, #1
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00f      	beq.n	800c48a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46c:	3310      	adds	r3, #16
 800c46e:	4618      	mov	r0, r3
 800c470:	f001 f836 	bl	800d4e0 <xTaskRemoveFromEventList>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d007      	beq.n	800c48a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c47a:	4b3d      	ldr	r3, [pc, #244]	; (800c570 <xQueueReceive+0x1c8>)
 800c47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c48a:	f002 f953 	bl	800e734 <vPortExitCritical>
				return pdPASS;
 800c48e:	2301      	movs	r3, #1
 800c490:	e069      	b.n	800c566 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d103      	bne.n	800c4a0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c498:	f002 f94c 	bl	800e734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c49c:	2300      	movs	r3, #0
 800c49e:	e062      	b.n	800c566 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d106      	bne.n	800c4b4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4a6:	f107 0310 	add.w	r3, r7, #16
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f001 f87c 	bl	800d5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4b4:	f002 f93e 	bl	800e734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4b8:	f000 fde4 	bl	800d084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4bc:	f002 f906 	bl	800e6cc <vPortEnterCritical>
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4c6:	b25b      	sxtb	r3, r3
 800c4c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4cc:	d103      	bne.n	800c4d6 <xQueueReceive+0x12e>
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4dc:	b25b      	sxtb	r3, r3
 800c4de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4e2:	d103      	bne.n	800c4ec <xQueueReceive+0x144>
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ec:	f002 f922 	bl	800e734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4f0:	1d3a      	adds	r2, r7, #4
 800c4f2:	f107 0310 	add.w	r3, r7, #16
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f001 f86b 	bl	800d5d4 <xTaskCheckForTimeOut>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d123      	bne.n	800c54c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c506:	f000 fa43 	bl	800c990 <prvIsQueueEmpty>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d017      	beq.n	800c540 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	3324      	adds	r3, #36	; 0x24
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	4611      	mov	r1, r2
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 ff8d 	bl	800d438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c51e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c520:	f000 f9e4 	bl	800c8ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c524:	f000 fdbc 	bl	800d0a0 <xTaskResumeAll>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d189      	bne.n	800c442 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c52e:	4b10      	ldr	r3, [pc, #64]	; (800c570 <xQueueReceive+0x1c8>)
 800c530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	e780      	b.n	800c442 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c542:	f000 f9d3 	bl	800c8ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c546:	f000 fdab 	bl	800d0a0 <xTaskResumeAll>
 800c54a:	e77a      	b.n	800c442 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c54e:	f000 f9cd 	bl	800c8ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c552:	f000 fda5 	bl	800d0a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c558:	f000 fa1a 	bl	800c990 <prvIsQueueEmpty>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f43f af6f 	beq.w	800c442 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c566:	4618      	mov	r0, r3
 800c568:	3730      	adds	r7, #48	; 0x30
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08e      	sub	sp, #56	; 0x38
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c57e:	2300      	movs	r3, #0
 800c580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c586:	2300      	movs	r3, #0
 800c588:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10c      	bne.n	800c5aa <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c594:	b672      	cpsid	i
 800c596:	f383 8811 	msr	BASEPRI, r3
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	b662      	cpsie	i
 800c5a4:	623b      	str	r3, [r7, #32]
}
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00c      	beq.n	800c5cc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b6:	b672      	cpsid	i
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	b662      	cpsie	i
 800c5c6:	61fb      	str	r3, [r7, #28]
}
 800c5c8:	bf00      	nop
 800c5ca:	e7fe      	b.n	800c5ca <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5cc:	f001 f950 	bl	800d870 <xTaskGetSchedulerState>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d102      	bne.n	800c5dc <xQueueSemaphoreTake+0x68>
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <xQueueSemaphoreTake+0x6c>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e000      	b.n	800c5e2 <xQueueSemaphoreTake+0x6e>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10c      	bne.n	800c600 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ea:	b672      	cpsid	i
 800c5ec:	f383 8811 	msr	BASEPRI, r3
 800c5f0:	f3bf 8f6f 	isb	sy
 800c5f4:	f3bf 8f4f 	dsb	sy
 800c5f8:	b662      	cpsie	i
 800c5fa:	61bb      	str	r3, [r7, #24]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c600:	f002 f864 	bl	800e6cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c608:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d024      	beq.n	800c65a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	1e5a      	subs	r2, r3, #1
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c616:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d104      	bne.n	800c62a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c620:	f001 faec 	bl	800dbfc <pvTaskIncrementMutexHeldCount>
 800c624:	4602      	mov	r2, r0
 800c626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c628:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00f      	beq.n	800c652 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c634:	3310      	adds	r3, #16
 800c636:	4618      	mov	r0, r3
 800c638:	f000 ff52 	bl	800d4e0 <xTaskRemoveFromEventList>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d007      	beq.n	800c652 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c642:	4b55      	ldr	r3, [pc, #340]	; (800c798 <xQueueSemaphoreTake+0x224>)
 800c644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c652:	f002 f86f 	bl	800e734 <vPortExitCritical>
				return pdPASS;
 800c656:	2301      	movs	r3, #1
 800c658:	e099      	b.n	800c78e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d113      	bne.n	800c688 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00c      	beq.n	800c680 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	b672      	cpsid	i
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	b662      	cpsie	i
 800c67a:	617b      	str	r3, [r7, #20]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c680:	f002 f858 	bl	800e734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c684:	2300      	movs	r3, #0
 800c686:	e082      	b.n	800c78e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c68e:	f107 030c 	add.w	r3, r7, #12
 800c692:	4618      	mov	r0, r3
 800c694:	f000 ff88 	bl	800d5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c698:	2301      	movs	r3, #1
 800c69a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c69c:	f002 f84a 	bl	800e734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6a0:	f000 fcf0 	bl	800d084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6a4:	f002 f812 	bl	800e6cc <vPortEnterCritical>
 800c6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ae:	b25b      	sxtb	r3, r3
 800c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6b4:	d103      	bne.n	800c6be <xQueueSemaphoreTake+0x14a>
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6c4:	b25b      	sxtb	r3, r3
 800c6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6ca:	d103      	bne.n	800c6d4 <xQueueSemaphoreTake+0x160>
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6d4:	f002 f82e 	bl	800e734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6d8:	463a      	mov	r2, r7
 800c6da:	f107 030c 	add.w	r3, r7, #12
 800c6de:	4611      	mov	r1, r2
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 ff77 	bl	800d5d4 <xTaskCheckForTimeOut>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d132      	bne.n	800c752 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ee:	f000 f94f 	bl	800c990 <prvIsQueueEmpty>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d026      	beq.n	800c746 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d109      	bne.n	800c714 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c700:	f001 ffe4 	bl	800e6cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	4618      	mov	r0, r3
 800c70a:	f001 f8cf 	bl	800d8ac <xTaskPriorityInherit>
 800c70e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c710:	f002 f810 	bl	800e734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	3324      	adds	r3, #36	; 0x24
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f000 fe8b 	bl	800d438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c724:	f000 f8e2 	bl	800c8ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c728:	f000 fcba 	bl	800d0a0 <xTaskResumeAll>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f47f af66 	bne.w	800c600 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c734:	4b18      	ldr	r3, [pc, #96]	; (800c798 <xQueueSemaphoreTake+0x224>)
 800c736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c73a:	601a      	str	r2, [r3, #0]
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	e75c      	b.n	800c600 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c748:	f000 f8d0 	bl	800c8ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c74c:	f000 fca8 	bl	800d0a0 <xTaskResumeAll>
 800c750:	e756      	b.n	800c600 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c754:	f000 f8ca 	bl	800c8ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c758:	f000 fca2 	bl	800d0a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c75c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c75e:	f000 f917 	bl	800c990 <prvIsQueueEmpty>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	f43f af4b 	beq.w	800c600 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00d      	beq.n	800c78c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c770:	f001 ffac 	bl	800e6cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c776:	f000 f811 	bl	800c79c <prvGetDisinheritPriorityAfterTimeout>
 800c77a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c782:	4618      	mov	r0, r3
 800c784:	f001 f99c 	bl	800dac0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c788:	f001 ffd4 	bl	800e734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c78c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3738      	adds	r7, #56	; 0x38
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	e000ed04 	.word	0xe000ed04

0800c79c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d006      	beq.n	800c7ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f1c3 0307 	rsb	r3, r3, #7
 800c7b6:	60fb      	str	r3, [r7, #12]
 800c7b8:	e001      	b.n	800c7be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c7be:	68fb      	ldr	r3, [r7, #12]
	}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10d      	bne.n	800c806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d14d      	bne.n	800c88e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f001 f8d8 	bl	800d9ac <xTaskPriorityDisinherit>
 800c7fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	609a      	str	r2, [r3, #8]
 800c804:	e043      	b.n	800c88e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d119      	bne.n	800c840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6858      	ldr	r0, [r3, #4]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c814:	461a      	mov	r2, r3
 800c816:	68b9      	ldr	r1, [r7, #8]
 800c818:	f002 fa94 	bl	800ed44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c824:	441a      	add	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	429a      	cmp	r2, r3
 800c834:	d32b      	bcc.n	800c88e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	605a      	str	r2, [r3, #4]
 800c83e:	e026      	b.n	800c88e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	68d8      	ldr	r0, [r3, #12]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c848:	461a      	mov	r2, r3
 800c84a:	68b9      	ldr	r1, [r7, #8]
 800c84c:	f002 fa7a 	bl	800ed44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68da      	ldr	r2, [r3, #12]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c858:	425b      	negs	r3, r3
 800c85a:	441a      	add	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	68da      	ldr	r2, [r3, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d207      	bcs.n	800c87c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c874:	425b      	negs	r3, r3
 800c876:	441a      	add	r2, r3
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d105      	bne.n	800c88e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c896:	697b      	ldr	r3, [r7, #20]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d018      	beq.n	800c8e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ba:	441a      	add	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68da      	ldr	r2, [r3, #12]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d303      	bcc.n	800c8d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68d9      	ldr	r1, [r3, #12]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6838      	ldr	r0, [r7, #0]
 800c8e0:	f002 fa30 	bl	800ed44 <memcpy>
	}
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8f4:	f001 feea 	bl	800e6cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c900:	e011      	b.n	800c926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	2b00      	cmp	r3, #0
 800c908:	d012      	beq.n	800c930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3324      	adds	r3, #36	; 0x24
 800c90e:	4618      	mov	r0, r3
 800c910:	f000 fde6 	bl	800d4e0 <xTaskRemoveFromEventList>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c91a:	f000 fec1 	bl	800d6a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
 800c920:	3b01      	subs	r3, #1
 800c922:	b2db      	uxtb	r3, r3
 800c924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dce9      	bgt.n	800c902 <prvUnlockQueue+0x16>
 800c92e:	e000      	b.n	800c932 <prvUnlockQueue+0x46>
					break;
 800c930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	22ff      	movs	r2, #255	; 0xff
 800c936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c93a:	f001 fefb 	bl	800e734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c93e:	f001 fec5 	bl	800e6cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c94a:	e011      	b.n	800c970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d012      	beq.n	800c97a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3310      	adds	r3, #16
 800c958:	4618      	mov	r0, r3
 800c95a:	f000 fdc1 	bl	800d4e0 <xTaskRemoveFromEventList>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c964:	f000 fe9c 	bl	800d6a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c968:	7bbb      	ldrb	r3, [r7, #14]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c974:	2b00      	cmp	r3, #0
 800c976:	dce9      	bgt.n	800c94c <prvUnlockQueue+0x60>
 800c978:	e000      	b.n	800c97c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c97a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	22ff      	movs	r2, #255	; 0xff
 800c980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c984:	f001 fed6 	bl	800e734 <vPortExitCritical>
}
 800c988:	bf00      	nop
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c998:	f001 fe98 	bl	800e6cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d102      	bne.n	800c9aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	e001      	b.n	800c9ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9ae:	f001 fec1 	bl	800e734 <vPortExitCritical>

	return xReturn;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9c4:	f001 fe82 	bl	800e6cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d102      	bne.n	800c9da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
 800c9d8:	e001      	b.n	800c9de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9de:	f001 fea9 	bl	800e734 <vPortExitCritical>

	return xReturn;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	e014      	b.n	800ca26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c9fc:	4a0f      	ldr	r2, [pc, #60]	; (800ca3c <vQueueAddToRegistry+0x50>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10b      	bne.n	800ca20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca08:	490c      	ldr	r1, [pc, #48]	; (800ca3c <vQueueAddToRegistry+0x50>)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca12:	4a0a      	ldr	r2, [pc, #40]	; (800ca3c <vQueueAddToRegistry+0x50>)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	00db      	lsls	r3, r3, #3
 800ca18:	4413      	add	r3, r2
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca1e:	e006      	b.n	800ca2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3301      	adds	r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2b07      	cmp	r3, #7
 800ca2a:	d9e7      	bls.n	800c9fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca2c:	bf00      	nop
 800ca2e:	bf00      	nop
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	20008c04 	.word	0x20008c04

0800ca40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca50:	f001 fe3c 	bl	800e6cc <vPortEnterCritical>
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca5a:	b25b      	sxtb	r3, r3
 800ca5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca60:	d103      	bne.n	800ca6a <vQueueWaitForMessageRestricted+0x2a>
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca70:	b25b      	sxtb	r3, r3
 800ca72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca76:	d103      	bne.n	800ca80 <vQueueWaitForMessageRestricted+0x40>
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca80:	f001 fe58 	bl	800e734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d106      	bne.n	800ca9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	3324      	adds	r3, #36	; 0x24
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	68b9      	ldr	r1, [r7, #8]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 fcf5 	bl	800d484 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ca9a:	6978      	ldr	r0, [r7, #20]
 800ca9c:	f7ff ff26 	bl	800c8ec <prvUnlockQueue>
	}
 800caa0:	bf00      	nop
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08e      	sub	sp, #56	; 0x38
 800caac:	af04      	add	r7, sp, #16
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10c      	bne.n	800cad6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	b672      	cpsid	i
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	b662      	cpsie	i
 800cad0:	623b      	str	r3, [r7, #32]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10c      	bne.n	800caf6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	b672      	cpsid	i
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	b662      	cpsie	i
 800caf0:	61fb      	str	r3, [r7, #28]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800caf6:	23b4      	movs	r3, #180	; 0xb4
 800caf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	2bb4      	cmp	r3, #180	; 0xb4
 800cafe:	d00c      	beq.n	800cb1a <xTaskCreateStatic+0x72>
	__asm volatile
 800cb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb04:	b672      	cpsid	i
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	b662      	cpsie	i
 800cb14:	61bb      	str	r3, [r7, #24]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d01e      	beq.n	800cb60 <xTaskCreateStatic+0xb8>
 800cb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01b      	beq.n	800cb60 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	2202      	movs	r2, #2
 800cb36:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	9303      	str	r3, [sp, #12]
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	9302      	str	r3, [sp, #8]
 800cb42:	f107 0314 	add.w	r3, r7, #20
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	68b9      	ldr	r1, [r7, #8]
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f000 f850 	bl	800cbf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb5a:	f000 f8ed 	bl	800cd38 <prvAddNewTaskToReadyList>
 800cb5e:	e001      	b.n	800cb64 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800cb60:	2300      	movs	r3, #0
 800cb62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb64:	697b      	ldr	r3, [r7, #20]
	}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3728      	adds	r7, #40	; 0x28
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b08c      	sub	sp, #48	; 0x30
 800cb72:	af04      	add	r7, sp, #16
 800cb74:	60f8      	str	r0, [r7, #12]
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	603b      	str	r3, [r7, #0]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb7e:	88fb      	ldrh	r3, [r7, #6]
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4618      	mov	r0, r3
 800cb84:	f001 fece 	bl	800e924 <pvPortMalloc>
 800cb88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00e      	beq.n	800cbae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb90:	20b4      	movs	r0, #180	; 0xb4
 800cb92:	f001 fec7 	bl	800e924 <pvPortMalloc>
 800cb96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	631a      	str	r2, [r3, #48]	; 0x30
 800cba4:	e005      	b.n	800cbb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cba6:	6978      	ldr	r0, [r7, #20]
 800cba8:	f001 ff86 	bl	800eab8 <vPortFree>
 800cbac:	e001      	b.n	800cbb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d017      	beq.n	800cbe8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbc0:	88fa      	ldrh	r2, [r7, #6]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	9303      	str	r3, [sp, #12]
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	9302      	str	r3, [sp, #8]
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	68b9      	ldr	r1, [r7, #8]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f000 f80e 	bl	800cbf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbdc:	69f8      	ldr	r0, [r7, #28]
 800cbde:	f000 f8ab 	bl	800cd38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	61bb      	str	r3, [r7, #24]
 800cbe6:	e002      	b.n	800cbee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cbee:	69bb      	ldr	r3, [r7, #24]
	}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3720      	adds	r7, #32
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b088      	sub	sp, #32
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc0a:	6879      	ldr	r1, [r7, #4]
 800cc0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cc10:	440b      	add	r3, r1
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	4413      	add	r3, r2
 800cc16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	f023 0307 	bic.w	r3, r3, #7
 800cc1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00c      	beq.n	800cc44 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2e:	b672      	cpsid	i
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	b662      	cpsie	i
 800cc3e:	617b      	str	r3, [r7, #20]
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d01f      	beq.n	800cc8a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61fb      	str	r3, [r7, #28]
 800cc4e:	e012      	b.n	800cc76 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	4413      	add	r3, r2
 800cc56:	7819      	ldrb	r1, [r3, #0]
 800cc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	3334      	adds	r3, #52	; 0x34
 800cc60:	460a      	mov	r2, r1
 800cc62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	4413      	add	r3, r2
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d006      	beq.n	800cc7e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	3301      	adds	r3, #1
 800cc74:	61fb      	str	r3, [r7, #28]
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	2b0f      	cmp	r3, #15
 800cc7a:	d9e9      	bls.n	800cc50 <prvInitialiseNewTask+0x58>
 800cc7c:	e000      	b.n	800cc80 <prvInitialiseNewTask+0x88>
			{
				break;
 800cc7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc88:	e003      	b.n	800cc92 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	2b06      	cmp	r3, #6
 800cc96:	d901      	bls.n	800cc9c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc98:	2306      	movs	r3, #6
 800cc9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	2200      	movs	r2, #0
 800ccac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe ffa4 	bl	800bc00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	3318      	adds	r3, #24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe ff9f 	bl	800bc00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	f1c3 0207 	rsb	r2, r3, #7
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	334c      	adds	r3, #76	; 0x4c
 800ccec:	2260      	movs	r2, #96	; 0x60
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f002 f835 	bl	800ed60 <memset>
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	4a0c      	ldr	r2, [pc, #48]	; (800cd2c <prvInitialiseNewTask+0x134>)
 800ccfa:	651a      	str	r2, [r3, #80]	; 0x50
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	4a0c      	ldr	r2, [pc, #48]	; (800cd30 <prvInitialiseNewTask+0x138>)
 800cd00:	655a      	str	r2, [r3, #84]	; 0x54
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	4a0b      	ldr	r2, [pc, #44]	; (800cd34 <prvInitialiseNewTask+0x13c>)
 800cd06:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	68f9      	ldr	r1, [r7, #12]
 800cd0c:	69b8      	ldr	r0, [r7, #24]
 800cd0e:	f001 fbcd 	bl	800e4ac <pxPortInitialiseStack>
 800cd12:	4602      	mov	r2, r0
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd24:	bf00      	nop
 800cd26:	3720      	adds	r7, #32
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	08012718 	.word	0x08012718
 800cd30:	08012738 	.word	0x08012738
 800cd34:	080126f8 	.word	0x080126f8

0800cd38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd40:	f001 fcc4 	bl	800e6cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd44:	4b2a      	ldr	r3, [pc, #168]	; (800cdf0 <prvAddNewTaskToReadyList+0xb8>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	4a29      	ldr	r2, [pc, #164]	; (800cdf0 <prvAddNewTaskToReadyList+0xb8>)
 800cd4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd4e:	4b29      	ldr	r3, [pc, #164]	; (800cdf4 <prvAddNewTaskToReadyList+0xbc>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d109      	bne.n	800cd6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd56:	4a27      	ldr	r2, [pc, #156]	; (800cdf4 <prvAddNewTaskToReadyList+0xbc>)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd5c:	4b24      	ldr	r3, [pc, #144]	; (800cdf0 <prvAddNewTaskToReadyList+0xb8>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d110      	bne.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd64:	f000 fcc0 	bl	800d6e8 <prvInitialiseTaskLists>
 800cd68:	e00d      	b.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd6a:	4b23      	ldr	r3, [pc, #140]	; (800cdf8 <prvAddNewTaskToReadyList+0xc0>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d109      	bne.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd72:	4b20      	ldr	r3, [pc, #128]	; (800cdf4 <prvAddNewTaskToReadyList+0xbc>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d802      	bhi.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd80:	4a1c      	ldr	r2, [pc, #112]	; (800cdf4 <prvAddNewTaskToReadyList+0xbc>)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd86:	4b1d      	ldr	r3, [pc, #116]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	4a1b      	ldr	r2, [pc, #108]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd94:	2201      	movs	r2, #1
 800cd96:	409a      	lsls	r2, r3
 800cd98:	4b19      	ldr	r3, [pc, #100]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	4a18      	ldr	r2, [pc, #96]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cda0:	6013      	str	r3, [r2, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda6:	4613      	mov	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4a15      	ldr	r2, [pc, #84]	; (800ce04 <prvAddNewTaskToReadyList+0xcc>)
 800cdb0:	441a      	add	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f7fe ff2e 	bl	800bc1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdbe:	f001 fcb9 	bl	800e734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cdc2:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <prvAddNewTaskToReadyList+0xc0>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00e      	beq.n	800cde8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdca:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <prvAddNewTaskToReadyList+0xbc>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d207      	bcs.n	800cde8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cdd8:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <prvAddNewTaskToReadyList+0xd0>)
 800cdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdde:	601a      	str	r2, [r3, #0]
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20000b60 	.word	0x20000b60
 800cdf4:	20000a60 	.word	0x20000a60
 800cdf8:	20000b6c 	.word	0x20000b6c
 800cdfc:	20000b7c 	.word	0x20000b7c
 800ce00:	20000b68 	.word	0x20000b68
 800ce04:	20000a64 	.word	0x20000a64
 800ce08:	e000ed04 	.word	0xe000ed04

0800ce0c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ce14:	f001 fc5a 	bl	800e6cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d102      	bne.n	800ce24 <vTaskDelete+0x18>
 800ce1e:	4b3a      	ldr	r3, [pc, #232]	; (800cf08 <vTaskDelete+0xfc>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	e000      	b.n	800ce26 <vTaskDelete+0x1a>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe ff51 	bl	800bcd4 <uxListRemove>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d115      	bne.n	800ce64 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3c:	4933      	ldr	r1, [pc, #204]	; (800cf0c <vTaskDelete+0x100>)
 800ce3e:	4613      	mov	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	440b      	add	r3, r1
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <vTaskDelete+0x58>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce52:	2201      	movs	r2, #1
 800ce54:	fa02 f303 	lsl.w	r3, r2, r3
 800ce58:	43da      	mvns	r2, r3
 800ce5a:	4b2d      	ldr	r3, [pc, #180]	; (800cf10 <vTaskDelete+0x104>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4013      	ands	r3, r2
 800ce60:	4a2b      	ldr	r2, [pc, #172]	; (800cf10 <vTaskDelete+0x104>)
 800ce62:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d004      	beq.n	800ce76 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	3318      	adds	r3, #24
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fe ff2f 	bl	800bcd4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ce76:	4b27      	ldr	r3, [pc, #156]	; (800cf14 <vTaskDelete+0x108>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	4a25      	ldr	r2, [pc, #148]	; (800cf14 <vTaskDelete+0x108>)
 800ce7e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ce80:	4b21      	ldr	r3, [pc, #132]	; (800cf08 <vTaskDelete+0xfc>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d10b      	bne.n	800cea2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4821      	ldr	r0, [pc, #132]	; (800cf18 <vTaskDelete+0x10c>)
 800ce92:	f7fe fec2 	bl	800bc1a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ce96:	4b21      	ldr	r3, [pc, #132]	; (800cf1c <vTaskDelete+0x110>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	4a1f      	ldr	r2, [pc, #124]	; (800cf1c <vTaskDelete+0x110>)
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	e009      	b.n	800ceb6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800cea2:	4b1f      	ldr	r3, [pc, #124]	; (800cf20 <vTaskDelete+0x114>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	4a1d      	ldr	r2, [pc, #116]	; (800cf20 <vTaskDelete+0x114>)
 800ceaa:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 fc89 	bl	800d7c4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ceb2:	f000 fcbd 	bl	800d830 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ceb6:	f001 fc3d 	bl	800e734 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ceba:	4b1a      	ldr	r3, [pc, #104]	; (800cf24 <vTaskDelete+0x118>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d01d      	beq.n	800cefe <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800cec2:	4b11      	ldr	r3, [pc, #68]	; (800cf08 <vTaskDelete+0xfc>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d118      	bne.n	800cefe <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800cecc:	4b16      	ldr	r3, [pc, #88]	; (800cf28 <vTaskDelete+0x11c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00c      	beq.n	800ceee <vTaskDelete+0xe2>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	b672      	cpsid	i
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	b662      	cpsie	i
 800cee8:	60bb      	str	r3, [r7, #8]
}
 800ceea:	bf00      	nop
 800ceec:	e7fe      	b.n	800ceec <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800ceee:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <vTaskDelete+0x120>)
 800cef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cefe:	bf00      	nop
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	20000a60 	.word	0x20000a60
 800cf0c:	20000a64 	.word	0x20000a64
 800cf10:	20000b68 	.word	0x20000b68
 800cf14:	20000b7c 	.word	0x20000b7c
 800cf18:	20000b34 	.word	0x20000b34
 800cf1c:	20000b48 	.word	0x20000b48
 800cf20:	20000b60 	.word	0x20000b60
 800cf24:	20000b6c 	.word	0x20000b6c
 800cf28:	20000b88 	.word	0x20000b88
 800cf2c:	e000ed04 	.word	0xe000ed04

0800cf30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d019      	beq.n	800cf76 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf42:	4b14      	ldr	r3, [pc, #80]	; (800cf94 <vTaskDelay+0x64>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00c      	beq.n	800cf64 <vTaskDelay+0x34>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	b672      	cpsid	i
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	b662      	cpsie	i
 800cf5e:	60bb      	str	r3, [r7, #8]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cf64:	f000 f88e 	bl	800d084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf68:	2100      	movs	r1, #0
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 fe5a 	bl	800dc24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf70:	f000 f896 	bl	800d0a0 <xTaskResumeAll>
 800cf74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d107      	bne.n	800cf8c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800cf7c:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <vTaskDelay+0x68>)
 800cf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf8c:	bf00      	nop
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	20000b88 	.word	0x20000b88
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b08a      	sub	sp, #40	; 0x28
 800cfa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfaa:	463a      	mov	r2, r7
 800cfac:	1d39      	adds	r1, r7, #4
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f3 fb00 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	9202      	str	r2, [sp, #8]
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	460a      	mov	r2, r1
 800cfca:	4926      	ldr	r1, [pc, #152]	; (800d064 <vTaskStartScheduler+0xc8>)
 800cfcc:	4826      	ldr	r0, [pc, #152]	; (800d068 <vTaskStartScheduler+0xcc>)
 800cfce:	f7ff fd6b 	bl	800caa8 <xTaskCreateStatic>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4a25      	ldr	r2, [pc, #148]	; (800d06c <vTaskStartScheduler+0xd0>)
 800cfd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfd8:	4b24      	ldr	r3, [pc, #144]	; (800d06c <vTaskStartScheduler+0xd0>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	e001      	b.n	800cfea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d102      	bne.n	800cff6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cff0:	f000 fe7e 	bl	800dcf0 <xTimerCreateTimerTask>
 800cff4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d11d      	bne.n	800d038 <vTaskStartScheduler+0x9c>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	b672      	cpsid	i
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	b662      	cpsie	i
 800d010:	613b      	str	r3, [r7, #16]
}
 800d012:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d014:	4b16      	ldr	r3, [pc, #88]	; (800d070 <vTaskStartScheduler+0xd4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	334c      	adds	r3, #76	; 0x4c
 800d01a:	4a16      	ldr	r2, [pc, #88]	; (800d074 <vTaskStartScheduler+0xd8>)
 800d01c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d01e:	4b16      	ldr	r3, [pc, #88]	; (800d078 <vTaskStartScheduler+0xdc>)
 800d020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d024:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d026:	4b15      	ldr	r3, [pc, #84]	; (800d07c <vTaskStartScheduler+0xe0>)
 800d028:	2201      	movs	r2, #1
 800d02a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d02c:	4b14      	ldr	r3, [pc, #80]	; (800d080 <vTaskStartScheduler+0xe4>)
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d032:	f001 facd 	bl	800e5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d036:	e010      	b.n	800d05a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d03e:	d10c      	bne.n	800d05a <vTaskStartScheduler+0xbe>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	b672      	cpsid	i
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	b662      	cpsie	i
 800d054:	60fb      	str	r3, [r7, #12]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <vTaskStartScheduler+0xbc>
}
 800d05a:	bf00      	nop
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	0800f86c 	.word	0x0800f86c
 800d068:	0800d6b9 	.word	0x0800d6b9
 800d06c:	20000b84 	.word	0x20000b84
 800d070:	20000a60 	.word	0x20000a60
 800d074:	20000050 	.word	0x20000050
 800d078:	20000b80 	.word	0x20000b80
 800d07c:	20000b6c 	.word	0x20000b6c
 800d080:	20000b64 	.word	0x20000b64

0800d084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d088:	4b04      	ldr	r3, [pc, #16]	; (800d09c <vTaskSuspendAll+0x18>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3301      	adds	r3, #1
 800d08e:	4a03      	ldr	r2, [pc, #12]	; (800d09c <vTaskSuspendAll+0x18>)
 800d090:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d092:	bf00      	nop
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	20000b88 	.word	0x20000b88

0800d0a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0ae:	4b42      	ldr	r3, [pc, #264]	; (800d1b8 <xTaskResumeAll+0x118>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10c      	bne.n	800d0d0 <xTaskResumeAll+0x30>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	b672      	cpsid	i
 800d0bc:	f383 8811 	msr	BASEPRI, r3
 800d0c0:	f3bf 8f6f 	isb	sy
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	b662      	cpsie	i
 800d0ca:	603b      	str	r3, [r7, #0]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0d0:	f001 fafc 	bl	800e6cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0d4:	4b38      	ldr	r3, [pc, #224]	; (800d1b8 <xTaskResumeAll+0x118>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	4a37      	ldr	r2, [pc, #220]	; (800d1b8 <xTaskResumeAll+0x118>)
 800d0dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0de:	4b36      	ldr	r3, [pc, #216]	; (800d1b8 <xTaskResumeAll+0x118>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d161      	bne.n	800d1aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0e6:	4b35      	ldr	r3, [pc, #212]	; (800d1bc <xTaskResumeAll+0x11c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d05d      	beq.n	800d1aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0ee:	e02e      	b.n	800d14e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f0:	4b33      	ldr	r3, [pc, #204]	; (800d1c0 <xTaskResumeAll+0x120>)
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fe fde9 	bl	800bcd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3304      	adds	r3, #4
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fde4 	bl	800bcd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d110:	2201      	movs	r2, #1
 800d112:	409a      	lsls	r2, r3
 800d114:	4b2b      	ldr	r3, [pc, #172]	; (800d1c4 <xTaskResumeAll+0x124>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4313      	orrs	r3, r2
 800d11a:	4a2a      	ldr	r2, [pc, #168]	; (800d1c4 <xTaskResumeAll+0x124>)
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d122:	4613      	mov	r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4413      	add	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4a27      	ldr	r2, [pc, #156]	; (800d1c8 <xTaskResumeAll+0x128>)
 800d12c:	441a      	add	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3304      	adds	r3, #4
 800d132:	4619      	mov	r1, r3
 800d134:	4610      	mov	r0, r2
 800d136:	f7fe fd70 	bl	800bc1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13e:	4b23      	ldr	r3, [pc, #140]	; (800d1cc <xTaskResumeAll+0x12c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	429a      	cmp	r2, r3
 800d146:	d302      	bcc.n	800d14e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d148:	4b21      	ldr	r3, [pc, #132]	; (800d1d0 <xTaskResumeAll+0x130>)
 800d14a:	2201      	movs	r2, #1
 800d14c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d14e:	4b1c      	ldr	r3, [pc, #112]	; (800d1c0 <xTaskResumeAll+0x120>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1cc      	bne.n	800d0f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d001      	beq.n	800d160 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d15c:	f000 fb68 	bl	800d830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d160:	4b1c      	ldr	r3, [pc, #112]	; (800d1d4 <xTaskResumeAll+0x134>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d010      	beq.n	800d18e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d16c:	f000 f846 	bl	800d1fc <xTaskIncrementTick>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d176:	4b16      	ldr	r3, [pc, #88]	; (800d1d0 <xTaskResumeAll+0x130>)
 800d178:	2201      	movs	r2, #1
 800d17a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3b01      	subs	r3, #1
 800d180:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f1      	bne.n	800d16c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800d188:	4b12      	ldr	r3, [pc, #72]	; (800d1d4 <xTaskResumeAll+0x134>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d18e:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <xTaskResumeAll+0x130>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d009      	beq.n	800d1aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d196:	2301      	movs	r3, #1
 800d198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d19a:	4b0f      	ldr	r3, [pc, #60]	; (800d1d8 <xTaskResumeAll+0x138>)
 800d19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1aa:	f001 fac3 	bl	800e734 <vPortExitCritical>

	return xAlreadyYielded;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	20000b88 	.word	0x20000b88
 800d1bc:	20000b60 	.word	0x20000b60
 800d1c0:	20000b20 	.word	0x20000b20
 800d1c4:	20000b68 	.word	0x20000b68
 800d1c8:	20000a64 	.word	0x20000a64
 800d1cc:	20000a60 	.word	0x20000a60
 800d1d0:	20000b74 	.word	0x20000b74
 800d1d4:	20000b70 	.word	0x20000b70
 800d1d8:	e000ed04 	.word	0xe000ed04

0800d1dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1e2:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <xTaskGetTickCount+0x1c>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1e8:	687b      	ldr	r3, [r7, #4]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	20000b64 	.word	0x20000b64

0800d1fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b086      	sub	sp, #24
 800d200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d202:	2300      	movs	r3, #0
 800d204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d206:	4b4f      	ldr	r3, [pc, #316]	; (800d344 <xTaskIncrementTick+0x148>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f040 808a 	bne.w	800d324 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d210:	4b4d      	ldr	r3, [pc, #308]	; (800d348 <xTaskIncrementTick+0x14c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3301      	adds	r3, #1
 800d216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d218:	4a4b      	ldr	r2, [pc, #300]	; (800d348 <xTaskIncrementTick+0x14c>)
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d122      	bne.n	800d26a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d224:	4b49      	ldr	r3, [pc, #292]	; (800d34c <xTaskIncrementTick+0x150>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00c      	beq.n	800d248 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	b672      	cpsid	i
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	b662      	cpsie	i
 800d242:	603b      	str	r3, [r7, #0]
}
 800d244:	bf00      	nop
 800d246:	e7fe      	b.n	800d246 <xTaskIncrementTick+0x4a>
 800d248:	4b40      	ldr	r3, [pc, #256]	; (800d34c <xTaskIncrementTick+0x150>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	4b40      	ldr	r3, [pc, #256]	; (800d350 <xTaskIncrementTick+0x154>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a3e      	ldr	r2, [pc, #248]	; (800d34c <xTaskIncrementTick+0x150>)
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	4a3e      	ldr	r2, [pc, #248]	; (800d350 <xTaskIncrementTick+0x154>)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	4b3d      	ldr	r3, [pc, #244]	; (800d354 <xTaskIncrementTick+0x158>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3301      	adds	r3, #1
 800d262:	4a3c      	ldr	r2, [pc, #240]	; (800d354 <xTaskIncrementTick+0x158>)
 800d264:	6013      	str	r3, [r2, #0]
 800d266:	f000 fae3 	bl	800d830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d26a:	4b3b      	ldr	r3, [pc, #236]	; (800d358 <xTaskIncrementTick+0x15c>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	693a      	ldr	r2, [r7, #16]
 800d270:	429a      	cmp	r2, r3
 800d272:	d348      	bcc.n	800d306 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d274:	4b35      	ldr	r3, [pc, #212]	; (800d34c <xTaskIncrementTick+0x150>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d104      	bne.n	800d288 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d27e:	4b36      	ldr	r3, [pc, #216]	; (800d358 <xTaskIncrementTick+0x15c>)
 800d280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d284:	601a      	str	r2, [r3, #0]
					break;
 800d286:	e03e      	b.n	800d306 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d288:	4b30      	ldr	r3, [pc, #192]	; (800d34c <xTaskIncrementTick+0x150>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d298:	693a      	ldr	r2, [r7, #16]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d203      	bcs.n	800d2a8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2a0:	4a2d      	ldr	r2, [pc, #180]	; (800d358 <xTaskIncrementTick+0x15c>)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2a6:	e02e      	b.n	800d306 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fd11 	bl	800bcd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d004      	beq.n	800d2c4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	3318      	adds	r3, #24
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fd08 	bl	800bcd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	409a      	lsls	r2, r3
 800d2cc:	4b23      	ldr	r3, [pc, #140]	; (800d35c <xTaskIncrementTick+0x160>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	4a22      	ldr	r2, [pc, #136]	; (800d35c <xTaskIncrementTick+0x160>)
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4a1f      	ldr	r2, [pc, #124]	; (800d360 <xTaskIncrementTick+0x164>)
 800d2e4:	441a      	add	r2, r3
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	f7fe fc94 	bl	800bc1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f6:	4b1b      	ldr	r3, [pc, #108]	; (800d364 <xTaskIncrementTick+0x168>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d3b9      	bcc.n	800d274 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d300:	2301      	movs	r3, #1
 800d302:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d304:	e7b6      	b.n	800d274 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d306:	4b17      	ldr	r3, [pc, #92]	; (800d364 <xTaskIncrementTick+0x168>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d30c:	4914      	ldr	r1, [pc, #80]	; (800d360 <xTaskIncrementTick+0x164>)
 800d30e:	4613      	mov	r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	4413      	add	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	440b      	add	r3, r1
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d907      	bls.n	800d32e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800d31e:	2301      	movs	r3, #1
 800d320:	617b      	str	r3, [r7, #20]
 800d322:	e004      	b.n	800d32e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d324:	4b10      	ldr	r3, [pc, #64]	; (800d368 <xTaskIncrementTick+0x16c>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3301      	adds	r3, #1
 800d32a:	4a0f      	ldr	r2, [pc, #60]	; (800d368 <xTaskIncrementTick+0x16c>)
 800d32c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d32e:	4b0f      	ldr	r3, [pc, #60]	; (800d36c <xTaskIncrementTick+0x170>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d33a:	697b      	ldr	r3, [r7, #20]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20000b88 	.word	0x20000b88
 800d348:	20000b64 	.word	0x20000b64
 800d34c:	20000b18 	.word	0x20000b18
 800d350:	20000b1c 	.word	0x20000b1c
 800d354:	20000b78 	.word	0x20000b78
 800d358:	20000b80 	.word	0x20000b80
 800d35c:	20000b68 	.word	0x20000b68
 800d360:	20000a64 	.word	0x20000a64
 800d364:	20000a60 	.word	0x20000a60
 800d368:	20000b70 	.word	0x20000b70
 800d36c:	20000b74 	.word	0x20000b74

0800d370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d370:	b480      	push	{r7}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d376:	4b2a      	ldr	r3, [pc, #168]	; (800d420 <vTaskSwitchContext+0xb0>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d37e:	4b29      	ldr	r3, [pc, #164]	; (800d424 <vTaskSwitchContext+0xb4>)
 800d380:	2201      	movs	r2, #1
 800d382:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d384:	e046      	b.n	800d414 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d386:	4b27      	ldr	r3, [pc, #156]	; (800d424 <vTaskSwitchContext+0xb4>)
 800d388:	2200      	movs	r2, #0
 800d38a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d38c:	4b26      	ldr	r3, [pc, #152]	; (800d428 <vTaskSwitchContext+0xb8>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	fab3 f383 	clz	r3, r3
 800d398:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d39a:	7afb      	ldrb	r3, [r7, #11]
 800d39c:	f1c3 031f 	rsb	r3, r3, #31
 800d3a0:	617b      	str	r3, [r7, #20]
 800d3a2:	4922      	ldr	r1, [pc, #136]	; (800d42c <vTaskSwitchContext+0xbc>)
 800d3a4:	697a      	ldr	r2, [r7, #20]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	440b      	add	r3, r1
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10c      	bne.n	800d3d0 <vTaskSwitchContext+0x60>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	b672      	cpsid	i
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	b662      	cpsie	i
 800d3ca:	607b      	str	r3, [r7, #4]
}
 800d3cc:	bf00      	nop
 800d3ce:	e7fe      	b.n	800d3ce <vTaskSwitchContext+0x5e>
 800d3d0:	697a      	ldr	r2, [r7, #20]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	4413      	add	r3, r2
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4a14      	ldr	r2, [pc, #80]	; (800d42c <vTaskSwitchContext+0xbc>)
 800d3dc:	4413      	add	r3, r2
 800d3de:	613b      	str	r3, [r7, #16]
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	605a      	str	r2, [r3, #4]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d104      	bne.n	800d400 <vTaskSwitchContext+0x90>
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	685a      	ldr	r2, [r3, #4]
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	605a      	str	r2, [r3, #4]
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	4a0a      	ldr	r2, [pc, #40]	; (800d430 <vTaskSwitchContext+0xc0>)
 800d408:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d40a:	4b09      	ldr	r3, [pc, #36]	; (800d430 <vTaskSwitchContext+0xc0>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	334c      	adds	r3, #76	; 0x4c
 800d410:	4a08      	ldr	r2, [pc, #32]	; (800d434 <vTaskSwitchContext+0xc4>)
 800d412:	6013      	str	r3, [r2, #0]
}
 800d414:	bf00      	nop
 800d416:	371c      	adds	r7, #28
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr
 800d420:	20000b88 	.word	0x20000b88
 800d424:	20000b74 	.word	0x20000b74
 800d428:	20000b68 	.word	0x20000b68
 800d42c:	20000a64 	.word	0x20000a64
 800d430:	20000a60 	.word	0x20000a60
 800d434:	20000050 	.word	0x20000050

0800d438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10c      	bne.n	800d462 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44c:	b672      	cpsid	i
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	b662      	cpsie	i
 800d45c:	60fb      	str	r3, [r7, #12]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d462:	4b07      	ldr	r3, [pc, #28]	; (800d480 <vTaskPlaceOnEventList+0x48>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3318      	adds	r3, #24
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7fe fbf9 	bl	800bc62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d470:	2101      	movs	r1, #1
 800d472:	6838      	ldr	r0, [r7, #0]
 800d474:	f000 fbd6 	bl	800dc24 <prvAddCurrentTaskToDelayedList>
}
 800d478:	bf00      	nop
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	20000a60 	.word	0x20000a60

0800d484 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10c      	bne.n	800d4b0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49a:	b672      	cpsid	i
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	b662      	cpsie	i
 800d4aa:	617b      	str	r3, [r7, #20]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <vTaskPlaceOnEventListRestricted+0x58>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3318      	adds	r3, #24
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7fe fbae 	bl	800bc1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d002      	beq.n	800d4ca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800d4c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4ca:	6879      	ldr	r1, [r7, #4]
 800d4cc:	68b8      	ldr	r0, [r7, #8]
 800d4ce:	f000 fba9 	bl	800dc24 <prvAddCurrentTaskToDelayedList>
	}
 800d4d2:	bf00      	nop
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	20000a60 	.word	0x20000a60

0800d4e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10c      	bne.n	800d510 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fa:	b672      	cpsid	i
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	b662      	cpsie	i
 800d50a:	60fb      	str	r3, [r7, #12]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	3318      	adds	r3, #24
 800d514:	4618      	mov	r0, r3
 800d516:	f7fe fbdd 	bl	800bcd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d51a:	4b1d      	ldr	r3, [pc, #116]	; (800d590 <xTaskRemoveFromEventList+0xb0>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d11c      	bne.n	800d55c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	3304      	adds	r3, #4
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe fbd4 	bl	800bcd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d530:	2201      	movs	r2, #1
 800d532:	409a      	lsls	r2, r3
 800d534:	4b17      	ldr	r3, [pc, #92]	; (800d594 <xTaskRemoveFromEventList+0xb4>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4313      	orrs	r3, r2
 800d53a:	4a16      	ldr	r2, [pc, #88]	; (800d594 <xTaskRemoveFromEventList+0xb4>)
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d542:	4613      	mov	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4413      	add	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4a13      	ldr	r2, [pc, #76]	; (800d598 <xTaskRemoveFromEventList+0xb8>)
 800d54c:	441a      	add	r2, r3
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	3304      	adds	r3, #4
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7fe fb60 	bl	800bc1a <vListInsertEnd>
 800d55a:	e005      	b.n	800d568 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	3318      	adds	r3, #24
 800d560:	4619      	mov	r1, r3
 800d562:	480e      	ldr	r0, [pc, #56]	; (800d59c <xTaskRemoveFromEventList+0xbc>)
 800d564:	f7fe fb59 	bl	800bc1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56c:	4b0c      	ldr	r3, [pc, #48]	; (800d5a0 <xTaskRemoveFromEventList+0xc0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	429a      	cmp	r2, r3
 800d574:	d905      	bls.n	800d582 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d576:	2301      	movs	r3, #1
 800d578:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d57a:	4b0a      	ldr	r3, [pc, #40]	; (800d5a4 <xTaskRemoveFromEventList+0xc4>)
 800d57c:	2201      	movs	r2, #1
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	e001      	b.n	800d586 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d582:	2300      	movs	r3, #0
 800d584:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d586:	697b      	ldr	r3, [r7, #20]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3718      	adds	r7, #24
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	20000b88 	.word	0x20000b88
 800d594:	20000b68 	.word	0x20000b68
 800d598:	20000a64 	.word	0x20000a64
 800d59c:	20000b20 	.word	0x20000b20
 800d5a0:	20000a60 	.word	0x20000a60
 800d5a4:	20000b74 	.word	0x20000b74

0800d5a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5b0:	4b06      	ldr	r3, [pc, #24]	; (800d5cc <vTaskInternalSetTimeOutState+0x24>)
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5b8:	4b05      	ldr	r3, [pc, #20]	; (800d5d0 <vTaskInternalSetTimeOutState+0x28>)
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	605a      	str	r2, [r3, #4]
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	20000b78 	.word	0x20000b78
 800d5d0:	20000b64 	.word	0x20000b64

0800d5d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10c      	bne.n	800d5fe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e8:	b672      	cpsid	i
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	b662      	cpsie	i
 800d5f8:	613b      	str	r3, [r7, #16]
}
 800d5fa:	bf00      	nop
 800d5fc:	e7fe      	b.n	800d5fc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10c      	bne.n	800d61e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	b672      	cpsid	i
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	b662      	cpsie	i
 800d618:	60fb      	str	r3, [r7, #12]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d61e:	f001 f855 	bl	800e6cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d622:	4b1d      	ldr	r3, [pc, #116]	; (800d698 <xTaskCheckForTimeOut+0xc4>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	1ad3      	subs	r3, r2, r3
 800d630:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d63a:	d102      	bne.n	800d642 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d63c:	2300      	movs	r3, #0
 800d63e:	61fb      	str	r3, [r7, #28]
 800d640:	e023      	b.n	800d68a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	4b15      	ldr	r3, [pc, #84]	; (800d69c <xTaskCheckForTimeOut+0xc8>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d007      	beq.n	800d65e <xTaskCheckForTimeOut+0x8a>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	429a      	cmp	r2, r3
 800d656:	d302      	bcc.n	800d65e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d658:	2301      	movs	r3, #1
 800d65a:	61fb      	str	r3, [r7, #28]
 800d65c:	e015      	b.n	800d68a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	697a      	ldr	r2, [r7, #20]
 800d664:	429a      	cmp	r2, r3
 800d666:	d20b      	bcs.n	800d680 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	1ad2      	subs	r2, r2, r3
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7ff ff97 	bl	800d5a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d67a:	2300      	movs	r3, #0
 800d67c:	61fb      	str	r3, [r7, #28]
 800d67e:	e004      	b.n	800d68a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d686:	2301      	movs	r3, #1
 800d688:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d68a:	f001 f853 	bl	800e734 <vPortExitCritical>

	return xReturn;
 800d68e:	69fb      	ldr	r3, [r7, #28]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3720      	adds	r7, #32
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	20000b64 	.word	0x20000b64
 800d69c:	20000b78 	.word	0x20000b78

0800d6a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6a4:	4b03      	ldr	r3, [pc, #12]	; (800d6b4 <vTaskMissedYield+0x14>)
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]
}
 800d6aa:	bf00      	nop
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr
 800d6b4:	20000b74 	.word	0x20000b74

0800d6b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d6c0:	f000 f852 	bl	800d768 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6c4:	4b06      	ldr	r3, [pc, #24]	; (800d6e0 <prvIdleTask+0x28>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d9f9      	bls.n	800d6c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d6cc:	4b05      	ldr	r3, [pc, #20]	; (800d6e4 <prvIdleTask+0x2c>)
 800d6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6dc:	e7f0      	b.n	800d6c0 <prvIdleTask+0x8>
 800d6de:	bf00      	nop
 800d6e0:	20000a64 	.word	0x20000a64
 800d6e4:	e000ed04 	.word	0xe000ed04

0800d6e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	607b      	str	r3, [r7, #4]
 800d6f2:	e00c      	b.n	800d70e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4413      	add	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	4a12      	ldr	r2, [pc, #72]	; (800d748 <prvInitialiseTaskLists+0x60>)
 800d700:	4413      	add	r3, r2
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fa5c 	bl	800bbc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	3301      	adds	r3, #1
 800d70c:	607b      	str	r3, [r7, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b06      	cmp	r3, #6
 800d712:	d9ef      	bls.n	800d6f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d714:	480d      	ldr	r0, [pc, #52]	; (800d74c <prvInitialiseTaskLists+0x64>)
 800d716:	f7fe fa53 	bl	800bbc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d71a:	480d      	ldr	r0, [pc, #52]	; (800d750 <prvInitialiseTaskLists+0x68>)
 800d71c:	f7fe fa50 	bl	800bbc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d720:	480c      	ldr	r0, [pc, #48]	; (800d754 <prvInitialiseTaskLists+0x6c>)
 800d722:	f7fe fa4d 	bl	800bbc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d726:	480c      	ldr	r0, [pc, #48]	; (800d758 <prvInitialiseTaskLists+0x70>)
 800d728:	f7fe fa4a 	bl	800bbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d72c:	480b      	ldr	r0, [pc, #44]	; (800d75c <prvInitialiseTaskLists+0x74>)
 800d72e:	f7fe fa47 	bl	800bbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d732:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <prvInitialiseTaskLists+0x78>)
 800d734:	4a05      	ldr	r2, [pc, #20]	; (800d74c <prvInitialiseTaskLists+0x64>)
 800d736:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d738:	4b0a      	ldr	r3, [pc, #40]	; (800d764 <prvInitialiseTaskLists+0x7c>)
 800d73a:	4a05      	ldr	r2, [pc, #20]	; (800d750 <prvInitialiseTaskLists+0x68>)
 800d73c:	601a      	str	r2, [r3, #0]
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20000a64 	.word	0x20000a64
 800d74c:	20000af0 	.word	0x20000af0
 800d750:	20000b04 	.word	0x20000b04
 800d754:	20000b20 	.word	0x20000b20
 800d758:	20000b34 	.word	0x20000b34
 800d75c:	20000b4c 	.word	0x20000b4c
 800d760:	20000b18 	.word	0x20000b18
 800d764:	20000b1c 	.word	0x20000b1c

0800d768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d76e:	e019      	b.n	800d7a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d770:	f000 ffac 	bl	800e6cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d774:	4b10      	ldr	r3, [pc, #64]	; (800d7b8 <prvCheckTasksWaitingTermination+0x50>)
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3304      	adds	r3, #4
 800d780:	4618      	mov	r0, r3
 800d782:	f7fe faa7 	bl	800bcd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d786:	4b0d      	ldr	r3, [pc, #52]	; (800d7bc <prvCheckTasksWaitingTermination+0x54>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	4a0b      	ldr	r2, [pc, #44]	; (800d7bc <prvCheckTasksWaitingTermination+0x54>)
 800d78e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d790:	4b0b      	ldr	r3, [pc, #44]	; (800d7c0 <prvCheckTasksWaitingTermination+0x58>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	3b01      	subs	r3, #1
 800d796:	4a0a      	ldr	r2, [pc, #40]	; (800d7c0 <prvCheckTasksWaitingTermination+0x58>)
 800d798:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d79a:	f000 ffcb 	bl	800e734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f810 	bl	800d7c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7a4:	4b06      	ldr	r3, [pc, #24]	; (800d7c0 <prvCheckTasksWaitingTermination+0x58>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d1e1      	bne.n	800d770 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7ac:	bf00      	nop
 800d7ae:	bf00      	nop
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20000b34 	.word	0x20000b34
 800d7bc:	20000b60 	.word	0x20000b60
 800d7c0:	20000b48 	.word	0x20000b48

0800d7c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	334c      	adds	r3, #76	; 0x4c
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f001 fb35 	bl	800ee40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d108      	bne.n	800d7f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f001 f967 	bl	800eab8 <vPortFree>
				vPortFree( pxTCB );
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f001 f964 	bl	800eab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7f0:	e01a      	b.n	800d828 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d103      	bne.n	800d804 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f001 f95b 	bl	800eab8 <vPortFree>
	}
 800d802:	e011      	b.n	800d828 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d00c      	beq.n	800d828 <prvDeleteTCB+0x64>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d812:	b672      	cpsid	i
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	b662      	cpsie	i
 800d822:	60fb      	str	r3, [r7, #12]
}
 800d824:	bf00      	nop
 800d826:	e7fe      	b.n	800d826 <prvDeleteTCB+0x62>
	}
 800d828:	bf00      	nop
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d836:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <prvResetNextTaskUnblockTime+0x38>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d104      	bne.n	800d84a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d840:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <prvResetNextTaskUnblockTime+0x3c>)
 800d842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d846:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d848:	e008      	b.n	800d85c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d84a:	4b07      	ldr	r3, [pc, #28]	; (800d868 <prvResetNextTaskUnblockTime+0x38>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	4a04      	ldr	r2, [pc, #16]	; (800d86c <prvResetNextTaskUnblockTime+0x3c>)
 800d85a:	6013      	str	r3, [r2, #0]
}
 800d85c:	bf00      	nop
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	20000b18 	.word	0x20000b18
 800d86c:	20000b80 	.word	0x20000b80

0800d870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d876:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <xTaskGetSchedulerState+0x34>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d102      	bne.n	800d884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d87e:	2301      	movs	r3, #1
 800d880:	607b      	str	r3, [r7, #4]
 800d882:	e008      	b.n	800d896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d884:	4b08      	ldr	r3, [pc, #32]	; (800d8a8 <xTaskGetSchedulerState+0x38>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d102      	bne.n	800d892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d88c:	2302      	movs	r3, #2
 800d88e:	607b      	str	r3, [r7, #4]
 800d890:	e001      	b.n	800d896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d892:	2300      	movs	r3, #0
 800d894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d896:	687b      	ldr	r3, [r7, #4]
	}
 800d898:	4618      	mov	r0, r3
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	20000b6c 	.word	0x20000b6c
 800d8a8:	20000b88 	.word	0x20000b88

0800d8ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d069      	beq.n	800d996 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c6:	4b36      	ldr	r3, [pc, #216]	; (800d9a0 <xTaskPriorityInherit+0xf4>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d259      	bcs.n	800d984 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	db06      	blt.n	800d8e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d8:	4b31      	ldr	r3, [pc, #196]	; (800d9a0 <xTaskPriorityInherit+0xf4>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8de:	f1c3 0207 	rsb	r2, r3, #7
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6959      	ldr	r1, [r3, #20]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4a2b      	ldr	r2, [pc, #172]	; (800d9a4 <xTaskPriorityInherit+0xf8>)
 800d8f8:	4413      	add	r3, r2
 800d8fa:	4299      	cmp	r1, r3
 800d8fc:	d13a      	bne.n	800d974 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	3304      	adds	r3, #4
 800d902:	4618      	mov	r0, r3
 800d904:	f7fe f9e6 	bl	800bcd4 <uxListRemove>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d115      	bne.n	800d93a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d912:	4924      	ldr	r1, [pc, #144]	; (800d9a4 <xTaskPriorityInherit+0xf8>)
 800d914:	4613      	mov	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	440b      	add	r3, r1
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <xTaskPriorityInherit+0x8e>
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d928:	2201      	movs	r2, #1
 800d92a:	fa02 f303 	lsl.w	r3, r2, r3
 800d92e:	43da      	mvns	r2, r3
 800d930:	4b1d      	ldr	r3, [pc, #116]	; (800d9a8 <xTaskPriorityInherit+0xfc>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4013      	ands	r3, r2
 800d936:	4a1c      	ldr	r2, [pc, #112]	; (800d9a8 <xTaskPriorityInherit+0xfc>)
 800d938:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d93a:	4b19      	ldr	r3, [pc, #100]	; (800d9a0 <xTaskPriorityInherit+0xf4>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d948:	2201      	movs	r2, #1
 800d94a:	409a      	lsls	r2, r3
 800d94c:	4b16      	ldr	r3, [pc, #88]	; (800d9a8 <xTaskPriorityInherit+0xfc>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4313      	orrs	r3, r2
 800d952:	4a15      	ldr	r2, [pc, #84]	; (800d9a8 <xTaskPriorityInherit+0xfc>)
 800d954:	6013      	str	r3, [r2, #0]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95a:	4613      	mov	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	4a10      	ldr	r2, [pc, #64]	; (800d9a4 <xTaskPriorityInherit+0xf8>)
 800d964:	441a      	add	r2, r3
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	3304      	adds	r3, #4
 800d96a:	4619      	mov	r1, r3
 800d96c:	4610      	mov	r0, r2
 800d96e:	f7fe f954 	bl	800bc1a <vListInsertEnd>
 800d972:	e004      	b.n	800d97e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d974:	4b0a      	ldr	r3, [pc, #40]	; (800d9a0 <xTaskPriorityInherit+0xf4>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d97e:	2301      	movs	r3, #1
 800d980:	60fb      	str	r3, [r7, #12]
 800d982:	e008      	b.n	800d996 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d988:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <xTaskPriorityInherit+0xf4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d98e:	429a      	cmp	r2, r3
 800d990:	d201      	bcs.n	800d996 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d992:	2301      	movs	r3, #1
 800d994:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d996:	68fb      	ldr	r3, [r7, #12]
	}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20000a60 	.word	0x20000a60
 800d9a4:	20000a64 	.word	0x20000a64
 800d9a8:	20000b68 	.word	0x20000b68

0800d9ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b086      	sub	sp, #24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d072      	beq.n	800daa8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9c2:	4b3c      	ldr	r3, [pc, #240]	; (800dab4 <xTaskPriorityDisinherit+0x108>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d00c      	beq.n	800d9e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	b672      	cpsid	i
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	b662      	cpsie	i
 800d9e0:	60fb      	str	r3, [r7, #12]
}
 800d9e2:	bf00      	nop
 800d9e4:	e7fe      	b.n	800d9e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10c      	bne.n	800da08 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	b672      	cpsid	i
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	b662      	cpsie	i
 800da02:	60bb      	str	r3, [r7, #8]
}
 800da04:	bf00      	nop
 800da06:	e7fe      	b.n	800da06 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da0c:	1e5a      	subs	r2, r3, #1
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d044      	beq.n	800daa8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da22:	2b00      	cmp	r3, #0
 800da24:	d140      	bne.n	800daa8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	3304      	adds	r3, #4
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fe f952 	bl	800bcd4 <uxListRemove>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d115      	bne.n	800da62 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da3a:	491f      	ldr	r1, [pc, #124]	; (800dab8 <xTaskPriorityDisinherit+0x10c>)
 800da3c:	4613      	mov	r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	4413      	add	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	440b      	add	r3, r1
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10a      	bne.n	800da62 <xTaskPriorityDisinherit+0xb6>
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da50:	2201      	movs	r2, #1
 800da52:	fa02 f303 	lsl.w	r3, r2, r3
 800da56:	43da      	mvns	r2, r3
 800da58:	4b18      	ldr	r3, [pc, #96]	; (800dabc <xTaskPriorityDisinherit+0x110>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4013      	ands	r3, r2
 800da5e:	4a17      	ldr	r2, [pc, #92]	; (800dabc <xTaskPriorityDisinherit+0x110>)
 800da60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6e:	f1c3 0207 	rsb	r2, r3, #7
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7a:	2201      	movs	r2, #1
 800da7c:	409a      	lsls	r2, r3
 800da7e:	4b0f      	ldr	r3, [pc, #60]	; (800dabc <xTaskPriorityDisinherit+0x110>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4313      	orrs	r3, r2
 800da84:	4a0d      	ldr	r2, [pc, #52]	; (800dabc <xTaskPriorityDisinherit+0x110>)
 800da86:	6013      	str	r3, [r2, #0]
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8c:	4613      	mov	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4413      	add	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4a08      	ldr	r2, [pc, #32]	; (800dab8 <xTaskPriorityDisinherit+0x10c>)
 800da96:	441a      	add	r2, r3
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	3304      	adds	r3, #4
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7fe f8bb 	bl	800bc1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800daa4:	2301      	movs	r3, #1
 800daa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800daa8:	697b      	ldr	r3, [r7, #20]
	}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	20000a60 	.word	0x20000a60
 800dab8:	20000a64 	.word	0x20000a64
 800dabc:	20000b68 	.word	0x20000b68

0800dac0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dace:	2301      	movs	r3, #1
 800dad0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 8087 	beq.w	800dbe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10c      	bne.n	800dafc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae6:	b672      	cpsid	i
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	b662      	cpsie	i
 800daf6:	60fb      	str	r3, [r7, #12]
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	429a      	cmp	r2, r3
 800db04:	d902      	bls.n	800db0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	61fb      	str	r3, [r7, #28]
 800db0a:	e002      	b.n	800db12 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db16:	69fa      	ldr	r2, [r7, #28]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d065      	beq.n	800dbe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	429a      	cmp	r2, r3
 800db24:	d160      	bne.n	800dbe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800db26:	4b32      	ldr	r3, [pc, #200]	; (800dbf0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	69ba      	ldr	r2, [r7, #24]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d10c      	bne.n	800db4a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800db30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db34:	b672      	cpsid	i
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	b662      	cpsie	i
 800db44:	60bb      	str	r3, [r7, #8]
}
 800db46:	bf00      	nop
 800db48:	e7fe      	b.n	800db48 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db04      	blt.n	800db68 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	f1c3 0207 	rsb	r2, r3, #7
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	6959      	ldr	r1, [r3, #20]
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	4613      	mov	r3, r2
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	4413      	add	r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4a1f      	ldr	r2, [pc, #124]	; (800dbf4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800db78:	4413      	add	r3, r2
 800db7a:	4299      	cmp	r1, r3
 800db7c:	d134      	bne.n	800dbe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	3304      	adds	r3, #4
 800db82:	4618      	mov	r0, r3
 800db84:	f7fe f8a6 	bl	800bcd4 <uxListRemove>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d115      	bne.n	800dbba <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db92:	4918      	ldr	r1, [pc, #96]	; (800dbf4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800db94:	4613      	mov	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4413      	add	r3, r2
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	440b      	add	r3, r1
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10a      	bne.n	800dbba <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba8:	2201      	movs	r2, #1
 800dbaa:	fa02 f303 	lsl.w	r3, r2, r3
 800dbae:	43da      	mvns	r2, r3
 800dbb0:	4b11      	ldr	r3, [pc, #68]	; (800dbf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	4a10      	ldr	r2, [pc, #64]	; (800dbf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dbb8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	409a      	lsls	r2, r3
 800dbc2:	4b0d      	ldr	r3, [pc, #52]	; (800dbf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	4a0b      	ldr	r2, [pc, #44]	; (800dbf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dbca:	6013      	str	r3, [r2, #0]
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4a06      	ldr	r2, [pc, #24]	; (800dbf4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dbda:	441a      	add	r2, r3
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f7fe f819 	bl	800bc1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbe8:	bf00      	nop
 800dbea:	3720      	adds	r7, #32
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20000a60 	.word	0x20000a60
 800dbf4:	20000a64 	.word	0x20000a64
 800dbf8:	20000b68 	.word	0x20000b68

0800dbfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dbfc:	b480      	push	{r7}
 800dbfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dc00:	4b07      	ldr	r3, [pc, #28]	; (800dc20 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dc08:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc0e:	3201      	adds	r2, #1
 800dc10:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800dc12:	4b03      	ldr	r3, [pc, #12]	; (800dc20 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc14:	681b      	ldr	r3, [r3, #0]
	}
 800dc16:	4618      	mov	r0, r3
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	20000a60 	.word	0x20000a60

0800dc24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc2e:	4b29      	ldr	r3, [pc, #164]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc34:	4b28      	ldr	r3, [pc, #160]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe f84a 	bl	800bcd4 <uxListRemove>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10b      	bne.n	800dc5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dc46:	4b24      	ldr	r3, [pc, #144]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc52:	43da      	mvns	r2, r3
 800dc54:	4b21      	ldr	r3, [pc, #132]	; (800dcdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4013      	ands	r3, r2
 800dc5a:	4a20      	ldr	r2, [pc, #128]	; (800dcdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc64:	d10a      	bne.n	800dc7c <prvAddCurrentTaskToDelayedList+0x58>
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d007      	beq.n	800dc7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc6c:	4b1a      	ldr	r3, [pc, #104]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3304      	adds	r3, #4
 800dc72:	4619      	mov	r1, r3
 800dc74:	481a      	ldr	r0, [pc, #104]	; (800dce0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc76:	f7fd ffd0 	bl	800bc1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc7a:	e026      	b.n	800dcca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4413      	add	r3, r2
 800dc82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc84:	4b14      	ldr	r3, [pc, #80]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d209      	bcs.n	800dca8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc94:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	4b0f      	ldr	r3, [pc, #60]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f7fd ffde 	bl	800bc62 <vListInsert>
}
 800dca6:	e010      	b.n	800dcca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dca8:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	f7fd ffd4 	bl	800bc62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dcba:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d202      	bcs.n	800dcca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dcc4:	4a09      	ldr	r2, [pc, #36]	; (800dcec <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	6013      	str	r3, [r2, #0]
}
 800dcca:	bf00      	nop
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20000b64 	.word	0x20000b64
 800dcd8:	20000a60 	.word	0x20000a60
 800dcdc:	20000b68 	.word	0x20000b68
 800dce0:	20000b4c 	.word	0x20000b4c
 800dce4:	20000b1c 	.word	0x20000b1c
 800dce8:	20000b18 	.word	0x20000b18
 800dcec:	20000b80 	.word	0x20000b80

0800dcf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08a      	sub	sp, #40	; 0x28
 800dcf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dcfa:	f000 fb97 	bl	800e42c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dcfe:	4b1d      	ldr	r3, [pc, #116]	; (800dd74 <xTimerCreateTimerTask+0x84>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d021      	beq.n	800dd4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd0e:	1d3a      	adds	r2, r7, #4
 800dd10:	f107 0108 	add.w	r1, r7, #8
 800dd14:	f107 030c 	add.w	r3, r7, #12
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7f2 fc67 	bl	80005ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	9202      	str	r2, [sp, #8]
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	2302      	movs	r3, #2
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	460a      	mov	r2, r1
 800dd30:	4911      	ldr	r1, [pc, #68]	; (800dd78 <xTimerCreateTimerTask+0x88>)
 800dd32:	4812      	ldr	r0, [pc, #72]	; (800dd7c <xTimerCreateTimerTask+0x8c>)
 800dd34:	f7fe feb8 	bl	800caa8 <xTaskCreateStatic>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4a11      	ldr	r2, [pc, #68]	; (800dd80 <xTimerCreateTimerTask+0x90>)
 800dd3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd3e:	4b10      	ldr	r3, [pc, #64]	; (800dd80 <xTimerCreateTimerTask+0x90>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd46:	2301      	movs	r3, #1
 800dd48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10c      	bne.n	800dd6a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	b672      	cpsid	i
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	b662      	cpsie	i
 800dd64:	613b      	str	r3, [r7, #16]
}
 800dd66:	bf00      	nop
 800dd68:	e7fe      	b.n	800dd68 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800dd6a:	697b      	ldr	r3, [r7, #20]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3718      	adds	r7, #24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	20000bbc 	.word	0x20000bbc
 800dd78:	0800f874 	.word	0x0800f874
 800dd7c:	0800e001 	.word	0x0800e001
 800dd80:	20000bc0 	.word	0x20000bc0

0800dd84 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b088      	sub	sp, #32
 800dd88:	af02      	add	r7, sp, #8
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
 800dd90:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dd92:	2028      	movs	r0, #40	; 0x28
 800dd94:	f000 fdc6 	bl	800e924 <pvPortMalloc>
 800dd98:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00d      	beq.n	800ddbc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	68b9      	ldr	r1, [r7, #8]
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f000 f847 	bl	800de4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ddbc:	697b      	ldr	r3, [r7, #20]
	}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3718      	adds	r7, #24
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b08a      	sub	sp, #40	; 0x28
 800ddca:	af02      	add	r7, sp, #8
 800ddcc:	60f8      	str	r0, [r7, #12]
 800ddce:	60b9      	str	r1, [r7, #8]
 800ddd0:	607a      	str	r2, [r7, #4]
 800ddd2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ddd4:	2328      	movs	r3, #40	; 0x28
 800ddd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	2b28      	cmp	r3, #40	; 0x28
 800dddc:	d00c      	beq.n	800ddf8 <xTimerCreateStatic+0x32>
	__asm volatile
 800ddde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde2:	b672      	cpsid	i
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	b662      	cpsie	i
 800ddf2:	61bb      	str	r3, [r7, #24]
}
 800ddf4:	bf00      	nop
 800ddf6:	e7fe      	b.n	800ddf6 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ddf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10c      	bne.n	800de1a <xTimerCreateStatic+0x54>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de04:	b672      	cpsid	i
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	b662      	cpsie	i
 800de14:	617b      	str	r3, [r7, #20]
}
 800de16:	bf00      	nop
 800de18:	e7fe      	b.n	800de18 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00d      	beq.n	800de40 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	2202      	movs	r2, #2
 800de28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	9301      	str	r3, [sp, #4]
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	68b9      	ldr	r1, [r7, #8]
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f000 f805 	bl	800de4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800de40:	69fb      	ldr	r3, [r7, #28]
	}
 800de42:	4618      	mov	r0, r3
 800de44:	3720      	adds	r7, #32
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b086      	sub	sp, #24
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
 800de56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10c      	bne.n	800de78 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	b672      	cpsid	i
 800de64:	f383 8811 	msr	BASEPRI, r3
 800de68:	f3bf 8f6f 	isb	sy
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	b662      	cpsie	i
 800de72:	617b      	str	r3, [r7, #20]
}
 800de74:	bf00      	nop
 800de76:	e7fe      	b.n	800de76 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d01e      	beq.n	800debc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800de7e:	f000 fad5 	bl	800e42c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800de82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	6a3a      	ldr	r2, [r7, #32]
 800de98:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	3304      	adds	r3, #4
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fd feae 	bl	800bc00 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d008      	beq.n	800debc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800deb0:	f043 0304 	orr.w	r3, r3, #4
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800debc:	bf00      	nop
 800debe:	3718      	adds	r7, #24
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08a      	sub	sp, #40	; 0x28
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10c      	bne.n	800def6 <xTimerGenericCommand+0x32>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	b672      	cpsid	i
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	b662      	cpsie	i
 800def0:	623b      	str	r3, [r7, #32]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800def6:	4b1a      	ldr	r3, [pc, #104]	; (800df60 <xTimerGenericCommand+0x9c>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d02a      	beq.n	800df54 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b05      	cmp	r3, #5
 800df0e:	dc18      	bgt.n	800df42 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df10:	f7ff fcae 	bl	800d870 <xTaskGetSchedulerState>
 800df14:	4603      	mov	r3, r0
 800df16:	2b02      	cmp	r3, #2
 800df18:	d109      	bne.n	800df2e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df1a:	4b11      	ldr	r3, [pc, #68]	; (800df60 <xTimerGenericCommand+0x9c>)
 800df1c:	6818      	ldr	r0, [r3, #0]
 800df1e:	f107 0114 	add.w	r1, r7, #20
 800df22:	2300      	movs	r3, #0
 800df24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df26:	f7fe f899 	bl	800c05c <xQueueGenericSend>
 800df2a:	6278      	str	r0, [r7, #36]	; 0x24
 800df2c:	e012      	b.n	800df54 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df2e:	4b0c      	ldr	r3, [pc, #48]	; (800df60 <xTimerGenericCommand+0x9c>)
 800df30:	6818      	ldr	r0, [r3, #0]
 800df32:	f107 0114 	add.w	r1, r7, #20
 800df36:	2300      	movs	r3, #0
 800df38:	2200      	movs	r2, #0
 800df3a:	f7fe f88f 	bl	800c05c <xQueueGenericSend>
 800df3e:	6278      	str	r0, [r7, #36]	; 0x24
 800df40:	e008      	b.n	800df54 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df42:	4b07      	ldr	r3, [pc, #28]	; (800df60 <xTimerGenericCommand+0x9c>)
 800df44:	6818      	ldr	r0, [r3, #0]
 800df46:	f107 0114 	add.w	r1, r7, #20
 800df4a:	2300      	movs	r3, #0
 800df4c:	683a      	ldr	r2, [r7, #0]
 800df4e:	f7fe f98b 	bl	800c268 <xQueueGenericSendFromISR>
 800df52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df56:	4618      	mov	r0, r3
 800df58:	3728      	adds	r7, #40	; 0x28
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	20000bbc 	.word	0x20000bbc

0800df64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b088      	sub	sp, #32
 800df68:	af02      	add	r7, sp, #8
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df6e:	4b23      	ldr	r3, [pc, #140]	; (800dffc <prvProcessExpiredTimer+0x98>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	3304      	adds	r3, #4
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fd fea9 	bl	800bcd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d024      	beq.n	800dfda <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	699a      	ldr	r2, [r3, #24]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	18d1      	adds	r1, r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	6978      	ldr	r0, [r7, #20]
 800df9e:	f000 f8d3 	bl	800e148 <prvInsertTimerInActiveList>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d021      	beq.n	800dfec <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	2300      	movs	r3, #0
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	6978      	ldr	r0, [r7, #20]
 800dfb4:	f7ff ff86 	bl	800dec4 <xTimerGenericCommand>
 800dfb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d115      	bne.n	800dfec <prvProcessExpiredTimer+0x88>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	b672      	cpsid	i
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	b662      	cpsie	i
 800dfd4:	60fb      	str	r3, [r7, #12]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dfe0:	f023 0301 	bic.w	r3, r3, #1
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	6a1b      	ldr	r3, [r3, #32]
 800dff0:	6978      	ldr	r0, [r7, #20]
 800dff2:	4798      	blx	r3
}
 800dff4:	bf00      	nop
 800dff6:	3718      	adds	r7, #24
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	20000bb4 	.word	0x20000bb4

0800e000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e008:	f107 0308 	add.w	r3, r7, #8
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 f857 	bl	800e0c0 <prvGetNextExpireTime>
 800e012:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	4619      	mov	r1, r3
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f000 f803 	bl	800e024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e01e:	f000 f8d5 	bl	800e1cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e022:	e7f1      	b.n	800e008 <prvTimerTask+0x8>

0800e024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e02e:	f7ff f829 	bl	800d084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e032:	f107 0308 	add.w	r3, r7, #8
 800e036:	4618      	mov	r0, r3
 800e038:	f000 f866 	bl	800e108 <prvSampleTimeNow>
 800e03c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d130      	bne.n	800e0a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10a      	bne.n	800e060 <prvProcessTimerOrBlockTask+0x3c>
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d806      	bhi.n	800e060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e052:	f7ff f825 	bl	800d0a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e056:	68f9      	ldr	r1, [r7, #12]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff ff83 	bl	800df64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e05e:	e024      	b.n	800e0aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d008      	beq.n	800e078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e066:	4b13      	ldr	r3, [pc, #76]	; (800e0b4 <prvProcessTimerOrBlockTask+0x90>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <prvProcessTimerOrBlockTask+0x50>
 800e070:	2301      	movs	r3, #1
 800e072:	e000      	b.n	800e076 <prvProcessTimerOrBlockTask+0x52>
 800e074:	2300      	movs	r3, #0
 800e076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e078:	4b0f      	ldr	r3, [pc, #60]	; (800e0b8 <prvProcessTimerOrBlockTask+0x94>)
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	4619      	mov	r1, r3
 800e086:	f7fe fcdb 	bl	800ca40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e08a:	f7ff f809 	bl	800d0a0 <xTaskResumeAll>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10a      	bne.n	800e0aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e094:	4b09      	ldr	r3, [pc, #36]	; (800e0bc <prvProcessTimerOrBlockTask+0x98>)
 800e096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	f3bf 8f6f 	isb	sy
}
 800e0a4:	e001      	b.n	800e0aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0a6:	f7fe fffb 	bl	800d0a0 <xTaskResumeAll>
}
 800e0aa:	bf00      	nop
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20000bb8 	.word	0x20000bb8
 800e0b8:	20000bbc 	.word	0x20000bbc
 800e0bc:	e000ed04 	.word	0xe000ed04

0800e0c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b085      	sub	sp, #20
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0c8:	4b0e      	ldr	r3, [pc, #56]	; (800e104 <prvGetNextExpireTime+0x44>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d101      	bne.n	800e0d6 <prvGetNextExpireTime+0x16>
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	e000      	b.n	800e0d8 <prvGetNextExpireTime+0x18>
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d105      	bne.n	800e0f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0e4:	4b07      	ldr	r3, [pc, #28]	; (800e104 <prvGetNextExpireTime+0x44>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	60fb      	str	r3, [r7, #12]
 800e0ee:	e001      	b.n	800e0f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3714      	adds	r7, #20
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr
 800e102:	bf00      	nop
 800e104:	20000bb4 	.word	0x20000bb4

0800e108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e110:	f7ff f864 	bl	800d1dc <xTaskGetTickCount>
 800e114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e116:	4b0b      	ldr	r3, [pc, #44]	; (800e144 <prvSampleTimeNow+0x3c>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d205      	bcs.n	800e12c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e120:	f000 f91e 	bl	800e360 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2201      	movs	r2, #1
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	e002      	b.n	800e132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e132:	4a04      	ldr	r2, [pc, #16]	; (800e144 <prvSampleTimeNow+0x3c>)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e138:	68fb      	ldr	r3, [r7, #12]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	20000bc4 	.word	0x20000bc4

0800e148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b086      	sub	sp, #24
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e156:	2300      	movs	r3, #0
 800e158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e166:	68ba      	ldr	r2, [r7, #8]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d812      	bhi.n	800e194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	1ad2      	subs	r2, r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	699b      	ldr	r3, [r3, #24]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d302      	bcc.n	800e182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e17c:	2301      	movs	r3, #1
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e01b      	b.n	800e1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e182:	4b10      	ldr	r3, [pc, #64]	; (800e1c4 <prvInsertTimerInActiveList+0x7c>)
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	3304      	adds	r3, #4
 800e18a:	4619      	mov	r1, r3
 800e18c:	4610      	mov	r0, r2
 800e18e:	f7fd fd68 	bl	800bc62 <vListInsert>
 800e192:	e012      	b.n	800e1ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d206      	bcs.n	800e1aa <prvInsertTimerInActiveList+0x62>
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d302      	bcc.n	800e1aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	617b      	str	r3, [r7, #20]
 800e1a8:	e007      	b.n	800e1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1aa:	4b07      	ldr	r3, [pc, #28]	; (800e1c8 <prvInsertTimerInActiveList+0x80>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	f7fd fd54 	bl	800bc62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1ba:	697b      	ldr	r3, [r7, #20]
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	20000bb8 	.word	0x20000bb8
 800e1c8:	20000bb4 	.word	0x20000bb4

0800e1cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08c      	sub	sp, #48	; 0x30
 800e1d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1d2:	e0b2      	b.n	800e33a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f2c0 80ae 	blt.w	800e338 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d004      	beq.n	800e1f2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fd fd71 	bl	800bcd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1f2:	1d3b      	adds	r3, r7, #4
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7ff ff87 	bl	800e108 <prvSampleTimeNow>
 800e1fa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	2b09      	cmp	r3, #9
 800e200:	f200 809b 	bhi.w	800e33a <prvProcessReceivedCommands+0x16e>
 800e204:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <prvProcessReceivedCommands+0x40>)
 800e206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20a:	bf00      	nop
 800e20c:	0800e235 	.word	0x0800e235
 800e210:	0800e235 	.word	0x0800e235
 800e214:	0800e235 	.word	0x0800e235
 800e218:	0800e2ad 	.word	0x0800e2ad
 800e21c:	0800e2c1 	.word	0x0800e2c1
 800e220:	0800e30f 	.word	0x0800e30f
 800e224:	0800e235 	.word	0x0800e235
 800e228:	0800e235 	.word	0x0800e235
 800e22c:	0800e2ad 	.word	0x0800e2ad
 800e230:	0800e2c1 	.word	0x0800e2c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e23a:	f043 0301 	orr.w	r3, r3, #1
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	18d1      	adds	r1, r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6a3a      	ldr	r2, [r7, #32]
 800e252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e254:	f7ff ff78 	bl	800e148 <prvInsertTimerInActiveList>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d06d      	beq.n	800e33a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e260:	6a1b      	ldr	r3, [r3, #32]
 800e262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e264:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	2b00      	cmp	r3, #0
 800e272:	d062      	beq.n	800e33a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	441a      	add	r2, r3
 800e27c:	2300      	movs	r3, #0
 800e27e:	9300      	str	r3, [sp, #0]
 800e280:	2300      	movs	r3, #0
 800e282:	2100      	movs	r1, #0
 800e284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e286:	f7ff fe1d 	bl	800dec4 <xTimerGenericCommand>
 800e28a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d153      	bne.n	800e33a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	b672      	cpsid	i
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	b662      	cpsie	i
 800e2a6:	61bb      	str	r3, [r7, #24]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e2b2:	f023 0301 	bic.w	r3, r3, #1
 800e2b6:	b2da      	uxtb	r2, r3
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e2be:	e03c      	b.n	800e33a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e2c6:	f043 0301 	orr.w	r3, r3, #1
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10c      	bne.n	800e2fa <prvProcessReceivedCommands+0x12e>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e4:	b672      	cpsid	i
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	b662      	cpsie	i
 800e2f4:	617b      	str	r3, [r7, #20]
}
 800e2f6:	bf00      	nop
 800e2f8:	e7fe      	b.n	800e2f8 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	699a      	ldr	r2, [r3, #24]
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	18d1      	adds	r1, r2, r3
 800e302:	6a3b      	ldr	r3, [r7, #32]
 800e304:	6a3a      	ldr	r2, [r7, #32]
 800e306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e308:	f7ff ff1e 	bl	800e148 <prvInsertTimerInActiveList>
					break;
 800e30c:	e015      	b.n	800e33a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e314:	f003 0302 	and.w	r3, r3, #2
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d103      	bne.n	800e324 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800e31c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e31e:	f000 fbcb 	bl	800eab8 <vPortFree>
 800e322:	e00a      	b.n	800e33a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e32a:	f023 0301 	bic.w	r3, r3, #1
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e336:	e000      	b.n	800e33a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e338:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e33a:	4b08      	ldr	r3, [pc, #32]	; (800e35c <prvProcessReceivedCommands+0x190>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f107 0108 	add.w	r1, r7, #8
 800e342:	2200      	movs	r2, #0
 800e344:	4618      	mov	r0, r3
 800e346:	f7fe f82f 	bl	800c3a8 <xQueueReceive>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f47f af41 	bne.w	800e1d4 <prvProcessReceivedCommands+0x8>
	}
}
 800e352:	bf00      	nop
 800e354:	bf00      	nop
 800e356:	3728      	adds	r7, #40	; 0x28
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20000bbc 	.word	0x20000bbc

0800e360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e366:	e04a      	b.n	800e3fe <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e368:	4b2e      	ldr	r3, [pc, #184]	; (800e424 <prvSwitchTimerLists+0xc4>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e372:	4b2c      	ldr	r3, [pc, #176]	; (800e424 <prvSwitchTimerLists+0xc4>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3304      	adds	r3, #4
 800e380:	4618      	mov	r0, r3
 800e382:	f7fd fca7 	bl	800bcd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e394:	f003 0304 	and.w	r3, r3, #4
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d030      	beq.n	800e3fe <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	693a      	ldr	r2, [r7, #16]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d90e      	bls.n	800e3cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3ba:	4b1a      	ldr	r3, [pc, #104]	; (800e424 <prvSwitchTimerLists+0xc4>)
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	4610      	mov	r0, r2
 800e3c6:	f7fd fc4c 	bl	800bc62 <vListInsert>
 800e3ca:	e018      	b.n	800e3fe <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	693a      	ldr	r2, [r7, #16]
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f7ff fd74 	bl	800dec4 <xTimerGenericCommand>
 800e3dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10c      	bne.n	800e3fe <prvSwitchTimerLists+0x9e>
	__asm volatile
 800e3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e8:	b672      	cpsid	i
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	b662      	cpsie	i
 800e3f8:	603b      	str	r3, [r7, #0]
}
 800e3fa:	bf00      	nop
 800e3fc:	e7fe      	b.n	800e3fc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3fe:	4b09      	ldr	r3, [pc, #36]	; (800e424 <prvSwitchTimerLists+0xc4>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1af      	bne.n	800e368 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e408:	4b06      	ldr	r3, [pc, #24]	; (800e424 <prvSwitchTimerLists+0xc4>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e40e:	4b06      	ldr	r3, [pc, #24]	; (800e428 <prvSwitchTimerLists+0xc8>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4a04      	ldr	r2, [pc, #16]	; (800e424 <prvSwitchTimerLists+0xc4>)
 800e414:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e416:	4a04      	ldr	r2, [pc, #16]	; (800e428 <prvSwitchTimerLists+0xc8>)
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	6013      	str	r3, [r2, #0]
}
 800e41c:	bf00      	nop
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	20000bb4 	.word	0x20000bb4
 800e428:	20000bb8 	.word	0x20000bb8

0800e42c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e432:	f000 f94b 	bl	800e6cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e436:	4b15      	ldr	r3, [pc, #84]	; (800e48c <prvCheckForValidListAndQueue+0x60>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d120      	bne.n	800e480 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e43e:	4814      	ldr	r0, [pc, #80]	; (800e490 <prvCheckForValidListAndQueue+0x64>)
 800e440:	f7fd fbbe 	bl	800bbc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e444:	4813      	ldr	r0, [pc, #76]	; (800e494 <prvCheckForValidListAndQueue+0x68>)
 800e446:	f7fd fbbb 	bl	800bbc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e44a:	4b13      	ldr	r3, [pc, #76]	; (800e498 <prvCheckForValidListAndQueue+0x6c>)
 800e44c:	4a10      	ldr	r2, [pc, #64]	; (800e490 <prvCheckForValidListAndQueue+0x64>)
 800e44e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e450:	4b12      	ldr	r3, [pc, #72]	; (800e49c <prvCheckForValidListAndQueue+0x70>)
 800e452:	4a10      	ldr	r2, [pc, #64]	; (800e494 <prvCheckForValidListAndQueue+0x68>)
 800e454:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e456:	2300      	movs	r3, #0
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	4b11      	ldr	r3, [pc, #68]	; (800e4a0 <prvCheckForValidListAndQueue+0x74>)
 800e45c:	4a11      	ldr	r2, [pc, #68]	; (800e4a4 <prvCheckForValidListAndQueue+0x78>)
 800e45e:	210c      	movs	r1, #12
 800e460:	200a      	movs	r0, #10
 800e462:	f7fd fccb 	bl	800bdfc <xQueueGenericCreateStatic>
 800e466:	4603      	mov	r3, r0
 800e468:	4a08      	ldr	r2, [pc, #32]	; (800e48c <prvCheckForValidListAndQueue+0x60>)
 800e46a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e46c:	4b07      	ldr	r3, [pc, #28]	; (800e48c <prvCheckForValidListAndQueue+0x60>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d005      	beq.n	800e480 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e474:	4b05      	ldr	r3, [pc, #20]	; (800e48c <prvCheckForValidListAndQueue+0x60>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	490b      	ldr	r1, [pc, #44]	; (800e4a8 <prvCheckForValidListAndQueue+0x7c>)
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe fab6 	bl	800c9ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e480:	f000 f958 	bl	800e734 <vPortExitCritical>
}
 800e484:	bf00      	nop
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20000bbc 	.word	0x20000bbc
 800e490:	20000b8c 	.word	0x20000b8c
 800e494:	20000ba0 	.word	0x20000ba0
 800e498:	20000bb4 	.word	0x20000bb4
 800e49c:	20000bb8 	.word	0x20000bb8
 800e4a0:	20000c40 	.word	0x20000c40
 800e4a4:	20000bc8 	.word	0x20000bc8
 800e4a8:	0800f87c 	.word	0x0800f87c

0800e4ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3b04      	subs	r3, #4
 800e4bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3b04      	subs	r3, #4
 800e4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	f023 0201 	bic.w	r2, r3, #1
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	3b04      	subs	r3, #4
 800e4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4dc:	4a0c      	ldr	r2, [pc, #48]	; (800e510 <pxPortInitialiseStack+0x64>)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	3b14      	subs	r3, #20
 800e4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3b04      	subs	r3, #4
 800e4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f06f 0202 	mvn.w	r2, #2
 800e4fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3b20      	subs	r3, #32
 800e500:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e502:	68fb      	ldr	r3, [r7, #12]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	0800e515 	.word	0x0800e515

0800e514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e51e:	4b14      	ldr	r3, [pc, #80]	; (800e570 <prvTaskExitError+0x5c>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e526:	d00c      	beq.n	800e542 <prvTaskExitError+0x2e>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52c:	b672      	cpsid	i
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	b662      	cpsie	i
 800e53c:	60fb      	str	r3, [r7, #12]
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <prvTaskExitError+0x2c>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	b672      	cpsid	i
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	b662      	cpsie	i
 800e556:	60bb      	str	r3, [r7, #8]
}
 800e558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e55a:	bf00      	nop
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0fc      	beq.n	800e55c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e562:	bf00      	nop
 800e564:	bf00      	nop
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	2000004c 	.word	0x2000004c
	...

0800e580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <pxCurrentTCBConst2>)
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	6808      	ldr	r0, [r1, #0]
 800e586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58a:	f380 8809 	msr	PSP, r0
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8811 	msr	BASEPRI, r0
 800e59a:	4770      	bx	lr
 800e59c:	f3af 8000 	nop.w

0800e5a0 <pxCurrentTCBConst2>:
 800e5a0:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop

0800e5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5a8:	4808      	ldr	r0, [pc, #32]	; (800e5cc <prvPortStartFirstTask+0x24>)
 800e5aa:	6800      	ldr	r0, [r0, #0]
 800e5ac:	6800      	ldr	r0, [r0, #0]
 800e5ae:	f380 8808 	msr	MSP, r0
 800e5b2:	f04f 0000 	mov.w	r0, #0
 800e5b6:	f380 8814 	msr	CONTROL, r0
 800e5ba:	b662      	cpsie	i
 800e5bc:	b661      	cpsie	f
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	df00      	svc	0
 800e5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5ca:	bf00      	nop
 800e5cc:	e000ed08 	.word	0xe000ed08

0800e5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5d6:	4b37      	ldr	r3, [pc, #220]	; (800e6b4 <xPortStartScheduler+0xe4>)
 800e5d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	22ff      	movs	r2, #255	; 0xff
 800e5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5f0:	78fb      	ldrb	r3, [r7, #3]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	4b2f      	ldr	r3, [pc, #188]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5fe:	4b2f      	ldr	r3, [pc, #188]	; (800e6bc <xPortStartScheduler+0xec>)
 800e600:	2207      	movs	r2, #7
 800e602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e604:	e009      	b.n	800e61a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e606:	4b2d      	ldr	r3, [pc, #180]	; (800e6bc <xPortStartScheduler+0xec>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3b01      	subs	r3, #1
 800e60c:	4a2b      	ldr	r2, [pc, #172]	; (800e6bc <xPortStartScheduler+0xec>)
 800e60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	b2db      	uxtb	r3, r3
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	b2db      	uxtb	r3, r3
 800e618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e61a:	78fb      	ldrb	r3, [r7, #3]
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e622:	2b80      	cmp	r3, #128	; 0x80
 800e624:	d0ef      	beq.n	800e606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e626:	4b25      	ldr	r3, [pc, #148]	; (800e6bc <xPortStartScheduler+0xec>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f1c3 0307 	rsb	r3, r3, #7
 800e62e:	2b04      	cmp	r3, #4
 800e630:	d00c      	beq.n	800e64c <xPortStartScheduler+0x7c>
	__asm volatile
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	b672      	cpsid	i
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	b662      	cpsie	i
 800e646:	60bb      	str	r3, [r7, #8]
}
 800e648:	bf00      	nop
 800e64a:	e7fe      	b.n	800e64a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e64c:	4b1b      	ldr	r3, [pc, #108]	; (800e6bc <xPortStartScheduler+0xec>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	021b      	lsls	r3, r3, #8
 800e652:	4a1a      	ldr	r2, [pc, #104]	; (800e6bc <xPortStartScheduler+0xec>)
 800e654:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e656:	4b19      	ldr	r3, [pc, #100]	; (800e6bc <xPortStartScheduler+0xec>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e65e:	4a17      	ldr	r2, [pc, #92]	; (800e6bc <xPortStartScheduler+0xec>)
 800e660:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	b2da      	uxtb	r2, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e66a:	4b15      	ldr	r3, [pc, #84]	; (800e6c0 <xPortStartScheduler+0xf0>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a14      	ldr	r2, [pc, #80]	; (800e6c0 <xPortStartScheduler+0xf0>)
 800e670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e674:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e676:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <xPortStartScheduler+0xf0>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a11      	ldr	r2, [pc, #68]	; (800e6c0 <xPortStartScheduler+0xf0>)
 800e67c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e680:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e682:	f000 f8dd 	bl	800e840 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e686:	4b0f      	ldr	r3, [pc, #60]	; (800e6c4 <xPortStartScheduler+0xf4>)
 800e688:	2200      	movs	r2, #0
 800e68a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e68c:	f000 f8fc 	bl	800e888 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e690:	4b0d      	ldr	r3, [pc, #52]	; (800e6c8 <xPortStartScheduler+0xf8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a0c      	ldr	r2, [pc, #48]	; (800e6c8 <xPortStartScheduler+0xf8>)
 800e696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e69a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e69c:	f7ff ff84 	bl	800e5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6a0:	f7fe fe66 	bl	800d370 <vTaskSwitchContext>
	prvTaskExitError();
 800e6a4:	f7ff ff36 	bl	800e514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6a8:	2300      	movs	r3, #0
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	e000e400 	.word	0xe000e400
 800e6b8:	20000c88 	.word	0x20000c88
 800e6bc:	20000c8c 	.word	0x20000c8c
 800e6c0:	e000ed20 	.word	0xe000ed20
 800e6c4:	2000004c 	.word	0x2000004c
 800e6c8:	e000ef34 	.word	0xe000ef34

0800e6cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d6:	b672      	cpsid	i
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	b662      	cpsie	i
 800e6e6:	607b      	str	r3, [r7, #4]
}
 800e6e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6ea:	4b10      	ldr	r3, [pc, #64]	; (800e72c <vPortEnterCritical+0x60>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	4a0e      	ldr	r2, [pc, #56]	; (800e72c <vPortEnterCritical+0x60>)
 800e6f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6f4:	4b0d      	ldr	r3, [pc, #52]	; (800e72c <vPortEnterCritical+0x60>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d111      	bne.n	800e720 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6fc:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <vPortEnterCritical+0x64>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00c      	beq.n	800e720 <vPortEnterCritical+0x54>
	__asm volatile
 800e706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e70a:	b672      	cpsid	i
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	b662      	cpsie	i
 800e71a:	603b      	str	r3, [r7, #0]
}
 800e71c:	bf00      	nop
 800e71e:	e7fe      	b.n	800e71e <vPortEnterCritical+0x52>
	}
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr
 800e72c:	2000004c 	.word	0x2000004c
 800e730:	e000ed04 	.word	0xe000ed04

0800e734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e73a:	4b13      	ldr	r3, [pc, #76]	; (800e788 <vPortExitCritical+0x54>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10c      	bne.n	800e75c <vPortExitCritical+0x28>
	__asm volatile
 800e742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e746:	b672      	cpsid	i
 800e748:	f383 8811 	msr	BASEPRI, r3
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f3bf 8f4f 	dsb	sy
 800e754:	b662      	cpsie	i
 800e756:	607b      	str	r3, [r7, #4]
}
 800e758:	bf00      	nop
 800e75a:	e7fe      	b.n	800e75a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e75c:	4b0a      	ldr	r3, [pc, #40]	; (800e788 <vPortExitCritical+0x54>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3b01      	subs	r3, #1
 800e762:	4a09      	ldr	r2, [pc, #36]	; (800e788 <vPortExitCritical+0x54>)
 800e764:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e766:	4b08      	ldr	r3, [pc, #32]	; (800e788 <vPortExitCritical+0x54>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d105      	bne.n	800e77a <vPortExitCritical+0x46>
 800e76e:	2300      	movs	r3, #0
 800e770:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	f383 8811 	msr	BASEPRI, r3
}
 800e778:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e77a:	bf00      	nop
 800e77c:	370c      	adds	r7, #12
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	2000004c 	.word	0x2000004c
 800e78c:	00000000 	.word	0x00000000

0800e790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e790:	f3ef 8009 	mrs	r0, PSP
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <pxCurrentTCBConst>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	f01e 0f10 	tst.w	lr, #16
 800e7a0:	bf08      	it	eq
 800e7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7aa:	6010      	str	r0, [r2, #0]
 800e7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7b4:	b672      	cpsid	i
 800e7b6:	f380 8811 	msr	BASEPRI, r0
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	f3bf 8f6f 	isb	sy
 800e7c2:	b662      	cpsie	i
 800e7c4:	f7fe fdd4 	bl	800d370 <vTaskSwitchContext>
 800e7c8:	f04f 0000 	mov.w	r0, #0
 800e7cc:	f380 8811 	msr	BASEPRI, r0
 800e7d0:	bc09      	pop	{r0, r3}
 800e7d2:	6819      	ldr	r1, [r3, #0]
 800e7d4:	6808      	ldr	r0, [r1, #0]
 800e7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7da:	f01e 0f10 	tst.w	lr, #16
 800e7de:	bf08      	it	eq
 800e7e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7e4:	f380 8809 	msr	PSP, r0
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop

0800e7f0 <pxCurrentTCBConst>:
 800e7f0:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7f4:	bf00      	nop
 800e7f6:	bf00      	nop

0800e7f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	b672      	cpsid	i
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	b662      	cpsie	i
 800e812:	607b      	str	r3, [r7, #4]
}
 800e814:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e816:	f7fe fcf1 	bl	800d1fc <xTaskIncrementTick>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d003      	beq.n	800e828 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e820:	4b06      	ldr	r3, [pc, #24]	; (800e83c <SysTick_Handler+0x44>)
 800e822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	2300      	movs	r3, #0
 800e82a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	f383 8811 	msr	BASEPRI, r3
}
 800e832:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e834:	bf00      	nop
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	e000ed04 	.word	0xe000ed04

0800e840 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e840:	b480      	push	{r7}
 800e842:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e844:	4b0b      	ldr	r3, [pc, #44]	; (800e874 <vPortSetupTimerInterrupt+0x34>)
 800e846:	2200      	movs	r2, #0
 800e848:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e84a:	4b0b      	ldr	r3, [pc, #44]	; (800e878 <vPortSetupTimerInterrupt+0x38>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e850:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <vPortSetupTimerInterrupt+0x3c>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a0a      	ldr	r2, [pc, #40]	; (800e880 <vPortSetupTimerInterrupt+0x40>)
 800e856:	fba2 2303 	umull	r2, r3, r2, r3
 800e85a:	099b      	lsrs	r3, r3, #6
 800e85c:	4a09      	ldr	r2, [pc, #36]	; (800e884 <vPortSetupTimerInterrupt+0x44>)
 800e85e:	3b01      	subs	r3, #1
 800e860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e862:	4b04      	ldr	r3, [pc, #16]	; (800e874 <vPortSetupTimerInterrupt+0x34>)
 800e864:	2207      	movs	r2, #7
 800e866:	601a      	str	r2, [r3, #0]
}
 800e868:	bf00      	nop
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	e000e010 	.word	0xe000e010
 800e878:	e000e018 	.word	0xe000e018
 800e87c:	20000040 	.word	0x20000040
 800e880:	10624dd3 	.word	0x10624dd3
 800e884:	e000e014 	.word	0xe000e014

0800e888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e888:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e898 <vPortEnableVFP+0x10>
 800e88c:	6801      	ldr	r1, [r0, #0]
 800e88e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e892:	6001      	str	r1, [r0, #0]
 800e894:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e896:	bf00      	nop
 800e898:	e000ed88 	.word	0xe000ed88

0800e89c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e89c:	b480      	push	{r7}
 800e89e:	b085      	sub	sp, #20
 800e8a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8a2:	f3ef 8305 	mrs	r3, IPSR
 800e8a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2b0f      	cmp	r3, #15
 800e8ac:	d916      	bls.n	800e8dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8ae:	4a19      	ldr	r2, [pc, #100]	; (800e914 <vPortValidateInterruptPriority+0x78>)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8b8:	4b17      	ldr	r3, [pc, #92]	; (800e918 <vPortValidateInterruptPriority+0x7c>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	7afa      	ldrb	r2, [r7, #11]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d20c      	bcs.n	800e8dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c6:	b672      	cpsid	i
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	b662      	cpsie	i
 800e8d6:	607b      	str	r3, [r7, #4]
}
 800e8d8:	bf00      	nop
 800e8da:	e7fe      	b.n	800e8da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <vPortValidateInterruptPriority+0x80>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8e4:	4b0e      	ldr	r3, [pc, #56]	; (800e920 <vPortValidateInterruptPriority+0x84>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d90c      	bls.n	800e906 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f0:	b672      	cpsid	i
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	b662      	cpsie	i
 800e900:	603b      	str	r3, [r7, #0]
}
 800e902:	bf00      	nop
 800e904:	e7fe      	b.n	800e904 <vPortValidateInterruptPriority+0x68>
	}
 800e906:	bf00      	nop
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	e000e3f0 	.word	0xe000e3f0
 800e918:	20000c88 	.word	0x20000c88
 800e91c:	e000ed0c 	.word	0xe000ed0c
 800e920:	20000c8c 	.word	0x20000c8c

0800e924 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08a      	sub	sp, #40	; 0x28
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e92c:	2300      	movs	r3, #0
 800e92e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e930:	f7fe fba8 	bl	800d084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e934:	4b5b      	ldr	r3, [pc, #364]	; (800eaa4 <pvPortMalloc+0x180>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d101      	bne.n	800e940 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e93c:	f000 f91a 	bl	800eb74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e940:	4b59      	ldr	r3, [pc, #356]	; (800eaa8 <pvPortMalloc+0x184>)
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4013      	ands	r3, r2
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f040 8092 	bne.w	800ea72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d01f      	beq.n	800e994 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e954:	2208      	movs	r2, #8
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4413      	add	r3, r2
 800e95a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	2b00      	cmp	r3, #0
 800e964:	d016      	beq.n	800e994 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f023 0307 	bic.w	r3, r3, #7
 800e96c:	3308      	adds	r3, #8
 800e96e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f003 0307 	and.w	r3, r3, #7
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00c      	beq.n	800e994 <pvPortMalloc+0x70>
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97e:	b672      	cpsid	i
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	b662      	cpsie	i
 800e98e:	617b      	str	r3, [r7, #20]
}
 800e990:	bf00      	nop
 800e992:	e7fe      	b.n	800e992 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d06b      	beq.n	800ea72 <pvPortMalloc+0x14e>
 800e99a:	4b44      	ldr	r3, [pc, #272]	; (800eaac <pvPortMalloc+0x188>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d866      	bhi.n	800ea72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9a4:	4b42      	ldr	r3, [pc, #264]	; (800eab0 <pvPortMalloc+0x18c>)
 800e9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9a8:	4b41      	ldr	r3, [pc, #260]	; (800eab0 <pvPortMalloc+0x18c>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9ae:	e004      	b.n	800e9ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d903      	bls.n	800e9cc <pvPortMalloc+0xa8>
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1f1      	bne.n	800e9b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9cc:	4b35      	ldr	r3, [pc, #212]	; (800eaa4 <pvPortMalloc+0x180>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d04d      	beq.n	800ea72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9d6:	6a3b      	ldr	r3, [r7, #32]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2208      	movs	r2, #8
 800e9dc:	4413      	add	r3, r2
 800e9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	6a3b      	ldr	r3, [r7, #32]
 800e9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ea:	685a      	ldr	r2, [r3, #4]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	2308      	movs	r3, #8
 800e9f2:	005b      	lsls	r3, r3, #1
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d921      	bls.n	800ea3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00c      	beq.n	800ea24 <pvPortMalloc+0x100>
	__asm volatile
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	b672      	cpsid	i
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	b662      	cpsie	i
 800ea1e:	613b      	str	r3, [r7, #16]
}
 800ea20:	bf00      	nop
 800ea22:	e7fe      	b.n	800ea22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	685a      	ldr	r2, [r3, #4]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	1ad2      	subs	r2, r2, r3
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea36:	69b8      	ldr	r0, [r7, #24]
 800ea38:	f000 f8fe 	bl	800ec38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea3c:	4b1b      	ldr	r3, [pc, #108]	; (800eaac <pvPortMalloc+0x188>)
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	4a19      	ldr	r2, [pc, #100]	; (800eaac <pvPortMalloc+0x188>)
 800ea48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea4a:	4b18      	ldr	r3, [pc, #96]	; (800eaac <pvPortMalloc+0x188>)
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <pvPortMalloc+0x190>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d203      	bcs.n	800ea5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea56:	4b15      	ldr	r3, [pc, #84]	; (800eaac <pvPortMalloc+0x188>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a16      	ldr	r2, [pc, #88]	; (800eab4 <pvPortMalloc+0x190>)
 800ea5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	4b11      	ldr	r3, [pc, #68]	; (800eaa8 <pvPortMalloc+0x184>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	431a      	orrs	r2, r3
 800ea68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6e:	2200      	movs	r2, #0
 800ea70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea72:	f7fe fb15 	bl	800d0a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	f003 0307 	and.w	r3, r3, #7
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00c      	beq.n	800ea9a <pvPortMalloc+0x176>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	b672      	cpsid	i
 800ea86:	f383 8811 	msr	BASEPRI, r3
 800ea8a:	f3bf 8f6f 	isb	sy
 800ea8e:	f3bf 8f4f 	dsb	sy
 800ea92:	b662      	cpsie	i
 800ea94:	60fb      	str	r3, [r7, #12]
}
 800ea96:	bf00      	nop
 800ea98:	e7fe      	b.n	800ea98 <pvPortMalloc+0x174>
	return pvReturn;
 800ea9a:	69fb      	ldr	r3, [r7, #28]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3728      	adds	r7, #40	; 0x28
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20008498 	.word	0x20008498
 800eaa8:	200084a4 	.word	0x200084a4
 800eaac:	2000849c 	.word	0x2000849c
 800eab0:	20008490 	.word	0x20008490
 800eab4:	200084a0 	.word	0x200084a0

0800eab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d04c      	beq.n	800eb64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eaca:	2308      	movs	r3, #8
 800eacc:	425b      	negs	r3, r3
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	4413      	add	r3, r2
 800ead2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	685a      	ldr	r2, [r3, #4]
 800eadc:	4b23      	ldr	r3, [pc, #140]	; (800eb6c <vPortFree+0xb4>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4013      	ands	r3, r2
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d10c      	bne.n	800eb00 <vPortFree+0x48>
	__asm volatile
 800eae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaea:	b672      	cpsid	i
 800eaec:	f383 8811 	msr	BASEPRI, r3
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	b662      	cpsie	i
 800eafa:	60fb      	str	r3, [r7, #12]
}
 800eafc:	bf00      	nop
 800eafe:	e7fe      	b.n	800eafe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00c      	beq.n	800eb22 <vPortFree+0x6a>
	__asm volatile
 800eb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0c:	b672      	cpsid	i
 800eb0e:	f383 8811 	msr	BASEPRI, r3
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	b662      	cpsie	i
 800eb1c:	60bb      	str	r3, [r7, #8]
}
 800eb1e:	bf00      	nop
 800eb20:	e7fe      	b.n	800eb20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	4b11      	ldr	r3, [pc, #68]	; (800eb6c <vPortFree+0xb4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d019      	beq.n	800eb64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d115      	bne.n	800eb64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	4b0b      	ldr	r3, [pc, #44]	; (800eb6c <vPortFree+0xb4>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	43db      	mvns	r3, r3
 800eb42:	401a      	ands	r2, r3
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb48:	f7fe fa9c 	bl	800d084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	4b07      	ldr	r3, [pc, #28]	; (800eb70 <vPortFree+0xb8>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4413      	add	r3, r2
 800eb56:	4a06      	ldr	r2, [pc, #24]	; (800eb70 <vPortFree+0xb8>)
 800eb58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb5a:	6938      	ldr	r0, [r7, #16]
 800eb5c:	f000 f86c 	bl	800ec38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb60:	f7fe fa9e 	bl	800d0a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb64:	bf00      	nop
 800eb66:	3718      	adds	r7, #24
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	200084a4 	.word	0x200084a4
 800eb70:	2000849c 	.word	0x2000849c

0800eb74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb7a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800eb7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb80:	4b27      	ldr	r3, [pc, #156]	; (800ec20 <prvHeapInit+0xac>)
 800eb82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f003 0307 	and.w	r3, r3, #7
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00c      	beq.n	800eba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3307      	adds	r3, #7
 800eb92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f023 0307 	bic.w	r3, r3, #7
 800eb9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	4a1f      	ldr	r2, [pc, #124]	; (800ec20 <prvHeapInit+0xac>)
 800eba4:	4413      	add	r3, r2
 800eba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebac:	4a1d      	ldr	r2, [pc, #116]	; (800ec24 <prvHeapInit+0xb0>)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <prvHeapInit+0xb0>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebc0:	2208      	movs	r2, #8
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	1a9b      	subs	r3, r3, r2
 800ebc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f023 0307 	bic.w	r3, r3, #7
 800ebce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	4a15      	ldr	r2, [pc, #84]	; (800ec28 <prvHeapInit+0xb4>)
 800ebd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebd6:	4b14      	ldr	r3, [pc, #80]	; (800ec28 <prvHeapInit+0xb4>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebde:	4b12      	ldr	r3, [pc, #72]	; (800ec28 <prvHeapInit+0xb4>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	1ad2      	subs	r2, r2, r3
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebf4:	4b0c      	ldr	r3, [pc, #48]	; (800ec28 <prvHeapInit+0xb4>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	4a0a      	ldr	r2, [pc, #40]	; (800ec2c <prvHeapInit+0xb8>)
 800ec02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4a09      	ldr	r2, [pc, #36]	; (800ec30 <prvHeapInit+0xbc>)
 800ec0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec0c:	4b09      	ldr	r3, [pc, #36]	; (800ec34 <prvHeapInit+0xc0>)
 800ec0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec12:	601a      	str	r2, [r3, #0]
}
 800ec14:	bf00      	nop
 800ec16:	3714      	adds	r7, #20
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	20000c90 	.word	0x20000c90
 800ec24:	20008490 	.word	0x20008490
 800ec28:	20008498 	.word	0x20008498
 800ec2c:	200084a0 	.word	0x200084a0
 800ec30:	2000849c 	.word	0x2000849c
 800ec34:	200084a4 	.word	0x200084a4

0800ec38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec40:	4b28      	ldr	r3, [pc, #160]	; (800ece4 <prvInsertBlockIntoFreeList+0xac>)
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	e002      	b.n	800ec4c <prvInsertBlockIntoFreeList+0x14>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d8f7      	bhi.n	800ec46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	4413      	add	r3, r2
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d108      	bne.n	800ec7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	441a      	add	r2, r3
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	441a      	add	r2, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d118      	bne.n	800ecc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	4b15      	ldr	r3, [pc, #84]	; (800ece8 <prvInsertBlockIntoFreeList+0xb0>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d00d      	beq.n	800ecb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	685a      	ldr	r2, [r3, #4]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	441a      	add	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	e008      	b.n	800ecc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecb6:	4b0c      	ldr	r3, [pc, #48]	; (800ece8 <prvInsertBlockIntoFreeList+0xb0>)
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	e003      	b.n	800ecc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d002      	beq.n	800ecd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecd6:	bf00      	nop
 800ecd8:	3714      	adds	r7, #20
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	20008490 	.word	0x20008490
 800ece8:	20008498 	.word	0x20008498

0800ecec <__errno>:
 800ecec:	4b01      	ldr	r3, [pc, #4]	; (800ecf4 <__errno+0x8>)
 800ecee:	6818      	ldr	r0, [r3, #0]
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	20000050 	.word	0x20000050

0800ecf8 <__libc_init_array>:
 800ecf8:	b570      	push	{r4, r5, r6, lr}
 800ecfa:	4d0d      	ldr	r5, [pc, #52]	; (800ed30 <__libc_init_array+0x38>)
 800ecfc:	4c0d      	ldr	r4, [pc, #52]	; (800ed34 <__libc_init_array+0x3c>)
 800ecfe:	1b64      	subs	r4, r4, r5
 800ed00:	10a4      	asrs	r4, r4, #2
 800ed02:	2600      	movs	r6, #0
 800ed04:	42a6      	cmp	r6, r4
 800ed06:	d109      	bne.n	800ed1c <__libc_init_array+0x24>
 800ed08:	4d0b      	ldr	r5, [pc, #44]	; (800ed38 <__libc_init_array+0x40>)
 800ed0a:	4c0c      	ldr	r4, [pc, #48]	; (800ed3c <__libc_init_array+0x44>)
 800ed0c:	f000 fcb8 	bl	800f680 <_init>
 800ed10:	1b64      	subs	r4, r4, r5
 800ed12:	10a4      	asrs	r4, r4, #2
 800ed14:	2600      	movs	r6, #0
 800ed16:	42a6      	cmp	r6, r4
 800ed18:	d105      	bne.n	800ed26 <__libc_init_array+0x2e>
 800ed1a:	bd70      	pop	{r4, r5, r6, pc}
 800ed1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed20:	4798      	blx	r3
 800ed22:	3601      	adds	r6, #1
 800ed24:	e7ee      	b.n	800ed04 <__libc_init_array+0xc>
 800ed26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed2a:	4798      	blx	r3
 800ed2c:	3601      	adds	r6, #1
 800ed2e:	e7f2      	b.n	800ed16 <__libc_init_array+0x1e>
 800ed30:	08012794 	.word	0x08012794
 800ed34:	08012794 	.word	0x08012794
 800ed38:	08012794 	.word	0x08012794
 800ed3c:	08012798 	.word	0x08012798

0800ed40 <__retarget_lock_acquire_recursive>:
 800ed40:	4770      	bx	lr

0800ed42 <__retarget_lock_release_recursive>:
 800ed42:	4770      	bx	lr

0800ed44 <memcpy>:
 800ed44:	440a      	add	r2, r1
 800ed46:	4291      	cmp	r1, r2
 800ed48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ed4c:	d100      	bne.n	800ed50 <memcpy+0xc>
 800ed4e:	4770      	bx	lr
 800ed50:	b510      	push	{r4, lr}
 800ed52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed5a:	4291      	cmp	r1, r2
 800ed5c:	d1f9      	bne.n	800ed52 <memcpy+0xe>
 800ed5e:	bd10      	pop	{r4, pc}

0800ed60 <memset>:
 800ed60:	4402      	add	r2, r0
 800ed62:	4603      	mov	r3, r0
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d100      	bne.n	800ed6a <memset+0xa>
 800ed68:	4770      	bx	lr
 800ed6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed6e:	e7f9      	b.n	800ed64 <memset+0x4>

0800ed70 <_malloc_r>:
 800ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed72:	1ccd      	adds	r5, r1, #3
 800ed74:	f025 0503 	bic.w	r5, r5, #3
 800ed78:	3508      	adds	r5, #8
 800ed7a:	2d0c      	cmp	r5, #12
 800ed7c:	bf38      	it	cc
 800ed7e:	250c      	movcc	r5, #12
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	4606      	mov	r6, r0
 800ed84:	db01      	blt.n	800ed8a <_malloc_r+0x1a>
 800ed86:	42a9      	cmp	r1, r5
 800ed88:	d903      	bls.n	800ed92 <_malloc_r+0x22>
 800ed8a:	230c      	movs	r3, #12
 800ed8c:	6033      	str	r3, [r6, #0]
 800ed8e:	2000      	movs	r0, #0
 800ed90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed92:	f000 f8e1 	bl	800ef58 <__malloc_lock>
 800ed96:	4921      	ldr	r1, [pc, #132]	; (800ee1c <_malloc_r+0xac>)
 800ed98:	680a      	ldr	r2, [r1, #0]
 800ed9a:	4614      	mov	r4, r2
 800ed9c:	b99c      	cbnz	r4, 800edc6 <_malloc_r+0x56>
 800ed9e:	4f20      	ldr	r7, [pc, #128]	; (800ee20 <_malloc_r+0xb0>)
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	b923      	cbnz	r3, 800edae <_malloc_r+0x3e>
 800eda4:	4621      	mov	r1, r4
 800eda6:	4630      	mov	r0, r6
 800eda8:	f000 f8a6 	bl	800eef8 <_sbrk_r>
 800edac:	6038      	str	r0, [r7, #0]
 800edae:	4629      	mov	r1, r5
 800edb0:	4630      	mov	r0, r6
 800edb2:	f000 f8a1 	bl	800eef8 <_sbrk_r>
 800edb6:	1c43      	adds	r3, r0, #1
 800edb8:	d123      	bne.n	800ee02 <_malloc_r+0x92>
 800edba:	230c      	movs	r3, #12
 800edbc:	6033      	str	r3, [r6, #0]
 800edbe:	4630      	mov	r0, r6
 800edc0:	f000 f8d0 	bl	800ef64 <__malloc_unlock>
 800edc4:	e7e3      	b.n	800ed8e <_malloc_r+0x1e>
 800edc6:	6823      	ldr	r3, [r4, #0]
 800edc8:	1b5b      	subs	r3, r3, r5
 800edca:	d417      	bmi.n	800edfc <_malloc_r+0x8c>
 800edcc:	2b0b      	cmp	r3, #11
 800edce:	d903      	bls.n	800edd8 <_malloc_r+0x68>
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	441c      	add	r4, r3
 800edd4:	6025      	str	r5, [r4, #0]
 800edd6:	e004      	b.n	800ede2 <_malloc_r+0x72>
 800edd8:	6863      	ldr	r3, [r4, #4]
 800edda:	42a2      	cmp	r2, r4
 800eddc:	bf0c      	ite	eq
 800edde:	600b      	streq	r3, [r1, #0]
 800ede0:	6053      	strne	r3, [r2, #4]
 800ede2:	4630      	mov	r0, r6
 800ede4:	f000 f8be 	bl	800ef64 <__malloc_unlock>
 800ede8:	f104 000b 	add.w	r0, r4, #11
 800edec:	1d23      	adds	r3, r4, #4
 800edee:	f020 0007 	bic.w	r0, r0, #7
 800edf2:	1ac2      	subs	r2, r0, r3
 800edf4:	d0cc      	beq.n	800ed90 <_malloc_r+0x20>
 800edf6:	1a1b      	subs	r3, r3, r0
 800edf8:	50a3      	str	r3, [r4, r2]
 800edfa:	e7c9      	b.n	800ed90 <_malloc_r+0x20>
 800edfc:	4622      	mov	r2, r4
 800edfe:	6864      	ldr	r4, [r4, #4]
 800ee00:	e7cc      	b.n	800ed9c <_malloc_r+0x2c>
 800ee02:	1cc4      	adds	r4, r0, #3
 800ee04:	f024 0403 	bic.w	r4, r4, #3
 800ee08:	42a0      	cmp	r0, r4
 800ee0a:	d0e3      	beq.n	800edd4 <_malloc_r+0x64>
 800ee0c:	1a21      	subs	r1, r4, r0
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f000 f872 	bl	800eef8 <_sbrk_r>
 800ee14:	3001      	adds	r0, #1
 800ee16:	d1dd      	bne.n	800edd4 <_malloc_r+0x64>
 800ee18:	e7cf      	b.n	800edba <_malloc_r+0x4a>
 800ee1a:	bf00      	nop
 800ee1c:	200084a8 	.word	0x200084a8
 800ee20:	200084ac 	.word	0x200084ac

0800ee24 <cleanup_glue>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	460c      	mov	r4, r1
 800ee28:	6809      	ldr	r1, [r1, #0]
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	b109      	cbz	r1, 800ee32 <cleanup_glue+0xe>
 800ee2e:	f7ff fff9 	bl	800ee24 <cleanup_glue>
 800ee32:	4621      	mov	r1, r4
 800ee34:	4628      	mov	r0, r5
 800ee36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee3a:	f000 b899 	b.w	800ef70 <_free_r>
	...

0800ee40 <_reclaim_reent>:
 800ee40:	4b2c      	ldr	r3, [pc, #176]	; (800eef4 <_reclaim_reent+0xb4>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4283      	cmp	r3, r0
 800ee46:	b570      	push	{r4, r5, r6, lr}
 800ee48:	4604      	mov	r4, r0
 800ee4a:	d051      	beq.n	800eef0 <_reclaim_reent+0xb0>
 800ee4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ee4e:	b143      	cbz	r3, 800ee62 <_reclaim_reent+0x22>
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d14a      	bne.n	800eeec <_reclaim_reent+0xac>
 800ee56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee58:	6819      	ldr	r1, [r3, #0]
 800ee5a:	b111      	cbz	r1, 800ee62 <_reclaim_reent+0x22>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f000 f887 	bl	800ef70 <_free_r>
 800ee62:	6961      	ldr	r1, [r4, #20]
 800ee64:	b111      	cbz	r1, 800ee6c <_reclaim_reent+0x2c>
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 f882 	bl	800ef70 <_free_r>
 800ee6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ee6e:	b111      	cbz	r1, 800ee76 <_reclaim_reent+0x36>
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 f87d 	bl	800ef70 <_free_r>
 800ee76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ee78:	b111      	cbz	r1, 800ee80 <_reclaim_reent+0x40>
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f000 f878 	bl	800ef70 <_free_r>
 800ee80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ee82:	b111      	cbz	r1, 800ee8a <_reclaim_reent+0x4a>
 800ee84:	4620      	mov	r0, r4
 800ee86:	f000 f873 	bl	800ef70 <_free_r>
 800ee8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ee8c:	b111      	cbz	r1, 800ee94 <_reclaim_reent+0x54>
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f000 f86e 	bl	800ef70 <_free_r>
 800ee94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ee96:	b111      	cbz	r1, 800ee9e <_reclaim_reent+0x5e>
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f000 f869 	bl	800ef70 <_free_r>
 800ee9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eea0:	b111      	cbz	r1, 800eea8 <_reclaim_reent+0x68>
 800eea2:	4620      	mov	r0, r4
 800eea4:	f000 f864 	bl	800ef70 <_free_r>
 800eea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeaa:	b111      	cbz	r1, 800eeb2 <_reclaim_reent+0x72>
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 f85f 	bl	800ef70 <_free_r>
 800eeb2:	69a3      	ldr	r3, [r4, #24]
 800eeb4:	b1e3      	cbz	r3, 800eef0 <_reclaim_reent+0xb0>
 800eeb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eeb8:	4620      	mov	r0, r4
 800eeba:	4798      	blx	r3
 800eebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eebe:	b1b9      	cbz	r1, 800eef0 <_reclaim_reent+0xb0>
 800eec0:	4620      	mov	r0, r4
 800eec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eec6:	f7ff bfad 	b.w	800ee24 <cleanup_glue>
 800eeca:	5949      	ldr	r1, [r1, r5]
 800eecc:	b941      	cbnz	r1, 800eee0 <_reclaim_reent+0xa0>
 800eece:	3504      	adds	r5, #4
 800eed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eed2:	2d80      	cmp	r5, #128	; 0x80
 800eed4:	68d9      	ldr	r1, [r3, #12]
 800eed6:	d1f8      	bne.n	800eeca <_reclaim_reent+0x8a>
 800eed8:	4620      	mov	r0, r4
 800eeda:	f000 f849 	bl	800ef70 <_free_r>
 800eede:	e7ba      	b.n	800ee56 <_reclaim_reent+0x16>
 800eee0:	680e      	ldr	r6, [r1, #0]
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 f844 	bl	800ef70 <_free_r>
 800eee8:	4631      	mov	r1, r6
 800eeea:	e7ef      	b.n	800eecc <_reclaim_reent+0x8c>
 800eeec:	2500      	movs	r5, #0
 800eeee:	e7ef      	b.n	800eed0 <_reclaim_reent+0x90>
 800eef0:	bd70      	pop	{r4, r5, r6, pc}
 800eef2:	bf00      	nop
 800eef4:	20000050 	.word	0x20000050

0800eef8 <_sbrk_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4d06      	ldr	r5, [pc, #24]	; (800ef14 <_sbrk_r+0x1c>)
 800eefc:	2300      	movs	r3, #0
 800eefe:	4604      	mov	r4, r0
 800ef00:	4608      	mov	r0, r1
 800ef02:	602b      	str	r3, [r5, #0]
 800ef04:	f7f6 f9b0 	bl	8005268 <_sbrk>
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	d102      	bne.n	800ef12 <_sbrk_r+0x1a>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	b103      	cbz	r3, 800ef12 <_sbrk_r+0x1a>
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	bd38      	pop	{r3, r4, r5, pc}
 800ef14:	20008c50 	.word	0x20008c50

0800ef18 <siprintf>:
 800ef18:	b40e      	push	{r1, r2, r3}
 800ef1a:	b500      	push	{lr}
 800ef1c:	b09c      	sub	sp, #112	; 0x70
 800ef1e:	ab1d      	add	r3, sp, #116	; 0x74
 800ef20:	9002      	str	r0, [sp, #8]
 800ef22:	9006      	str	r0, [sp, #24]
 800ef24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef28:	4809      	ldr	r0, [pc, #36]	; (800ef50 <siprintf+0x38>)
 800ef2a:	9107      	str	r1, [sp, #28]
 800ef2c:	9104      	str	r1, [sp, #16]
 800ef2e:	4909      	ldr	r1, [pc, #36]	; (800ef54 <siprintf+0x3c>)
 800ef30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef34:	9105      	str	r1, [sp, #20]
 800ef36:	6800      	ldr	r0, [r0, #0]
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	a902      	add	r1, sp, #8
 800ef3c:	f000 f8c4 	bl	800f0c8 <_svfiprintf_r>
 800ef40:	9b02      	ldr	r3, [sp, #8]
 800ef42:	2200      	movs	r2, #0
 800ef44:	701a      	strb	r2, [r3, #0]
 800ef46:	b01c      	add	sp, #112	; 0x70
 800ef48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef4c:	b003      	add	sp, #12
 800ef4e:	4770      	bx	lr
 800ef50:	20000050 	.word	0x20000050
 800ef54:	ffff0208 	.word	0xffff0208

0800ef58 <__malloc_lock>:
 800ef58:	4801      	ldr	r0, [pc, #4]	; (800ef60 <__malloc_lock+0x8>)
 800ef5a:	f7ff bef1 	b.w	800ed40 <__retarget_lock_acquire_recursive>
 800ef5e:	bf00      	nop
 800ef60:	20008c48 	.word	0x20008c48

0800ef64 <__malloc_unlock>:
 800ef64:	4801      	ldr	r0, [pc, #4]	; (800ef6c <__malloc_unlock+0x8>)
 800ef66:	f7ff beec 	b.w	800ed42 <__retarget_lock_release_recursive>
 800ef6a:	bf00      	nop
 800ef6c:	20008c48 	.word	0x20008c48

0800ef70 <_free_r>:
 800ef70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef72:	2900      	cmp	r1, #0
 800ef74:	d048      	beq.n	800f008 <_free_r+0x98>
 800ef76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef7a:	9001      	str	r0, [sp, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef82:	bfb8      	it	lt
 800ef84:	18e4      	addlt	r4, r4, r3
 800ef86:	f7ff ffe7 	bl	800ef58 <__malloc_lock>
 800ef8a:	4a20      	ldr	r2, [pc, #128]	; (800f00c <_free_r+0x9c>)
 800ef8c:	9801      	ldr	r0, [sp, #4]
 800ef8e:	6813      	ldr	r3, [r2, #0]
 800ef90:	4615      	mov	r5, r2
 800ef92:	b933      	cbnz	r3, 800efa2 <_free_r+0x32>
 800ef94:	6063      	str	r3, [r4, #4]
 800ef96:	6014      	str	r4, [r2, #0]
 800ef98:	b003      	add	sp, #12
 800ef9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef9e:	f7ff bfe1 	b.w	800ef64 <__malloc_unlock>
 800efa2:	42a3      	cmp	r3, r4
 800efa4:	d90b      	bls.n	800efbe <_free_r+0x4e>
 800efa6:	6821      	ldr	r1, [r4, #0]
 800efa8:	1862      	adds	r2, r4, r1
 800efaa:	4293      	cmp	r3, r2
 800efac:	bf04      	itt	eq
 800efae:	681a      	ldreq	r2, [r3, #0]
 800efb0:	685b      	ldreq	r3, [r3, #4]
 800efb2:	6063      	str	r3, [r4, #4]
 800efb4:	bf04      	itt	eq
 800efb6:	1852      	addeq	r2, r2, r1
 800efb8:	6022      	streq	r2, [r4, #0]
 800efba:	602c      	str	r4, [r5, #0]
 800efbc:	e7ec      	b.n	800ef98 <_free_r+0x28>
 800efbe:	461a      	mov	r2, r3
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	b10b      	cbz	r3, 800efc8 <_free_r+0x58>
 800efc4:	42a3      	cmp	r3, r4
 800efc6:	d9fa      	bls.n	800efbe <_free_r+0x4e>
 800efc8:	6811      	ldr	r1, [r2, #0]
 800efca:	1855      	adds	r5, r2, r1
 800efcc:	42a5      	cmp	r5, r4
 800efce:	d10b      	bne.n	800efe8 <_free_r+0x78>
 800efd0:	6824      	ldr	r4, [r4, #0]
 800efd2:	4421      	add	r1, r4
 800efd4:	1854      	adds	r4, r2, r1
 800efd6:	42a3      	cmp	r3, r4
 800efd8:	6011      	str	r1, [r2, #0]
 800efda:	d1dd      	bne.n	800ef98 <_free_r+0x28>
 800efdc:	681c      	ldr	r4, [r3, #0]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	6053      	str	r3, [r2, #4]
 800efe2:	4421      	add	r1, r4
 800efe4:	6011      	str	r1, [r2, #0]
 800efe6:	e7d7      	b.n	800ef98 <_free_r+0x28>
 800efe8:	d902      	bls.n	800eff0 <_free_r+0x80>
 800efea:	230c      	movs	r3, #12
 800efec:	6003      	str	r3, [r0, #0]
 800efee:	e7d3      	b.n	800ef98 <_free_r+0x28>
 800eff0:	6825      	ldr	r5, [r4, #0]
 800eff2:	1961      	adds	r1, r4, r5
 800eff4:	428b      	cmp	r3, r1
 800eff6:	bf04      	itt	eq
 800eff8:	6819      	ldreq	r1, [r3, #0]
 800effa:	685b      	ldreq	r3, [r3, #4]
 800effc:	6063      	str	r3, [r4, #4]
 800effe:	bf04      	itt	eq
 800f000:	1949      	addeq	r1, r1, r5
 800f002:	6021      	streq	r1, [r4, #0]
 800f004:	6054      	str	r4, [r2, #4]
 800f006:	e7c7      	b.n	800ef98 <_free_r+0x28>
 800f008:	b003      	add	sp, #12
 800f00a:	bd30      	pop	{r4, r5, pc}
 800f00c:	200084a8 	.word	0x200084a8

0800f010 <__ssputs_r>:
 800f010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f014:	688e      	ldr	r6, [r1, #8]
 800f016:	429e      	cmp	r6, r3
 800f018:	4682      	mov	sl, r0
 800f01a:	460c      	mov	r4, r1
 800f01c:	4690      	mov	r8, r2
 800f01e:	461f      	mov	r7, r3
 800f020:	d838      	bhi.n	800f094 <__ssputs_r+0x84>
 800f022:	898a      	ldrh	r2, [r1, #12]
 800f024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f028:	d032      	beq.n	800f090 <__ssputs_r+0x80>
 800f02a:	6825      	ldr	r5, [r4, #0]
 800f02c:	6909      	ldr	r1, [r1, #16]
 800f02e:	eba5 0901 	sub.w	r9, r5, r1
 800f032:	6965      	ldr	r5, [r4, #20]
 800f034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f03c:	3301      	adds	r3, #1
 800f03e:	444b      	add	r3, r9
 800f040:	106d      	asrs	r5, r5, #1
 800f042:	429d      	cmp	r5, r3
 800f044:	bf38      	it	cc
 800f046:	461d      	movcc	r5, r3
 800f048:	0553      	lsls	r3, r2, #21
 800f04a:	d531      	bpl.n	800f0b0 <__ssputs_r+0xa0>
 800f04c:	4629      	mov	r1, r5
 800f04e:	f7ff fe8f 	bl	800ed70 <_malloc_r>
 800f052:	4606      	mov	r6, r0
 800f054:	b950      	cbnz	r0, 800f06c <__ssputs_r+0x5c>
 800f056:	230c      	movs	r3, #12
 800f058:	f8ca 3000 	str.w	r3, [sl]
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f062:	81a3      	strh	r3, [r4, #12]
 800f064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06c:	6921      	ldr	r1, [r4, #16]
 800f06e:	464a      	mov	r2, r9
 800f070:	f7ff fe68 	bl	800ed44 <memcpy>
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f07e:	81a3      	strh	r3, [r4, #12]
 800f080:	6126      	str	r6, [r4, #16]
 800f082:	6165      	str	r5, [r4, #20]
 800f084:	444e      	add	r6, r9
 800f086:	eba5 0509 	sub.w	r5, r5, r9
 800f08a:	6026      	str	r6, [r4, #0]
 800f08c:	60a5      	str	r5, [r4, #8]
 800f08e:	463e      	mov	r6, r7
 800f090:	42be      	cmp	r6, r7
 800f092:	d900      	bls.n	800f096 <__ssputs_r+0x86>
 800f094:	463e      	mov	r6, r7
 800f096:	4632      	mov	r2, r6
 800f098:	6820      	ldr	r0, [r4, #0]
 800f09a:	4641      	mov	r1, r8
 800f09c:	f000 faa8 	bl	800f5f0 <memmove>
 800f0a0:	68a3      	ldr	r3, [r4, #8]
 800f0a2:	6822      	ldr	r2, [r4, #0]
 800f0a4:	1b9b      	subs	r3, r3, r6
 800f0a6:	4432      	add	r2, r6
 800f0a8:	60a3      	str	r3, [r4, #8]
 800f0aa:	6022      	str	r2, [r4, #0]
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	e7db      	b.n	800f068 <__ssputs_r+0x58>
 800f0b0:	462a      	mov	r2, r5
 800f0b2:	f000 fab7 	bl	800f624 <_realloc_r>
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d1e1      	bne.n	800f080 <__ssputs_r+0x70>
 800f0bc:	6921      	ldr	r1, [r4, #16]
 800f0be:	4650      	mov	r0, sl
 800f0c0:	f7ff ff56 	bl	800ef70 <_free_r>
 800f0c4:	e7c7      	b.n	800f056 <__ssputs_r+0x46>
	...

0800f0c8 <_svfiprintf_r>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	4698      	mov	r8, r3
 800f0ce:	898b      	ldrh	r3, [r1, #12]
 800f0d0:	061b      	lsls	r3, r3, #24
 800f0d2:	b09d      	sub	sp, #116	; 0x74
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	460d      	mov	r5, r1
 800f0d8:	4614      	mov	r4, r2
 800f0da:	d50e      	bpl.n	800f0fa <_svfiprintf_r+0x32>
 800f0dc:	690b      	ldr	r3, [r1, #16]
 800f0de:	b963      	cbnz	r3, 800f0fa <_svfiprintf_r+0x32>
 800f0e0:	2140      	movs	r1, #64	; 0x40
 800f0e2:	f7ff fe45 	bl	800ed70 <_malloc_r>
 800f0e6:	6028      	str	r0, [r5, #0]
 800f0e8:	6128      	str	r0, [r5, #16]
 800f0ea:	b920      	cbnz	r0, 800f0f6 <_svfiprintf_r+0x2e>
 800f0ec:	230c      	movs	r3, #12
 800f0ee:	603b      	str	r3, [r7, #0]
 800f0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0f4:	e0d1      	b.n	800f29a <_svfiprintf_r+0x1d2>
 800f0f6:	2340      	movs	r3, #64	; 0x40
 800f0f8:	616b      	str	r3, [r5, #20]
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f0fe:	2320      	movs	r3, #32
 800f100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f104:	f8cd 800c 	str.w	r8, [sp, #12]
 800f108:	2330      	movs	r3, #48	; 0x30
 800f10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2b4 <_svfiprintf_r+0x1ec>
 800f10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f112:	f04f 0901 	mov.w	r9, #1
 800f116:	4623      	mov	r3, r4
 800f118:	469a      	mov	sl, r3
 800f11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f11e:	b10a      	cbz	r2, 800f124 <_svfiprintf_r+0x5c>
 800f120:	2a25      	cmp	r2, #37	; 0x25
 800f122:	d1f9      	bne.n	800f118 <_svfiprintf_r+0x50>
 800f124:	ebba 0b04 	subs.w	fp, sl, r4
 800f128:	d00b      	beq.n	800f142 <_svfiprintf_r+0x7a>
 800f12a:	465b      	mov	r3, fp
 800f12c:	4622      	mov	r2, r4
 800f12e:	4629      	mov	r1, r5
 800f130:	4638      	mov	r0, r7
 800f132:	f7ff ff6d 	bl	800f010 <__ssputs_r>
 800f136:	3001      	adds	r0, #1
 800f138:	f000 80aa 	beq.w	800f290 <_svfiprintf_r+0x1c8>
 800f13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f13e:	445a      	add	r2, fp
 800f140:	9209      	str	r2, [sp, #36]	; 0x24
 800f142:	f89a 3000 	ldrb.w	r3, [sl]
 800f146:	2b00      	cmp	r3, #0
 800f148:	f000 80a2 	beq.w	800f290 <_svfiprintf_r+0x1c8>
 800f14c:	2300      	movs	r3, #0
 800f14e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f156:	f10a 0a01 	add.w	sl, sl, #1
 800f15a:	9304      	str	r3, [sp, #16]
 800f15c:	9307      	str	r3, [sp, #28]
 800f15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f162:	931a      	str	r3, [sp, #104]	; 0x68
 800f164:	4654      	mov	r4, sl
 800f166:	2205      	movs	r2, #5
 800f168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f16c:	4851      	ldr	r0, [pc, #324]	; (800f2b4 <_svfiprintf_r+0x1ec>)
 800f16e:	f7f1 f857 	bl	8000220 <memchr>
 800f172:	9a04      	ldr	r2, [sp, #16]
 800f174:	b9d8      	cbnz	r0, 800f1ae <_svfiprintf_r+0xe6>
 800f176:	06d0      	lsls	r0, r2, #27
 800f178:	bf44      	itt	mi
 800f17a:	2320      	movmi	r3, #32
 800f17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f180:	0711      	lsls	r1, r2, #28
 800f182:	bf44      	itt	mi
 800f184:	232b      	movmi	r3, #43	; 0x2b
 800f186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f18a:	f89a 3000 	ldrb.w	r3, [sl]
 800f18e:	2b2a      	cmp	r3, #42	; 0x2a
 800f190:	d015      	beq.n	800f1be <_svfiprintf_r+0xf6>
 800f192:	9a07      	ldr	r2, [sp, #28]
 800f194:	4654      	mov	r4, sl
 800f196:	2000      	movs	r0, #0
 800f198:	f04f 0c0a 	mov.w	ip, #10
 800f19c:	4621      	mov	r1, r4
 800f19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1a2:	3b30      	subs	r3, #48	; 0x30
 800f1a4:	2b09      	cmp	r3, #9
 800f1a6:	d94e      	bls.n	800f246 <_svfiprintf_r+0x17e>
 800f1a8:	b1b0      	cbz	r0, 800f1d8 <_svfiprintf_r+0x110>
 800f1aa:	9207      	str	r2, [sp, #28]
 800f1ac:	e014      	b.n	800f1d8 <_svfiprintf_r+0x110>
 800f1ae:	eba0 0308 	sub.w	r3, r0, r8
 800f1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	9304      	str	r3, [sp, #16]
 800f1ba:	46a2      	mov	sl, r4
 800f1bc:	e7d2      	b.n	800f164 <_svfiprintf_r+0x9c>
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	1d19      	adds	r1, r3, #4
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	9103      	str	r1, [sp, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	bfbb      	ittet	lt
 800f1ca:	425b      	neglt	r3, r3
 800f1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f1d0:	9307      	strge	r3, [sp, #28]
 800f1d2:	9307      	strlt	r3, [sp, #28]
 800f1d4:	bfb8      	it	lt
 800f1d6:	9204      	strlt	r2, [sp, #16]
 800f1d8:	7823      	ldrb	r3, [r4, #0]
 800f1da:	2b2e      	cmp	r3, #46	; 0x2e
 800f1dc:	d10c      	bne.n	800f1f8 <_svfiprintf_r+0x130>
 800f1de:	7863      	ldrb	r3, [r4, #1]
 800f1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e2:	d135      	bne.n	800f250 <_svfiprintf_r+0x188>
 800f1e4:	9b03      	ldr	r3, [sp, #12]
 800f1e6:	1d1a      	adds	r2, r3, #4
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	9203      	str	r2, [sp, #12]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bfb8      	it	lt
 800f1f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f1f4:	3402      	adds	r4, #2
 800f1f6:	9305      	str	r3, [sp, #20]
 800f1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2c4 <_svfiprintf_r+0x1fc>
 800f1fc:	7821      	ldrb	r1, [r4, #0]
 800f1fe:	2203      	movs	r2, #3
 800f200:	4650      	mov	r0, sl
 800f202:	f7f1 f80d 	bl	8000220 <memchr>
 800f206:	b140      	cbz	r0, 800f21a <_svfiprintf_r+0x152>
 800f208:	2340      	movs	r3, #64	; 0x40
 800f20a:	eba0 000a 	sub.w	r0, r0, sl
 800f20e:	fa03 f000 	lsl.w	r0, r3, r0
 800f212:	9b04      	ldr	r3, [sp, #16]
 800f214:	4303      	orrs	r3, r0
 800f216:	3401      	adds	r4, #1
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f21e:	4826      	ldr	r0, [pc, #152]	; (800f2b8 <_svfiprintf_r+0x1f0>)
 800f220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f224:	2206      	movs	r2, #6
 800f226:	f7f0 fffb 	bl	8000220 <memchr>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d038      	beq.n	800f2a0 <_svfiprintf_r+0x1d8>
 800f22e:	4b23      	ldr	r3, [pc, #140]	; (800f2bc <_svfiprintf_r+0x1f4>)
 800f230:	bb1b      	cbnz	r3, 800f27a <_svfiprintf_r+0x1b2>
 800f232:	9b03      	ldr	r3, [sp, #12]
 800f234:	3307      	adds	r3, #7
 800f236:	f023 0307 	bic.w	r3, r3, #7
 800f23a:	3308      	adds	r3, #8
 800f23c:	9303      	str	r3, [sp, #12]
 800f23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f240:	4433      	add	r3, r6
 800f242:	9309      	str	r3, [sp, #36]	; 0x24
 800f244:	e767      	b.n	800f116 <_svfiprintf_r+0x4e>
 800f246:	fb0c 3202 	mla	r2, ip, r2, r3
 800f24a:	460c      	mov	r4, r1
 800f24c:	2001      	movs	r0, #1
 800f24e:	e7a5      	b.n	800f19c <_svfiprintf_r+0xd4>
 800f250:	2300      	movs	r3, #0
 800f252:	3401      	adds	r4, #1
 800f254:	9305      	str	r3, [sp, #20]
 800f256:	4619      	mov	r1, r3
 800f258:	f04f 0c0a 	mov.w	ip, #10
 800f25c:	4620      	mov	r0, r4
 800f25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f262:	3a30      	subs	r2, #48	; 0x30
 800f264:	2a09      	cmp	r2, #9
 800f266:	d903      	bls.n	800f270 <_svfiprintf_r+0x1a8>
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d0c5      	beq.n	800f1f8 <_svfiprintf_r+0x130>
 800f26c:	9105      	str	r1, [sp, #20]
 800f26e:	e7c3      	b.n	800f1f8 <_svfiprintf_r+0x130>
 800f270:	fb0c 2101 	mla	r1, ip, r1, r2
 800f274:	4604      	mov	r4, r0
 800f276:	2301      	movs	r3, #1
 800f278:	e7f0      	b.n	800f25c <_svfiprintf_r+0x194>
 800f27a:	ab03      	add	r3, sp, #12
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	462a      	mov	r2, r5
 800f280:	4b0f      	ldr	r3, [pc, #60]	; (800f2c0 <_svfiprintf_r+0x1f8>)
 800f282:	a904      	add	r1, sp, #16
 800f284:	4638      	mov	r0, r7
 800f286:	f3af 8000 	nop.w
 800f28a:	1c42      	adds	r2, r0, #1
 800f28c:	4606      	mov	r6, r0
 800f28e:	d1d6      	bne.n	800f23e <_svfiprintf_r+0x176>
 800f290:	89ab      	ldrh	r3, [r5, #12]
 800f292:	065b      	lsls	r3, r3, #25
 800f294:	f53f af2c 	bmi.w	800f0f0 <_svfiprintf_r+0x28>
 800f298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f29a:	b01d      	add	sp, #116	; 0x74
 800f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a0:	ab03      	add	r3, sp, #12
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	462a      	mov	r2, r5
 800f2a6:	4b06      	ldr	r3, [pc, #24]	; (800f2c0 <_svfiprintf_r+0x1f8>)
 800f2a8:	a904      	add	r1, sp, #16
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	f000 f87a 	bl	800f3a4 <_printf_i>
 800f2b0:	e7eb      	b.n	800f28a <_svfiprintf_r+0x1c2>
 800f2b2:	bf00      	nop
 800f2b4:	08012758 	.word	0x08012758
 800f2b8:	08012762 	.word	0x08012762
 800f2bc:	00000000 	.word	0x00000000
 800f2c0:	0800f011 	.word	0x0800f011
 800f2c4:	0801275e 	.word	0x0801275e

0800f2c8 <_printf_common>:
 800f2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2cc:	4616      	mov	r6, r2
 800f2ce:	4699      	mov	r9, r3
 800f2d0:	688a      	ldr	r2, [r1, #8]
 800f2d2:	690b      	ldr	r3, [r1, #16]
 800f2d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	bfb8      	it	lt
 800f2dc:	4613      	movlt	r3, r2
 800f2de:	6033      	str	r3, [r6, #0]
 800f2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2e4:	4607      	mov	r7, r0
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	b10a      	cbz	r2, 800f2ee <_printf_common+0x26>
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	6033      	str	r3, [r6, #0]
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	0699      	lsls	r1, r3, #26
 800f2f2:	bf42      	ittt	mi
 800f2f4:	6833      	ldrmi	r3, [r6, #0]
 800f2f6:	3302      	addmi	r3, #2
 800f2f8:	6033      	strmi	r3, [r6, #0]
 800f2fa:	6825      	ldr	r5, [r4, #0]
 800f2fc:	f015 0506 	ands.w	r5, r5, #6
 800f300:	d106      	bne.n	800f310 <_printf_common+0x48>
 800f302:	f104 0a19 	add.w	sl, r4, #25
 800f306:	68e3      	ldr	r3, [r4, #12]
 800f308:	6832      	ldr	r2, [r6, #0]
 800f30a:	1a9b      	subs	r3, r3, r2
 800f30c:	42ab      	cmp	r3, r5
 800f30e:	dc26      	bgt.n	800f35e <_printf_common+0x96>
 800f310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f314:	1e13      	subs	r3, r2, #0
 800f316:	6822      	ldr	r2, [r4, #0]
 800f318:	bf18      	it	ne
 800f31a:	2301      	movne	r3, #1
 800f31c:	0692      	lsls	r2, r2, #26
 800f31e:	d42b      	bmi.n	800f378 <_printf_common+0xb0>
 800f320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f324:	4649      	mov	r1, r9
 800f326:	4638      	mov	r0, r7
 800f328:	47c0      	blx	r8
 800f32a:	3001      	adds	r0, #1
 800f32c:	d01e      	beq.n	800f36c <_printf_common+0xa4>
 800f32e:	6823      	ldr	r3, [r4, #0]
 800f330:	68e5      	ldr	r5, [r4, #12]
 800f332:	6832      	ldr	r2, [r6, #0]
 800f334:	f003 0306 	and.w	r3, r3, #6
 800f338:	2b04      	cmp	r3, #4
 800f33a:	bf08      	it	eq
 800f33c:	1aad      	subeq	r5, r5, r2
 800f33e:	68a3      	ldr	r3, [r4, #8]
 800f340:	6922      	ldr	r2, [r4, #16]
 800f342:	bf0c      	ite	eq
 800f344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f348:	2500      	movne	r5, #0
 800f34a:	4293      	cmp	r3, r2
 800f34c:	bfc4      	itt	gt
 800f34e:	1a9b      	subgt	r3, r3, r2
 800f350:	18ed      	addgt	r5, r5, r3
 800f352:	2600      	movs	r6, #0
 800f354:	341a      	adds	r4, #26
 800f356:	42b5      	cmp	r5, r6
 800f358:	d11a      	bne.n	800f390 <_printf_common+0xc8>
 800f35a:	2000      	movs	r0, #0
 800f35c:	e008      	b.n	800f370 <_printf_common+0xa8>
 800f35e:	2301      	movs	r3, #1
 800f360:	4652      	mov	r2, sl
 800f362:	4649      	mov	r1, r9
 800f364:	4638      	mov	r0, r7
 800f366:	47c0      	blx	r8
 800f368:	3001      	adds	r0, #1
 800f36a:	d103      	bne.n	800f374 <_printf_common+0xac>
 800f36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f374:	3501      	adds	r5, #1
 800f376:	e7c6      	b.n	800f306 <_printf_common+0x3e>
 800f378:	18e1      	adds	r1, r4, r3
 800f37a:	1c5a      	adds	r2, r3, #1
 800f37c:	2030      	movs	r0, #48	; 0x30
 800f37e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f382:	4422      	add	r2, r4
 800f384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f38c:	3302      	adds	r3, #2
 800f38e:	e7c7      	b.n	800f320 <_printf_common+0x58>
 800f390:	2301      	movs	r3, #1
 800f392:	4622      	mov	r2, r4
 800f394:	4649      	mov	r1, r9
 800f396:	4638      	mov	r0, r7
 800f398:	47c0      	blx	r8
 800f39a:	3001      	adds	r0, #1
 800f39c:	d0e6      	beq.n	800f36c <_printf_common+0xa4>
 800f39e:	3601      	adds	r6, #1
 800f3a0:	e7d9      	b.n	800f356 <_printf_common+0x8e>
	...

0800f3a4 <_printf_i>:
 800f3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	4691      	mov	r9, r2
 800f3ac:	7e27      	ldrb	r7, [r4, #24]
 800f3ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f3b0:	2f78      	cmp	r7, #120	; 0x78
 800f3b2:	4680      	mov	r8, r0
 800f3b4:	469a      	mov	sl, r3
 800f3b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3ba:	d807      	bhi.n	800f3cc <_printf_i+0x28>
 800f3bc:	2f62      	cmp	r7, #98	; 0x62
 800f3be:	d80a      	bhi.n	800f3d6 <_printf_i+0x32>
 800f3c0:	2f00      	cmp	r7, #0
 800f3c2:	f000 80d8 	beq.w	800f576 <_printf_i+0x1d2>
 800f3c6:	2f58      	cmp	r7, #88	; 0x58
 800f3c8:	f000 80a3 	beq.w	800f512 <_printf_i+0x16e>
 800f3cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f3d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3d4:	e03a      	b.n	800f44c <_printf_i+0xa8>
 800f3d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3da:	2b15      	cmp	r3, #21
 800f3dc:	d8f6      	bhi.n	800f3cc <_printf_i+0x28>
 800f3de:	a001      	add	r0, pc, #4	; (adr r0, 800f3e4 <_printf_i+0x40>)
 800f3e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f3e4:	0800f43d 	.word	0x0800f43d
 800f3e8:	0800f451 	.word	0x0800f451
 800f3ec:	0800f3cd 	.word	0x0800f3cd
 800f3f0:	0800f3cd 	.word	0x0800f3cd
 800f3f4:	0800f3cd 	.word	0x0800f3cd
 800f3f8:	0800f3cd 	.word	0x0800f3cd
 800f3fc:	0800f451 	.word	0x0800f451
 800f400:	0800f3cd 	.word	0x0800f3cd
 800f404:	0800f3cd 	.word	0x0800f3cd
 800f408:	0800f3cd 	.word	0x0800f3cd
 800f40c:	0800f3cd 	.word	0x0800f3cd
 800f410:	0800f55d 	.word	0x0800f55d
 800f414:	0800f481 	.word	0x0800f481
 800f418:	0800f53f 	.word	0x0800f53f
 800f41c:	0800f3cd 	.word	0x0800f3cd
 800f420:	0800f3cd 	.word	0x0800f3cd
 800f424:	0800f57f 	.word	0x0800f57f
 800f428:	0800f3cd 	.word	0x0800f3cd
 800f42c:	0800f481 	.word	0x0800f481
 800f430:	0800f3cd 	.word	0x0800f3cd
 800f434:	0800f3cd 	.word	0x0800f3cd
 800f438:	0800f547 	.word	0x0800f547
 800f43c:	680b      	ldr	r3, [r1, #0]
 800f43e:	1d1a      	adds	r2, r3, #4
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	600a      	str	r2, [r1, #0]
 800f444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f44c:	2301      	movs	r3, #1
 800f44e:	e0a3      	b.n	800f598 <_printf_i+0x1f4>
 800f450:	6825      	ldr	r5, [r4, #0]
 800f452:	6808      	ldr	r0, [r1, #0]
 800f454:	062e      	lsls	r6, r5, #24
 800f456:	f100 0304 	add.w	r3, r0, #4
 800f45a:	d50a      	bpl.n	800f472 <_printf_i+0xce>
 800f45c:	6805      	ldr	r5, [r0, #0]
 800f45e:	600b      	str	r3, [r1, #0]
 800f460:	2d00      	cmp	r5, #0
 800f462:	da03      	bge.n	800f46c <_printf_i+0xc8>
 800f464:	232d      	movs	r3, #45	; 0x2d
 800f466:	426d      	negs	r5, r5
 800f468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f46c:	485e      	ldr	r0, [pc, #376]	; (800f5e8 <_printf_i+0x244>)
 800f46e:	230a      	movs	r3, #10
 800f470:	e019      	b.n	800f4a6 <_printf_i+0x102>
 800f472:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f476:	6805      	ldr	r5, [r0, #0]
 800f478:	600b      	str	r3, [r1, #0]
 800f47a:	bf18      	it	ne
 800f47c:	b22d      	sxthne	r5, r5
 800f47e:	e7ef      	b.n	800f460 <_printf_i+0xbc>
 800f480:	680b      	ldr	r3, [r1, #0]
 800f482:	6825      	ldr	r5, [r4, #0]
 800f484:	1d18      	adds	r0, r3, #4
 800f486:	6008      	str	r0, [r1, #0]
 800f488:	0628      	lsls	r0, r5, #24
 800f48a:	d501      	bpl.n	800f490 <_printf_i+0xec>
 800f48c:	681d      	ldr	r5, [r3, #0]
 800f48e:	e002      	b.n	800f496 <_printf_i+0xf2>
 800f490:	0669      	lsls	r1, r5, #25
 800f492:	d5fb      	bpl.n	800f48c <_printf_i+0xe8>
 800f494:	881d      	ldrh	r5, [r3, #0]
 800f496:	4854      	ldr	r0, [pc, #336]	; (800f5e8 <_printf_i+0x244>)
 800f498:	2f6f      	cmp	r7, #111	; 0x6f
 800f49a:	bf0c      	ite	eq
 800f49c:	2308      	moveq	r3, #8
 800f49e:	230a      	movne	r3, #10
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4a6:	6866      	ldr	r6, [r4, #4]
 800f4a8:	60a6      	str	r6, [r4, #8]
 800f4aa:	2e00      	cmp	r6, #0
 800f4ac:	bfa2      	ittt	ge
 800f4ae:	6821      	ldrge	r1, [r4, #0]
 800f4b0:	f021 0104 	bicge.w	r1, r1, #4
 800f4b4:	6021      	strge	r1, [r4, #0]
 800f4b6:	b90d      	cbnz	r5, 800f4bc <_printf_i+0x118>
 800f4b8:	2e00      	cmp	r6, #0
 800f4ba:	d04d      	beq.n	800f558 <_printf_i+0x1b4>
 800f4bc:	4616      	mov	r6, r2
 800f4be:	fbb5 f1f3 	udiv	r1, r5, r3
 800f4c2:	fb03 5711 	mls	r7, r3, r1, r5
 800f4c6:	5dc7      	ldrb	r7, [r0, r7]
 800f4c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4cc:	462f      	mov	r7, r5
 800f4ce:	42bb      	cmp	r3, r7
 800f4d0:	460d      	mov	r5, r1
 800f4d2:	d9f4      	bls.n	800f4be <_printf_i+0x11a>
 800f4d4:	2b08      	cmp	r3, #8
 800f4d6:	d10b      	bne.n	800f4f0 <_printf_i+0x14c>
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	07df      	lsls	r7, r3, #31
 800f4dc:	d508      	bpl.n	800f4f0 <_printf_i+0x14c>
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	6861      	ldr	r1, [r4, #4]
 800f4e2:	4299      	cmp	r1, r3
 800f4e4:	bfde      	ittt	le
 800f4e6:	2330      	movle	r3, #48	; 0x30
 800f4e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f4f0:	1b92      	subs	r2, r2, r6
 800f4f2:	6122      	str	r2, [r4, #16]
 800f4f4:	f8cd a000 	str.w	sl, [sp]
 800f4f8:	464b      	mov	r3, r9
 800f4fa:	aa03      	add	r2, sp, #12
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	4640      	mov	r0, r8
 800f500:	f7ff fee2 	bl	800f2c8 <_printf_common>
 800f504:	3001      	adds	r0, #1
 800f506:	d14c      	bne.n	800f5a2 <_printf_i+0x1fe>
 800f508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f50c:	b004      	add	sp, #16
 800f50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f512:	4835      	ldr	r0, [pc, #212]	; (800f5e8 <_printf_i+0x244>)
 800f514:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	680e      	ldr	r6, [r1, #0]
 800f51c:	061f      	lsls	r7, r3, #24
 800f51e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f522:	600e      	str	r6, [r1, #0]
 800f524:	d514      	bpl.n	800f550 <_printf_i+0x1ac>
 800f526:	07d9      	lsls	r1, r3, #31
 800f528:	bf44      	itt	mi
 800f52a:	f043 0320 	orrmi.w	r3, r3, #32
 800f52e:	6023      	strmi	r3, [r4, #0]
 800f530:	b91d      	cbnz	r5, 800f53a <_printf_i+0x196>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	f023 0320 	bic.w	r3, r3, #32
 800f538:	6023      	str	r3, [r4, #0]
 800f53a:	2310      	movs	r3, #16
 800f53c:	e7b0      	b.n	800f4a0 <_printf_i+0xfc>
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	f043 0320 	orr.w	r3, r3, #32
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	2378      	movs	r3, #120	; 0x78
 800f548:	4828      	ldr	r0, [pc, #160]	; (800f5ec <_printf_i+0x248>)
 800f54a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f54e:	e7e3      	b.n	800f518 <_printf_i+0x174>
 800f550:	065e      	lsls	r6, r3, #25
 800f552:	bf48      	it	mi
 800f554:	b2ad      	uxthmi	r5, r5
 800f556:	e7e6      	b.n	800f526 <_printf_i+0x182>
 800f558:	4616      	mov	r6, r2
 800f55a:	e7bb      	b.n	800f4d4 <_printf_i+0x130>
 800f55c:	680b      	ldr	r3, [r1, #0]
 800f55e:	6826      	ldr	r6, [r4, #0]
 800f560:	6960      	ldr	r0, [r4, #20]
 800f562:	1d1d      	adds	r5, r3, #4
 800f564:	600d      	str	r5, [r1, #0]
 800f566:	0635      	lsls	r5, r6, #24
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	d501      	bpl.n	800f570 <_printf_i+0x1cc>
 800f56c:	6018      	str	r0, [r3, #0]
 800f56e:	e002      	b.n	800f576 <_printf_i+0x1d2>
 800f570:	0671      	lsls	r1, r6, #25
 800f572:	d5fb      	bpl.n	800f56c <_printf_i+0x1c8>
 800f574:	8018      	strh	r0, [r3, #0]
 800f576:	2300      	movs	r3, #0
 800f578:	6123      	str	r3, [r4, #16]
 800f57a:	4616      	mov	r6, r2
 800f57c:	e7ba      	b.n	800f4f4 <_printf_i+0x150>
 800f57e:	680b      	ldr	r3, [r1, #0]
 800f580:	1d1a      	adds	r2, r3, #4
 800f582:	600a      	str	r2, [r1, #0]
 800f584:	681e      	ldr	r6, [r3, #0]
 800f586:	6862      	ldr	r2, [r4, #4]
 800f588:	2100      	movs	r1, #0
 800f58a:	4630      	mov	r0, r6
 800f58c:	f7f0 fe48 	bl	8000220 <memchr>
 800f590:	b108      	cbz	r0, 800f596 <_printf_i+0x1f2>
 800f592:	1b80      	subs	r0, r0, r6
 800f594:	6060      	str	r0, [r4, #4]
 800f596:	6863      	ldr	r3, [r4, #4]
 800f598:	6123      	str	r3, [r4, #16]
 800f59a:	2300      	movs	r3, #0
 800f59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5a0:	e7a8      	b.n	800f4f4 <_printf_i+0x150>
 800f5a2:	6923      	ldr	r3, [r4, #16]
 800f5a4:	4632      	mov	r2, r6
 800f5a6:	4649      	mov	r1, r9
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	47d0      	blx	sl
 800f5ac:	3001      	adds	r0, #1
 800f5ae:	d0ab      	beq.n	800f508 <_printf_i+0x164>
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	079b      	lsls	r3, r3, #30
 800f5b4:	d413      	bmi.n	800f5de <_printf_i+0x23a>
 800f5b6:	68e0      	ldr	r0, [r4, #12]
 800f5b8:	9b03      	ldr	r3, [sp, #12]
 800f5ba:	4298      	cmp	r0, r3
 800f5bc:	bfb8      	it	lt
 800f5be:	4618      	movlt	r0, r3
 800f5c0:	e7a4      	b.n	800f50c <_printf_i+0x168>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	4632      	mov	r2, r6
 800f5c6:	4649      	mov	r1, r9
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	47d0      	blx	sl
 800f5cc:	3001      	adds	r0, #1
 800f5ce:	d09b      	beq.n	800f508 <_printf_i+0x164>
 800f5d0:	3501      	adds	r5, #1
 800f5d2:	68e3      	ldr	r3, [r4, #12]
 800f5d4:	9903      	ldr	r1, [sp, #12]
 800f5d6:	1a5b      	subs	r3, r3, r1
 800f5d8:	42ab      	cmp	r3, r5
 800f5da:	dcf2      	bgt.n	800f5c2 <_printf_i+0x21e>
 800f5dc:	e7eb      	b.n	800f5b6 <_printf_i+0x212>
 800f5de:	2500      	movs	r5, #0
 800f5e0:	f104 0619 	add.w	r6, r4, #25
 800f5e4:	e7f5      	b.n	800f5d2 <_printf_i+0x22e>
 800f5e6:	bf00      	nop
 800f5e8:	08012769 	.word	0x08012769
 800f5ec:	0801277a 	.word	0x0801277a

0800f5f0 <memmove>:
 800f5f0:	4288      	cmp	r0, r1
 800f5f2:	b510      	push	{r4, lr}
 800f5f4:	eb01 0402 	add.w	r4, r1, r2
 800f5f8:	d902      	bls.n	800f600 <memmove+0x10>
 800f5fa:	4284      	cmp	r4, r0
 800f5fc:	4623      	mov	r3, r4
 800f5fe:	d807      	bhi.n	800f610 <memmove+0x20>
 800f600:	1e43      	subs	r3, r0, #1
 800f602:	42a1      	cmp	r1, r4
 800f604:	d008      	beq.n	800f618 <memmove+0x28>
 800f606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f60a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f60e:	e7f8      	b.n	800f602 <memmove+0x12>
 800f610:	4402      	add	r2, r0
 800f612:	4601      	mov	r1, r0
 800f614:	428a      	cmp	r2, r1
 800f616:	d100      	bne.n	800f61a <memmove+0x2a>
 800f618:	bd10      	pop	{r4, pc}
 800f61a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f61e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f622:	e7f7      	b.n	800f614 <memmove+0x24>

0800f624 <_realloc_r>:
 800f624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f626:	4607      	mov	r7, r0
 800f628:	4614      	mov	r4, r2
 800f62a:	460e      	mov	r6, r1
 800f62c:	b921      	cbnz	r1, 800f638 <_realloc_r+0x14>
 800f62e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f632:	4611      	mov	r1, r2
 800f634:	f7ff bb9c 	b.w	800ed70 <_malloc_r>
 800f638:	b922      	cbnz	r2, 800f644 <_realloc_r+0x20>
 800f63a:	f7ff fc99 	bl	800ef70 <_free_r>
 800f63e:	4625      	mov	r5, r4
 800f640:	4628      	mov	r0, r5
 800f642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f644:	f000 f814 	bl	800f670 <_malloc_usable_size_r>
 800f648:	42a0      	cmp	r0, r4
 800f64a:	d20f      	bcs.n	800f66c <_realloc_r+0x48>
 800f64c:	4621      	mov	r1, r4
 800f64e:	4638      	mov	r0, r7
 800f650:	f7ff fb8e 	bl	800ed70 <_malloc_r>
 800f654:	4605      	mov	r5, r0
 800f656:	2800      	cmp	r0, #0
 800f658:	d0f2      	beq.n	800f640 <_realloc_r+0x1c>
 800f65a:	4631      	mov	r1, r6
 800f65c:	4622      	mov	r2, r4
 800f65e:	f7ff fb71 	bl	800ed44 <memcpy>
 800f662:	4631      	mov	r1, r6
 800f664:	4638      	mov	r0, r7
 800f666:	f7ff fc83 	bl	800ef70 <_free_r>
 800f66a:	e7e9      	b.n	800f640 <_realloc_r+0x1c>
 800f66c:	4635      	mov	r5, r6
 800f66e:	e7e7      	b.n	800f640 <_realloc_r+0x1c>

0800f670 <_malloc_usable_size_r>:
 800f670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f674:	1f18      	subs	r0, r3, #4
 800f676:	2b00      	cmp	r3, #0
 800f678:	bfbc      	itt	lt
 800f67a:	580b      	ldrlt	r3, [r1, r0]
 800f67c:	18c0      	addlt	r0, r0, r3
 800f67e:	4770      	bx	lr

0800f680 <_init>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	bf00      	nop
 800f684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f686:	bc08      	pop	{r3}
 800f688:	469e      	mov	lr, r3
 800f68a:	4770      	bx	lr

0800f68c <_fini>:
 800f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f68e:	bf00      	nop
 800f690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f692:	bc08      	pop	{r3}
 800f694:	469e      	mov	lr, r3
 800f696:	4770      	bx	lr
