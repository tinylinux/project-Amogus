
TP_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000c25d0  0800fba8  0800fba8  0001fba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d2178  080d2178  000f00b4  2**0
                  CONTENTS
  4 .ARM          00000008  080d2178  080d2178  000e2178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d2180  080d2180  000f00b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d2180  080d2180  000e2180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080d2184  080d2184  000e2184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080d2188  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008bd8  200000b4  080d223c  000f00b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008c8c  080d223c  000f8c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000f00b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035a36  00000000  00000000  000f00e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006410  00000000  00000000  00125b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027f0  00000000  00000000  0012bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002568  00000000  00000000  0012e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f0f6  00000000  00000000  00130c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f118  00000000  00000000  0015fd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011836f  00000000  00000000  0018ee96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002a7205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae70  00000000  00000000  002a7258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fb90 	.word	0x0800fb90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800fb90 	.word	0x0800fb90

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	20000184 	.word	0x20000184

080005ec <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <vApplicationGetTimerTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <vApplicationGetTimerTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	20000384 	.word	0x20000384
 800061c:	20000438 	.word	0x20000438

08000620 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800062a:	20c8      	movs	r0, #200	; 0xc8
 800062c:	f002 fd4e 	bl	80030cc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000630:	f000 fa7a 	bl	8000b28 <ft5336_I2C_InitializeIfRequired>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b084      	sub	sp, #16
 8000656:	af00      	add	r7, sp, #0
 8000658:	4603      	mov	r3, r0
 800065a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000664:	2300      	movs	r3, #0
 8000666:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000668:	f000 fa5e 	bl	8000b28 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e010      	b.n	8000694 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	21a8      	movs	r1, #168	; 0xa8
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fd09 	bl	8003090 <TS_IO_Read>
 800067e:	4603      	mov	r3, r0
 8000680:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b51      	cmp	r3, #81	; 0x51
 8000688:	d101      	bne.n	800068e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	3301      	adds	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d802      	bhi.n	80006a0 <ft5336_ReadID+0x4e>
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0e8      	beq.n	8000672 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80006a0:	7b7b      	ldrb	r3, [r7, #13]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b29b      	uxth	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fa44 	bl	8000b48 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f932 	bl	800092c <ft5336_TS_DisableIT>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fcd3 	bl	8003090 <TS_IO_Read>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d901      	bls.n	8000706 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <ft5336_TS_DetectTouch+0x50>)
 800070c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <ft5336_TS_DetectTouch+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	b2db      	uxtb	r3, r3
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000838 	.word	0x20000838

08000724 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000746:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 8000748:	789a      	ldrb	r2, [r3, #2]
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	429a      	cmp	r2, r3
 8000750:	f080 80cf 	bcs.w	80008f2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000754:	4b69      	ldr	r3, [pc, #420]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d871      	bhi.n	8000840 <ft5336_TS_GetXY+0x11c>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <ft5336_TS_GetXY+0x40>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	0800078d 	.word	0x0800078d
 8000768:	0800079f 	.word	0x0800079f
 800076c:	080007b1 	.word	0x080007b1
 8000770:	080007c3 	.word	0x080007c3
 8000774:	080007d5 	.word	0x080007d5
 8000778:	080007e7 	.word	0x080007e7
 800077c:	080007f9 	.word	0x080007f9
 8000780:	0800080b 	.word	0x0800080b
 8000784:	0800081d 	.word	0x0800081d
 8000788:	0800082f 	.word	0x0800082f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800078c:	2304      	movs	r3, #4
 800078e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000790:	2303      	movs	r3, #3
 8000792:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000794:	2306      	movs	r3, #6
 8000796:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000798:	2305      	movs	r3, #5
 800079a:	753b      	strb	r3, [r7, #20]
      break;
 800079c:	e051      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800079e:	230a      	movs	r3, #10
 80007a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80007a2:	2309      	movs	r3, #9
 80007a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80007a6:	230c      	movs	r3, #12
 80007a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007aa:	230b      	movs	r3, #11
 80007ac:	753b      	strb	r3, [r7, #20]
      break;
 80007ae:	e048      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007b0:	2310      	movs	r3, #16
 80007b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007b4:	230f      	movs	r3, #15
 80007b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b8:	2312      	movs	r3, #18
 80007ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007bc:	2311      	movs	r3, #17
 80007be:	753b      	strb	r3, [r7, #20]
      break;
 80007c0:	e03f      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007c2:	2316      	movs	r3, #22
 80007c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007c6:	2315      	movs	r3, #21
 80007c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007ca:	2318      	movs	r3, #24
 80007cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007ce:	2317      	movs	r3, #23
 80007d0:	753b      	strb	r3, [r7, #20]
      break;
 80007d2:	e036      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007d4:	231c      	movs	r3, #28
 80007d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d8:	231b      	movs	r3, #27
 80007da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007dc:	231e      	movs	r3, #30
 80007de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007e0:	231d      	movs	r3, #29
 80007e2:	753b      	strb	r3, [r7, #20]
      break;
 80007e4:	e02d      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007e6:	2322      	movs	r3, #34	; 0x22
 80007e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007ea:	2321      	movs	r3, #33	; 0x21
 80007ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007ee:	2324      	movs	r3, #36	; 0x24
 80007f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007f2:	2323      	movs	r3, #35	; 0x23
 80007f4:	753b      	strb	r3, [r7, #20]
      break;
 80007f6:	e024      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f8:	2328      	movs	r3, #40	; 0x28
 80007fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007fc:	2327      	movs	r3, #39	; 0x27
 80007fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000800:	232a      	movs	r3, #42	; 0x2a
 8000802:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000804:	2329      	movs	r3, #41	; 0x29
 8000806:	753b      	strb	r3, [r7, #20]
      break;
 8000808:	e01b      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800080a:	232e      	movs	r3, #46	; 0x2e
 800080c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000812:	2330      	movs	r3, #48	; 0x30
 8000814:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000816:	232f      	movs	r3, #47	; 0x2f
 8000818:	753b      	strb	r3, [r7, #20]
      break;
 800081a:	e012      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800081c:	2334      	movs	r3, #52	; 0x34
 800081e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000820:	2333      	movs	r3, #51	; 0x33
 8000822:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000824:	2336      	movs	r3, #54	; 0x36
 8000826:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000828:	2335      	movs	r3, #53	; 0x35
 800082a:	753b      	strb	r3, [r7, #20]
      break;
 800082c:	e009      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800082e:	233a      	movs	r3, #58	; 0x3a
 8000830:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000832:	2339      	movs	r3, #57	; 0x39
 8000834:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000836:	233c      	movs	r3, #60	; 0x3c
 8000838:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800083a:	233b      	movs	r3, #59	; 0x3b
 800083c:	753b      	strb	r3, [r7, #20]
      break;
 800083e:	e000      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000840:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	7dfa      	ldrb	r2, [r7, #23]
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fc20 	bl	8003090 <TS_IO_Read>
 8000850:	4603      	mov	r3, r0
 8000852:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800085c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	7dba      	ldrb	r2, [r7, #22]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fc12 	bl	8003090 <TS_IO_Read>
 800086c:	4603      	mov	r3, r0
 800086e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000870:	7cfb      	ldrb	r3, [r7, #19]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800088a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	7d7a      	ldrb	r2, [r7, #21]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fbf7 	bl	8003090 <TS_IO_Read>
 80008a2:	4603      	mov	r3, r0
 80008a4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008ae:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	7d3a      	ldrb	r2, [r7, #20]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fbe9 	bl	8003090 <TS_IO_Read>
 80008be:	4603      	mov	r3, r0
 80008c0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008c2:	7cfb      	ldrb	r3, [r7, #19]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008dc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 80008e8:	789b      	ldrb	r3, [r3, #2]
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 80008f0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000838 	.word	0x20000838
 8000900:	2000083c 	.word	0x2000083c

08000904 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	21a4      	movs	r1, #164	; 0xa4
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fb9c 	bl	800305c <TS_IO_Write>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	21a4      	movs	r1, #164	; 0xa4
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fb88 	bl	800305c <TS_IO_Write>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	6039      	str	r1, [r7, #0]
 800098c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2101      	movs	r1, #1
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fb79 	bl	8003090 <TS_IO_Read>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4603      	mov	r3, r0
 80009c2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <ft5336_TS_GetTouchInfo+0x158>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	461a      	mov	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	4293      	cmp	r3, r2
 80009de:	f080 8090 	bcs.w	8000b02 <ft5336_TS_GetTouchInfo+0x14e>
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	2b09      	cmp	r3, #9
 80009e6:	d85d      	bhi.n	8000aa4 <ft5336_TS_GetTouchInfo+0xf0>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <ft5336_TS_GetTouchInfo+0x3c>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a27 	.word	0x08000a27
 80009f8:	08000a35 	.word	0x08000a35
 80009fc:	08000a43 	.word	0x08000a43
 8000a00:	08000a51 	.word	0x08000a51
 8000a04:	08000a5f 	.word	0x08000a5f
 8000a08:	08000a6d 	.word	0x08000a6d
 8000a0c:	08000a7b 	.word	0x08000a7b
 8000a10:	08000a89 	.word	0x08000a89
 8000a14:	08000a97 	.word	0x08000a97
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a20:	2308      	movs	r3, #8
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e03f      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a26:	2309      	movs	r3, #9
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a2a:	230d      	movs	r3, #13
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a2e:	230e      	movs	r3, #14
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e038      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a34:	230f      	movs	r3, #15
 8000a36:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a38:	2313      	movs	r3, #19
 8000a3a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a3c:	2314      	movs	r3, #20
 8000a3e:	757b      	strb	r3, [r7, #21]
      break;
 8000a40:	e031      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a42:	2315      	movs	r3, #21
 8000a44:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a46:	2319      	movs	r3, #25
 8000a48:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a4a:	231a      	movs	r3, #26
 8000a4c:	757b      	strb	r3, [r7, #21]
      break;
 8000a4e:	e02a      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a50:	231b      	movs	r3, #27
 8000a52:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a54:	231f      	movs	r3, #31
 8000a56:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	757b      	strb	r3, [r7, #21]
      break;
 8000a5c:	e023      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a5e:	2321      	movs	r3, #33	; 0x21
 8000a60:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a62:	2325      	movs	r3, #37	; 0x25
 8000a64:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a66:	2326      	movs	r3, #38	; 0x26
 8000a68:	757b      	strb	r3, [r7, #21]
      break;
 8000a6a:	e01c      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a6c:	2327      	movs	r3, #39	; 0x27
 8000a6e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a70:	232b      	movs	r3, #43	; 0x2b
 8000a72:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a74:	232c      	movs	r3, #44	; 0x2c
 8000a76:	757b      	strb	r3, [r7, #21]
      break;
 8000a78:	e015      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a7a:	232d      	movs	r3, #45	; 0x2d
 8000a7c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a7e:	2331      	movs	r3, #49	; 0x31
 8000a80:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a82:	2332      	movs	r3, #50	; 0x32
 8000a84:	757b      	strb	r3, [r7, #21]
      break;
 8000a86:	e00e      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a88:	2333      	movs	r3, #51	; 0x33
 8000a8a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a8c:	2337      	movs	r3, #55	; 0x37
 8000a8e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a90:	2338      	movs	r3, #56	; 0x38
 8000a92:	757b      	strb	r3, [r7, #21]
      break;
 8000a94:	e007      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a96:	2339      	movs	r3, #57	; 0x39
 8000a98:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a9a:	233d      	movs	r3, #61	; 0x3d
 8000a9c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a9e:	233e      	movs	r3, #62	; 0x3e
 8000aa0:	757b      	strb	r3, [r7, #21]
      break;
 8000aa2:	e000      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000aa4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	7dfa      	ldrb	r2, [r7, #23]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 faee 	bl	8003090 <TS_IO_Read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab8:	7d3b      	ldrb	r3, [r7, #20]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	119b      	asrs	r3, r3, #6
 8000abe:	f003 0203 	and.w	r2, r3, #3
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	7dba      	ldrb	r2, [r7, #22]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fade 	bl	8003090 <TS_IO_Read>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad8:	7d3b      	ldrb	r3, [r7, #20]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	7d7a      	ldrb	r2, [r7, #21]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fad0 	bl	8003090 <TS_IO_Read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000af4:	7d3b      	ldrb	r3, [r7, #20]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	111b      	asrs	r3, r3, #4
 8000afa:	f003 0204 	and.w	r2, r3, #4
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000838 	.word	0x20000838

08000b10 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000838 	.word	0x20000838

08000b28 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b2c:	f7ff fff0 	bl	8000b10 <ft5336_Get_I2C_InitializedStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b36:	f002 fa87 	bl	8003048 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b3a:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
  }
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000838 	.word	0x20000838

08000b48 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b5b0      	push	{r4, r5, r7, lr}
 8000b66:	b0c0      	sub	sp, #256	; 0x100
 8000b68:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	stateEtat = JEU_ACCUEIL;
 8000b6a:	4bd7      	ldr	r3, [pc, #860]	; (8000ec8 <main+0x364>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
	score = 0;
 8000b70:	4bd6      	ldr	r3, [pc, #856]	; (8000ecc <main+0x368>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	801a      	strh	r2, [r3, #0]
	vitesse = 1;
 8000b76:	4bd6      	ldr	r3, [pc, #856]	; (8000ed0 <main+0x36c>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
	parties = 0;
 8000b7c:	4bd5      	ldr	r3, [pc, #852]	; (8000ed4 <main+0x370>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	char text[50]={};
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000b88:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b8c:	222e      	movs	r2, #46	; 0x2e
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00e fb6d 	bl	800f270 <memset>
	char textFromUart0[50]={};
 8000b96:	2300      	movs	r3, #0
 8000b98:	673b      	str	r3, [r7, #112]	; 0x70
 8000b9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b9e:	222e      	movs	r2, #46	; 0x2e
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00e fb64 	bl	800f270 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potlb,potl,potr,joystick_h, joystick_v;
	potlb = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	667b      	str	r3, [r7, #100]	; 0x64
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66bb      	str	r3, [r7, #104]	; 0x68

	RTC_TimeTypeDef* sT = {0};
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	RTC_DateTypeDef* sD = {0};
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	uint8_t BP_old,BP_new;
	uint8_t light = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f004 fde4 	bl	80057a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 fa47 	bl	800106c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bde:	f000 fab7 	bl	8001150 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f001 f84d 	bl	8001c80 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000be6:	f000 fb31 	bl	800124c <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000bea:	f000 fbab 	bl	8001344 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000bee:	f000 fff7 	bl	8001be0 <MX_FMC_Init>
  MX_I2C1_Init();
 8000bf2:	f000 fbd9 	bl	80013a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000bf6:	f000 fc17 	bl	8001428 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000bfa:	f000 fc55 	bl	80014a8 <MX_LTDC_Init>
  MX_RTC_Init();
 8000bfe:	f000 fce9 	bl	80015d4 <MX_RTC_Init>
  MX_SPI2_Init();
 8000c02:	f000 fd8d 	bl	8001720 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c06:	f000 fdc9 	bl	800179c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c0a:	f000 fe1b 	bl	8001844 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c0e:	f000 fe67 	bl	80018e0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000c12:	f000 feb3 	bl	800197c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000c16:	f000 feff 	bl	8001a18 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000c1a:	f000 ff81 	bl	8001b20 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000c1e:	f000 ffaf 	bl	8001b80 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000c22:	f000 fac1 	bl	80011a8 <MX_ADC1_Init>
  MX_DAC_Init();
 8000c26:	f000 fb63 	bl	80012f0 <MX_DAC_Init>
  MX_UART7_Init();
 8000c2a:	f000 ff49 	bl	8001ac0 <MX_UART7_Init>
  MX_RNG_Init();
 8000c2e:	f000 fcbd 	bl	80015ac <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000c32:	f002 fa57 	bl	80030e4 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000c36:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f002 faea 	bl	8003214 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000c40:	f002 fac0 	bl	80031c4 <BSP_LCD_GetXSize>
 8000c44:	4604      	mov	r4, r0
 8000c46:	f002 fad1 	bl	80031ec <BSP_LCD_GetYSize>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	fb03 f304 	mul.w	r3, r3, r4
 8000c50:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4619      	mov	r1, r3
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f002 fadb 	bl	8003214 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000c5e:	f003 f853 	bl	8003d08 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f002 fb36 	bl	80032d4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8000c68:	489b      	ldr	r0, [pc, #620]	; (8000ed8 <main+0x374>)
 8000c6a:	f002 fba5 	bl	80033b8 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(amongx,amongy,(uint8_t*)Amongus_bmp);
    //BSP_LCD_SelectLayer(1);
    //BSP_LCD_Clear(LCD_COLOR_RED);
    //BSP_LCD_DrawBitmap(250,120,(uint8_t*)Karim_bmp);
    BSP_LCD_SelectLayer(1);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f002 fb30 	bl	80032d4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8000c74:	4898      	ldr	r0, [pc, #608]	; (8000ed8 <main+0x374>)
 8000c76:	f002 fb9f 	bl	80033b8 <BSP_LCD_Clear>
    BSP_LCD_Clear(00);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f002 fb9c 	bl	80033b8 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 8000c80:	4896      	ldr	r0, [pc, #600]	; (8000edc <main+0x378>)
 8000c82:	f002 fb69 	bl	8003358 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8a:	f002 fb33 	bl	80032f4 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(00);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f002 fb48 	bl	8003324 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c94:	f002 fa96 	bl	80031c4 <BSP_LCD_GetXSize>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29c      	uxth	r4, r3
 8000c9c:	f002 faa6 	bl	80031ec <BSP_LCD_GetYSize>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f003 fc40 	bl	800452c <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutexScreen */
  osMutexDef(mutexScreen);
 8000cac:	2300      	movs	r3, #0
 8000cae:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  mutexScreenHandle = osMutexCreate(osMutex(mutexScreen));
 8000cb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f00b f9c9 	bl	800c050 <osMutexCreate>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a87      	ldr	r2, [pc, #540]	; (8000ee0 <main+0x37c>)
 8000cc2:	6013      	str	r3, [r2, #0]
  /* definition and creation of TimerAffichage */
  //osTimerDef(TimerAffichage, CallbackDisplay);
  //TimerAffichageHandle = osTimerCreate(osTimer(TimerAffichage), osTimerOnce, NULL);

  /* definition and creation of TimerLED */
  osTimerDef(TimerLED, CallbackLED);
 8000cc4:	4b87      	ldr	r3, [pc, #540]	; (8000ee4 <main+0x380>)
 8000cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8000cc8:	2300      	movs	r3, #0
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
  TimerLEDHandle = osTimerCreate(osTimer(TimerLED), osTimerPeriodic, NULL);
 8000ccc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00b f8e7 	bl	800bea8 <osTimerCreate>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a82      	ldr	r2, [pc, #520]	; (8000ee8 <main+0x384>)
 8000cde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  osTimerStart(TimerLEDHandle,1000);
 8000ce0:	4b81      	ldr	r3, [pc, #516]	; (8000ee8 <main+0x384>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00b f911 	bl	800bf10 <osTimerStart>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of swordsPos */
  osMessageQDef(swordsPos, 16, uint8_t);
 8000cee:	4b7f      	ldr	r3, [pc, #508]	; (8000eec <main+0x388>)
 8000cf0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  swordsPosHandle = osMessageCreate(osMessageQ(swordsPos), NULL);
 8000cfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f00b f9bd 	bl	800c080 <osMessageCreate>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a79      	ldr	r2, [pc, #484]	; (8000ef0 <main+0x38c>)
 8000d0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of collideFlag */
  osMessageQDef(collideFlag, 16, uint32_t);
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <main+0x390>)
 8000d0e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  collideFlagHandle = osMessageCreate(osMessageQ(collideFlag), NULL);
 8000d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00b f9ae 	bl	800c080 <osMessageCreate>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a74      	ldr	r2, [pc, #464]	; (8000ef8 <main+0x394>)
 8000d28:	6013      	str	r3, [r2, #0]

  /* definition and creation of scoreIncrem */
  osMessageQDef(scoreIncrem, 8, uint16_t);
 8000d2a:	4b74      	ldr	r3, [pc, #464]	; (8000efc <main+0x398>)
 8000d2c:	f107 0420 	add.w	r4, r7, #32
 8000d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  scoreIncremHandle = osMessageCreate(osMessageQ(scoreIncrem), NULL);
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00b f99f 	bl	800c080 <osMessageCreate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a6e      	ldr	r2, [pc, #440]	; (8000f00 <main+0x39c>)
 8000d46:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 1024);
 8000d48:	4b6e      	ldr	r3, [pc, #440]	; (8000f04 <main+0x3a0>)
 8000d4a:	1d3c      	adds	r4, r7, #4
 8000d4c:	461d      	mov	r5, r3
 8000d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00b f841 	bl	800bde6 <osThreadCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a68      	ldr	r2, [pc, #416]	; (8000f08 <main+0x3a4>)
 8000d68:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d6a:	f00b f835 	bl	800bdd8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	4866      	ldr	r0, [pc, #408]	; (8000f0c <main+0x3a8>)
 8000d74:	f006 fb34 	bl	80073e0 <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d80:	4863      	ldr	r0, [pc, #396]	; (8000f10 <main+0x3ac>)
 8000d82:	f006 fb45 	bl	8007410 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8a:	4860      	ldr	r0, [pc, #384]	; (8000f0c <main+0x3a8>)
 8000d8c:	f006 fb28 	bl	80073e0 <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	2120      	movs	r1, #32
 8000d96:	485f      	ldr	r0, [pc, #380]	; (8000f14 <main+0x3b0>)
 8000d98:	f006 fb3a 	bl	8007410 <HAL_GPIO_WritePin>
	  	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da0:	485a      	ldr	r0, [pc, #360]	; (8000f0c <main+0x3a8>)
 8000da2:	f006 fb1d 	bl	80073e0 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dae:	495a      	ldr	r1, [pc, #360]	; (8000f18 <main+0x3b4>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f00e fb39 	bl	800f428 <siprintf>
	  	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000db6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2005      	movs	r0, #5
 8000dbe:	f002 fc2f 	bl	8003620 <BSP_LCD_DisplayStringAtLine>

	  	  sConfig.Channel = ADC_CHANNEL_6;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000dc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4853      	ldr	r0, [pc, #332]	; (8000f1c <main+0x3b8>)
 8000dce:	f004 fee3 	bl	8005b98 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000dd2:	4852      	ldr	r0, [pc, #328]	; (8000f1c <main+0x3b8>)
 8000dd4:	f004 fd7a 	bl	80058cc <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dd8:	bf00      	nop
 8000dda:	2164      	movs	r1, #100	; 0x64
 8000ddc:	484f      	ldr	r0, [pc, #316]	; (8000f1c <main+0x3b8>)
 8000dde:	f004 fe43 	bl	8005a68 <HAL_ADC_PollForConversion>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f8      	bne.n	8000dda <main+0x276>
	  	  potr = HAL_ADC_GetValue(&hadc3);
 8000de8:	484c      	ldr	r0, [pc, #304]	; (8000f1c <main+0x3b8>)
 8000dea:	f004 fec8 	bl	8005b7e <HAL_ADC_GetValue>
 8000dee:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

	  	  sConfig.Channel = ADC_CHANNEL_7;
 8000df2:	2307      	movs	r3, #7
 8000df4:	663b      	str	r3, [r7, #96]	; 0x60
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000df6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4847      	ldr	r0, [pc, #284]	; (8000f1c <main+0x3b8>)
 8000dfe:	f004 fecb 	bl	8005b98 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000e02:	4846      	ldr	r0, [pc, #280]	; (8000f1c <main+0x3b8>)
 8000e04:	f004 fd62 	bl	80058cc <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000e08:	bf00      	nop
 8000e0a:	2164      	movs	r1, #100	; 0x64
 8000e0c:	4843      	ldr	r0, [pc, #268]	; (8000f1c <main+0x3b8>)
 8000e0e:	f004 fe2b 	bl	8005a68 <HAL_ADC_PollForConversion>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f8      	bne.n	8000e0a <main+0x2a6>
	  	  potl = HAL_ADC_GetValue(&hadc3);
 8000e18:	4840      	ldr	r0, [pc, #256]	; (8000f1c <main+0x3b8>)
 8000e1a:	f004 feb0 	bl	8005b7e <HAL_ADC_GetValue>
 8000e1e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

	  	  sConfig.Channel = ADC_CHANNEL_8;
 8000e22:	2308      	movs	r3, #8
 8000e24:	663b      	str	r3, [r7, #96]	; 0x60
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000e26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	483b      	ldr	r0, [pc, #236]	; (8000f1c <main+0x3b8>)
 8000e2e:	f004 feb3 	bl	8005b98 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000e32:	483a      	ldr	r0, [pc, #232]	; (8000f1c <main+0x3b8>)
 8000e34:	f004 fd4a 	bl	80058cc <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000e38:	bf00      	nop
 8000e3a:	2164      	movs	r1, #100	; 0x64
 8000e3c:	4837      	ldr	r0, [pc, #220]	; (8000f1c <main+0x3b8>)
 8000e3e:	f004 fe13 	bl	8005a68 <HAL_ADC_PollForConversion>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f8      	bne.n	8000e3a <main+0x2d6>
	  	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e48:	4834      	ldr	r0, [pc, #208]	; (8000f1c <main+0x3b8>)
 8000e4a:	f004 fe98 	bl	8005b7e <HAL_ADC_GetValue>
 8000e4e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	  	  HAL_ADC_Start(&hadc1);
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <main+0x3bc>)
 8000e54:	f004 fd3a 	bl	80058cc <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e58:	bf00      	nop
 8000e5a:	2164      	movs	r1, #100	; 0x64
 8000e5c:	4830      	ldr	r0, [pc, #192]	; (8000f20 <main+0x3bc>)
 8000e5e:	f004 fe03 	bl	8005a68 <HAL_ADC_PollForConversion>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f8      	bne.n	8000e5a <main+0x2f6>
	  	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e68:	482d      	ldr	r0, [pc, #180]	; (8000f20 <main+0x3bc>)
 8000e6a:	f004 fe88 	bl	8005b7e <HAL_ADC_GetValue>
 8000e6e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

	  	  HAL_UART_Receive(&huart1, textFromUart0, 50, 10);
 8000e72:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000e76:	230a      	movs	r3, #10
 8000e78:	2232      	movs	r2, #50	; 0x32
 8000e7a:	482a      	ldr	r0, [pc, #168]	; (8000f24 <main+0x3c0>)
 8000e7c:	f00a f9b3 	bl	800b1e6 <HAL_UART_Receive>
	  	  BSP_LCD_DisplayStringAtLine(15,(uint8_t*) textFromUart0);
 8000e80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e84:	4619      	mov	r1, r3
 8000e86:	200f      	movs	r0, #15
 8000e88:	f002 fbca 	bl	8003620 <BSP_LCD_DisplayStringAtLine>

	  	  if ((potl > potlb + 50) || (potlb > potl + 50))
 8000e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e90:	3332      	adds	r3, #50	; 0x32
 8000e92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d806      	bhi.n	8000ea8 <main+0x344>
 8000e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e9e:	3332      	adds	r3, #50	; 0x32
 8000ea0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d94b      	bls.n	8000f40 <main+0x3dc>
	  	  {
	  		sprintf(text, "Potentio de Goche : %u\r\n", potl);
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eac:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000eb0:	491d      	ldr	r1, [pc, #116]	; (8000f28 <main+0x3c4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00e fab8 	bl	800f428 <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)text, strlen(text), 10);
 8000eb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f9a7 	bl	8000210 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	e031      	b.n	8000f2c <main+0x3c8>
 8000ec8:	20008ad4 	.word	0x20008ad4
 8000ecc:	2000880c 	.word	0x2000880c
 8000ed0:	200089bc 	.word	0x200089bc
 8000ed4:	20008535 	.word	0x20008535
 8000ed8:	ffffde00 	.word	0xffffde00
 8000edc:	20000034 	.word	0x20000034
 8000ee0:	20008670 	.word	0x20008670
 8000ee4:	08002d4d 	.word	0x08002d4d
 8000ee8:	20008530 	.word	0x20008530
 8000eec:	0800fc68 	.word	0x0800fc68
 8000ef0:	200084dc 	.word	0x200084dc
 8000ef4:	0800fc78 	.word	0x0800fc78
 8000ef8:	200086c4 	.word	0x200086c4
 8000efc:	0800fc88 	.word	0x0800fc88
 8000f00:	200089a8 	.word	0x200089a8
 8000f04:	0800fc98 	.word	0x0800fc98
 8000f08:	200084e0 	.word	0x200084e0
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40021c00 	.word	0x40021c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	0800fbfc 	.word	0x0800fbfc
 8000f1c:	2000885c 	.word	0x2000885c
 8000f20:	20008810 	.word	0x20008810
 8000f24:	200088a4 	.word	0x200088a4
 8000f28:	0800fc08 	.word	0x0800fc08
 8000f2c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000f30:	230a      	movs	r3, #10
 8000f32:	4847      	ldr	r0, [pc, #284]	; (8001050 <main+0x4ec>)
 8000f34:	f00a f8c4 	bl	800b0c0 <HAL_UART_Transmit>
	  		potlb = potl;
 8000f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  	  }

	  	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000f40:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f54:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f58:	493e      	ldr	r1, [pc, #248]	; (8001054 <main+0x4f0>)
 8000f5a:	f00e fa65 	bl	800f428 <siprintf>
	  	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000f5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f62:	4619      	mov	r1, r3
 8000f64:	2009      	movs	r0, #9
 8000f66:	f002 fb5b 	bl	8003620 <BSP_LCD_DisplayStringAtLine>

	  	HAL_RTC_GetDate(&hrtc, sD, RTC_FORMAT_BCD);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000f70:	4839      	ldr	r0, [pc, #228]	; (8001058 <main+0x4f4>)
 8000f72:	f009 f805 	bl	8009f80 <HAL_RTC_GetDate>
	  	  HAL_RTC_GetTime(&hrtc, sT, RTC_FORMAT_BCD);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8000f7c:	4836      	ldr	r0, [pc, #216]	; (8001058 <main+0x4f4>)
 8000f7e:	f008 fef9 	bl	8009d74 <HAL_RTC_GetTime>


	  	sprintf(text,"il est %2u:%2u:%2u",sT->Hours,sT->Minutes,sT->Seconds);
 8000f82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	492e      	ldr	r1, [pc, #184]	; (800105c <main+0x4f8>)
 8000fa2:	f00e fa41 	bl	800f428 <siprintf>
	  	BSP_LCD_DisplayStringAtLine(11,(uint8_t*) text);
 8000fa6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000faa:	4619      	mov	r1, r3
 8000fac:	200b      	movs	r0, #11
 8000fae:	f002 fb37 	bl	8003620 <BSP_LCD_DisplayStringAtLine>

	  	if(decompte > 0)
 8000fb2:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <main+0x460>
	  	{
	  		decompte--;
 8000fba:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	  	}
	  	  BSP_TS_GetState(&TS_State);
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <main+0x4fc>)
 8000fc6:	f003 faf1 	bl	80045ac <BSP_TS_GetState>
	  	  if(TS_State.touchDetected){
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <main+0x4fc>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f43f aecd 	beq.w	8000d6e <main+0x20a>
	  		  if(TS_State.touchX[0] < 110 && TS_State.touchY[0] < 110)
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <main+0x4fc>)
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	2b6d      	cmp	r3, #109	; 0x6d
 8000fda:	d82f      	bhi.n	800103c <main+0x4d8>
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <main+0x4fc>)
 8000fde:	899b      	ldrh	r3, [r3, #12]
 8000fe0:	2b6d      	cmp	r3, #109	; 0x6d
 8000fe2:	d82b      	bhi.n	800103c <main+0x4d8>
	  		  {
	  			  if (decompte == 0){
 8000fe4:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d12f      	bne.n	800104c <main+0x4e8>
					  light = (1-light);
 8000fec:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8000ff0:	f1c3 0301 	rsb	r3, r3, #1
 8000ff4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
					  HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,light);
 8000ff8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	4818      	ldr	r0, [pc, #96]	; (8001064 <main+0x500>)
 8001004:	f006 fa04 	bl	8007410 <HAL_GPIO_WritePin>
					  if (light)
 8001008:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <main+0x4b6>
					  {
						BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001014:	f002 f96e 	bl	80032f4 <BSP_LCD_SetTextColor>
 8001018:	e002      	b.n	8001020 <main+0x4bc>
					  }
					  else{
						BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <main+0x504>)
 800101c:	f002 f96a 	bl	80032f4 <BSP_LCD_SetTextColor>
					  }
					  BSP_LCD_FillRect(0,0,50,50);
 8001020:	2332      	movs	r3, #50	; 0x32
 8001022:	2232      	movs	r2, #50	; 0x32
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f002 fd54 	bl	8003ad4 <BSP_LCD_FillRect>
					  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001030:	f002 f960 	bl	80032f4 <BSP_LCD_SetTextColor>
					  decompte = 300;
 8001034:	232c      	movs	r3, #44	; 0x2c
 8001036:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	  			  if (decompte == 0){
 800103a:	e007      	b.n	800104c <main+0x4e8>
	  			  }
	  		  } else {
	  			BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <main+0x4fc>)
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <main+0x4fc>)
 8001042:	8991      	ldrh	r1, [r2, #12]
 8001044:	2204      	movs	r2, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fdbe 	bl	8003bc8 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 800104c:	e68f      	b.n	8000d6e <main+0x20a>
 800104e:	bf00      	nop
 8001050:	200088a4 	.word	0x200088a4
 8001054:	0800fc24 	.word	0x0800fc24
 8001058:	2000893c 	.word	0x2000893c
 800105c:	0800fc54 	.word	0x0800fc54
 8001060:	20000840 	.word	0x20000840
 8001064:	40021c00 	.word	0x40021c00
 8001068:	ffff0000 	.word	0xffff0000

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f00e f8f8 	bl	800f270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001090:	f007 fba4 	bl	80087dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <SystemClock_Config+0xdc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <SystemClock_Config+0xdc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <SystemClock_Config+0xdc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xe0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <SystemClock_Config+0xe0>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <SystemClock_Config+0xe0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010c4:	2309      	movs	r3, #9
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010dc:	2319      	movs	r3, #25
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80010e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010ea:	2309      	movs	r3, #9
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f007 fbd2 	bl	800889c <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010fe:	f001 fe47 	bl	8002d90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001102:	f007 fb7b 	bl	80087fc <HAL_PWREx_EnableOverDrive>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800110c:	f001 fe40 	bl	8002d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2106      	movs	r1, #6
 800112e:	4618      	mov	r0, r3
 8001130:	f007 fe58 	bl	8008de4 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800113a:	f001 fe29 	bl	8002d90 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	; 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0a2      	sub	sp, #136	; 0x88
 8001154:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2284      	movs	r2, #132	; 0x84
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f00e f887 	bl	800f270 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <PeriphCommonClock_Config+0x54>)
 8001164:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001166:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800116a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800116c:	2305      	movs	r3, #5
 800116e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001174:	2303      	movs	r3, #3
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800117c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f831 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8001198:	f001 fdfa 	bl	8002d90 <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3788      	adds	r7, #136	; 0x88
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	00200008 	.word	0x00200008

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_ADC1_Init+0x98>)
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_ADC1_Init+0x98>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <MX_ADC1_Init+0xa0>)
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_ADC1_Init+0x98>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_ADC1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_ADC1_Init+0x98>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_ADC1_Init+0x98>)
 800120a:	f004 fb1b 	bl	8005844 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001214:	f001 fdbc 	bl	8002d90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_ADC1_Init+0x98>)
 800122a:	f004 fcb5 	bl	8005b98 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001234:	f001 fdac 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20008810 	.word	0x20008810
 8001244:	40012000 	.word	0x40012000
 8001248:	0f000001 	.word	0x0f000001

0800124c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_ADC3_Init+0x9c>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_ADC3_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_ADC3_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_ADC3_Init+0x98>)
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <MX_ADC3_Init+0xa0>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_ADC3_Init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012ae:	f004 fac9 	bl	8005844 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80012b8:	f001 fd6a 	bl	8002d90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012bc:	2306      	movs	r3, #6
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012ce:	f004 fc63 	bl	8005b98 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012d8:	f001 fd5a 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000885c 	.word	0x2000885c
 80012e8:	40012200 	.word	0x40012200
 80012ec:	0f000001 	.word	0x0f000001

080012f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_DAC_Init+0x4c>)
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <MX_DAC_Init+0x50>)
 8001302:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_DAC_Init+0x4c>)
 8001306:	f004 ff79 	bl	80061fc <HAL_DAC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001310:	f001 fd3e 	bl	8002d90 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_DAC_Init+0x4c>)
 8001324:	f004 fff0 	bl	8006308 <HAL_DAC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800132e:	f001 fd2f 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20008928 	.word	0x20008928
 8001340:	40007400 	.word	0x40007400

08001344 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <MX_DMA2D_Init+0x60>)
 800134c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800137a:	f005 f9dd 	bl	8006738 <HAL_DMA2D_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001384:	f001 fd04 	bl	8002d90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001388:	2101      	movs	r1, #1
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800138c:	f005 fc42 	bl	8006c14 <HAL_DMA2D_ConfigLayer>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001396:	f001 fcfb 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20008a48 	.word	0x20008a48
 80013a4:	4002b000 	.word	0x4002b000

080013a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_I2C1_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_I2C1_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_I2C1_Init+0x74>)
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <MX_I2C1_Init+0x7c>)
 80013b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_I2C1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_I2C1_Init+0x74>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_I2C1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_I2C1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <MX_I2C1_Init+0x74>)
 80013e4:	f006 f848 	bl	8007478 <HAL_I2C_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ee:	f001 fccf 	bl	8002d90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <MX_I2C1_Init+0x74>)
 80013f6:	f006 fde1 	bl	8007fbc <HAL_I2CEx_ConfigAnalogFilter>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001400:	f001 fcc6 	bl	8002d90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_I2C1_Init+0x74>)
 8001408:	f006 fe23 	bl	8008052 <HAL_I2CEx_ConfigDigitalFilter>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001412:	f001 fcbd 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20008674 	.word	0x20008674
 8001420:	40005400 	.word	0x40005400
 8001424:	00c0eaff 	.word	0x00c0eaff

08001428 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_I2C3_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <MX_I2C3_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_I2C3_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <MX_I2C3_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_I2C3_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_I2C3_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_I2C3_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_I2C3_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_I2C3_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_I2C3_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_I2C3_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_I2C3_Init+0x74>)
 8001464:	f006 f808 	bl	8007478 <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800146e:	f001 fc8f 	bl	8002d90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <MX_I2C3_Init+0x74>)
 8001476:	f006 fda1 	bl	8007fbc <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001480:	f001 fc86 	bl	8002d90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_I2C3_Init+0x74>)
 8001488:	f006 fde3 	bl	8008052 <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001492:	f001 fc7d 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200084e4 	.word	0x200084e4
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	00c0eaff 	.word	0x00c0eaff

080014a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2234      	movs	r2, #52	; 0x34
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f00d fedb 	bl	800f270 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014bc:	4a3a      	ldr	r2, [pc, #232]	; (80015a8 <MX_LTDC_Init+0x100>)
 80014be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014e0:	2209      	movs	r2, #9
 80014e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014e6:	2235      	movs	r2, #53	; 0x35
 80014e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014ec:	220b      	movs	r2, #11
 80014ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014f2:	f240 2215 	movw	r2, #533	; 0x215
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014fa:	f240 121b 	movw	r2, #283	; 0x11b
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001502:	f240 2235 	movw	r2, #565	; 0x235
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800150a:	f240 121d 	movw	r2, #285	; 0x11d
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800152a:	f006 fddf 	bl	80080ec <HAL_LTDC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001534:	f001 fc2c 	bl	8002d90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800153c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001540:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001546:	f44f 7388 	mov.w	r3, #272	; 0x110
 800154a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001558:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800155c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001562:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001568:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800156e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800158e:	f006 ff3f 	bl	8008410 <HAL_LTDC_ConfigLayer>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001598:	f001 fbfa 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20008764 	.word	0x20008764
 80015a8:	40016800 	.word	0x40016800

080015ac <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_RNG_Init+0x20>)
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <MX_RNG_Init+0x24>)
 80015b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_RNG_Init+0x20>)
 80015b8:	f008 fa0c 	bl	80099d4 <HAL_RNG_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015c2:	f001 fbe5 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200089ac 	.word	0x200089ac
 80015d0:	50060800 	.word	0x50060800

080015d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b092      	sub	sp, #72	; 0x48
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	222c      	movs	r2, #44	; 0x2c
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00d fe3a 	bl	800f270 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015fc:	4b46      	ldr	r3, [pc, #280]	; (8001718 <MX_RTC_Init+0x144>)
 80015fe:	4a47      	ldr	r2, [pc, #284]	; (800171c <MX_RTC_Init+0x148>)
 8001600:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001602:	4b45      	ldr	r3, [pc, #276]	; (8001718 <MX_RTC_Init+0x144>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <MX_RTC_Init+0x144>)
 800160a:	227f      	movs	r2, #127	; 0x7f
 800160c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800160e:	4b42      	ldr	r3, [pc, #264]	; (8001718 <MX_RTC_Init+0x144>)
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <MX_RTC_Init+0x144>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <MX_RTC_Init+0x144>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <MX_RTC_Init+0x144>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001626:	483c      	ldr	r0, [pc, #240]	; (8001718 <MX_RTC_Init+0x144>)
 8001628:	f008 fa54 	bl	8009ad4 <HAL_RTC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001632:	f001 fbad 	bl	8002d90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001654:	2201      	movs	r2, #1
 8001656:	4619      	mov	r1, r3
 8001658:	482f      	ldr	r0, [pc, #188]	; (8001718 <MX_RTC_Init+0x144>)
 800165a:	f008 facd 	bl	8009bf8 <HAL_RTC_SetTime>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001664:	f001 fb94 	bl	8002d90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001684:	2201      	movs	r2, #1
 8001686:	4619      	mov	r1, r3
 8001688:	4823      	ldr	r0, [pc, #140]	; (8001718 <MX_RTC_Init+0x144>)
 800168a:	f008 fbd1 	bl	8009e30 <HAL_RTC_SetDate>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001694:	f001 fb7c 	bl	8002d90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001698:	2300      	movs	r3, #0
 800169a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800169c:	2300      	movs	r3, #0
 800169e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80016c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	2201      	movs	r2, #1
 80016cc:	4619      	mov	r1, r3
 80016ce:	4812      	ldr	r0, [pc, #72]	; (8001718 <MX_RTC_Init+0x144>)
 80016d0:	f008 fca6 	bl	800a020 <HAL_RTC_SetAlarm>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80016da:	f001 fb59 	bl	8002d90 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80016de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	480b      	ldr	r0, [pc, #44]	; (8001718 <MX_RTC_Init+0x144>)
 80016ec:	f008 fc98 	bl	800a020 <HAL_RTC_SetAlarm>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80016f6:	f001 fb4b 	bl	8002d90 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80016fa:	2202      	movs	r2, #2
 80016fc:	2100      	movs	r1, #0
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_RTC_Init+0x144>)
 8001700:	f008 fe36 	bl	800a370 <HAL_RTCEx_SetTimeStamp>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800170a:	f001 fb41 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3748      	adds	r7, #72	; 0x48
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000893c 	.word	0x2000893c
 800171c:	40002800 	.word	0x40002800

08001720 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_SPI2_Init+0x74>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <MX_SPI2_Init+0x78>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_SPI2_Init+0x74>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_SPI2_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_SPI2_Init+0x74>)
 800173a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800173e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_SPI2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_SPI2_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_SPI2_Init+0x74>)
 800174e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001752:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_SPI2_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_SPI2_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_SPI2_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_SPI2_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_SPI2_Init+0x74>)
 800176e:	2207      	movs	r2, #7
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_SPI2_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_SPI2_Init+0x74>)
 800177a:	2208      	movs	r2, #8
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_SPI2_Init+0x74>)
 8001780:	f008 fedd 	bl	800a53e <HAL_SPI_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800178a:	f001 fb01 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20008538 	.word	0x20008538
 8001798:	40003800 	.word	0x40003800

0800179c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <MX_TIM1_Init+0xa0>)
 80017bc:	4a20      	ldr	r2, [pc, #128]	; (8001840 <MX_TIM1_Init+0xa4>)
 80017be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_TIM1_Init+0xa0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_TIM1_Init+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_TIM1_Init+0xa0>)
 80017ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_TIM1_Init+0xa0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_TIM1_Init+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_TIM1_Init+0xa0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <MX_TIM1_Init+0xa0>)
 80017e8:	f008 ff54 	bl	800a694 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80017f2:	f001 facd 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_TIM1_Init+0xa0>)
 8001804:	f009 f936 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800180e:	f001 fabf 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_TIM1_Init+0xa0>)
 8001824:	f009 fb52 	bl	800aecc <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800182e:	f001 faaf 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000895c 	.word	0x2000895c
 8001840:	40010000 	.word	0x40010000

08001844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM2_Init+0x98>)
 8001864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM2_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM2_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM2_Init+0x98>)
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_TIM2_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_TIM2_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_TIM2_Init+0x98>)
 800188c:	f008 ff02 	bl	800a694 <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001896:	f001 fa7b 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM2_Init+0x98>)
 80018a8:	f009 f8e4 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018b2:	f001 fa6d 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_TIM2_Init+0x98>)
 80018c4:	f009 fb02 	bl	800aecc <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018ce:	f001 fa5f 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20008a88 	.word	0x20008a88

080018e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_TIM3_Init+0x94>)
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <MX_TIM3_Init+0x98>)
 8001902:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_TIM3_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_TIM3_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_TIM3_Init+0x94>)
 8001912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_TIM3_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM3_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001924:	4813      	ldr	r0, [pc, #76]	; (8001974 <MX_TIM3_Init+0x94>)
 8001926:	f008 feb5 	bl	800a694 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001930:	f001 fa2e 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_TIM3_Init+0x94>)
 8001942:	f009 f897 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800194c:	f001 fa20 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_TIM3_Init+0x94>)
 800195e:	f009 fab5 	bl	800aecc <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001968:	f001 fa12 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20008714 	.word	0x20008714
 8001978:	40000400 	.word	0x40000400

0800197c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_TIM5_Init+0x94>)
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <MX_TIM5_Init+0x98>)
 800199e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019c2:	f008 fe67 	bl	800a694 <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80019cc:	f001 f9e0 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019de:	f009 f849 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80019e8:	f001 f9d2 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019fa:	f009 fa67 	bl	800aecc <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a04:	f001 f9c4 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200086c8 	.word	0x200086c8
 8001a14:	40000c00 	.word	0x40000c00

08001a18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <MX_TIM8_Init+0xa4>)
 8001a3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a62:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a64:	f008 fe16 	bl	800a694 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001a6e:	f001 f98f 	bl	8002d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a80:	f008 fff8 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001a8a:	f001 f981 	bl	8002d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001aa0:	f009 fa14 	bl	800aecc <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001aaa:	f001 f971 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20008620 	.word	0x20008620
 8001abc:	40010400 	.word	0x40010400

08001ac0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MX_UART7_Init+0x5c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_UART7_Init+0x58>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_UART7_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_UART7_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_UART7_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_UART7_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_UART7_Init+0x58>)
 8001b04:	f009 fa8e 	bl	800b024 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001b0e:	f001 f93f 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000859c 	.word	0x2000859c
 8001b1c:	40007800 	.word	0x40007800

08001b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <MX_USART1_UART_Init+0x5c>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b64:	f009 fa5e 	bl	800b024 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f001 f90f 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200088a4 	.word	0x200088a4
 8001b7c:	40011000 	.word	0x40011000

08001b80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <MX_USART6_UART_Init+0x5c>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bc4:	f009 fa2e 	bl	800b024 <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001bce:	f001 f8df 	bl	8002d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200089c0 	.word	0x200089c0
 8001bdc:	40011400 	.word	0x40011400

08001be0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_FMC_Init+0x98>)
 8001bfa:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <MX_FMC_Init+0x9c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c12:	2210      	movs	r2, #16
 8001c14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c1e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001c22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001c44:	2307      	movs	r3, #7
 8001c46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001c50:	2303      	movs	r3, #3
 8001c52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c62:	f008 fbdb 	bl	800a41c <HAL_SDRAM_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001c6c:	f001 f890 	bl	8002d90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20008ad8 	.word	0x20008ad8
 8001c7c:	a0000140 	.word	0xa0000140

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b090      	sub	sp, #64	; 0x40
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c96:	4baf      	ldr	r3, [pc, #700]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4aae      	ldr	r2, [pc, #696]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4bac      	ldr	r3, [pc, #688]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cae:	4ba9      	ldr	r3, [pc, #676]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4aa8      	ldr	r2, [pc, #672]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4ba6      	ldr	r3, [pc, #664]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4aa2      	ldr	r2, [pc, #648]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cde:	4b9d      	ldr	r3, [pc, #628]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a9c      	ldr	r2, [pc, #624]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b9a      	ldr	r3, [pc, #616]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a96      	ldr	r2, [pc, #600]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b94      	ldr	r3, [pc, #592]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b91      	ldr	r3, [pc, #580]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a90      	ldr	r2, [pc, #576]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b8e      	ldr	r3, [pc, #568]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d26:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a8a      	ldr	r2, [pc, #552]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d3e:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a84      	ldr	r2, [pc, #528]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d56:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a7e      	ldr	r2, [pc, #504]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6e:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d86:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a72      	ldr	r2, [pc, #456]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2160      	movs	r1, #96	; 0x60
 8001da2:	486d      	ldr	r0, [pc, #436]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001da4:	f005 fb34 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2120      	movs	r1, #32
 8001dac:	486b      	ldr	r0, [pc, #428]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001dae:	f005 fb2f 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2108      	movs	r1, #8
 8001db6:	4869      	ldr	r0, [pc, #420]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001db8:	f005 fb2a 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	4867      	ldr	r0, [pc, #412]	; (8001f60 <MX_GPIO_Init+0x2e0>)
 8001dc2:	f005 fb25 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	4865      	ldr	r0, [pc, #404]	; (8001f64 <MX_GPIO_Init+0x2e4>)
 8001dce:	f005 fb1f 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001dd8:	4863      	ldr	r0, [pc, #396]	; (8001f68 <MX_GPIO_Init+0x2e8>)
 8001dda:	f005 fb19 	bl	8007410 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	21c8      	movs	r1, #200	; 0xc8
 8001de2:	4862      	ldr	r0, [pc, #392]	; (8001f6c <MX_GPIO_Init+0x2ec>)
 8001de4:	f005 fb14 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001de8:	2308      	movs	r3, #8
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4857      	ldr	r0, [pc, #348]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001dfc:	f005 f838 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e00:	2304      	movs	r3, #4
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e10:	2309      	movs	r3, #9
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	484f      	ldr	r0, [pc, #316]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001e1c:	f005 f828 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e20:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e32:	230b      	movs	r3, #11
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	484b      	ldr	r0, [pc, #300]	; (8001f6c <MX_GPIO_Init+0x2ec>)
 8001e3e:	f005 f817 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001e42:	f643 0323 	movw	r3, #14371	; 0x3823
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e54:	230a      	movs	r3, #10
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4844      	ldr	r0, [pc, #272]	; (8001f70 <MX_GPIO_Init+0x2f0>)
 8001e60:	f005 f806 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001e74:	2308      	movs	r3, #8
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4837      	ldr	r0, [pc, #220]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001e80:	f004 fff6 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e84:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e96:	230c      	movs	r3, #12
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4834      	ldr	r0, [pc, #208]	; (8001f74 <MX_GPIO_Init+0x2f4>)
 8001ea2:	f004 ffe5 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001ea6:	f248 1340 	movw	r3, #33088	; 0x8140
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	482f      	ldr	r0, [pc, #188]	; (8001f78 <MX_GPIO_Init+0x2f8>)
 8001ebc:	f004 ffd8 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001ec0:	2360      	movs	r3, #96	; 0x60
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4820      	ldr	r0, [pc, #128]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001ed8:	f004 ffca 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001eec:	230a      	movs	r3, #10
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <MX_GPIO_Init+0x2f0>)
 8001ef8:	f004 ffba 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481a      	ldr	r0, [pc, #104]	; (8001f7c <MX_GPIO_Init+0x2fc>)
 8001f12:	f004 ffad 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001f16:	2340      	movs	r3, #64	; 0x40
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f1a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480c      	ldr	r0, [pc, #48]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001f2c:	f004 ffa0 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001f30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f42:	230a      	movs	r3, #10
 8001f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480a      	ldr	r0, [pc, #40]	; (8001f78 <MX_GPIO_Init+0x2f8>)
 8001f4e:	f004 ff8f 	bl	8006e70 <HAL_GPIO_Init>
 8001f52:	e015      	b.n	8001f80 <MX_GPIO_Init+0x300>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40022800 	.word	0x40022800
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40021c00 	.word	0x40021c00
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001f80:	23f0      	movs	r3, #240	; 0xf0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f90:	230a      	movs	r3, #10
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4891      	ldr	r0, [pc, #580]	; (80021e0 <MX_GPIO_Init+0x560>)
 8001f9c:	f004 ff68 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4889      	ldr	r0, [pc, #548]	; (80021e4 <MX_GPIO_Init+0x564>)
 8001fbe:	f004 ff57 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001fc2:	2328      	movs	r3, #40	; 0x28
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4883      	ldr	r0, [pc, #524]	; (80021e8 <MX_GPIO_Init+0x568>)
 8001fda:	f004 ff49 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	487e      	ldr	r0, [pc, #504]	; (80021ec <MX_GPIO_Init+0x56c>)
 8001ff4:	f004 ff3c 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200c:	4619      	mov	r1, r3
 800200e:	4878      	ldr	r0, [pc, #480]	; (80021f0 <MX_GPIO_Init+0x570>)
 8002010:	f004 ff2e 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002014:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002026:	4619      	mov	r1, r3
 8002028:	486e      	ldr	r0, [pc, #440]	; (80021e4 <MX_GPIO_Init+0x564>)
 800202a:	f004 ff21 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800202e:	2310      	movs	r3, #16
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203e:	4619      	mov	r1, r3
 8002040:	4869      	ldr	r0, [pc, #420]	; (80021e8 <MX_GPIO_Init+0x568>)
 8002042:	f004 ff15 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002046:	2304      	movs	r3, #4
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002056:	230c      	movs	r3, #12
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	4861      	ldr	r0, [pc, #388]	; (80021e8 <MX_GPIO_Init+0x568>)
 8002062:	f004 ff05 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002066:	f24a 0304 	movw	r3, #40964	; 0xa004
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002078:	4619      	mov	r1, r3
 800207a:	485e      	ldr	r0, [pc, #376]	; (80021f4 <MX_GPIO_Init+0x574>)
 800207c:	f004 fef8 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	2301      	movs	r3, #1
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002096:	4619      	mov	r1, r3
 8002098:	4851      	ldr	r0, [pc, #324]	; (80021e0 <MX_GPIO_Init+0x560>)
 800209a:	f004 fee9 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800209e:	f645 6340 	movw	r3, #24128	; 0x5e40
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	484f      	ldr	r0, [pc, #316]	; (80021f4 <MX_GPIO_Init+0x574>)
 80020b8:	f004 feda 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80020bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	4843      	ldr	r0, [pc, #268]	; (80021e0 <MX_GPIO_Init+0x560>)
 80020d4:	f004 fecc 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80020d8:	2310      	movs	r3, #16
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80020e8:	230a      	movs	r3, #10
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f0:	4619      	mov	r1, r3
 80020f2:	4840      	ldr	r0, [pc, #256]	; (80021f4 <MX_GPIO_Init+0x574>)
 80020f4:	f004 febc 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80020f8:	23c8      	movs	r3, #200	; 0xc8
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	2301      	movs	r3, #1
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210c:	4619      	mov	r1, r3
 800210e:	4835      	ldr	r0, [pc, #212]	; (80021e4 <MX_GPIO_Init+0x564>)
 8002110:	f004 feae 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002114:	2305      	movs	r3, #5
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002124:	230a      	movs	r3, #10
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212c:	4619      	mov	r1, r3
 800212e:	482f      	ldr	r0, [pc, #188]	; (80021ec <MX_GPIO_Init+0x56c>)
 8002130:	f004 fe9e 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002134:	2332      	movs	r3, #50	; 0x32
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002144:	230b      	movs	r3, #11
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800214c:	4619      	mov	r1, r3
 800214e:	4827      	ldr	r0, [pc, #156]	; (80021ec <MX_GPIO_Init+0x56c>)
 8002150:	f004 fe8e 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002154:	2304      	movs	r3, #4
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002164:	2309      	movs	r3, #9
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800216c:	4619      	mov	r1, r3
 800216e:	4822      	ldr	r0, [pc, #136]	; (80021f8 <MX_GPIO_Init+0x578>)
 8002170:	f004 fe7e 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002174:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002186:	2309      	movs	r3, #9
 8002188:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800218e:	4619      	mov	r1, r3
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <MX_GPIO_Init+0x568>)
 8002192:	f004 fe6d 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002196:	2386      	movs	r3, #134	; 0x86
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021a6:	230b      	movs	r3, #11
 80021a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	; (80021fc <MX_GPIO_Init+0x57c>)
 80021b2:	f004 fe5d 	bl	8006e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80021b6:	2328      	movs	r3, #40	; 0x28
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021c6:	230a      	movs	r3, #10
 80021c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ce:	4619      	mov	r1, r3
 80021d0:	480a      	ldr	r0, [pc, #40]	; (80021fc <MX_GPIO_Init+0x57c>)
 80021d2:	f004 fe4d 	bl	8006e70 <HAL_GPIO_Init>

}
 80021d6:	bf00      	nop
 80021d8:	3740      	adds	r7, #64	; 0x40
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40020800 	.word	0x40020800
 80021f0:	40022800 	.word	0x40022800
 80021f4:	40021c00 	.word	0x40021c00
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020000 	.word	0x40020000

08002200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	b0bc      	sub	sp, #240	; 0xf0
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t old_state = 99;
 8002208:	2363      	movs	r3, #99	; 0x63
 800220a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t timers = 90;
 800220e:	235a      	movs	r3, #90	; 0x5a
 8002210:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	char text[50];
	static uint8_t ligne = 7;
	static TS_StateTypeDef  TS_State;
	uint32_t potlb,potl;
	ADC_ChannelConfTypeDef sConfig = {0};
 8002214:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002222:	2301      	movs	r3, #1
 8002224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	potlb = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	osTimerDef(TimerAffichage, CallbackDisplay);
 8002234:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <StartDefaultTask+0x264>)
 8002236:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osThreadDef(AffichageJeu, displayGame, osPriorityNormal, 0, 1024);
 8002240:	4b89      	ldr	r3, [pc, #548]	; (8002468 <StartDefaultTask+0x268>)
 8002242:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002246:	461d      	mov	r5, r3
 8002248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(GameOver, waitGameOver, osPriorityHigh, 0, 1024);
 8002254:	4b85      	ldr	r3, [pc, #532]	; (800246c <StartDefaultTask+0x26c>)
 8002256:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800225a:	461d      	mov	r5, r3
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(TacheMonocycle, obj_cycle, osPriorityNormal, 0, 1024);
 8002268:	4b81      	ldr	r3, [pc, #516]	; (8002470 <StartDefaultTask+0x270>)
 800226a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800226e:	461d      	mov	r5, r3
 8002270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(AffichageHeure, displayTime, osPriorityNormal, 0, 1024);
 800227c:	4b7d      	ldr	r3, [pc, #500]	; (8002474 <StartDefaultTask+0x274>)
 800227e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002282:	461d      	mov	r5, r3
 8002284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002288:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800228c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 8002290:	4b79      	ldr	r3, [pc, #484]	; (8002478 <StartDefaultTask+0x278>)
 8002292:	f107 040c 	add.w	r4, r7, #12
 8002296:	461d      	mov	r5, r3
 8002298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* Infinite loop */
  for(;;)
  {
	  if (old_state != stateEtat)
 80022a4:	4b75      	ldr	r3, [pc, #468]	; (800247c <StartDefaultTask+0x27c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f000 8176 	beq.w	800259e <StartDefaultTask+0x39e>
	  {
		  switch (stateEtat)
 80022b2:	4b72      	ldr	r3, [pc, #456]	; (800247c <StartDefaultTask+0x27c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	f200 816d 	bhi.w	8002596 <StartDefaultTask+0x396>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <StartDefaultTask+0xc4>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	0800231b 	.word	0x0800231b
 80022cc:	0800239f 	.word	0x0800239f
 80022d0:	080024c9 	.word	0x080024c9
		  {
		  	  case JEU_ACCUEIL:
		  		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <StartDefaultTask+0x280>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022dc:	4618      	mov	r0, r3
 80022de:	f00a fbd1 	bl	800ca84 <xQueueSemaphoreTake>
		  		  BSP_LCD_SelectLayer(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 fff6 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		  BSP_LCD_Clear(00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f001 f865 	bl	80033b8 <BSP_LCD_Clear>
		  		  BSP_LCD_SelectLayer(0);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 fff0 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		  BSP_LCD_Clear(00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f001 f85f 	bl	80033b8 <BSP_LCD_Clear>
		  		  BSP_LCD_DrawBitmap(0, 0,(uint8_t*)AmoBloc2_Main_bmp);
 80022fa:	4a62      	ldr	r2, [pc, #392]	; (8002484 <StartDefaultTask+0x284>)
 80022fc:	2100      	movs	r1, #0
 80022fe:	2000      	movs	r0, #0
 8002300:	f001 fb36 	bl	8003970 <BSP_LCD_DrawBitmap>
		  		  BSP_LCD_SelectLayer(1);
 8002304:	2001      	movs	r0, #1
 8002306:	f000 ffe5 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		  xSemaphoreGive(mutexScreenHandle);
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <StartDefaultTask+0x280>)
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	f00a f92a 	bl	800c56c <xQueueGenericSend>
		  		  break;
 8002318:	e13d      	b.n	8002596 <StartDefaultTask+0x396>
		  	  case JEU_TIMERST:
		  		xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 800231a:	4b59      	ldr	r3, [pc, #356]	; (8002480 <StartDefaultTask+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002322:	4618      	mov	r0, r3
 8002324:	f00a fbae 	bl	800ca84 <xQueueSemaphoreTake>
		  		BSP_LCD_SelectLayer(1);
 8002328:	2001      	movs	r0, #1
 800232a:	f000 ffd3 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 800232e:	2000      	movs	r0, #0
 8002330:	f001 f842 	bl	80033b8 <BSP_LCD_Clear>
		  		BSP_LCD_SelectLayer(0);
 8002334:	2000      	movs	r0, #0
 8002336:	f000 ffcd 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 800233a:	2000      	movs	r0, #0
 800233c:	f001 f83c 	bl	80033b8 <BSP_LCD_Clear>
		  		BSP_LCD_DrawBitmap(0, 0,(uint8_t*)AmoBloc2_Timer_bmp);
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <StartDefaultTask+0x288>)
 8002342:	2100      	movs	r1, #0
 8002344:	2000      	movs	r0, #0
 8002346:	f001 fb13 	bl	8003970 <BSP_LCD_DrawBitmap>
		  		BSP_LCD_SelectLayer(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f000 ffc2 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_SetFont(&Font24);
 8002350:	484e      	ldr	r0, [pc, #312]	; (800248c <StartDefaultTask+0x28c>)
 8002352:	f001 f801 	bl	8003358 <BSP_LCD_SetFont>
		  		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800235a:	f000 ffcb 	bl	80032f4 <BSP_LCD_SetTextColor>
		  		sprintf(text,"Temps : %u secondes", timers);
 800235e:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 8002362:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002366:	494a      	ldr	r1, [pc, #296]	; (8002490 <StartDefaultTask+0x290>)
 8002368:	4618      	mov	r0, r3
 800236a:	f00d f85d 	bl	800f428 <siprintf>
		  		BSP_LCD_DisplayStringAt(10,ligne*24-10,(uint8_t*) text,CENTER_MODE);
 800236e:	4b49      	ldr	r3, [pc, #292]	; (8002494 <StartDefaultTask+0x294>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	0052      	lsls	r2, r2, #1
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b0a      	subs	r3, #10
 8002380:	b299      	uxth	r1, r3
 8002382:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002386:	2301      	movs	r3, #1
 8002388:	200a      	movs	r0, #10
 800238a:	f001 f881 	bl	8003490 <BSP_LCD_DisplayStringAt>
		  		xSemaphoreGive(mutexScreenHandle);
 800238e:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <StartDefaultTask+0x280>)
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	2300      	movs	r3, #0
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	f00a f8e8 	bl	800c56c <xQueueGenericSend>
		  		break;
 800239c:	e0fb      	b.n	8002596 <StartDefaultTask+0x396>
		  	  case JEU_PARTIES:
		  		  parties++;
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <StartDefaultTask+0x298>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <StartDefaultTask+0x298>)
 80023a8:	701a      	strb	r2, [r3, #0]
		  		  score = 0;
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <StartDefaultTask+0x29c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	801a      	strh	r2, [r3, #0]
		  		  if (timed) {
 80023b0:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <StartDefaultTask+0x2a0>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <StartDefaultTask+0x1e4>
		  			  	TimerAffichageHandle = osTimerCreate(osTimer(TimerAffichage), osTimerOnce, NULL);
 80023b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f009 fd71 	bl	800bea8 <osTimerCreate>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a36      	ldr	r2, [pc, #216]	; (80024a4 <StartDefaultTask+0x2a4>)
 80023ca:	6013      	str	r3, [r2, #0]
		  				osTimerStart(TimerAffichageHandle,1000*timers);
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <StartDefaultTask+0x2a4>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80023d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f009 fd96 	bl	800bf10 <osTimerStart>
		  		  }
		  		  xQueueReset(swordsPosHandle);
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <StartDefaultTask+0x2a8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f009 ff24 	bl	800c238 <xQueueGenericReset>
		  		  xQueueReset(collideFlagHandle);
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <StartDefaultTask+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f009 ff1e 	bl	800c238 <xQueueGenericReset>
		  		  xQueueReset(scoreIncremHandle);
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <StartDefaultTask+0x2b0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f009 ff18 	bl	800c238 <xQueueGenericReset>
		  		  /* definition and creation of AffichageJeu */
		  		  AffichageJeuHandle = osThreadCreate(osThread(AffichageJeu), NULL);
 8002408:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f009 fce9 	bl	800bde6 <osThreadCreate>
 8002414:	4603      	mov	r3, r0
 8002416:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <StartDefaultTask+0x2b4>)
 8002418:	6013      	str	r3, [r2, #0]
		  		  /* definition and creation of GameOver */
		  		  GameOverHandle = osThreadCreate(osThread(GameOver), NULL);
 800241a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f009 fce0 	bl	800bde6 <osThreadCreate>
 8002426:	4603      	mov	r3, r0
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <StartDefaultTask+0x2b8>)
 800242a:	6013      	str	r3, [r2, #0]
		  		  /* definition and creation of TacheMonocycle */
		  		  TacheMonocycleHandle = osThreadCreate(osThread(TacheMonocycle), NULL);
 800242c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f009 fcd7 	bl	800bde6 <osThreadCreate>
 8002438:	4603      	mov	r3, r0
 800243a:	4a20      	ldr	r2, [pc, #128]	; (80024bc <StartDefaultTask+0x2bc>)
 800243c:	6013      	str	r3, [r2, #0]
		  		  AffichageHeureHandle = osThreadCreate(osThread(AffichageHeure), NULL);
 800243e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f009 fcce 	bl	800bde6 <osThreadCreate>
 800244a:	4603      	mov	r3, r0
 800244c:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <StartDefaultTask+0x2c0>)
 800244e:	6013      	str	r3, [r2, #0]
		  		  /* definition and creation of TacheEpee */
		  		  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f009 fcc5 	bl	800bde6 <osThreadCreate>
 800245c:	4603      	mov	r3, r0
 800245e:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <StartDefaultTask+0x2c4>)
 8002460:	6013      	str	r3, [r2, #0]
		  		  break;
 8002462:	e098      	b.n	8002596 <StartDefaultTask+0x396>
 8002464:	08002d25 	.word	0x08002d25
 8002468:	0800fcd4 	.word	0x0800fcd4
 800246c:	0800fcf0 	.word	0x0800fcf0
 8002470:	0800fd0c 	.word	0x0800fd0c
 8002474:	0800fd28 	.word	0x0800fd28
 8002478:	0800fd44 	.word	0x0800fd44
 800247c:	20008ad4 	.word	0x20008ad4
 8002480:	20008670 	.word	0x20008670
 8002484:	0801052c 	.word	0x0801052c
 8002488:	0808fdbc 	.word	0x0808fdbc
 800248c:	2000002c 	.word	0x2000002c
 8002490:	0800fcb4 	.word	0x0800fcb4
 8002494:	20000028 	.word	0x20000028
 8002498:	20008535 	.word	0x20008535
 800249c:	2000880c 	.word	0x2000880c
 80024a0:	20008534 	.word	0x20008534
 80024a4:	20008858 	.word	0x20008858
 80024a8:	200084dc 	.word	0x200084dc
 80024ac:	200086c4 	.word	0x200086c4
 80024b0:	200089a8 	.word	0x200089a8
 80024b4:	200086c0 	.word	0x200086c0
 80024b8:	20008a44 	.word	0x20008a44
 80024bc:	2000866c 	.word	0x2000866c
 80024c0:	20008760 	.word	0x20008760
 80024c4:	20008b0c 	.word	0x20008b0c
		  	  case JEU_FINPART:
		  		if (timed) {
 80024c8:	4bb1      	ldr	r3, [pc, #708]	; (8002790 <StartDefaultTask+0x590>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <StartDefaultTask+0x2f2>
		  			if (timed == 1) {
 80024d0:	4baf      	ldr	r3, [pc, #700]	; (8002790 <StartDefaultTask+0x590>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d104      	bne.n	80024e2 <StartDefaultTask+0x2e2>
		  				osTimerStop(TimerAffichageHandle);
 80024d8:	4bae      	ldr	r3, [pc, #696]	; (8002794 <StartDefaultTask+0x594>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f009 fd5b 	bl	800bf98 <osTimerStop>
		  			}
		  			osTimerDelete(TimerAffichageHandle);
 80024e2:	4bac      	ldr	r3, [pc, #688]	; (8002794 <StartDefaultTask+0x594>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f009 fd92 	bl	800c010 <osTimerDelete>
		  			timed = 0;
 80024ec:	4ba8      	ldr	r3, [pc, #672]	; (8002790 <StartDefaultTask+0x590>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
		  		}
		  		xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 80024f2:	4ba9      	ldr	r3, [pc, #676]	; (8002798 <StartDefaultTask+0x598>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00a fac2 	bl	800ca84 <xQueueSemaphoreTake>
		  		BSP_LCD_SelectLayer(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f000 fee7 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 8002506:	2000      	movs	r0, #0
 8002508:	f000 ff56 	bl	80033b8 <BSP_LCD_Clear>
		  		BSP_LCD_SelectLayer(0);
 800250c:	2000      	movs	r0, #0
 800250e:	f000 fee1 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 8002512:	2000      	movs	r0, #0
 8002514:	f000 ff50 	bl	80033b8 <BSP_LCD_Clear>
		  		BSP_LCD_DrawBitmap(0, 0,(uint8_t*)AmoBloc2_Over_bmp);
 8002518:	4aa0      	ldr	r2, [pc, #640]	; (800279c <StartDefaultTask+0x59c>)
 800251a:	2100      	movs	r1, #0
 800251c:	2000      	movs	r0, #0
 800251e:	f001 fa27 	bl	8003970 <BSP_LCD_DrawBitmap>
		  		BSP_LCD_SelectLayer(1);
 8002522:	2001      	movs	r0, #1
 8002524:	f000 fed6 	bl	80032d4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_SetFont(&Font24);
 8002528:	489d      	ldr	r0, [pc, #628]	; (80027a0 <StartDefaultTask+0x5a0>)
 800252a:	f000 ff15 	bl	8003358 <BSP_LCD_SetFont>
		  		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800252e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002532:	f000 fedf 	bl	80032f4 <BSP_LCD_SetTextColor>
		  		sprintf(text,"Score : %u", score);
 8002536:	4b9b      	ldr	r3, [pc, #620]	; (80027a4 <StartDefaultTask+0x5a4>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002540:	4999      	ldr	r1, [pc, #612]	; (80027a8 <StartDefaultTask+0x5a8>)
 8002542:	4618      	mov	r0, r3
 8002544:	f00c ff70 	bl	800f428 <siprintf>
		  		BSP_LCD_DisplayStringAt(0,ligne*24-10,(uint8_t*) text,CENTER_MODE);
 8002548:	4b98      	ldr	r3, [pc, #608]	; (80027ac <StartDefaultTask+0x5ac>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	0052      	lsls	r2, r2, #1
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b0a      	subs	r3, #10
 800255a:	b299      	uxth	r1, r3
 800255c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002560:	2301      	movs	r3, #1
 8002562:	2000      	movs	r0, #0
 8002564:	f000 ff94 	bl	8003490 <BSP_LCD_DisplayStringAt>
		  		xSemaphoreGive(mutexScreenHandle);
 8002568:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <StartDefaultTask+0x598>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	2300      	movs	r3, #0
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	f009 fffb 	bl	800c56c <xQueueGenericSend>
		  		vTaskDelete(AffichageJeuHandle);
 8002576:	4b8e      	ldr	r3, [pc, #568]	; (80027b0 <StartDefaultTask+0x5b0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f00a fece 	bl	800d31c <vTaskDelete>
		  		vTaskDelete(AffichageHeureHandle);
 8002580:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <StartDefaultTask+0x5b4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f00a fec9 	bl	800d31c <vTaskDelete>
		  		vTaskDelete(TacheMonocycleHandle);
 800258a:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <StartDefaultTask+0x5b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f00a fec4 	bl	800d31c <vTaskDelete>
		  		break;
 8002594:	bf00      	nop
		  }
		  old_state = stateEtat;
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <StartDefaultTask+0x5bc>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  }
	  switch (stateEtat) {
 800259e:	4b87      	ldr	r3, [pc, #540]	; (80027bc <StartDefaultTask+0x5bc>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	f200 80ef 	bhi.w	8002786 <StartDefaultTask+0x586>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <StartDefaultTask+0x3b0>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	08002629 	.word	0x08002629
 80025b8:	08002787 	.word	0x08002787
 80025bc:	08002741 	.word	0x08002741
	  	  case JEU_ACCUEIL:
	  		BSP_TS_GetState(&TS_State);
 80025c0:	487f      	ldr	r0, [pc, #508]	; (80027c0 <StartDefaultTask+0x5c0>)
 80025c2:	f001 fff3 	bl	80045ac <BSP_TS_GetState>
	  		if (TS_State.touchDetected) {
 80025c6:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <StartDefaultTask+0x5c0>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80d6 	beq.w	800277c <StartDefaultTask+0x57c>
	  			if(TS_State.touchX[0] > 20 && TS_State.touchY[0] > 125 && TS_State.touchX[0] < 230 && TS_State.touchY[0] < 210)
 80025d0:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <StartDefaultTask+0x5c0>)
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	2b14      	cmp	r3, #20
 80025d6:	d90e      	bls.n	80025f6 <StartDefaultTask+0x3f6>
 80025d8:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <StartDefaultTask+0x5c0>)
 80025da:	899b      	ldrh	r3, [r3, #12]
 80025dc:	2b7d      	cmp	r3, #125	; 0x7d
 80025de:	d90a      	bls.n	80025f6 <StartDefaultTask+0x3f6>
 80025e0:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <StartDefaultTask+0x5c0>)
 80025e2:	885b      	ldrh	r3, [r3, #2]
 80025e4:	2be5      	cmp	r3, #229	; 0xe5
 80025e6:	d806      	bhi.n	80025f6 <StartDefaultTask+0x3f6>
 80025e8:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <StartDefaultTask+0x5c0>)
 80025ea:	899b      	ldrh	r3, [r3, #12]
 80025ec:	2bd1      	cmp	r3, #209	; 0xd1
 80025ee:	d802      	bhi.n	80025f6 <StartDefaultTask+0x3f6>
	  			{
	  				stateEtat = JEU_PARTIES;
 80025f0:	4b72      	ldr	r3, [pc, #456]	; (80027bc <StartDefaultTask+0x5bc>)
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
	  			}
	  			if(TS_State.touchX[0] > 250 && TS_State.touchY[0] > 125 && TS_State.touchX[0] < 460 && TS_State.touchY[0] < 210)
 80025f6:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <StartDefaultTask+0x5c0>)
 80025f8:	885b      	ldrh	r3, [r3, #2]
 80025fa:	2bfa      	cmp	r3, #250	; 0xfa
 80025fc:	f240 80be 	bls.w	800277c <StartDefaultTask+0x57c>
 8002600:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002602:	899b      	ldrh	r3, [r3, #12]
 8002604:	2b7d      	cmp	r3, #125	; 0x7d
 8002606:	f240 80b9 	bls.w	800277c <StartDefaultTask+0x57c>
 800260a:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <StartDefaultTask+0x5c0>)
 800260c:	885b      	ldrh	r3, [r3, #2]
 800260e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8002612:	f080 80b3 	bcs.w	800277c <StartDefaultTask+0x57c>
 8002616:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002618:	899b      	ldrh	r3, [r3, #12]
 800261a:	2bd1      	cmp	r3, #209	; 0xd1
 800261c:	f200 80ae 	bhi.w	800277c <StartDefaultTask+0x57c>
	  			{
	  				stateEtat = JEU_TIMERST;
 8002620:	4b66      	ldr	r3, [pc, #408]	; (80027bc <StartDefaultTask+0x5bc>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		break;
 8002626:	e0a9      	b.n	800277c <StartDefaultTask+0x57c>
	  	  case JEU_TIMERST:
	  		sConfig.Channel = ADC_CHANNEL_7;
 8002628:	2307      	movs	r3, #7
 800262a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800262e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002632:	4619      	mov	r1, r3
 8002634:	4863      	ldr	r0, [pc, #396]	; (80027c4 <StartDefaultTask+0x5c4>)
 8002636:	f003 faaf 	bl	8005b98 <HAL_ADC_ConfigChannel>
	  		HAL_ADC_Start(&hadc3);
 800263a:	4862      	ldr	r0, [pc, #392]	; (80027c4 <StartDefaultTask+0x5c4>)
 800263c:	f003 f946 	bl	80058cc <HAL_ADC_Start>
	  		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002640:	bf00      	nop
 8002642:	2164      	movs	r1, #100	; 0x64
 8002644:	485f      	ldr	r0, [pc, #380]	; (80027c4 <StartDefaultTask+0x5c4>)
 8002646:	f003 fa0f 	bl	8005a68 <HAL_ADC_PollForConversion>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f8      	bne.n	8002642 <StartDefaultTask+0x442>
	  		potl = HAL_ADC_GetValue(&hadc3);
 8002650:	485c      	ldr	r0, [pc, #368]	; (80027c4 <StartDefaultTask+0x5c4>)
 8002652:	f003 fa94 	bl	8005b7e <HAL_ADC_GetValue>
 8002656:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	  		if ((potl > potlb + 50) || (potlb > potl + 50))
 800265a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800265e:	3332      	adds	r3, #50	; 0x32
 8002660:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002664:	429a      	cmp	r2, r3
 8002666:	d806      	bhi.n	8002676 <StartDefaultTask+0x476>
 8002668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266c:	3332      	adds	r3, #50	; 0x32
 800266e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002672:	429a      	cmp	r2, r3
 8002674:	d943      	bls.n	80026fe <StartDefaultTask+0x4fe>
	  		{
	  			potlb = potl;
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	  			xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 800267e:	4b46      	ldr	r3, [pc, #280]	; (8002798 <StartDefaultTask+0x598>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002686:	4618      	mov	r0, r3
 8002688:	f00a f9fc 	bl	800ca84 <xQueueSemaphoreTake>
	  			BSP_LCD_SelectLayer(1);
 800268c:	2001      	movs	r0, #1
 800268e:	f000 fe21 	bl	80032d4 <BSP_LCD_SelectLayer>
	  			BSP_LCD_Clear(00);
 8002692:	2000      	movs	r0, #0
 8002694:	f000 fe90 	bl	80033b8 <BSP_LCD_Clear>
	  			BSP_LCD_SetFont(&Font24);
 8002698:	4841      	ldr	r0, [pc, #260]	; (80027a0 <StartDefaultTask+0x5a0>)
 800269a:	f000 fe5d 	bl	8003358 <BSP_LCD_SetFont>
	  			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800269e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a2:	f000 fe27 	bl	80032f4 <BSP_LCD_SetTextColor>
	  			timers = (potl/27) + 30;
 80026a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <StartDefaultTask+0x5c8>)
 80026ac:	fba3 1302 	umull	r1, r3, r3, r2
 80026b0:	1ad2      	subs	r2, r2, r3
 80026b2:	0852      	lsrs	r2, r2, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	331e      	adds	r3, #30
 80026bc:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	  			sprintf(text,"Temps : %u secondes", timers);
 80026c0:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 80026c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026c8:	4940      	ldr	r1, [pc, #256]	; (80027cc <StartDefaultTask+0x5cc>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	f00c feac 	bl	800f428 <siprintf>
	  			BSP_LCD_DisplayStringAt(10,ligne*24-10,(uint8_t*) text,CENTER_MODE);
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <StartDefaultTask+0x5ac>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	0052      	lsls	r2, r2, #1
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b0a      	subs	r3, #10
 80026e2:	b299      	uxth	r1, r3
 80026e4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80026e8:	2301      	movs	r3, #1
 80026ea:	200a      	movs	r0, #10
 80026ec:	f000 fed0 	bl	8003490 <BSP_LCD_DisplayStringAt>
	  			xSemaphoreGive(mutexScreenHandle);
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <StartDefaultTask+0x598>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	2300      	movs	r3, #0
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	f009 ff37 	bl	800c56c <xQueueGenericSend>
	  		}
	  		BSP_TS_GetState(&TS_State);
 80026fe:	4830      	ldr	r0, [pc, #192]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002700:	f001 ff54 	bl	80045ac <BSP_TS_GetState>
	  		if (TS_State.touchDetected) {
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d039      	beq.n	8002780 <StartDefaultTask+0x580>
	  			if(TS_State.touchX[0] > 410 && TS_State.touchY[0] > 205 && TS_State.touchX[0] < 470 && TS_State.touchY[0] < 260)
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <StartDefaultTask+0x5c0>)
 800270e:	885b      	ldrh	r3, [r3, #2]
 8002710:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8002714:	d934      	bls.n	8002780 <StartDefaultTask+0x580>
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002718:	899b      	ldrh	r3, [r3, #12]
 800271a:	2bcd      	cmp	r3, #205	; 0xcd
 800271c:	d930      	bls.n	8002780 <StartDefaultTask+0x580>
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002720:	885b      	ldrh	r3, [r3, #2]
 8002722:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8002726:	d22b      	bcs.n	8002780 <StartDefaultTask+0x580>
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <StartDefaultTask+0x5c0>)
 800272a:	899b      	ldrh	r3, [r3, #12]
 800272c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002730:	d226      	bcs.n	8002780 <StartDefaultTask+0x580>
	  			{
	  			  	stateEtat = JEU_PARTIES;
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <StartDefaultTask+0x5bc>)
 8002734:	2202      	movs	r2, #2
 8002736:	701a      	strb	r2, [r3, #0]
	  			  	timed = 1;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <StartDefaultTask+0x590>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		  break;
 800273e:	e01f      	b.n	8002780 <StartDefaultTask+0x580>
	  	  case JEU_PARTIES:
	  		break;
	  	  case JEU_FINPART:
	  		BSP_TS_GetState(&TS_State);
 8002740:	481f      	ldr	r0, [pc, #124]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002742:	f001 ff33 	bl	80045ac <BSP_TS_GetState>
	  		if (TS_State.touchDetected) {
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01a      	beq.n	8002784 <StartDefaultTask+0x584>
	  			if(TS_State.touchX[0] > 410 && TS_State.touchY[0] > 205 && TS_State.touchX[0] < 470 && TS_State.touchY[0] < 260)
 800274e:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002750:	885b      	ldrh	r3, [r3, #2]
 8002752:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8002756:	d915      	bls.n	8002784 <StartDefaultTask+0x584>
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <StartDefaultTask+0x5c0>)
 800275a:	899b      	ldrh	r3, [r3, #12]
 800275c:	2bcd      	cmp	r3, #205	; 0xcd
 800275e:	d911      	bls.n	8002784 <StartDefaultTask+0x584>
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <StartDefaultTask+0x5c0>)
 8002762:	885b      	ldrh	r3, [r3, #2]
 8002764:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8002768:	d20c      	bcs.n	8002784 <StartDefaultTask+0x584>
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <StartDefaultTask+0x5c0>)
 800276c:	899b      	ldrh	r3, [r3, #12]
 800276e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002772:	d207      	bcs.n	8002784 <StartDefaultTask+0x584>
	  			{
	  			  stateEtat = JEU_ACCUEIL;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <StartDefaultTask+0x5bc>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		break;
 800277a:	e003      	b.n	8002784 <StartDefaultTask+0x584>
	  		break;
 800277c:	bf00      	nop
 800277e:	e002      	b.n	8002786 <StartDefaultTask+0x586>
	  		  break;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <StartDefaultTask+0x586>
	  		break;
 8002784:	bf00      	nop
	  }
    osDelay(1);
 8002786:	2001      	movs	r0, #1
 8002788:	f009 fb79 	bl	800be7e <osDelay>
	  if (old_state != stateEtat)
 800278c:	e58a      	b.n	80022a4 <StartDefaultTask+0xa4>
 800278e:	bf00      	nop
 8002790:	20008534 	.word	0x20008534
 8002794:	20008858 	.word	0x20008858
 8002798:	20008670 	.word	0x20008670
 800279c:	08050174 	.word	0x08050174
 80027a0:	2000002c 	.word	0x2000002c
 80027a4:	2000880c 	.word	0x2000880c
 80027a8:	0800fcc8 	.word	0x0800fcc8
 80027ac:	20000028 	.word	0x20000028
 80027b0:	200086c0 	.word	0x200086c0
 80027b4:	20008760 	.word	0x20008760
 80027b8:	2000866c 	.word	0x2000866c
 80027bc:	20008ad4 	.word	0x20008ad4
 80027c0:	2000086c 	.word	0x2000086c
 80027c4:	2000885c 	.word	0x2000885c
 80027c8:	2f684bdb 	.word	0x2f684bdb
 80027cc:	0800fcb4 	.word	0x0800fcb4

080027d0 <displayTime>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTime */
void displayTime(void const * argument)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b094      	sub	sp, #80	; 0x50
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <displayTime+0xa4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e0:	4618      	mov	r0, r3
 80027e2:	f00a f94f 	bl	800ca84 <xQueueSemaphoreTake>
	  BSP_LCD_SetFont(&Font12);
 80027e6:	4824      	ldr	r0, [pc, #144]	; (8002878 <displayTime+0xa8>)
 80027e8:	f000 fdb6 	bl	8003358 <BSP_LCD_SetFont>
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	2200      	movs	r2, #0
 80027f2:	4619      	mov	r1, r3
 80027f4:	4821      	ldr	r0, [pc, #132]	; (800287c <displayTime+0xac>)
 80027f6:	f007 fabd 	bl	8009d74 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	2200      	movs	r2, #0
 8002800:	4619      	mov	r1, r3
 8002802:	481e      	ldr	r0, [pc, #120]	; (800287c <displayTime+0xac>)
 8002804:	f007 fbbc 	bl	8009f80 <HAL_RTC_GetDate>
	  sprintf(text, "%2u:%02u:%02u", time.Hours, time.Minutes, time.Seconds);
 8002808:	7c3b      	ldrb	r3, [r7, #16]
 800280a:	461a      	mov	r2, r3
 800280c:	7c7b      	ldrb	r3, [r7, #17]
 800280e:	4619      	mov	r1, r3
 8002810:	7cbb      	ldrb	r3, [r7, #18]
 8002812:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	460b      	mov	r3, r1
 800281a:	4919      	ldr	r1, [pc, #100]	; (8002880 <displayTime+0xb0>)
 800281c:	f00c fe04 	bl	800f428 <siprintf>
	  BSP_LCD_SelectLayer(1);
 8002820:	2001      	movs	r0, #1
 8002822:	f000 fd57 	bl	80032d4 <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayStringAtLine(0,(uint8_t*) text);
 8002826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800282a:	4619      	mov	r1, r3
 800282c:	2000      	movs	r0, #0
 800282e:	f000 fef7 	bl	8003620 <BSP_LCD_DisplayStringAtLine>
	  sprintf(text, "Score : %4u", score);
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <displayTime+0xb4>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800283c:	4912      	ldr	r1, [pc, #72]	; (8002888 <displayTime+0xb8>)
 800283e:	4618      	mov	r0, r3
 8002840:	f00c fdf2 	bl	800f428 <siprintf>
	  BSP_LCD_SelectLayer(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f000 fd45 	bl	80032d4 <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayStringAtLine(1,(uint8_t*) text);
 800284a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800284e:	4619      	mov	r1, r3
 8002850:	2001      	movs	r0, #1
 8002852:	f000 fee5 	bl	8003620 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SelectLayer(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f000 fd3c 	bl	80032d4 <BSP_LCD_SelectLayer>
	  xSemaphoreGive(mutexScreenHandle);
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <displayTime+0xa4>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	f009 fe81 	bl	800c56c <xQueueGenericSend>
	  vTaskDelay(100);
 800286a:	2064      	movs	r0, #100	; 0x64
 800286c:	f00a fde8 	bl	800d440 <vTaskDelay>
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002870:	e7b2      	b.n	80027d8 <displayTime+0x8>
 8002872:	bf00      	nop
 8002874:	20008670 	.word	0x20008670
 8002878:	20000034 	.word	0x20000034
 800287c:	2000893c 	.word	0x2000893c
 8002880:	0800fd60 	.word	0x0800fd60
 8002884:	2000880c 	.word	0x2000880c
 8002888:	0800fd70 	.word	0x0800fd70

0800288c <displayGame>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayGame */
void displayGame(void const * argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b094      	sub	sp, #80	; 0x50
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayGame */
	char text[50]={};
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	222e      	movs	r2, #46	; 0x2e
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f00c fce5 	bl	800f270 <memset>
	uint16_t amongx = BSP_LCD_GetXSize()/2 - 15;
 80028a6:	f000 fc8d 	bl	80031c4 <BSP_LCD_GetXSize>
 80028aa:	4603      	mov	r3, r0
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b0f      	subs	r3, #15
 80028b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t amongy = BSP_LCD_GetYSize() - 30;
 80028b6:	f000 fc99 	bl	80031ec <BSP_LCD_GetYSize>
 80028ba:	4603      	mov	r3, r0
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b1e      	subs	r3, #30
 80028c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t sword;
	uint16_t col;
  /* Infinite loop */
  for(;;)
  {
	  if (xQueueReceive(swordsPosHandle, &derive, 0)){
 80028c4:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <displayGame+0x134>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f107 0117 	add.w	r1, r7, #23
 80028cc:	2200      	movs	r2, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f009 fff2 	bl	800c8b8 <xQueueReceive>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04d      	beq.n	8002976 <displayGame+0xea>
		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <displayGame+0x138>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e2:	4618      	mov	r0, r3
 80028e4:	f00a f8ce 	bl	800ca84 <xQueueSemaphoreTake>
		  BSP_LCD_SelectLayer(1);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f000 fcf3 	bl	80032d4 <BSP_LCD_SelectLayer>
		  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 80028ee:	4836      	ldr	r0, [pc, #216]	; (80029c8 <displayGame+0x13c>)
 80028f0:	f000 fd00 	bl	80032f4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect(amongx, amongy, 30,30);
 80028f4:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80028f8:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 80028fc:	231e      	movs	r3, #30
 80028fe:	221e      	movs	r2, #30
 8002900:	f001 f8e8 	bl	8003ad4 <BSP_LCD_FillRect>
		  if (derive == 1 && amongx < 450)
 8002904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10d      	bne.n	8002928 <displayGame+0x9c>
 800290c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002910:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8002914:	d208      	bcs.n	8002928 <displayGame+0x9c>
		  {
			  amongx = amongx + derive;
 8002916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800291a:	b29a      	uxth	r2, r3
 800291c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002920:	4413      	add	r3, r2
 8002922:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002926:	e010      	b.n	800294a <displayGame+0xbe>
		  } else if (derive == -1 && amongx > 0){
 8002928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002930:	d10b      	bne.n	800294a <displayGame+0xbe>
 8002932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <displayGame+0xbe>
			  amongx = amongx + derive;
 800293a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800293e:	b29a      	uxth	r2, r3
 8002940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002944:	4413      	add	r3, r2
 8002946:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  	  }
		  BSP_LCD_DrawBitmap(amongx, amongy,(uint8_t*)Amongus_bmp);
 800294a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800294e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <displayGame+0x140>)
 8002954:	4618      	mov	r0, r3
 8002956:	f001 f80b 	bl	8003970 <BSP_LCD_DrawBitmap>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800295a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800295e:	f000 fcc9 	bl	80032f4 <BSP_LCD_SetTextColor>
		  BSP_LCD_SelectLayer(1);
 8002962:	2001      	movs	r0, #1
 8002964:	f000 fcb6 	bl	80032d4 <BSP_LCD_SelectLayer>
		  xSemaphoreGive(mutexScreenHandle);
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <displayGame+0x138>)
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	2300      	movs	r3, #0
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	f009 fdfb 	bl	800c56c <xQueueGenericSend>
	  }
	  if(xQueueReceive(collideFlagHandle, &sword, 0))
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <displayGame+0x144>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f107 0110 	add.w	r1, r7, #16
 800297e:	2200      	movs	r2, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f009 ff99 	bl	800c8b8 <xQueueReceive>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <displayGame+0x12c>
	  {
		  if ((sword-amongx) < 30 || (amongx-sword) < 32){
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b1d      	cmp	r3, #29
 8002996:	d905      	bls.n	80029a4 <displayGame+0x118>
 8002998:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b1f      	cmp	r3, #31
 80029a2:	d809      	bhi.n	80029b8 <displayGame+0x12c>
			  col = 30;
 80029a4:	231e      	movs	r3, #30
 80029a6:	81fb      	strh	r3, [r7, #14]
			  xQueueSend(scoreIncremHandle, &col, 0);
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <displayGame+0x148>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f107 010e 	add.w	r1, r7, #14
 80029b0:	2300      	movs	r3, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	f009 fdda 	bl	800c56c <xQueueGenericSend>
		  }
	  }
	  osDelay(5);
 80029b8:	2005      	movs	r0, #5
 80029ba:	f009 fa60 	bl	800be7e <osDelay>
	  if (xQueueReceive(swordsPosHandle, &derive, 0)){
 80029be:	e781      	b.n	80028c4 <displayGame+0x38>
 80029c0:	200084dc 	.word	0x200084dc
 80029c4:	20008670 	.word	0x20008670
 80029c8:	ffffde00 	.word	0xffffde00
 80029cc:	0800fd98 	.word	0x0800fd98
 80029d0:	200086c4 	.word	0x200086c4
 80029d4:	200089a8 	.word	0x200089a8

080029d8 <waitGameOver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_waitGameOver */
void waitGameOver(void const * argument)
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b098      	sub	sp, #96	; 0x60
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN waitGameOver */
	uint16_t temp;
	char text[30] = {};
 80029e0:	2300      	movs	r3, #0
 80029e2:	643b      	str	r3, [r7, #64]	; 0x40
 80029e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
 80029f4:	615a      	str	r2, [r3, #20]
 80029f6:	831a      	strh	r2, [r3, #24]
	uint16_t gameov;
	/* definition and creation of TacheEpee */
	  osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 80029f8:	4b3a      	ldr	r3, [pc, #232]	; (8002ae4 <waitGameOver+0x10c>)
 80029fa:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80029fe:	461d      	mov	r5, r3
 8002a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f009 f9e7 	bl	800bde6 <osThreadCreate>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <waitGameOver+0x110>)
 8002a1c:	6013      	str	r3, [r2, #0]
	//osTmutexScreenHandlehreadId TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(scoreIncremHandle, &temp, 0)){
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <waitGameOver+0x114>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8002a26:	2200      	movs	r2, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f009 ff45 	bl	800c8b8 <xQueueReceive>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d04f      	beq.n	8002ad4 <waitGameOver+0xfc>
	  		  if (temp==1){
 8002a34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d138      	bne.n	8002aae <waitGameOver+0xd6>
	  			vTaskDelete(TacheEpeeHandle);
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <waitGameOver+0x110>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00a fc6b 	bl	800d31c <vTaskDelete>
	  			xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002a46:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <waitGameOver+0x118>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f00a f818 	bl	800ca84 <xQueueSemaphoreTake>
	  			BSP_LCD_SelectLayer(0);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f000 fc3d 	bl	80032d4 <BSP_LCD_SelectLayer>
	  			BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8002a5a:	4826      	ldr	r0, [pc, #152]	; (8002af4 <waitGameOver+0x11c>)
 8002a5c:	f000 fcac 	bl	80033b8 <BSP_LCD_Clear>
	  			BSP_LCD_SelectLayer(1);
 8002a60:	2001      	movs	r0, #1
 8002a62:	f000 fc37 	bl	80032d4 <BSP_LCD_SelectLayer>
	  			xSemaphoreGive(mutexScreenHandle);
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <waitGameOver+0x118>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f009 fd7c 	bl	800c56c <xQueueGenericSend>
	  			 score += 1;
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <waitGameOver+0x120>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <waitGameOver+0x120>)
 8002a7e:	801a      	strh	r2, [r3, #0]
	  			/* definition and creation of TacheEpee */
	  			  osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <waitGameOver+0x10c>)
 8002a82:	f107 0408 	add.w	r4, r7, #8
 8002a86:	461d      	mov	r5, r3
 8002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  			  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 8002a94:	f107 0308 	add.w	r3, r7, #8
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f009 f9a3 	bl	800bde6 <osThreadCreate>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <waitGameOver+0x110>)
 8002aa4:	6013      	str	r3, [r2, #0]
	  			 temp = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002aac:	e012      	b.n	8002ad4 <waitGameOver+0xfc>
	  		  } else if (temp == 30) {
 8002aae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ab2:	2b1e      	cmp	r3, #30
 8002ab4:	d10e      	bne.n	8002ad4 <waitGameOver+0xfc>
	  			  stateEtat = JEU_FINPART;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <waitGameOver+0x124>)
 8002ab8:	2203      	movs	r2, #3
 8002aba:	701a      	strb	r2, [r3, #0]
	  			vTaskDelete(NULL);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f00a fc2d 	bl	800d31c <vTaskDelete>
	  			vTaskDelete(TacheEpeeHandle);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <waitGameOver+0x110>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f00a fc28 	bl	800d31c <vTaskDelete>
	  			temp = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  			  break;
 8002ad2:	e003      	b.n	8002adc <waitGameOver+0x104>
	  		  }
	  	  }
    osDelay(10);
 8002ad4:	200a      	movs	r0, #10
 8002ad6:	f009 f9d2 	bl	800be7e <osDelay>
	  if(xQueueReceive(scoreIncremHandle, &temp, 0)){
 8002ada:	e7a0      	b.n	8002a1e <waitGameOver+0x46>
  }
  /* USER CODE END waitGameOver */
}
 8002adc:	bf00      	nop
 8002ade:	3760      	adds	r7, #96	; 0x60
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae4:	0800fd44 	.word	0x0800fd44
 8002ae8:	20008b0c 	.word	0x20008b0c
 8002aec:	200089a8 	.word	0x200089a8
 8002af0:	20008670 	.word	0x20008670
 8002af4:	ffffde00 	.word	0xffffde00
 8002af8:	2000880c 	.word	0x2000880c
 8002afc:	20008ad4 	.word	0x20008ad4

08002b00 <obj_cycle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_obj_cycle */
void obj_cycle(void const * argument)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN obj_cycle */
	uint32_t joystick_h, joystick_v;
	int8_t derive;
	ADC_ChannelConfTypeDef sConfig = {0};
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  sConfig.Channel = ADC_CHANNEL_8;
 8002b1e:	2308      	movs	r3, #8
 8002b20:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	4619      	mov	r1, r3
 8002b28:	4820      	ldr	r0, [pc, #128]	; (8002bac <obj_cycle+0xac>)
 8002b2a:	f003 f835 	bl	8005b98 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8002b2e:	481f      	ldr	r0, [pc, #124]	; (8002bac <obj_cycle+0xac>)
 8002b30:	f002 fecc 	bl	80058cc <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002b34:	bf00      	nop
 8002b36:	2164      	movs	r1, #100	; 0x64
 8002b38:	481c      	ldr	r0, [pc, #112]	; (8002bac <obj_cycle+0xac>)
 8002b3a:	f002 ff95 	bl	8005a68 <HAL_ADC_PollForConversion>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f8      	bne.n	8002b36 <obj_cycle+0x36>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8002b44:	4819      	ldr	r0, [pc, #100]	; (8002bac <obj_cycle+0xac>)
 8002b46:	f003 f81a 	bl	8005b7e <HAL_ADC_GetValue>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

	  HAL_ADC_Start(&hadc1);
 8002b4c:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <obj_cycle+0xb0>)
 8002b4e:	f002 febd 	bl	80058cc <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8002b52:	bf00      	nop
 8002b54:	2164      	movs	r1, #100	; 0x64
 8002b56:	4816      	ldr	r0, [pc, #88]	; (8002bb0 <obj_cycle+0xb0>)
 8002b58:	f002 ff86 	bl	8005a68 <HAL_ADC_PollForConversion>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f8      	bne.n	8002b54 <obj_cycle+0x54>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8002b62:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <obj_cycle+0xb0>)
 8002b64:	f003 f80b 	bl	8005b7e <HAL_ADC_GetValue>
 8002b68:	6238      	str	r0, [r7, #32]

	  if (joystick_h < 1024) {
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d20a      	bcs.n	8002b88 <obj_cycle+0x88>
		  derive = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	77fb      	strb	r3, [r7, #31]
		  xQueueSend(swordsPosHandle, &derive, 0);
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <obj_cycle+0xb4>)
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	f107 011f 	add.w	r1, r7, #31
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2200      	movs	r2, #0
 8002b82:	f009 fcf3 	bl	800c56c <xQueueGenericSend>
 8002b86:	e00d      	b.n	8002ba4 <obj_cycle+0xa4>
	  } else if (joystick_h > 3072) {
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b8e:	d909      	bls.n	8002ba4 <obj_cycle+0xa4>
		  derive = -1;
 8002b90:	23ff      	movs	r3, #255	; 0xff
 8002b92:	77fb      	strb	r3, [r7, #31]
		  xQueueSend(swordsPosHandle, &derive, 0);
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <obj_cycle+0xb4>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f107 011f 	add.w	r1, r7, #31
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f009 fce4 	bl	800c56c <xQueueGenericSend>
	  amongx -= 1;
	  BSP_LCD_DrawBitmap(amongx, amongy,(uint8_t*)Amongus_bmp);
	  BSP_LCD_SelectLayer(1);
	  xSemaphoreGive(mutexScreenHandle);
	*/
	  vTaskDelay(10);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f00a fc4b 	bl	800d440 <vTaskDelay>
	  sConfig.Channel = ADC_CHANNEL_8;
 8002baa:	e7b8      	b.n	8002b1e <obj_cycle+0x1e>
 8002bac:	2000885c 	.word	0x2000885c
 8002bb0:	20008810 	.word	0x20008810
 8002bb4:	200084dc 	.word	0x200084dc

08002bb8 <obj_sword>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_obj_sword */
void obj_sword(void const * argument)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b08f      	sub	sp, #60	; 0x3c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN obj_sword */
	char text[30] = {};
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
 8002bd4:	615a      	str	r2, [r3, #20]
 8002bd6:	831a      	strh	r2, [r3, #24]
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4849      	ldr	r0, [pc, #292]	; (8002d04 <obj_sword+0x14c>)
 8002be0:	f006 ff22 	bl	8009a28 <HAL_RNG_GenerateRandomNumber>
	uint32_t posx = (30 + (randomNumber% (BSP_LCD_GetXSize() - 60)));
 8002be4:	697c      	ldr	r4, [r7, #20]
 8002be6:	f000 faed 	bl	80031c4 <BSP_LCD_GetXSize>
 8002bea:	4603      	mov	r3, r0
 8002bec:	3b3c      	subs	r3, #60	; 0x3c
 8002bee:	fbb4 f2f3 	udiv	r2, r4, r3
 8002bf2:	fb03 f302 	mul.w	r3, r3, r2
 8002bf6:	1ae3      	subs	r3, r4, r3
 8002bf8:	331e      	adds	r3, #30
 8002bfa:	613b      	str	r3, [r7, #16]
	uint16_t posy = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* Infinite loop */
  for(;;)
  {
	  if (stateEtat != JEU_PARTIES)
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <obj_sword+0x150>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d002      	beq.n	8002c0e <obj_sword+0x56>
	  {
		  vTaskDelete(NULL);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f00a fb87 	bl	800d31c <vTaskDelete>
	  }
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <obj_sword+0x154>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c16:	4618      	mov	r0, r3
 8002c18:	f009 ff34 	bl	800ca84 <xQueueSemaphoreTake>
	  BSP_LCD_SelectLayer(0);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f000 fb59 	bl	80032d4 <BSP_LCD_SelectLayer>
	  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 8002c22:	483b      	ldr	r0, [pc, #236]	; (8002d10 <obj_sword+0x158>)
 8002c24:	f000 fb66 	bl	80032f4 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(posx, posy, 30,30);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	b298      	uxth	r0, r3
 8002c2c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002c2e:	231e      	movs	r3, #30
 8002c30:	221e      	movs	r2, #30
 8002c32:	f000 ff4f 	bl	8003ad4 <BSP_LCD_FillRect>
	  posy += vitesse;
 8002c36:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <obj_sword+0x15c>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c3e:	4413      	add	r3, r2
 8002c40:	86fb      	strh	r3, [r7, #54]	; 0x36
	  BSP_LCD_DrawBitmap(posx, posy,(uint8_t*)Block_bmp);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002c46:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <obj_sword+0x160>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fe91 	bl	8003970 <BSP_LCD_DrawBitmap>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c52:	f000 fb4f 	bl	80032f4 <BSP_LCD_SetTextColor>
	  BSP_LCD_SelectLayer(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f000 fb3c 	bl	80032d4 <BSP_LCD_SelectLayer>
	  xSemaphoreGive(mutexScreenHandle);
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <obj_sword+0x154>)
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	f009 fc81 	bl	800c56c <xQueueGenericSend>
	  if (posy > BSP_LCD_GetYSize()-59) {
 8002c6a:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8002c6c:	f000 fabe 	bl	80031ec <BSP_LCD_GetYSize>
 8002c70:	4603      	mov	r3, r0
 8002c72:	3b3b      	subs	r3, #59	; 0x3b
 8002c74:	429c      	cmp	r4, r3
 8002c76:	d907      	bls.n	8002c88 <obj_sword+0xd0>
		  xQueueSend(collideFlagHandle, &posx, 0);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <obj_sword+0x164>)
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	f107 0110 	add.w	r1, r7, #16
 8002c80:	2300      	movs	r3, #0
 8002c82:	2200      	movs	r2, #0
 8002c84:	f009 fc72 	bl	800c56c <xQueueGenericSend>
	  }
	  if (posy > BSP_LCD_GetYSize()-29)
 8002c88:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8002c8a:	f000 faaf 	bl	80031ec <BSP_LCD_GetYSize>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	3b1d      	subs	r3, #29
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d931      	bls.n	8002cfa <obj_sword+0x142>
	  {

  		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <obj_sword+0x154>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f009 fef0 	bl	800ca84 <xQueueSemaphoreTake>
  		  BSP_LCD_SelectLayer(0);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f000 fb15 	bl	80032d4 <BSP_LCD_SelectLayer>
  		  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 8002caa:	4819      	ldr	r0, [pc, #100]	; (8002d10 <obj_sword+0x158>)
 8002cac:	f000 fb22 	bl	80032f4 <BSP_LCD_SetTextColor>
  		  BSP_LCD_FillRect(posx, posy, 30,30);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	b298      	uxth	r0, r3
 8002cb4:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002cb6:	231e      	movs	r3, #30
 8002cb8:	221e      	movs	r2, #30
 8002cba:	f000 ff0b 	bl	8003ad4 <BSP_LCD_FillRect>
  		  /*posy = 0;
  		  posx = (30 + (rand()% (BSP_LCD_GetXSize() - 60)));
  		  BSP_LCD_DrawBitmap(posx, posy,(uint8_t*)Block_bmp);*/
  		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc2:	f000 fb17 	bl	80032f4 <BSP_LCD_SetTextColor>
  		  BSP_LCD_SelectLayer(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f000 fb04 	bl	80032d4 <BSP_LCD_SelectLayer>
  		  xSemaphoreGive(mutexScreenHandle);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <obj_sword+0x154>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f009 fc49 	bl	800c56c <xQueueGenericSend>
  		  uint16_t incr = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	81fb      	strh	r3, [r7, #14]
  		  xQueueSend(scoreIncremHandle, &incr, 0);
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <obj_sword+0x168>)
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	f107 010e 	add.w	r1, r7, #14
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f009 fc3f 	bl	800c56c <xQueueGenericSend>
  		  vTaskDelay(10);
 8002cee:	200a      	movs	r0, #10
 8002cf0:	f00a fba6 	bl	800d440 <vTaskDelay>
  		  vTaskDelete(NULL);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f00a fb11 	bl	800d31c <vTaskDelete>
	  }
	  vTaskDelay(3);
 8002cfa:	2003      	movs	r0, #3
 8002cfc:	f00a fba0 	bl	800d440 <vTaskDelay>
	  if (stateEtat != JEU_PARTIES)
 8002d00:	e77e      	b.n	8002c00 <obj_sword+0x48>
 8002d02:	bf00      	nop
 8002d04:	200089ac 	.word	0x200089ac
 8002d08:	20008ad4 	.word	0x20008ad4
 8002d0c:	20008670 	.word	0x20008670
 8002d10:	ffffde00 	.word	0xffffde00
 8002d14:	200089bc 	.word	0x200089bc
 8002d18:	080cfa04 	.word	0x080cfa04
 8002d1c:	200086c4 	.word	0x200086c4
 8002d20:	200089a8 	.word	0x200089a8

08002d24 <CallbackDisplay>:
  /* USER CODE END obj_sword */
}

/* CallbackDisplay function */
void CallbackDisplay(void const * argument)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDisplay */
	stateEtat = JEU_FINPART;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <CallbackDisplay+0x20>)
 8002d2e:	2203      	movs	r2, #3
 8002d30:	701a      	strb	r2, [r3, #0]
	timed = 2;
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <CallbackDisplay+0x24>)
 8002d34:	2202      	movs	r2, #2
 8002d36:	701a      	strb	r2, [r3, #0]
	//char text[50];
	//static uint8_t ligne = 10;
	//sprintf(text,"CONGRATS !");
	//BSP_LCD_DisplayStringAt(0,ligne*12,(uint8_t*) text,RIGHT_MODE);
  /* USER CODE END CallbackDisplay */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20008ad4 	.word	0x20008ad4
 8002d48:	20008534 	.word	0x20008534

08002d4c <CallbackLED>:

/* CallbackLED function */
void CallbackLED(void const * argument)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackLED */
	HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 8002d54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d58:	4803      	ldr	r0, [pc, #12]	; (8002d68 <CallbackLED+0x1c>)
 8002d5a:	f004 fb72 	bl	8007442 <HAL_GPIO_TogglePin>
  /* USER CODE END CallbackLED */
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021c00 	.word	0x40021c00

08002d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d7e:	f002 fd1d 	bl	80057bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40001000 	.word	0x40001000

08002d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d94:	b672      	cpsid	i
}
 8002d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <Error_Handler+0x8>
	...

08002d9c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	; 0x30
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a51      	ldr	r2, [pc, #324]	; (8002eec <I2Cx_MspInit+0x150>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d14d      	bne.n	8002e48 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	4a4f      	ldr	r2, [pc, #316]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	6313      	str	r3, [r2, #48]	; 0x30
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002dc8:	2312      	movs	r3, #18
 8002dca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002dd8:	f107 031c 	add.w	r3, r7, #28
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4845      	ldr	r0, [pc, #276]	; (8002ef4 <I2Cx_MspInit+0x158>)
 8002de0:	f004 f846 	bl	8006e70 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002dea:	f107 031c 	add.w	r3, r7, #28
 8002dee:	4619      	mov	r1, r3
 8002df0:	4840      	ldr	r0, [pc, #256]	; (8002ef4 <I2Cx_MspInit+0x158>)
 8002df2:	f004 f83d 	bl	8006e70 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002df6:	4b3e      	ldr	r3, [pc, #248]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a37      	ldr	r2, [pc, #220]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e18:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002e1a:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e24:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	210f      	movs	r1, #15
 8002e2a:	2048      	movs	r0, #72	; 0x48
 8002e2c:	f003 f9bc 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002e30:	2048      	movs	r0, #72	; 0x48
 8002e32:	f003 f9d5 	bl	80061e0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	210f      	movs	r1, #15
 8002e3a:	2049      	movs	r0, #73	; 0x49
 8002e3c:	f003 f9b4 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002e40:	2049      	movs	r0, #73	; 0x49
 8002e42:	f003 f9cd 	bl	80061e0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002e46:	e04d      	b.n	8002ee4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	6313      	str	r3, [r2, #48]	; 0x30
 8002e54:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e64:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002e66:	2312      	movs	r3, #18
 8002e68:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002e72:	2304      	movs	r3, #4
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	481e      	ldr	r0, [pc, #120]	; (8002ef8 <I2Cx_MspInit+0x15c>)
 8002e7e:	f003 fff7 	bl	8006e70 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	481a      	ldr	r0, [pc, #104]	; (8002ef8 <I2Cx_MspInit+0x15c>)
 8002e90:	f003 ffee 	bl	8006e70 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eb6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <I2Cx_MspInit+0x154>)
 8002ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ec2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	201f      	movs	r0, #31
 8002eca:	f003 f96d 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002ece:	201f      	movs	r0, #31
 8002ed0:	f003 f986 	bl	80061e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	2020      	movs	r0, #32
 8002eda:	f003 f965 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002ede:	2020      	movs	r0, #32
 8002ee0:	f003 f97e 	bl	80061e0 <HAL_NVIC_EnableIRQ>
}
 8002ee4:	bf00      	nop
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000898 	.word	0x20000898
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40021c00 	.word	0x40021c00
 8002ef8:	40020400 	.word	0x40020400

08002efc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f004 fda5 	bl	8007a54 <HAL_I2C_GetState>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d125      	bne.n	8002f5c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <I2Cx_Init+0x68>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d103      	bne.n	8002f20 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <I2Cx_Init+0x6c>)
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e002      	b.n	8002f26 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <I2Cx_Init+0x70>)
 8002f24:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <I2Cx_Init+0x74>)
 8002f2a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff23 	bl	8002d9c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f004 fa8e 	bl	8007478 <HAL_I2C_Init>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000898 	.word	0x20000898
 8002f68:	40005c00 	.word	0x40005c00
 8002f6c:	40005400 	.word	0x40005400
 8002f70:	40912732 	.word	0x40912732

08002f74 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af04      	add	r7, sp, #16
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	461a      	mov	r2, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	72fb      	strb	r3, [r7, #11]
 8002f86:	460b      	mov	r3, r1
 8002f88:	813b      	strh	r3, [r7, #8]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	b299      	uxth	r1, r3
 8002f96:	88f8      	ldrh	r0, [r7, #6]
 8002f98:	893a      	ldrh	r2, [r7, #8]
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	9302      	str	r3, [sp, #8]
 8002fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4603      	mov	r3, r0
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f004 fc38 	bl	8007820 <HAL_I2C_Mem_Read>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f832 	bl	8003028 <I2Cx_Error>
  }
  return status;    
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b08a      	sub	sp, #40	; 0x28
 8002fd2:	af04      	add	r7, sp, #16
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	4611      	mov	r1, r2
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4603      	mov	r3, r0
 8002fde:	72fb      	strb	r3, [r7, #11]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	813b      	strh	r3, [r7, #8]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	b299      	uxth	r1, r3
 8002ff0:	88f8      	ldrh	r0, [r7, #6]
 8002ff2:	893a      	ldrh	r2, [r7, #8]
 8002ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff8:	9302      	str	r3, [sp, #8]
 8002ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4603      	mov	r3, r0
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f004 faf7 	bl	80075f8 <HAL_I2C_Mem_Write>
 800300a:	4603      	mov	r3, r0
 800300c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003014:	7afb      	ldrb	r3, [r7, #11]
 8003016:	4619      	mov	r1, r3
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f805 	bl	8003028 <I2Cx_Error>
  }
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f004 faaf 	bl	8007598 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ff5e 	bl	8002efc <I2Cx_Init>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <TS_IO_Init+0x10>)
 800304e:	f7ff ff55 	bl	8002efc <I2Cx_Init>
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000898 	.word	0x20000898

0800305c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af02      	add	r7, sp, #8
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	460b      	mov	r3, r1
 8003068:	71bb      	strb	r3, [r7, #6]
 800306a:	4613      	mov	r3, r2
 800306c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	b29a      	uxth	r2, r3
 8003072:	79f9      	ldrb	r1, [r7, #7]
 8003074:	2301      	movs	r3, #1
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	1d7b      	adds	r3, r7, #5
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2301      	movs	r3, #1
 800307e:	4803      	ldr	r0, [pc, #12]	; (800308c <TS_IO_Write+0x30>)
 8003080:	f7ff ffa5 	bl	8002fce <I2Cx_WriteMultiple>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000898 	.word	0x20000898

08003090 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af02      	add	r7, sp, #8
 8003096:	4603      	mov	r3, r0
 8003098:	460a      	mov	r2, r1
 800309a:	71fb      	strb	r3, [r7, #7]
 800309c:	4613      	mov	r3, r2
 800309e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80030a4:	79bb      	ldrb	r3, [r7, #6]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	79f9      	ldrb	r1, [r7, #7]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	f107 030f 	add.w	r3, r7, #15
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2301      	movs	r3, #1
 80030b6:	4804      	ldr	r0, [pc, #16]	; (80030c8 <TS_IO_Read+0x38>)
 80030b8:	f7ff ff5c 	bl	8002f74 <I2Cx_ReadMultiple>

  return read_value;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000898 	.word	0x20000898

080030cc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f002 fb91 	bl	80057fc <HAL_Delay>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <BSP_LCD_Init+0xcc>)
 80030ea:	2228      	movs	r2, #40	; 0x28
 80030ec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <BSP_LCD_Init+0xcc>)
 80030f0:	2209      	movs	r2, #9
 80030f2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80030f4:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <BSP_LCD_Init+0xcc>)
 80030f6:	2235      	movs	r2, #53	; 0x35
 80030f8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <BSP_LCD_Init+0xcc>)
 80030fc:	220b      	movs	r2, #11
 80030fe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003102:	f240 121b 	movw	r2, #283	; 0x11b
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800310a:	f240 2215 	movw	r2, #533	; 0x215
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003110:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003112:	f240 121d 	movw	r2, #285	; 0x11d
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800311a:	f240 2235 	movw	r2, #565	; 0x235
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003120:	2100      	movs	r1, #0
 8003122:	4823      	ldr	r0, [pc, #140]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003124:	f000 fee8 	bl	8003ef8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003128:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800312a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800312e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003130:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003132:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003136:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003152:	2200      	movs	r2, #0
 8003154:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <BSP_LCD_Init+0xd0>)
 800316c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800316e:	4810      	ldr	r0, [pc, #64]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003170:	f005 f98c 	bl	800848c <HAL_LTDC_GetState>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800317a:	2100      	movs	r1, #0
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <BSP_LCD_Init+0xcc>)
 800317e:	f000 fde1 	bl	8003d44 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003182:	480b      	ldr	r0, [pc, #44]	; (80031b0 <BSP_LCD_Init+0xcc>)
 8003184:	f004 ffb2 	bl	80080ec <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003188:	2201      	movs	r2, #1
 800318a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800318e:	480a      	ldr	r0, [pc, #40]	; (80031b8 <BSP_LCD_Init+0xd4>)
 8003190:	f004 f93e 	bl	8007410 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003194:	2201      	movs	r2, #1
 8003196:	2108      	movs	r1, #8
 8003198:	4808      	ldr	r0, [pc, #32]	; (80031bc <BSP_LCD_Init+0xd8>)
 800319a:	f004 f939 	bl	8007410 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800319e:	f001 f80f 	bl	80041c0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80031a2:	4807      	ldr	r0, [pc, #28]	; (80031c0 <BSP_LCD_Init+0xdc>)
 80031a4:	f000 f8d8 	bl	8003358 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20008b10 	.word	0x20008b10
 80031b4:	40016800 	.word	0x40016800
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40022800 	.word	0x40022800
 80031c0:	2000002c 	.word	0x2000002c

080031c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <BSP_LCD_GetXSize+0x20>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a06      	ldr	r2, [pc, #24]	; (80031e8 <BSP_LCD_GetXSize+0x24>)
 80031ce:	2134      	movs	r1, #52	; 0x34
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3360      	adds	r3, #96	; 0x60
 80031d8:	681b      	ldr	r3, [r3, #0]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	20000924 	.word	0x20000924
 80031e8:	20008b10 	.word	0x20008b10

080031ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <BSP_LCD_GetYSize+0x20>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a06      	ldr	r2, [pc, #24]	; (8003210 <BSP_LCD_GetYSize+0x24>)
 80031f6:	2134      	movs	r1, #52	; 0x34
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3364      	adds	r3, #100	; 0x64
 8003200:	681b      	ldr	r3, [r3, #0]
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000924 	.word	0x20000924
 8003210:	20008b10 	.word	0x20008b10

08003214 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003214:	b580      	push	{r7, lr}
 8003216:	b090      	sub	sp, #64	; 0x40
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	6039      	str	r1, [r7, #0]
 800321e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003224:	f7ff ffce 	bl	80031c4 <BSP_LCD_GetXSize>
 8003228:	4603      	mov	r3, r0
 800322a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003230:	f7ff ffdc 	bl	80031ec <BSP_LCD_GetYSize>
 8003234:	4603      	mov	r3, r0
 8003236:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003240:	23ff      	movs	r3, #255	; 0xff
 8003242:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800325a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003260:	2307      	movs	r3, #7
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003264:	f7ff ffae 	bl	80031c4 <BSP_LCD_GetXSize>
 8003268:	4603      	mov	r3, r0
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800326c:	f7ff ffbe 	bl	80031ec <BSP_LCD_GetYSize>
 8003270:	4603      	mov	r3, r0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	4619      	mov	r1, r3
 800327c:	4812      	ldr	r0, [pc, #72]	; (80032c8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800327e:	f005 f8c7 	bl	8008410 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	4911      	ldr	r1, [pc, #68]	; (80032cc <BSP_LCD_LayerDefaultInit+0xb8>)
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3304      	adds	r3, #4
 8003292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003296:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	490c      	ldr	r1, [pc, #48]	; (80032cc <BSP_LCD_LayerDefaultInit+0xb8>)
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3308      	adds	r3, #8
 80032a8:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80032aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80032ac:	88fa      	ldrh	r2, [r7, #6]
 80032ae:	4907      	ldr	r1, [pc, #28]	; (80032cc <BSP_LCD_LayerDefaultInit+0xb8>)
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80032be:	601a      	str	r2, [r3, #0]
}
 80032c0:	bf00      	nop
 80032c2:	3740      	adds	r7, #64	; 0x40
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20008b10 	.word	0x20008b10
 80032cc:	20000928 	.word	0x20000928
 80032d0:	2000002c 	.word	0x2000002c

080032d4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <BSP_LCD_SelectLayer+0x1c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
} 
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000924 	.word	0x20000924

080032f4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <BSP_LCD_SetTextColor+0x28>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4907      	ldr	r1, [pc, #28]	; (8003320 <BSP_LCD_SetTextColor+0x2c>)
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	601a      	str	r2, [r3, #0]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	20000924 	.word	0x20000924
 8003320:	20000928 	.word	0x20000928

08003324 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <BSP_LCD_SetBackColor+0x2c>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4908      	ldr	r1, [pc, #32]	; (8003354 <BSP_LCD_SetBackColor+0x30>)
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3304      	adds	r3, #4
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000924 	.word	0x20000924
 8003354:	20000928 	.word	0x20000928

08003358 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <BSP_LCD_SetFont+0x2c>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4908      	ldr	r1, [pc, #32]	; (8003388 <BSP_LCD_SetFont+0x30>)
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3308      	adds	r3, #8
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000924 	.word	0x20000924
 8003388:	20000928 	.word	0x20000928

0800338c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <BSP_LCD_GetFont+0x24>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4907      	ldr	r1, [pc, #28]	; (80033b4 <BSP_LCD_GetFont+0x28>)
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3308      	adds	r3, #8
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000924 	.word	0x20000924
 80033b4:	20000928 	.word	0x20000928

080033b8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af02      	add	r7, sp, #8
 80033be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <BSP_LCD_Clear+0x48>)
 80033c2:	681c      	ldr	r4, [r3, #0]
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <BSP_LCD_Clear+0x48>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <BSP_LCD_Clear+0x4c>)
 80033ca:	2134      	movs	r1, #52	; 0x34
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	335c      	adds	r3, #92	; 0x5c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461e      	mov	r6, r3
 80033d8:	f7ff fef4 	bl	80031c4 <BSP_LCD_GetXSize>
 80033dc:	4605      	mov	r5, r0
 80033de:	f7ff ff05 	bl	80031ec <BSP_LCD_GetYSize>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2300      	movs	r3, #0
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	462a      	mov	r2, r5
 80033f0:	4631      	mov	r1, r6
 80033f2:	4620      	mov	r0, r4
 80033f4:	f000 fe54 	bl	80040a0 <LL_FillBuffer>
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003400:	20000924 	.word	0x20000924
 8003404:	20008b10 	.word	0x20008b10

08003408 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
 8003412:	460b      	mov	r3, r1
 8003414:	80bb      	strh	r3, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <BSP_LCD_DisplayChar+0x80>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	491b      	ldr	r1, [pc, #108]	; (800348c <BSP_LCD_DisplayChar+0x84>)
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3308      	adds	r3, #8
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <BSP_LCD_DisplayChar+0x80>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4c14      	ldr	r4, [pc, #80]	; (800348c <BSP_LCD_DisplayChar+0x84>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4423      	add	r3, r4
 8003446:	3308      	adds	r3, #8
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800344c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <BSP_LCD_DisplayChar+0x80>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4c0d      	ldr	r4, [pc, #52]	; (800348c <BSP_LCD_DisplayChar+0x84>)
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4423      	add	r3, r4
 8003460:	3308      	adds	r3, #8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	889b      	ldrh	r3, [r3, #4]
 8003466:	3307      	adds	r3, #7
 8003468:	2b00      	cmp	r3, #0
 800346a:	da00      	bge.n	800346e <BSP_LCD_DisplayChar+0x66>
 800346c:	3307      	adds	r3, #7
 800346e:	10db      	asrs	r3, r3, #3
 8003470:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003474:	18ca      	adds	r2, r1, r3
 8003476:	88b9      	ldrh	r1, [r7, #4]
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fd58 	bl	8003f30 <DrawChar>
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bd90      	pop	{r4, r7, pc}
 8003488:	20000924 	.word	0x20000924
 800348c:	20000928 	.word	0x20000928

08003490 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003490:	b5b0      	push	{r4, r5, r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	60ba      	str	r2, [r7, #8]
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	81fb      	strh	r3, [r7, #14]
 800349e:	460b      	mov	r3, r1
 80034a0:	81bb      	strh	r3, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80034a6:	2301      	movs	r3, #1
 80034a8:	83fb      	strh	r3, [r7, #30]
 80034aa:	2300      	movs	r3, #0
 80034ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80034ba:	e002      	b.n	80034c2 <BSP_LCD_DisplayStringAt+0x32>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	3301      	adds	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	617a      	str	r2, [r7, #20]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f6      	bne.n	80034bc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80034ce:	f7ff fe79 	bl	80031c4 <BSP_LCD_GetXSize>
 80034d2:	4601      	mov	r1, r0
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <BSP_LCD_DisplayStringAt+0x188>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4850      	ldr	r0, [pc, #320]	; (800361c <BSP_LCD_DisplayStringAt+0x18c>)
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	3308      	adds	r3, #8
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	889b      	ldrh	r3, [r3, #4]
 80034ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ee:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d01c      	beq.n	8003530 <BSP_LCD_DisplayStringAt+0xa0>
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	dc33      	bgt.n	8003562 <BSP_LCD_DisplayStringAt+0xd2>
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d002      	beq.n	8003504 <BSP_LCD_DisplayStringAt+0x74>
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d019      	beq.n	8003536 <BSP_LCD_DisplayStringAt+0xa6>
 8003502:	e02e      	b.n	8003562 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	1ad1      	subs	r1, r2, r3
 800350a:	4b43      	ldr	r3, [pc, #268]	; (8003618 <BSP_LCD_DisplayStringAt+0x188>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4843      	ldr	r0, [pc, #268]	; (800361c <BSP_LCD_DisplayStringAt+0x18c>)
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4403      	add	r3, r0
 800351a:	3308      	adds	r3, #8
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	889b      	ldrh	r3, [r3, #4]
 8003520:	fb03 f301 	mul.w	r3, r3, r1
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	4413      	add	r3, r2
 800352c:	83fb      	strh	r3, [r7, #30]
      break;
 800352e:	e01b      	b.n	8003568 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	83fb      	strh	r3, [r7, #30]
      break;
 8003534:	e018      	b.n	8003568 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	b299      	uxth	r1, r3
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <BSP_LCD_DisplayStringAt+0x188>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4836      	ldr	r0, [pc, #216]	; (800361c <BSP_LCD_DisplayStringAt+0x18c>)
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	3308      	adds	r3, #8
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	889b      	ldrh	r3, [r3, #4]
 8003554:	fb11 f303 	smulbb	r3, r1, r3
 8003558:	b29a      	uxth	r2, r3
 800355a:	89fb      	ldrh	r3, [r7, #14]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	83fb      	strh	r3, [r7, #30]
      break;
 8003560:	e002      	b.n	8003568 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003562:	89fb      	ldrh	r3, [r7, #14]
 8003564:	83fb      	strh	r3, [r7, #30]
      break;
 8003566:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003568:	8bfb      	ldrh	r3, [r7, #30]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <BSP_LCD_DisplayStringAt+0xe6>
 800356e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003572:	2b00      	cmp	r3, #0
 8003574:	da1d      	bge.n	80035b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800357a:	e01a      	b.n	80035b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	89b9      	ldrh	r1, [r7, #12]
 8003582:	8bfb      	ldrh	r3, [r7, #30]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff3f 	bl	8003408 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <BSP_LCD_DisplayStringAt+0x188>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4923      	ldr	r1, [pc, #140]	; (800361c <BSP_LCD_DisplayStringAt+0x18c>)
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3308      	adds	r3, #8
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	889a      	ldrh	r2, [r3, #4]
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
 80035a2:	4413      	add	r3, r2
 80035a4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3301      	adds	r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
    i++;
 80035ac:	8bbb      	ldrh	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bf14      	ite	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	2300      	moveq	r3, #0
 80035be:	b2dc      	uxtb	r4, r3
 80035c0:	f7ff fe00 	bl	80031c4 <BSP_LCD_GetXSize>
 80035c4:	8bb9      	ldrh	r1, [r7, #28]
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <BSP_LCD_DisplayStringAt+0x188>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4d14      	ldr	r5, [pc, #80]	; (800361c <BSP_LCD_DisplayStringAt+0x18c>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	442b      	add	r3, r5
 80035d6:	3308      	adds	r3, #8
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	889b      	ldrh	r3, [r3, #4]
 80035dc:	fb03 f301 	mul.w	r3, r3, r1
 80035e0:	1ac3      	subs	r3, r0, r3
 80035e2:	b299      	uxth	r1, r3
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <BSP_LCD_DisplayStringAt+0x188>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <BSP_LCD_DisplayStringAt+0x18c>)
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4403      	add	r3, r0
 80035f4:	3308      	adds	r3, #8
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	889b      	ldrh	r3, [r3, #4]
 80035fa:	4299      	cmp	r1, r3
 80035fc:	bf2c      	ite	cs
 80035fe:	2301      	movcs	r3, #1
 8003600:	2300      	movcc	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	4023      	ands	r3, r4
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1b7      	bne.n	800357c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bdb0      	pop	{r4, r5, r7, pc}
 8003616:	bf00      	nop
 8003618:	20000924 	.word	0x20000924
 800361c:	20000928 	.word	0x20000928

08003620 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800362c:	f7ff feae 	bl	800338c <BSP_LCD_GetFont>
 8003630:	4603      	mov	r3, r0
 8003632:	88db      	ldrh	r3, [r3, #6]
 8003634:	88fa      	ldrh	r2, [r7, #6]
 8003636:	fb12 f303 	smulbb	r3, r2, r3
 800363a:	b299      	uxth	r1, r3
 800363c:	2303      	movs	r3, #3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	2000      	movs	r0, #0
 8003642:	f7ff ff25 	bl	8003490 <BSP_LCD_DisplayStringAt>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af02      	add	r7, sp, #8
 8003656:	4603      	mov	r3, r0
 8003658:	80fb      	strh	r3, [r7, #6]
 800365a:	460b      	mov	r3, r1
 800365c:	80bb      	strh	r3, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <BSP_LCD_DrawHLine+0xb0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a26      	ldr	r2, [pc, #152]	; (8003704 <BSP_LCD_DrawHLine+0xb4>)
 800366c:	2134      	movs	r1, #52	; 0x34
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3348      	adds	r3, #72	; 0x48
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d114      	bne.n	80036a6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800367c:	4b20      	ldr	r3, [pc, #128]	; (8003700 <BSP_LCD_DrawHLine+0xb0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <BSP_LCD_DrawHLine+0xb4>)
 8003682:	2134      	movs	r1, #52	; 0x34
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	335c      	adds	r3, #92	; 0x5c
 800368c:	681c      	ldr	r4, [r3, #0]
 800368e:	f7ff fd99 	bl	80031c4 <BSP_LCD_GetXSize>
 8003692:	4602      	mov	r2, r0
 8003694:	88bb      	ldrh	r3, [r7, #4]
 8003696:	fb03 f202 	mul.w	r2, r3, r2
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	4413      	add	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4423      	add	r3, r4
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e013      	b.n	80036ce <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <BSP_LCD_DrawHLine+0xb0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a16      	ldr	r2, [pc, #88]	; (8003704 <BSP_LCD_DrawHLine+0xb4>)
 80036ac:	2134      	movs	r1, #52	; 0x34
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	335c      	adds	r3, #92	; 0x5c
 80036b6:	681c      	ldr	r4, [r3, #0]
 80036b8:	f7ff fd84 	bl	80031c4 <BSP_LCD_GetXSize>
 80036bc:	4602      	mov	r2, r0
 80036be:	88bb      	ldrh	r3, [r7, #4]
 80036c0:	fb03 f202 	mul.w	r2, r3, r2
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4423      	add	r3, r4
 80036cc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <BSP_LCD_DrawHLine+0xb0>)
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	887c      	ldrh	r4, [r7, #2]
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <BSP_LCD_DrawHLine+0xb0>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4d0b      	ldr	r5, [pc, #44]	; (8003708 <BSP_LCD_DrawHLine+0xb8>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	442b      	add	r3, r5
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2301      	movs	r3, #1
 80036f0:	4622      	mov	r2, r4
 80036f2:	f000 fcd5 	bl	80040a0 <LL_FillBuffer>
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bdb0      	pop	{r4, r5, r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000924 	.word	0x20000924
 8003704:	20008b10 	.word	0x20008b10
 8003708:	20000928 	.word	0x20000928

0800370c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	80fb      	strh	r3, [r7, #6]
 8003716:	460b      	mov	r3, r1
 8003718:	80bb      	strh	r3, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	f1c3 0303 	rsb	r3, r3, #3
 8003726:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003730:	e0c7      	b.n	80038c2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	b29a      	uxth	r2, r3
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4413      	add	r3, r2
 800373a:	b298      	uxth	r0, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	b29b      	uxth	r3, r3
 8003740:	88ba      	ldrh	r2, [r7, #4]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	b299      	uxth	r1, r3
 8003746:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4c64      	ldr	r4, [pc, #400]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4423      	add	r3, r4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	f000 f8c1 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	b29b      	uxth	r3, r3
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	b298      	uxth	r0, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	b29b      	uxth	r3, r3
 800376c:	88ba      	ldrh	r2, [r7, #4]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	b299      	uxth	r1, r3
 8003772:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4c59      	ldr	r4, [pc, #356]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4423      	add	r3, r4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	f000 f8ab 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	b29a      	uxth	r2, r3
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	4413      	add	r3, r2
 8003792:	b298      	uxth	r0, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	b29b      	uxth	r3, r3
 8003798:	88ba      	ldrh	r2, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	b299      	uxth	r1, r3
 800379e:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4c4e      	ldr	r4, [pc, #312]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4423      	add	r3, r4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f000 f895 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	b298      	uxth	r0, r3
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	88ba      	ldrh	r2, [r7, #4]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	b299      	uxth	r1, r3
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4c43      	ldr	r4, [pc, #268]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4423      	add	r3, r4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	f000 f87f 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	4413      	add	r3, r2
 80037ea:	b298      	uxth	r0, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	88bb      	ldrh	r3, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	b299      	uxth	r1, r3
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4c38      	ldr	r4, [pc, #224]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4423      	add	r3, r4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	f000 f869 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	b29b      	uxth	r3, r3
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	b298      	uxth	r0, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	b29a      	uxth	r2, r3
 800381c:	88bb      	ldrh	r3, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	b299      	uxth	r1, r3
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4c2d      	ldr	r4, [pc, #180]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4423      	add	r3, r4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	f000 f853 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	b29a      	uxth	r2, r3
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4413      	add	r3, r2
 8003842:	b298      	uxth	r0, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	b29a      	uxth	r2, r3
 8003848:	88bb      	ldrh	r3, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	b299      	uxth	r1, r3
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4c22      	ldr	r4, [pc, #136]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4423      	add	r3, r4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	f000 f83d 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	b29b      	uxth	r3, r3
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	b298      	uxth	r0, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	b29a      	uxth	r2, r3
 8003874:	88bb      	ldrh	r3, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	b299      	uxth	r1, r3
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <BSP_LCD_DrawCircle+0x1cc>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4c17      	ldr	r4, [pc, #92]	; (80038dc <BSP_LCD_DrawCircle+0x1d0>)
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4423      	add	r3, r4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	f000 f827 	bl	80038e0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da06      	bge.n	80038a6 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	009a      	lsls	r2, r3, #2
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4413      	add	r3, r2
 80038a0:	3306      	adds	r3, #6
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e00a      	b.n	80038bc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	009a      	lsls	r2, r3, #2
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4413      	add	r3, r2
 80038b2:	330a      	adds	r3, #10
 80038b4:	617b      	str	r3, [r7, #20]
      current_y--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	3301      	adds	r3, #1
 80038c0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	f67f af33 	bls.w	8003732 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000924 	.word	0x20000924
 80038dc:	20000928 	.word	0x20000928

080038e0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	603a      	str	r2, [r7, #0]
 80038ea:	80fb      	strh	r3, [r7, #6]
 80038ec:	460b      	mov	r3, r1
 80038ee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <BSP_LCD_DrawPixel+0x88>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <BSP_LCD_DrawPixel+0x8c>)
 80038f6:	2134      	movs	r1, #52	; 0x34
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3348      	adds	r3, #72	; 0x48
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d116      	bne.n	8003934 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003906:	4b18      	ldr	r3, [pc, #96]	; (8003968 <BSP_LCD_DrawPixel+0x88>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a18      	ldr	r2, [pc, #96]	; (800396c <BSP_LCD_DrawPixel+0x8c>)
 800390c:	2134      	movs	r1, #52	; 0x34
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	335c      	adds	r3, #92	; 0x5c
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	88bd      	ldrh	r5, [r7, #4]
 800391a:	f7ff fc53 	bl	80031c4 <BSP_LCD_GetXSize>
 800391e:	4603      	mov	r3, r0
 8003920:	fb03 f205 	mul.w	r2, r3, r5
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	4413      	add	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4423      	add	r3, r4
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b292      	uxth	r2, r2
 8003930:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003932:	e015      	b.n	8003960 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <BSP_LCD_DrawPixel+0x88>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0c      	ldr	r2, [pc, #48]	; (800396c <BSP_LCD_DrawPixel+0x8c>)
 800393a:	2134      	movs	r1, #52	; 0x34
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	335c      	adds	r3, #92	; 0x5c
 8003944:	681c      	ldr	r4, [r3, #0]
 8003946:	88bd      	ldrh	r5, [r7, #4]
 8003948:	f7ff fc3c 	bl	80031c4 <BSP_LCD_GetXSize>
 800394c:	4603      	mov	r3, r0
 800394e:	fb03 f205 	mul.w	r2, r3, r5
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4423      	add	r3, r4
 800395a:	461a      	mov	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bdb0      	pop	{r4, r5, r7, pc}
 8003968:	20000924 	.word	0x20000924
 800396c:	20008b10 	.word	0x20008b10

08003970 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b08b      	sub	sp, #44	; 0x2c
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	330a      	adds	r3, #10
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	330b      	adds	r3, #11
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	330c      	adds	r3, #12
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	441a      	add	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	330d      	adds	r3, #13
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	4413      	add	r3, r2
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3312      	adds	r3, #18
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3313      	adds	r3, #19
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3314      	adds	r3, #20
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3315      	adds	r3, #21
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	4413      	add	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3316      	adds	r3, #22
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3317      	adds	r3, #23
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3318      	adds	r3, #24
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	441a      	add	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3319      	adds	r3, #25
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	4413      	add	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	331c      	adds	r3, #28
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	331d      	adds	r3, #29
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	4413      	add	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <BSP_LCD_DrawBitmap+0x15c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2b      	ldr	r2, [pc, #172]	; (8003ad0 <BSP_LCD_DrawBitmap+0x160>)
 8003a22:	2134      	movs	r1, #52	; 0x34
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	335c      	adds	r3, #92	; 0x5c
 8003a2c:	681c      	ldr	r4, [r3, #0]
 8003a2e:	f7ff fbc9 	bl	80031c4 <BSP_LCD_GetXSize>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4423      	add	r3, r4
 8003a42:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3b20      	subs	r3, #32
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d802      	bhi.n	8003a52 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e008      	b.n	8003a64 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	3b10      	subs	r3, #16
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d802      	bhi.n	8003a60 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	e001      	b.n	8003a64 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	08d2      	lsrs	r2, r2, #3
 8003a72:	fb02 f203 	mul.w	r2, r2, r3
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	4413      	add	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	e018      	b.n	8003ab8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003a86:	6a39      	ldr	r1, [r7, #32]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fb53 	bl	8004138 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003a92:	f7ff fb97 	bl	80031c4 <BSP_LCD_GetXSize>
 8003a96:	4603      	mov	r3, r0
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	6a3a      	ldr	r2, [r7, #32]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	08db      	lsrs	r3, r3, #3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	425b      	negs	r3, r3
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3e2      	bcc.n	8003a86 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	372c      	adds	r7, #44	; 0x2c
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd90      	pop	{r4, r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000924 	.word	0x20000924
 8003ad0:	20008b10 	.word	0x20008b10

08003ad4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad8:	b086      	sub	sp, #24
 8003ada:	af02      	add	r7, sp, #8
 8003adc:	4604      	mov	r4, r0
 8003ade:	4608      	mov	r0, r1
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	80fb      	strh	r3, [r7, #6]
 8003ae8:	4603      	mov	r3, r0
 8003aea:	80bb      	strh	r3, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
 8003af0:	4613      	mov	r3, r2
 8003af2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003af8:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <BSP_LCD_FillRect+0xe8>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4930      	ldr	r1, [pc, #192]	; (8003bc0 <BSP_LCD_FillRect+0xec>)
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fbf2 	bl	80032f4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <BSP_LCD_FillRect+0xe8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <BSP_LCD_FillRect+0xf0>)
 8003b16:	2134      	movs	r1, #52	; 0x34
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3348      	adds	r3, #72	; 0x48
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d114      	bne.n	8003b50 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <BSP_LCD_FillRect+0xe8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <BSP_LCD_FillRect+0xf0>)
 8003b2c:	2134      	movs	r1, #52	; 0x34
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	335c      	adds	r3, #92	; 0x5c
 8003b36:	681c      	ldr	r4, [r3, #0]
 8003b38:	f7ff fb44 	bl	80031c4 <BSP_LCD_GetXSize>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	88bb      	ldrh	r3, [r7, #4]
 8003b40:	fb03 f202 	mul.w	r2, r3, r2
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	4413      	add	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4423      	add	r3, r4
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e013      	b.n	8003b78 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <BSP_LCD_FillRect+0xe8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <BSP_LCD_FillRect+0xf0>)
 8003b56:	2134      	movs	r1, #52	; 0x34
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	335c      	adds	r3, #92	; 0x5c
 8003b60:	681c      	ldr	r4, [r3, #0]
 8003b62:	f7ff fb2f 	bl	80031c4 <BSP_LCD_GetXSize>
 8003b66:	4602      	mov	r2, r0
 8003b68:	88bb      	ldrh	r3, [r7, #4]
 8003b6a:	fb03 f202 	mul.w	r2, r3, r2
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4423      	add	r3, r4
 8003b76:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <BSP_LCD_FillRect+0xe8>)
 8003b7a:	681c      	ldr	r4, [r3, #0]
 8003b7c:	68fd      	ldr	r5, [r7, #12]
 8003b7e:	887e      	ldrh	r6, [r7, #2]
 8003b80:	f8b7 8000 	ldrh.w	r8, [r7]
 8003b84:	f7ff fb1e 	bl	80031c4 <BSP_LCD_GetXSize>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	887b      	ldrh	r3, [r7, #2]
 8003b8c:	1ad1      	subs	r1, r2, r3
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <BSP_LCD_FillRect+0xe8>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <BSP_LCD_FillRect+0xec>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4403      	add	r3, r0
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	9100      	str	r1, [sp, #0]
 8003ba4:	4643      	mov	r3, r8
 8003ba6:	4632      	mov	r2, r6
 8003ba8:	4629      	mov	r1, r5
 8003baa:	4620      	mov	r0, r4
 8003bac:	f000 fa78 	bl	80040a0 <LL_FillBuffer>
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000924 	.word	0x20000924
 8003bc0:	20000928 	.word	0x20000928
 8003bc4:	20008b10 	.word	0x20008b10

08003bc8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	80fb      	strh	r3, [r7, #6]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	80bb      	strh	r3, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	f1c3 0303 	rsb	r3, r3, #3
 8003be2:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003bec:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <BSP_LCD_FillCircle+0x138>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4944      	ldr	r1, [pc, #272]	; (8003d04 <BSP_LCD_FillCircle+0x13c>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fb78 	bl	80032f4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003c04:	e061      	b.n	8003cca <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d021      	beq.n	8003c50 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	b298      	uxth	r0, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	88bb      	ldrh	r3, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	b299      	uxth	r1, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f7ff fd11 	bl	8003650 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b298      	uxth	r0, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	88ba      	ldrh	r2, [r7, #4]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b299      	uxth	r1, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7ff fd00 	bl	8003650 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d021      	beq.n	8003c9a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	b298      	uxth	r0, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	88ba      	ldrh	r2, [r7, #4]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	b299      	uxth	r1, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	f7ff fcec 	bl	8003650 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	b298      	uxth	r0, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	88bb      	ldrh	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	b299      	uxth	r1, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	f7ff fcdb 	bl	8003650 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da06      	bge.n	8003cae <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3306      	adds	r3, #6
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e00a      	b.n	8003cc4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	009a      	lsls	r2, r3, #2
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	330a      	adds	r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
      current_y--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d999      	bls.n	8003c06 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <BSP_LCD_FillCircle+0x138>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	490b      	ldr	r1, [pc, #44]	; (8003d04 <BSP_LCD_FillCircle+0x13c>)
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fb05 	bl	80032f4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	88b9      	ldrh	r1, [r7, #4]
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fd0b 	bl	800370c <BSP_LCD_DrawCircle>
}
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000924 	.word	0x20000924
 8003d04:	20000928 	.word	0x20000928

08003d08 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <BSP_LCD_DisplayOn+0x30>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <BSP_LCD_DisplayOn+0x30>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d22:	4806      	ldr	r0, [pc, #24]	; (8003d3c <BSP_LCD_DisplayOn+0x34>)
 8003d24:	f003 fb74 	bl	8007410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003d28:	2201      	movs	r2, #1
 8003d2a:	2108      	movs	r1, #8
 8003d2c:	4804      	ldr	r0, [pc, #16]	; (8003d40 <BSP_LCD_DisplayOn+0x38>)
 8003d2e:	f003 fb6f 	bl	8007410 <HAL_GPIO_WritePin>
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20008b10 	.word	0x20008b10
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40022800 	.word	0x40022800

08003d44 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b090      	sub	sp, #64	; 0x40
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d4e:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a63      	ldr	r2, [pc, #396]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d66:	4b5e      	ldr	r3, [pc, #376]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a5d      	ldr	r2, [pc, #372]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d7e:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a57      	ldr	r2, [pc, #348]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d84:	f043 0310 	orr.w	r3, r3, #16
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b55      	ldr	r3, [pc, #340]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d96:	4b52      	ldr	r3, [pc, #328]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a51      	ldr	r2, [pc, #324]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dae:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4a4b      	ldr	r2, [pc, #300]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003dc6:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a45      	ldr	r2, [pc, #276]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003dde:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	4a3f      	ldr	r2, [pc, #252]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dea:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a39      	ldr	r2, [pc, #228]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a33      	ldr	r2, [pc, #204]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <BSP_LCD_MspInit+0x19c>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003e26:	2310      	movs	r3, #16
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e32:	2302      	movs	r3, #2
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003e36:	230e      	movs	r3, #14
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4828      	ldr	r0, [pc, #160]	; (8003ee4 <BSP_LCD_MspInit+0x1a0>)
 8003e42:	f003 f815 	bl	8006e70 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003e50:	2309      	movs	r3, #9
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4823      	ldr	r0, [pc, #140]	; (8003ee8 <BSP_LCD_MspInit+0x1a4>)
 8003e5c:	f003 f808 	bl	8006e70 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003e60:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e6a:	230e      	movs	r3, #14
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e72:	4619      	mov	r1, r3
 8003e74:	481d      	ldr	r0, [pc, #116]	; (8003eec <BSP_LCD_MspInit+0x1a8>)
 8003e76:	f002 fffb 	bl	8006e70 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003e7a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e84:	230e      	movs	r3, #14
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4818      	ldr	r0, [pc, #96]	; (8003ef0 <BSP_LCD_MspInit+0x1ac>)
 8003e90:	f002 ffee 	bl	8006e70 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003e94:	23f7      	movs	r3, #247	; 0xf7
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e9c:	230e      	movs	r3, #14
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4813      	ldr	r0, [pc, #76]	; (8003ef4 <BSP_LCD_MspInit+0x1b0>)
 8003ea8:	f002 ffe2 	bl	8006e70 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eba:	4619      	mov	r1, r3
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <BSP_LCD_MspInit+0x1a8>)
 8003ebe:	f002 ffd7 	bl	8006e70 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4808      	ldr	r0, [pc, #32]	; (8003ef4 <BSP_LCD_MspInit+0x1b0>)
 8003ed2:	f002 ffcd 	bl	8006e70 <HAL_GPIO_Init>
}
 8003ed6:	bf00      	nop
 8003ed8:	3740      	adds	r7, #64	; 0x40
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40021800 	.word	0x40021800
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40022400 	.word	0x40022400
 8003ef4:	40022800 	.word	0x40022800

08003ef8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <BSP_LCD_ClockConfig+0x34>)
 8003f04:	2208      	movs	r2, #8
 8003f06:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003f08:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <BSP_LCD_ClockConfig+0x34>)
 8003f0a:	22c0      	movs	r2, #192	; 0xc0
 8003f0c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <BSP_LCD_ClockConfig+0x34>)
 8003f10:	2205      	movs	r2, #5
 8003f12:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <BSP_LCD_ClockConfig+0x34>)
 8003f16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003f1c:	4803      	ldr	r0, [pc, #12]	; (8003f2c <BSP_LCD_ClockConfig+0x34>)
 8003f1e:	f005 f969 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000940 	.word	0x20000940

08003f30 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	603a      	str	r2, [r7, #0]
 8003f3a:	80fb      	strh	r3, [r7, #6]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <DrawChar+0x168>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4953      	ldr	r1, [pc, #332]	; (800409c <DrawChar+0x16c>)
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3308      	adds	r3, #8
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	88db      	ldrh	r3, [r3, #6]
 8003f5e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003f60:	4b4d      	ldr	r3, [pc, #308]	; (8004098 <DrawChar+0x168>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	494d      	ldr	r1, [pc, #308]	; (800409c <DrawChar+0x16c>)
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3308      	adds	r3, #8
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	889b      	ldrh	r3, [r3, #4]
 8003f76:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003f78:	8a3b      	ldrh	r3, [r7, #16]
 8003f7a:	3307      	adds	r3, #7
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da00      	bge.n	8003f82 <DrawChar+0x52>
 8003f80:	3307      	adds	r3, #7
 8003f82:	10db      	asrs	r3, r3, #3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	8a3b      	ldrh	r3, [r7, #16]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	e076      	b.n	8004086 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003f98:	8a3b      	ldrh	r3, [r7, #16]
 8003f9a:	3307      	adds	r3, #7
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da00      	bge.n	8003fa2 <DrawChar+0x72>
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	10db      	asrs	r3, r3, #3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fb03 f302 	mul.w	r3, r3, r2
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003fb2:	8a3b      	ldrh	r3, [r7, #16]
 8003fb4:	3307      	adds	r3, #7
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da00      	bge.n	8003fbc <DrawChar+0x8c>
 8003fba:	3307      	adds	r3, #7
 8003fbc:	10db      	asrs	r3, r3, #3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d002      	beq.n	8003fc8 <DrawChar+0x98>
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d004      	beq.n	8003fd0 <DrawChar+0xa0>
 8003fc6:	e00c      	b.n	8003fe2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	617b      	str	r3, [r7, #20]
      break;
 8003fce:	e016      	b.n	8003ffe <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	3201      	adds	r2, #1
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
      break;
 8003fe0:	e00d      	b.n	8003ffe <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	041a      	lsls	r2, r3, #16
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	3301      	adds	r3, #1
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	3202      	adds	r2, #2
 8003ff6:	7812      	ldrb	r2, [r2, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
      break;
 8003ffc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e036      	b.n	8004072 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004004:	8a3a      	ldrh	r2, [r7, #16]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	1ad2      	subs	r2, r2, r3
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	4413      	add	r3, r2
 800400e:	3b01      	subs	r3, #1
 8004010:	2201      	movs	r2, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	461a      	mov	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d012      	beq.n	8004046 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	b29a      	uxth	r2, r3
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	4413      	add	r3, r2
 8004028:	b298      	uxth	r0, r3
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <DrawChar+0x168>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <DrawChar+0x16c>)
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	88bb      	ldrh	r3, [r7, #4]
 800403e:	4619      	mov	r1, r3
 8004040:	f7ff fc4e 	bl	80038e0 <BSP_LCD_DrawPixel>
 8004044:	e012      	b.n	800406c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	b29a      	uxth	r2, r3
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	4413      	add	r3, r2
 800404e:	b298      	uxth	r0, r3
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <DrawChar+0x168>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4911      	ldr	r1, [pc, #68]	; (800409c <DrawChar+0x16c>)
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3304      	adds	r3, #4
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	88bb      	ldrh	r3, [r7, #4]
 8004066:	4619      	mov	r1, r3
 8004068:	f7ff fc3a 	bl	80038e0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	3301      	adds	r3, #1
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	8a3b      	ldrh	r3, [r7, #16]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	429a      	cmp	r2, r3
 8004078:	d3c4      	bcc.n	8004004 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800407a:	88bb      	ldrh	r3, [r7, #4]
 800407c:	3301      	adds	r3, #1
 800407e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	8a7b      	ldrh	r3, [r7, #18]
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	429a      	cmp	r2, r3
 800408c:	d384      	bcc.n	8003f98 <DrawChar+0x68>
  }
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000924 	.word	0x20000924
 800409c:	20000928 	.word	0x20000928

080040a0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <LL_FillBuffer+0x88>)
 80040b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040b4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <LL_FillBuffer+0x8c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <LL_FillBuffer+0x90>)
 80040bc:	2134      	movs	r1, #52	; 0x34
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3348      	adds	r3, #72	; 0x48
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d103      	bne.n	80040d4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <LL_FillBuffer+0x88>)
 80040ce:	2202      	movs	r2, #2
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	e002      	b.n	80040da <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <LL_FillBuffer+0x88>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80040da:	4a13      	ldr	r2, [pc, #76]	; (8004128 <LL_FillBuffer+0x88>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <LL_FillBuffer+0x88>)
 80040e2:	4a14      	ldr	r2, [pc, #80]	; (8004134 <LL_FillBuffer+0x94>)
 80040e4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80040e6:	4810      	ldr	r0, [pc, #64]	; (8004128 <LL_FillBuffer+0x88>)
 80040e8:	f002 fb26 	bl	8006738 <HAL_DMA2D_Init>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d115      	bne.n	800411e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	480c      	ldr	r0, [pc, #48]	; (8004128 <LL_FillBuffer+0x88>)
 80040f6:	f002 fd8d 	bl	8006c14 <HAL_DMA2D_ConfigLayer>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10e      	bne.n	800411e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	4807      	ldr	r0, [pc, #28]	; (8004128 <LL_FillBuffer+0x88>)
 800410c:	f002 fb5e 	bl	80067cc <HAL_DMA2D_Start>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004116:	210a      	movs	r1, #10
 8004118:	4803      	ldr	r0, [pc, #12]	; (8004128 <LL_FillBuffer+0x88>)
 800411a:	f002 fb82 	bl	8006822 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200008e4 	.word	0x200008e4
 800412c:	20000924 	.word	0x20000924
 8004130:	20008b10 	.word	0x20008b10
 8004134:	4002b000 	.word	0x4002b000

08004138 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004146:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 8004148:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800414c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004154:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 8004156:	2200      	movs	r2, #0
 8004158:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 8004162:	22ff      	movs	r2, #255	; 0xff
 8004164:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004166:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 800416e:	2200      	movs	r2, #0
 8004170:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <LL_ConvertLineToARGB8888+0x84>)
 8004176:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004178:	480f      	ldr	r0, [pc, #60]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 800417a:	f002 fadd 	bl	8006738 <HAL_DMA2D_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d115      	bne.n	80041b0 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004184:	2101      	movs	r1, #1
 8004186:	480c      	ldr	r0, [pc, #48]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 8004188:	f002 fd44 	bl	8006c14 <HAL_DMA2D_ConfigLayer>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	2301      	movs	r3, #1
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4806      	ldr	r0, [pc, #24]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 800419e:	f002 fb15 	bl	80067cc <HAL_DMA2D_Start>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80041a8:	210a      	movs	r1, #10
 80041aa:	4803      	ldr	r0, [pc, #12]	; (80041b8 <LL_ConvertLineToARGB8888+0x80>)
 80041ac:	f002 fb39 	bl	8006822 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200008e4 	.word	0x200008e4
 80041bc:	4002b000 	.word	0x4002b000

080041c0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <BSP_SDRAM_Init+0xac>)
 80041c6:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <BSP_SDRAM_Init+0xb0>)
 80041c8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 80041cc:	2202      	movs	r2, #2
 80041ce:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 80041d2:	2207      	movs	r2, #7
 80041d4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80041d6:	4b27      	ldr	r3, [pc, #156]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 80041d8:	2204      	movs	r2, #4
 80041da:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 80041de:	2207      	movs	r2, #7
 80041e0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80041e2:	4b24      	ldr	r3, [pc, #144]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 80041e4:	2202      	movs	r2, #2
 80041e6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80041e8:	4b22      	ldr	r3, [pc, #136]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 80041ea:	2202      	movs	r2, #2
 80041ec:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 80041f0:	2202      	movs	r2, #2
 80041f2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <BSP_SDRAM_Init+0xac>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80041fa:	4b1c      	ldr	r3, [pc, #112]	; (800426c <BSP_SDRAM_Init+0xac>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <BSP_SDRAM_Init+0xac>)
 8004202:	2204      	movs	r2, #4
 8004204:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004206:	4b19      	ldr	r3, [pc, #100]	; (800426c <BSP_SDRAM_Init+0xac>)
 8004208:	2210      	movs	r2, #16
 800420a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <BSP_SDRAM_Init+0xac>)
 800420e:	2240      	movs	r2, #64	; 0x40
 8004210:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <BSP_SDRAM_Init+0xac>)
 8004214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004218:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <BSP_SDRAM_Init+0xac>)
 800421c:	2200      	movs	r2, #0
 800421e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <BSP_SDRAM_Init+0xac>)
 8004222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004226:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <BSP_SDRAM_Init+0xac>)
 800422a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <BSP_SDRAM_Init+0xac>)
 8004232:	2200      	movs	r2, #0
 8004234:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004236:	2100      	movs	r1, #0
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <BSP_SDRAM_Init+0xac>)
 800423a:	f000 f87f 	bl	800433c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800423e:	490d      	ldr	r1, [pc, #52]	; (8004274 <BSP_SDRAM_Init+0xb4>)
 8004240:	480a      	ldr	r0, [pc, #40]	; (800426c <BSP_SDRAM_Init+0xac>)
 8004242:	f006 f8eb 	bl	800a41c <HAL_SDRAM_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <BSP_SDRAM_Init+0xb8>)
 800424e:	2201      	movs	r2, #1
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e002      	b.n	800425a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <BSP_SDRAM_Init+0xb8>)
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800425a:	f240 6003 	movw	r0, #1539	; 0x603
 800425e:	f000 f80d 	bl	800427c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <BSP_SDRAM_Init+0xb8>)
 8004264:	781b      	ldrb	r3, [r3, #0]
}
 8004266:	4618      	mov	r0, r3
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20008bb8 	.word	0x20008bb8
 8004270:	a0000140 	.word	0xa0000140
 8004274:	200009c4 	.word	0x200009c4
 8004278:	2000003c 	.word	0x2000003c

0800427c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004288:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800428e:	4b29      	ldr	r3, [pc, #164]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004290:	2210      	movs	r2, #16
 8004292:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004294:	4b27      	ldr	r3, [pc, #156]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004296:	2201      	movs	r2, #1
 8004298:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800429c:	2200      	movs	r2, #0
 800429e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80042a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a4:	4923      	ldr	r1, [pc, #140]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a6:	4824      	ldr	r0, [pc, #144]	; (8004338 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042a8:	f006 f8ec 	bl	800a484 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80042ac:	2001      	movs	r0, #1
 80042ae:	f001 faa5 	bl	80057fc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80042b2:	4b20      	ldr	r3, [pc, #128]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042b4:	2202      	movs	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ba:	2210      	movs	r2, #16
 80042bc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80042be:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80042ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ce:	4919      	ldr	r1, [pc, #100]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042d0:	4819      	ldr	r0, [pc, #100]	; (8004338 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042d2:	f006 f8d7 	bl	800a484 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80042d6:	4b17      	ldr	r3, [pc, #92]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042d8:	2203      	movs	r2, #3
 80042da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042dc:	4b15      	ldr	r3, [pc, #84]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042de:	2210      	movs	r2, #16
 80042e0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042e4:	2208      	movs	r2, #8
 80042e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80042ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f2:	4910      	ldr	r1, [pc, #64]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f4:	4810      	ldr	r0, [pc, #64]	; (8004338 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042f6:	f006 f8c5 	bl	800a484 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80042fa:	f44f 7308 	mov.w	r3, #544	; 0x220
 80042fe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004302:	2204      	movs	r2, #4
 8004304:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004308:	2210      	movs	r2, #16
 800430a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800430e:	2201      	movs	r2, #1
 8004310:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a07      	ldr	r2, [pc, #28]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004316:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800431c:	4905      	ldr	r1, [pc, #20]	; (8004334 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800431e:	4806      	ldr	r0, [pc, #24]	; (8004338 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004320:	f006 f8b0 	bl	800a484 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4804      	ldr	r0, [pc, #16]	; (8004338 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004328:	f006 f8e1 	bl	800a4ee <HAL_SDRAM_ProgramRefreshRate>
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	200009e0 	.word	0x200009e0
 8004338:	20008bb8 	.word	0x20008bb8

0800433c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800433c:	b580      	push	{r7, lr}
 800433e:	b090      	sub	sp, #64	; 0x40
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004346:	4b70      	ldr	r3, [pc, #448]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	4a6f      	ldr	r2, [pc, #444]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6393      	str	r3, [r2, #56]	; 0x38
 8004352:	4b6d      	ldr	r3, [pc, #436]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800435e:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a69      	ldr	r2, [pc, #420]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b67      	ldr	r3, [pc, #412]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004376:	4b64      	ldr	r3, [pc, #400]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	4a63      	ldr	r2, [pc, #396]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	6313      	str	r3, [r2, #48]	; 0x30
 8004382:	4b61      	ldr	r3, [pc, #388]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800438e:	4b5e      	ldr	r3, [pc, #376]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	4a5d      	ldr	r2, [pc, #372]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	6313      	str	r3, [r2, #48]	; 0x30
 800439a:	4b5b      	ldr	r3, [pc, #364]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043a6:	4b58      	ldr	r3, [pc, #352]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	4a57      	ldr	r2, [pc, #348]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043ac:	f043 0310 	orr.w	r3, r3, #16
 80043b0:	6313      	str	r3, [r2, #48]	; 0x30
 80043b2:	4b55      	ldr	r3, [pc, #340]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043be:	4b52      	ldr	r3, [pc, #328]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a51      	ldr	r2, [pc, #324]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043c4:	f043 0320 	orr.w	r3, r3, #32
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b4f      	ldr	r3, [pc, #316]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043d6:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a4b      	ldr	r2, [pc, #300]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043ee:	4b46      	ldr	r3, [pc, #280]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4a45      	ldr	r2, [pc, #276]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	6313      	str	r3, [r2, #48]	; 0x30
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <BSP_SDRAM_MspInit+0x1cc>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800440a:	2301      	movs	r3, #1
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800440e:	2302      	movs	r3, #2
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004412:	230c      	movs	r3, #12
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004416:	2308      	movs	r3, #8
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800441a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800441e:	4619      	mov	r1, r3
 8004420:	483a      	ldr	r0, [pc, #232]	; (800450c <BSP_SDRAM_MspInit+0x1d0>)
 8004422:	f002 fd25 	bl	8006e70 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004426:	f24c 7303 	movw	r3, #50947	; 0xc703
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800442c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004430:	4619      	mov	r1, r3
 8004432:	4837      	ldr	r0, [pc, #220]	; (8004510 <BSP_SDRAM_MspInit+0x1d4>)
 8004434:	f002 fd1c 	bl	8006e70 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004438:	f64f 7383 	movw	r3, #65411	; 0xff83
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800443e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004442:	4619      	mov	r1, r3
 8004444:	4833      	ldr	r0, [pc, #204]	; (8004514 <BSP_SDRAM_MspInit+0x1d8>)
 8004446:	f002 fd13 	bl	8006e70 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800444a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004454:	4619      	mov	r1, r3
 8004456:	4830      	ldr	r0, [pc, #192]	; (8004518 <BSP_SDRAM_MspInit+0x1dc>)
 8004458:	f002 fd0a 	bl	8006e70 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800445c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004466:	4619      	mov	r1, r3
 8004468:	482c      	ldr	r0, [pc, #176]	; (800451c <BSP_SDRAM_MspInit+0x1e0>)
 800446a:	f002 fd01 	bl	8006e70 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800446e:	2328      	movs	r3, #40	; 0x28
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004476:	4619      	mov	r1, r3
 8004478:	4829      	ldr	r0, [pc, #164]	; (8004520 <BSP_SDRAM_MspInit+0x1e4>)
 800447a:	f002 fcf9 	bl	8006e70 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 800448c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004490:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 8004494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004498:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800449a:	4b22      	ldr	r3, [pc, #136]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 800449c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044a0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044a8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80044aa:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044b6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80044be:	4b19      	ldr	r3, [pc, #100]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044c0:	2203      	movs	r2, #3
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80044ca:	4b16      	ldr	r3, [pc, #88]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044d2:	4a15      	ldr	r2, [pc, #84]	; (8004528 <BSP_SDRAM_MspInit+0x1ec>)
 80044d4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a12      	ldr	r2, [pc, #72]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
 80044dc:	4a11      	ldr	r2, [pc, #68]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80044e2:	4810      	ldr	r0, [pc, #64]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044e4:	f002 f818 	bl	8006518 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80044e8:	480e      	ldr	r0, [pc, #56]	; (8004524 <BSP_SDRAM_MspInit+0x1e8>)
 80044ea:	f001 ff67 	bl	80063bc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	210f      	movs	r1, #15
 80044f2:	2038      	movs	r0, #56	; 0x38
 80044f4:	f001 fe58 	bl	80061a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80044f8:	2038      	movs	r0, #56	; 0x38
 80044fa:	f001 fe71 	bl	80061e0 <HAL_NVIC_EnableIRQ>
}
 80044fe:	bf00      	nop
 8004500:	3740      	adds	r7, #64	; 0x40
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	40020800 	.word	0x40020800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021000 	.word	0x40021000
 8004518:	40021400 	.word	0x40021400
 800451c:	40021800 	.word	0x40021800
 8004520:	40021c00 	.word	0x40021c00
 8004524:	200009f0 	.word	0x200009f0
 8004528:	40026410 	.word	0x40026410

0800452c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	460a      	mov	r2, r1
 8004536:	80fb      	strh	r3, [r7, #6]
 8004538:	4613      	mov	r3, r2
 800453a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004540:	4a14      	ldr	r2, [pc, #80]	; (8004594 <BSP_TS_Init+0x68>)
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004546:	4a14      	ldr	r2, [pc, #80]	; (8004598 <BSP_TS_Init+0x6c>)
 8004548:	88bb      	ldrh	r3, [r7, #4]
 800454a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800454c:	4b13      	ldr	r3, [pc, #76]	; (800459c <BSP_TS_Init+0x70>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2070      	movs	r0, #112	; 0x70
 8004552:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <BSP_TS_Init+0x70>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2070      	movs	r0, #112	; 0x70
 800455a:	4798      	blx	r3
 800455c:	4603      	mov	r3, r0
 800455e:	2b51      	cmp	r3, #81	; 0x51
 8004560:	d111      	bne.n	8004586 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004562:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <BSP_TS_Init+0x74>)
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <BSP_TS_Init+0x70>)
 8004566:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <BSP_TS_Init+0x78>)
 800456a:	2270      	movs	r2, #112	; 0x70
 800456c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <BSP_TS_Init+0x7c>)
 8004570:	2208      	movs	r2, #8
 8004572:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <BSP_TS_Init+0x74>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <BSP_TS_Init+0x78>)
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	b292      	uxth	r2, r2
 8004580:	4610      	mov	r0, r2
 8004582:	4798      	blx	r3
 8004584:	e001      	b.n	800458a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004586:	2303      	movs	r3, #3
 8004588:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000a54 	.word	0x20000a54
 8004598:	20000a56 	.word	0x20000a56
 800459c:	20000000 	.word	0x20000000
 80045a0:	20000a50 	.word	0x20000a50
 80045a4:	20000a59 	.word	0x20000a59
 80045a8:	20000a58 	.word	0x20000a58

080045ac <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b097      	sub	sp, #92	; 0x5c
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80045c6:	4b97      	ldr	r3, [pc, #604]	; (8004824 <BSP_TS_GetState+0x278>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	4a96      	ldr	r2, [pc, #600]	; (8004828 <BSP_TS_GetState+0x27c>)
 80045ce:	7812      	ldrb	r2, [r2, #0]
 80045d0:	b292      	uxth	r2, r2
 80045d2:	4610      	mov	r0, r2
 80045d4:	4798      	blx	r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 81a8 	beq.w	8004938 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ec:	e197      	b.n	800491e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80045ee:	4b8d      	ldr	r3, [pc, #564]	; (8004824 <BSP_TS_GetState+0x278>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	4a8c      	ldr	r2, [pc, #560]	; (8004828 <BSP_TS_GetState+0x27c>)
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	b290      	uxth	r0, r2
 80045fa:	f107 0120 	add.w	r1, r7, #32
 80045fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004600:	0052      	lsls	r2, r2, #1
 8004602:	188c      	adds	r4, r1, r2
 8004604:	f107 0114 	add.w	r1, r7, #20
 8004608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800460a:	0052      	lsls	r2, r2, #1
 800460c:	440a      	add	r2, r1
 800460e:	4621      	mov	r1, r4
 8004610:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004612:	4b86      	ldr	r3, [pc, #536]	; (800482c <BSP_TS_GetState+0x280>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d11b      	bne.n	8004652 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800461a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004622:	4413      	add	r3, r2
 8004624:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004630:	440b      	add	r3, r1
 8004632:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800463e:	4413      	add	r3, r2
 8004640:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800464c:	440b      	add	r3, r1
 800464e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004652:	4b76      	ldr	r3, [pc, #472]	; (800482c <BSP_TS_GetState+0x280>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d010      	beq.n	8004680 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004666:	4413      	add	r3, r2
 8004668:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800466c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004670:	b29a      	uxth	r2, r3
 8004672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800467a:	440b      	add	r3, r1
 800467c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <BSP_TS_GetState+0x280>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800468c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004694:	4413      	add	r3, r2
 8004696:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800469a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80046a8:	440b      	add	r3, r1
 80046aa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <BSP_TS_GetState+0x280>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80046ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046c2:	4413      	add	r3, r2
 80046c4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80046c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80046d0:	440b      	add	r3, r1
 80046d2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80046d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046de:	4413      	add	r3, r2
 80046e0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80046e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80046ec:	440b      	add	r3, r1
 80046ee:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80046f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046fa:	4413      	add	r3, r2
 80046fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004700:	4619      	mov	r1, r3
 8004702:	4a4b      	ldr	r2, [pc, #300]	; (8004830 <BSP_TS_GetState+0x284>)
 8004704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	4299      	cmp	r1, r3
 800470c:	d90e      	bls.n	800472c <BSP_TS_GetState+0x180>
 800470e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004716:	4413      	add	r3, r2
 8004718:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800471c:	4944      	ldr	r1, [pc, #272]	; (8004830 <BSP_TS_GetState+0x284>)
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004724:	b29b      	uxth	r3, r3
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	b29b      	uxth	r3, r3
 800472a:	e00d      	b.n	8004748 <BSP_TS_GetState+0x19c>
 800472c:	4a40      	ldr	r2, [pc, #256]	; (8004830 <BSP_TS_GetState+0x284>)
 800472e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004734:	b29a      	uxth	r2, r3
 8004736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800473e:	440b      	add	r3, r1
 8004740:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	b29b      	uxth	r3, r3
 8004748:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004754:	4413      	add	r3, r2
 8004756:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800475a:	4619      	mov	r1, r3
 800475c:	4a35      	ldr	r2, [pc, #212]	; (8004834 <BSP_TS_GetState+0x288>)
 800475e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	4299      	cmp	r1, r3
 8004766:	d90e      	bls.n	8004786 <BSP_TS_GetState+0x1da>
 8004768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004770:	4413      	add	r3, r2
 8004772:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004776:	492f      	ldr	r1, [pc, #188]	; (8004834 <BSP_TS_GetState+0x288>)
 8004778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800477e:	b29b      	uxth	r3, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	b29b      	uxth	r3, r3
 8004784:	e00d      	b.n	80047a2 <BSP_TS_GetState+0x1f6>
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <BSP_TS_GetState+0x288>)
 8004788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478e:	b29a      	uxth	r2, r3
 8004790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004798:	440b      	add	r3, r1
 800479a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80047a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80047aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047ae:	4413      	add	r3, r2
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	dd17      	ble.n	80047e4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80047b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047bc:	4413      	add	r3, r2
 80047be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80047c2:	4619      	mov	r1, r3
 80047c4:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <BSP_TS_GetState+0x284>)
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80047cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047d4:	4413      	add	r3, r2
 80047d6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80047da:	4619      	mov	r1, r3
 80047dc:	4a15      	ldr	r2, [pc, #84]	; (8004834 <BSP_TS_GetState+0x288>)
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <BSP_TS_GetState+0x27c>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d125      	bne.n	8004838 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80047ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047f4:	4413      	add	r3, r2
 80047f6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	460a      	mov	r2, r1
 8004804:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800480e:	4413      	add	r3, r2
 8004810:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004818:	3304      	adds	r3, #4
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	460a      	mov	r2, r1
 8004820:	809a      	strh	r2, [r3, #4]
 8004822:	e02c      	b.n	800487e <BSP_TS_GetState+0x2d2>
 8004824:	20000a50 	.word	0x20000a50
 8004828:	20000a59 	.word	0x20000a59
 800482c:	20000a58 	.word	0x20000a58
 8004830:	20000a5c 	.word	0x20000a5c
 8004834:	20000a70 	.word	0x20000a70
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004838:	4b42      	ldr	r3, [pc, #264]	; (8004944 <BSP_TS_GetState+0x398>)
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	4619      	mov	r1, r3
 800483e:	4a42      	ldr	r2, [pc, #264]	; (8004948 <BSP_TS_GetState+0x39c>)
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004846:	fb03 f301 	mul.w	r3, r3, r1
 800484a:	0b1b      	lsrs	r3, r3, #12
 800484c:	b299      	uxth	r1, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	460a      	mov	r2, r1
 8004858:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800485a:	4b3c      	ldr	r3, [pc, #240]	; (800494c <BSP_TS_GetState+0x3a0>)
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <BSP_TS_GetState+0x3a4>)
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004868:	fb03 f301 	mul.w	r3, r3, r1
 800486c:	0b1b      	lsrs	r3, r3, #12
 800486e:	b299      	uxth	r1, r3
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004874:	3304      	adds	r3, #4
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	460a      	mov	r2, r1
 800487c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800487e:	4b35      	ldr	r3, [pc, #212]	; (8004954 <BSP_TS_GetState+0x3a8>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b298      	uxth	r0, r3
 8004884:	f107 010c 	add.w	r1, r7, #12
 8004888:	f107 0210 	add.w	r2, r7, #16
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	460b      	mov	r3, r1
 8004894:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004896:	f7fc f88d 	bl	80009b4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	b2d9      	uxtb	r1, r3
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a2:	4413      	add	r3, r2
 80048a4:	3316      	adds	r3, #22
 80048a6:	460a      	mov	r2, r1
 80048a8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	b2d9      	uxtb	r1, r3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	4413      	add	r3, r2
 80048b4:	3320      	adds	r3, #32
 80048b6:	460a      	mov	r2, r1
 80048b8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d827      	bhi.n	8004910 <BSP_TS_GetState+0x364>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <BSP_TS_GetState+0x31c>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048e7 	.word	0x080048e7
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	08004903 	.word	0x08004903
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048dc:	4413      	add	r3, r2
 80048de:	331b      	adds	r3, #27
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
          break;
 80048e4:	e018      	b.n	8004918 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ea:	4413      	add	r3, r2
 80048ec:	331b      	adds	r3, #27
 80048ee:	2202      	movs	r2, #2
 80048f0:	701a      	strb	r2, [r3, #0]
          break;
 80048f2:	e011      	b.n	8004918 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f8:	4413      	add	r3, r2
 80048fa:	331b      	adds	r3, #27
 80048fc:	2203      	movs	r2, #3
 80048fe:	701a      	strb	r2, [r3, #0]
          break;
 8004900:	e00a      	b.n	8004918 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004906:	4413      	add	r3, r2
 8004908:	331b      	adds	r3, #27
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
          break;
 800490e:	e003      	b.n	8004918 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004916:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491a:	3301      	adds	r3, #1
 800491c:	64bb      	str	r3, [r7, #72]	; 0x48
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004926:	4293      	cmp	r3, r2
 8004928:	f4ff ae61 	bcc.w	80045ee <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f813 	bl	8004958 <BSP_TS_Get_GestureId>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004938:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800493c:	4618      	mov	r0, r3
 800493e:	3754      	adds	r7, #84	; 0x54
 8004940:	46bd      	mov	sp, r7
 8004942:	bd90      	pop	{r4, r7, pc}
 8004944:	20000a54 	.word	0x20000a54
 8004948:	20000a5c 	.word	0x20000a5c
 800494c:	20000a56 	.word	0x20000a56
 8004950:	20000a70 	.word	0x20000a70
 8004954:	20000a59 	.word	0x20000a59

08004958 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004968:	4b3b      	ldr	r3, [pc, #236]	; (8004a58 <BSP_TS_Get_GestureId+0x100>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f107 0208 	add.w	r2, r7, #8
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc f804 	bl	8000982 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b49      	cmp	r3, #73	; 0x49
 800497e:	d05e      	beq.n	8004a3e <BSP_TS_Get_GestureId+0xe6>
 8004980:	2b49      	cmp	r3, #73	; 0x49
 8004982:	d860      	bhi.n	8004a46 <BSP_TS_Get_GestureId+0xee>
 8004984:	2b1c      	cmp	r3, #28
 8004986:	d83f      	bhi.n	8004a08 <BSP_TS_Get_GestureId+0xb0>
 8004988:	2b1c      	cmp	r3, #28
 800498a:	d85c      	bhi.n	8004a46 <BSP_TS_Get_GestureId+0xee>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <BSP_TS_Get_GestureId+0x3c>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	08004a47 	.word	0x08004a47
 800499c:	08004a47 	.word	0x08004a47
 80049a0:	08004a47 	.word	0x08004a47
 80049a4:	08004a47 	.word	0x08004a47
 80049a8:	08004a47 	.word	0x08004a47
 80049ac:	08004a47 	.word	0x08004a47
 80049b0:	08004a47 	.word	0x08004a47
 80049b4:	08004a47 	.word	0x08004a47
 80049b8:	08004a47 	.word	0x08004a47
 80049bc:	08004a47 	.word	0x08004a47
 80049c0:	08004a47 	.word	0x08004a47
 80049c4:	08004a47 	.word	0x08004a47
 80049c8:	08004a47 	.word	0x08004a47
 80049cc:	08004a47 	.word	0x08004a47
 80049d0:	08004a47 	.word	0x08004a47
 80049d4:	08004a17 	.word	0x08004a17
 80049d8:	08004a47 	.word	0x08004a47
 80049dc:	08004a47 	.word	0x08004a47
 80049e0:	08004a47 	.word	0x08004a47
 80049e4:	08004a1f 	.word	0x08004a1f
 80049e8:	08004a47 	.word	0x08004a47
 80049ec:	08004a47 	.word	0x08004a47
 80049f0:	08004a47 	.word	0x08004a47
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a47 	.word	0x08004a47
 80049fc:	08004a47 	.word	0x08004a47
 8004a00:	08004a47 	.word	0x08004a47
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d014      	beq.n	8004a36 <BSP_TS_Get_GestureId+0xde>
 8004a0c:	e01b      	b.n	8004a46 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a14:	e01a      	b.n	8004a4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a1c:	e016      	b.n	8004a4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a24:	e012      	b.n	8004a4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a2c:	e00e      	b.n	8004a4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2204      	movs	r2, #4
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a34:	e00a      	b.n	8004a4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2205      	movs	r2, #5
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a3c:	e006      	b.n	8004a4c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2206      	movs	r2, #6
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a44:	e002      	b.n	8004a4c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000a59 	.word	0x20000a59

08004a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <HAL_MspInit+0x4c>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <HAL_MspInit+0x4c>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_MspInit+0x4c>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_MspInit+0x4c>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <HAL_MspInit+0x4c>)
 8004a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a84:	6453      	str	r3, [r2, #68]	; 0x44
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_MspInit+0x4c>)
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a92:	2200      	movs	r2, #0
 8004a94:	210f      	movs	r1, #15
 8004a96:	f06f 0001 	mvn.w	r0, #1
 8004a9a:	f001 fb85 	bl	80061a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800

08004aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab4:	f107 031c 	add.w	r3, r7, #28
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <HAL_ADC_MspInit+0xc8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d124      	bne.n	8004b18 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4a23      	ldr	r2, [pc, #140]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6313      	str	r3, [r2, #48]	; 0x30
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004afe:	2301      	movs	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b02:	2303      	movs	r3, #3
 8004b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0a:	f107 031c 	add.w	r3, r7, #28
 8004b0e:	4619      	mov	r1, r3
 8004b10:	481a      	ldr	r0, [pc, #104]	; (8004b7c <HAL_ADC_MspInit+0xd0>)
 8004b12:	f002 f9ad 	bl	8006e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004b16:	e029      	b.n	8004b6c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <HAL_ADC_MspInit+0xd4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d124      	bne.n	8004b6c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004b40:	f043 0320 	orr.w	r3, r3, #32
 8004b44:	6313      	str	r3, [r2, #48]	; 0x30
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <HAL_ADC_MspInit+0xcc>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8004b52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b60:	f107 031c 	add.w	r3, r7, #28
 8004b64:	4619      	mov	r1, r3
 8004b66:	4807      	ldr	r0, [pc, #28]	; (8004b84 <HAL_ADC_MspInit+0xd8>)
 8004b68:	f002 f982 	bl	8006e70 <HAL_GPIO_Init>
}
 8004b6c:	bf00      	nop
 8004b6e:	3730      	adds	r7, #48	; 0x30
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40012000 	.word	0x40012000
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020000 	.word	0x40020000
 8004b80:	40012200 	.word	0x40012200
 8004b84:	40021400 	.word	0x40021400

08004b88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_DAC_MspInit+0x84>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d12b      	bne.n	8004c02 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_DAC_MspInit+0x88>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_DAC_MspInit+0x88>)
 8004bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb6:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <HAL_DAC_MspInit+0x88>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <HAL_DAC_MspInit+0x88>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <HAL_DAC_MspInit+0x88>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_DAC_MspInit+0x88>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004bda:	2310      	movs	r3, #16
 8004bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bde:	2303      	movs	r3, #3
 8004be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	4619      	mov	r1, r3
 8004bec:	4809      	ldr	r0, [pc, #36]	; (8004c14 <HAL_DAC_MspInit+0x8c>)
 8004bee:	f002 f93f 	bl	8006e70 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	210f      	movs	r1, #15
 8004bf6:	2036      	movs	r0, #54	; 0x36
 8004bf8:	f001 fad6 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004bfc:	2036      	movs	r0, #54	; 0x36
 8004bfe:	f001 faef 	bl	80061e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004c02:	bf00      	nop
 8004c04:	3728      	adds	r7, #40	; 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40007400 	.word	0x40007400
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40020000 	.word	0x40020000

08004c18 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <HAL_DMA2D_MspInit+0x44>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d113      	bne.n	8004c52 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_DMA2D_MspInit+0x48>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <HAL_DMA2D_MspInit+0x48>)
 8004c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c34:	6313      	str	r3, [r2, #48]	; 0x30
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_DMA2D_MspInit+0x48>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2105      	movs	r1, #5
 8004c46:	205a      	movs	r0, #90	; 0x5a
 8004c48:	f001 faae 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004c4c:	205a      	movs	r0, #90	; 0x5a
 8004c4e:	f001 fac7 	bl	80061e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	4002b000 	.word	0x4002b000
 8004c60:	40023800 	.word	0x40023800

08004c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b0ac      	sub	sp, #176	; 0xb0
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c7c:	f107 0318 	add.w	r3, r7, #24
 8004c80:	2284      	movs	r2, #132	; 0x84
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f00a faf3 	bl	800f270 <memset>
  if(hi2c->Instance==I2C1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a44      	ldr	r2, [pc, #272]	; (8004da0 <HAL_I2C_MspInit+0x13c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d13d      	bne.n	8004d10 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c9e:	f107 0318 	add.w	r3, r7, #24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f004 faa6 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004cae:	f7fe f86f 	bl	8002d90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb2:	4b3c      	ldr	r3, [pc, #240]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	4a3b      	ldr	r2, [pc, #236]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cbe:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cd2:	2312      	movs	r3, #18
 8004cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004cee:	4619      	mov	r1, r3
 8004cf0:	482d      	ldr	r0, [pc, #180]	; (8004da8 <HAL_I2C_MspInit+0x144>)
 8004cf2:	f002 f8bd 	bl	8006e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cf6:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004d0e:	e042      	b.n	8004d96 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a25      	ldr	r2, [pc, #148]	; (8004dac <HAL_I2C_MspInit+0x148>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d13d      	bne.n	8004d96 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d26:	f107 0318 	add.w	r3, r7, #24
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 fa62 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004d36:	f7fe f82b 	bl	8002d90 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d44:	6313      	str	r3, [r2, #48]	; 0x30
 8004d46:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004d52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d5a:	2312      	movs	r3, #18
 8004d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d60:	2301      	movs	r3, #1
 8004d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d66:	2303      	movs	r3, #3
 8004d68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004d72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d76:	4619      	mov	r1, r3
 8004d78:	480d      	ldr	r0, [pc, #52]	; (8004db0 <HAL_I2C_MspInit+0x14c>)
 8004d7a:	f002 f879 	bl	8006e70 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d88:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <HAL_I2C_MspInit+0x140>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
}
 8004d96:	bf00      	nop
 8004d98:	37b0      	adds	r7, #176	; 0xb0
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40005400 	.word	0x40005400
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40020400 	.word	0x40020400
 8004dac:	40005c00 	.word	0x40005c00
 8004db0:	40021c00 	.word	0x40021c00

08004db4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <HAL_I2C_MspDeInit+0x64>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d110      	bne.n	8004de8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <HAL_I2C_MspDeInit+0x68>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <HAL_I2C_MspDeInit+0x68>)
 8004dcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dd0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dd6:	4812      	ldr	r0, [pc, #72]	; (8004e20 <HAL_I2C_MspDeInit+0x6c>)
 8004dd8:	f002 f9f6 	bl	80071c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004de0:	480f      	ldr	r0, [pc, #60]	; (8004e20 <HAL_I2C_MspDeInit+0x6c>)
 8004de2:	f002 f9f1 	bl	80071c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004de6:	e013      	b.n	8004e10 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <HAL_I2C_MspDeInit+0x70>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10e      	bne.n	8004e10 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_I2C_MspDeInit+0x68>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <HAL_I2C_MspDeInit+0x68>)
 8004df8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	4809      	ldr	r0, [pc, #36]	; (8004e28 <HAL_I2C_MspDeInit+0x74>)
 8004e02:	f002 f9e1 	bl	80071c8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8004e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e0a:	4807      	ldr	r0, [pc, #28]	; (8004e28 <HAL_I2C_MspDeInit+0x74>)
 8004e0c:	f002 f9dc 	bl	80071c8 <HAL_GPIO_DeInit>
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40005400 	.word	0x40005400
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40020400 	.word	0x40020400
 8004e24:	40005c00 	.word	0x40005c00
 8004e28:	40021c00 	.word	0x40021c00

08004e2c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a55      	ldr	r2, [pc, #340]	; (8004fa0 <HAL_LTDC_MspInit+0x174>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	f040 80a3 	bne.w	8004f96 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004e50:	4b54      	ldr	r3, [pc, #336]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	4a53      	ldr	r2, [pc, #332]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5c:	4b51      	ldr	r3, [pc, #324]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e68:	4b4e      	ldr	r3, [pc, #312]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	4a4d      	ldr	r2, [pc, #308]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e6e:	f043 0310 	orr.w	r3, r3, #16
 8004e72:	6313      	str	r3, [r2, #48]	; 0x30
 8004e74:	4b4b      	ldr	r3, [pc, #300]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004e80:	4b48      	ldr	r3, [pc, #288]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	4a47      	ldr	r2, [pc, #284]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8c:	4b45      	ldr	r3, [pc, #276]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004e98:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	4a41      	ldr	r2, [pc, #260]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea4:	4b3f      	ldr	r3, [pc, #252]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004eb0:	4b3c      	ldr	r3, [pc, #240]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	4a3b      	ldr	r2, [pc, #236]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebc:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	4a35      	ldr	r2, [pc, #212]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <HAL_LTDC_MspInit+0x178>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eec:	2300      	movs	r3, #0
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ef0:	230e      	movs	r3, #14
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef8:	4619      	mov	r1, r3
 8004efa:	482b      	ldr	r0, [pc, #172]	; (8004fa8 <HAL_LTDC_MspInit+0x17c>)
 8004efc:	f001 ffb8 	bl	8006e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004f00:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f06:	2302      	movs	r3, #2
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f12:	230e      	movs	r3, #14
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4823      	ldr	r0, [pc, #140]	; (8004fac <HAL_LTDC_MspInit+0x180>)
 8004f1e:	f001 ffa7 	bl	8006e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004f22:	23f7      	movs	r3, #247	; 0xf7
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f26:	2302      	movs	r3, #2
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f32:	230e      	movs	r3, #14
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	481c      	ldr	r0, [pc, #112]	; (8004fb0 <HAL_LTDC_MspInit+0x184>)
 8004f3e:	f001 ff97 	bl	8006e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f50:	2300      	movs	r3, #0
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004f54:	2309      	movs	r3, #9
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4815      	ldr	r0, [pc, #84]	; (8004fb4 <HAL_LTDC_MspInit+0x188>)
 8004f60:	f001 ff86 	bl	8006e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004f64:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f72:	2300      	movs	r3, #0
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f76:	230e      	movs	r3, #14
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f7e:	4619      	mov	r1, r3
 8004f80:	480d      	ldr	r0, [pc, #52]	; (8004fb8 <HAL_LTDC_MspInit+0x18c>)
 8004f82:	f001 ff75 	bl	8006e70 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004f86:	2200      	movs	r2, #0
 8004f88:	2105      	movs	r1, #5
 8004f8a:	2058      	movs	r0, #88	; 0x58
 8004f8c:	f001 f90c 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004f90:	2058      	movs	r0, #88	; 0x58
 8004f92:	f001 f925 	bl	80061e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004f96:	bf00      	nop
 8004f98:	3738      	adds	r7, #56	; 0x38
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40016800 	.word	0x40016800
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40022400 	.word	0x40022400
 8004fb0:	40022800 	.word	0x40022800
 8004fb4:	40021800 	.word	0x40021800
 8004fb8:	40022000 	.word	0x40022000

08004fbc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <HAL_RNG_MspInit+0x38>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_RNG_MspInit+0x3c>)
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RNG_MspInit+0x3c>)
 8004fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd8:	6353      	str	r3, [r2, #52]	; 0x34
 8004fda:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <HAL_RNG_MspInit+0x3c>)
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	50060800 	.word	0x50060800
 8004ff8:	40023800 	.word	0x40023800

08004ffc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b0a4      	sub	sp, #144	; 0x90
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005004:	f107 030c 	add.w	r3, r7, #12
 8005008:	2284      	movs	r2, #132	; 0x84
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f00a f92f 	bl	800f270 <memset>
  if(hrtc->Instance==RTC)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a0e      	ldr	r2, [pc, #56]	; (8005050 <HAL_RTC_MspInit+0x54>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d114      	bne.n	8005046 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800501c:	2320      	movs	r3, #32
 800501e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	4618      	mov	r0, r3
 800502c:	f004 f8e2 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005036:	f7fd feab 	bl	8002d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RTC_MspInit+0x58>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a05      	ldr	r2, [pc, #20]	; (8005054 <HAL_RTC_MspInit+0x58>)
 8005040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005046:	bf00      	nop
 8005048:	3790      	adds	r7, #144	; 0x90
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40002800 	.word	0x40002800
 8005054:	40023800 	.word	0x40023800

08005058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a25      	ldr	r2, [pc, #148]	; (800510c <HAL_SPI_MspInit+0xb4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d144      	bne.n	8005104 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800507a:	4b25      	ldr	r3, [pc, #148]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	4a24      	ldr	r2, [pc, #144]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 8005080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005084:	6413      	str	r3, [r2, #64]	; 0x40
 8005086:	4b22      	ldr	r3, [pc, #136]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005092:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050aa:	4b19      	ldr	r3, [pc, #100]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	6313      	str	r3, [r2, #48]	; 0x30
 80050b6:	4b16      	ldr	r3, [pc, #88]	; (8005110 <HAL_SPI_MspInit+0xb8>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80050c2:	2303      	movs	r3, #3
 80050c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c6:	2302      	movs	r3, #2
 80050c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ce:	2303      	movs	r3, #3
 80050d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050d2:	2305      	movs	r3, #5
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050d6:	f107 0314 	add.w	r3, r7, #20
 80050da:	4619      	mov	r1, r3
 80050dc:	480d      	ldr	r0, [pc, #52]	; (8005114 <HAL_SPI_MspInit+0xbc>)
 80050de:	f001 fec7 	bl	8006e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80050e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80050e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e8:	2302      	movs	r3, #2
 80050ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f0:	2300      	movs	r3, #0
 80050f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050f4:	2305      	movs	r3, #5
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	4619      	mov	r1, r3
 80050fe:	4806      	ldr	r0, [pc, #24]	; (8005118 <HAL_SPI_MspInit+0xc0>)
 8005100:	f001 feb6 	bl	8006e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005104:	bf00      	nop
 8005106:	3728      	adds	r7, #40	; 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40003800 	.word	0x40003800
 8005110:	40023800 	.word	0x40023800
 8005114:	40022000 	.word	0x40022000
 8005118:	40020400 	.word	0x40020400

0800511c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	; 0x38
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3b      	ldr	r2, [pc, #236]	; (8005228 <HAL_TIM_Base_MspInit+0x10c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10c      	bne.n	8005158 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800513e:	4b3b      	ldr	r3, [pc, #236]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	4a3a      	ldr	r2, [pc, #232]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6453      	str	r3, [r2, #68]	; 0x44
 800514a:	4b38      	ldr	r3, [pc, #224]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005156:	e062      	b.n	800521e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005160:	d10c      	bne.n	800517c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005162:	4b32      	ldr	r3, [pc, #200]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	4a31      	ldr	r2, [pc, #196]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6413      	str	r3, [r2, #64]	; 0x40
 800516e:	4b2f      	ldr	r3, [pc, #188]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	69fb      	ldr	r3, [r7, #28]
}
 800517a:	e050      	b.n	800521e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a2b      	ldr	r2, [pc, #172]	; (8005230 <HAL_TIM_Base_MspInit+0x114>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10c      	bne.n	80051a0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005186:	4b29      	ldr	r3, [pc, #164]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a28      	ldr	r2, [pc, #160]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6413      	str	r3, [r2, #64]	; 0x40
 8005192:	4b26      	ldr	r3, [pc, #152]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	69bb      	ldr	r3, [r7, #24]
}
 800519e:	e03e      	b.n	800521e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <HAL_TIM_Base_MspInit+0x118>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10c      	bne.n	80051c4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	4a1f      	ldr	r2, [pc, #124]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051b0:	f043 0308 	orr.w	r3, r3, #8
 80051b4:	6413      	str	r3, [r2, #64]	; 0x40
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697b      	ldr	r3, [r7, #20]
}
 80051c2:	e02c      	b.n	800521e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_TIM_Base_MspInit+0x11c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d127      	bne.n	800521e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	4a16      	ldr	r2, [pc, #88]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051d4:	f043 0302 	orr.w	r3, r3, #2
 80051d8:	6453      	str	r3, [r2, #68]	; 0x44
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	4a10      	ldr	r2, [pc, #64]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6313      	str	r3, [r2, #48]	; 0x30
 80051f2:	4b0e      	ldr	r3, [pc, #56]	; (800522c <HAL_TIM_Base_MspInit+0x110>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051fe:	2304      	movs	r3, #4
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005202:	2302      	movs	r3, #2
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520a:	2300      	movs	r3, #0
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800520e:	2303      	movs	r3, #3
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005216:	4619      	mov	r1, r3
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <HAL_TIM_Base_MspInit+0x120>)
 800521a:	f001 fe29 	bl	8006e70 <HAL_GPIO_Init>
}
 800521e:	bf00      	nop
 8005220:	3738      	adds	r7, #56	; 0x38
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40023800 	.word	0x40023800
 8005230:	40000400 	.word	0x40000400
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40010400 	.word	0x40010400
 800523c:	40022000 	.word	0x40022000

08005240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0b0      	sub	sp, #192	; 0xc0
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005248:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800525c:	2284      	movs	r2, #132	; 0x84
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f00a f805 	bl	800f270 <memset>
  if(huart->Instance==UART7)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a75      	ldr	r2, [pc, #468]	; (8005440 <HAL_UART_MspInit+0x200>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d13d      	bne.n	80052ec <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800527c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005280:	4618      	mov	r0, r3
 8005282:	f003 ffb7 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800528c:	f7fd fd80 	bl	8002d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005290:	4b6c      	ldr	r3, [pc, #432]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	4a6b      	ldr	r2, [pc, #428]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800529a:	6413      	str	r3, [r2, #64]	; 0x40
 800529c:	4b69      	ldr	r3, [pc, #420]	; (8005444 <HAL_UART_MspInit+0x204>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052a8:	4b66      	ldr	r3, [pc, #408]	; (8005444 <HAL_UART_MspInit+0x204>)
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	4a65      	ldr	r2, [pc, #404]	; (8005444 <HAL_UART_MspInit+0x204>)
 80052ae:	f043 0320 	orr.w	r3, r3, #32
 80052b2:	6313      	str	r3, [r2, #48]	; 0x30
 80052b4:	4b63      	ldr	r3, [pc, #396]	; (8005444 <HAL_UART_MspInit+0x204>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80052c0:	23c0      	movs	r3, #192	; 0xc0
 80052c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	2302      	movs	r3, #2
 80052c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d2:	2303      	movs	r3, #3
 80052d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80052d8:	2308      	movs	r3, #8
 80052da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052e2:	4619      	mov	r1, r3
 80052e4:	4858      	ldr	r0, [pc, #352]	; (8005448 <HAL_UART_MspInit+0x208>)
 80052e6:	f001 fdc3 	bl	8006e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80052ea:	e0a4      	b.n	8005436 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a56      	ldr	r2, [pc, #344]	; (800544c <HAL_UART_MspInit+0x20c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d15d      	bne.n	80053b2 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80052fa:	2300      	movs	r3, #0
 80052fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005302:	4618      	mov	r0, r3
 8005304:	f003 ff76 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800530e:	f7fd fd3f 	bl	8002d90 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005312:	4b4c      	ldr	r3, [pc, #304]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	4a4b      	ldr	r2, [pc, #300]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005318:	f043 0310 	orr.w	r3, r3, #16
 800531c:	6453      	str	r3, [r2, #68]	; 0x44
 800531e:	4b49      	ldr	r3, [pc, #292]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800532a:	4b46      	ldr	r3, [pc, #280]	; (8005444 <HAL_UART_MspInit+0x204>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	4a45      	ldr	r2, [pc, #276]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005330:	f043 0302 	orr.w	r3, r3, #2
 8005334:	6313      	str	r3, [r2, #48]	; 0x30
 8005336:	4b43      	ldr	r3, [pc, #268]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005342:	4b40      	ldr	r3, [pc, #256]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	4a3f      	ldr	r2, [pc, #252]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6313      	str	r3, [r2, #48]	; 0x30
 800534e:	4b3d      	ldr	r3, [pc, #244]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005360:	2302      	movs	r3, #2
 8005362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005372:	2307      	movs	r3, #7
 8005374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005378:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800537c:	4619      	mov	r1, r3
 800537e:	4834      	ldr	r0, [pc, #208]	; (8005450 <HAL_UART_MspInit+0x210>)
 8005380:	f001 fd76 	bl	8006e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538c:	2302      	movs	r3, #2
 800538e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005392:	2300      	movs	r3, #0
 8005394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005398:	2300      	movs	r3, #0
 800539a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800539e:	2307      	movs	r3, #7
 80053a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80053a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80053a8:	4619      	mov	r1, r3
 80053aa:	482a      	ldr	r0, [pc, #168]	; (8005454 <HAL_UART_MspInit+0x214>)
 80053ac:	f001 fd60 	bl	8006e70 <HAL_GPIO_Init>
}
 80053b0:	e041      	b.n	8005436 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a28      	ldr	r2, [pc, #160]	; (8005458 <HAL_UART_MspInit+0x218>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d13c      	bne.n	8005436 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80053bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80053c2:	2300      	movs	r3, #0
 80053c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053cc:	4618      	mov	r0, r3
 80053ce:	f003 ff11 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80053d8:	f7fd fcda 	bl	8002d90 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_UART_MspInit+0x204>)
 80053de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_UART_MspInit+0x204>)
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	6453      	str	r3, [r2, #68]	; 0x44
 80053e8:	4b16      	ldr	r3, [pc, #88]	; (8005444 <HAL_UART_MspInit+0x204>)
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f4:	4b13      	ldr	r3, [pc, #76]	; (8005444 <HAL_UART_MspInit+0x204>)
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	4a12      	ldr	r2, [pc, #72]	; (8005444 <HAL_UART_MspInit+0x204>)
 80053fa:	f043 0304 	orr.w	r3, r3, #4
 80053fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_UART_MspInit+0x204>)
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800540c:	23c0      	movs	r3, #192	; 0xc0
 800540e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005412:	2302      	movs	r3, #2
 8005414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	2300      	movs	r3, #0
 800541a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800541e:	2303      	movs	r3, #3
 8005420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005424:	2308      	movs	r3, #8
 8005426:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800542a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800542e:	4619      	mov	r1, r3
 8005430:	480a      	ldr	r0, [pc, #40]	; (800545c <HAL_UART_MspInit+0x21c>)
 8005432:	f001 fd1d 	bl	8006e70 <HAL_GPIO_Init>
}
 8005436:	bf00      	nop
 8005438:	37c0      	adds	r7, #192	; 0xc0
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40007800 	.word	0x40007800
 8005444:	40023800 	.word	0x40023800
 8005448:	40021400 	.word	0x40021400
 800544c:	40011000 	.word	0x40011000
 8005450:	40020400 	.word	0x40020400
 8005454:	40020000 	.word	0x40020000
 8005458:	40011400 	.word	0x40011400
 800545c:	40020800 	.word	0x40020800

08005460 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005474:	4b3a      	ldr	r3, [pc, #232]	; (8005560 <HAL_FMC_MspInit+0x100>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d16d      	bne.n	8005558 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800547c:	4b38      	ldr	r3, [pc, #224]	; (8005560 <HAL_FMC_MspInit+0x100>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005482:	4b38      	ldr	r3, [pc, #224]	; (8005564 <HAL_FMC_MspInit+0x104>)
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	4a37      	ldr	r2, [pc, #220]	; (8005564 <HAL_FMC_MspInit+0x104>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6393      	str	r3, [r2, #56]	; 0x38
 800548e:	4b35      	ldr	r3, [pc, #212]	; (8005564 <HAL_FMC_MspInit+0x104>)
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800549a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800549e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a8:	2303      	movs	r3, #3
 80054aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054ac:	230c      	movs	r3, #12
 80054ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	482c      	ldr	r0, [pc, #176]	; (8005568 <HAL_FMC_MspInit+0x108>)
 80054b6:	f001 fcdb 	bl	8006e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80054ba:	f248 1333 	movw	r3, #33075	; 0x8133
 80054be:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
 80054c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c8:	2303      	movs	r3, #3
 80054ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054cc:	230c      	movs	r3, #12
 80054ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	4825      	ldr	r0, [pc, #148]	; (800556c <HAL_FMC_MspInit+0x10c>)
 80054d6:	f001 fccb 	bl	8006e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80054da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80054de:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	2302      	movs	r3, #2
 80054e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e8:	2303      	movs	r3, #3
 80054ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054ec:	230c      	movs	r3, #12
 80054ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	481e      	ldr	r0, [pc, #120]	; (8005570 <HAL_FMC_MspInit+0x110>)
 80054f6:	f001 fcbb 	bl	8006e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80054fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80054fe:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	2302      	movs	r3, #2
 8005502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005508:	2303      	movs	r3, #3
 800550a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800550c:	230c      	movs	r3, #12
 800550e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4817      	ldr	r0, [pc, #92]	; (8005574 <HAL_FMC_MspInit+0x114>)
 8005516:	f001 fcab 	bl	8006e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800551a:	2328      	movs	r3, #40	; 0x28
 800551c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800551e:	2302      	movs	r3, #2
 8005520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005526:	2303      	movs	r3, #3
 8005528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800552a:	230c      	movs	r3, #12
 800552c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4811      	ldr	r0, [pc, #68]	; (8005578 <HAL_FMC_MspInit+0x118>)
 8005534:	f001 fc9c 	bl	8006e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005538:	2308      	movs	r3, #8
 800553a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553c:	2302      	movs	r3, #2
 800553e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005544:	2303      	movs	r3, #3
 8005546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005548:	230c      	movs	r3, #12
 800554a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	4619      	mov	r1, r3
 8005550:	480a      	ldr	r0, [pc, #40]	; (800557c <HAL_FMC_MspInit+0x11c>)
 8005552:	f001 fc8d 	bl	8006e70 <HAL_GPIO_Init>
 8005556:	e000      	b.n	800555a <HAL_FMC_MspInit+0xfa>
    return;
 8005558:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000a84 	.word	0x20000a84
 8005564:	40023800 	.word	0x40023800
 8005568:	40021000 	.word	0x40021000
 800556c:	40021800 	.word	0x40021800
 8005570:	40020c00 	.word	0x40020c00
 8005574:	40021400 	.word	0x40021400
 8005578:	40021c00 	.word	0x40021c00
 800557c:	40020800 	.word	0x40020800

08005580 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005588:	f7ff ff6a 	bl	8005460 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80055a4:	2200      	movs	r2, #0
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	2036      	movs	r0, #54	; 0x36
 80055aa:	f000 fdfd 	bl	80061a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055ae:	2036      	movs	r0, #54	; 0x36
 80055b0:	f000 fe16 	bl	80061e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80055b4:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <HAL_InitTick+0xa0>)
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <HAL_InitTick+0xa0>)
 80055ba:	f043 0310 	orr.w	r3, r3, #16
 80055be:	6413      	str	r3, [r2, #64]	; 0x40
 80055c0:	4b1c      	ldr	r3, [pc, #112]	; (8005634 <HAL_InitTick+0xa0>)
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055cc:	f107 0210 	add.w	r2, r7, #16
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f003 fdda 	bl	8009190 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80055dc:	f003 fdb0 	bl	8009140 <HAL_RCC_GetPCLK1Freq>
 80055e0:	4603      	mov	r3, r0
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <HAL_InitTick+0xa4>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	0c9b      	lsrs	r3, r3, #18
 80055f0:	3b01      	subs	r3, #1
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <HAL_InitTick+0xa8>)
 80055f6:	4a12      	ldr	r2, [pc, #72]	; (8005640 <HAL_InitTick+0xac>)
 80055f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_InitTick+0xa8>)
 80055fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005600:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005602:	4a0e      	ldr	r2, [pc, #56]	; (800563c <HAL_InitTick+0xa8>)
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005608:	4b0c      	ldr	r3, [pc, #48]	; (800563c <HAL_InitTick+0xa8>)
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_InitTick+0xa8>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005614:	4809      	ldr	r0, [pc, #36]	; (800563c <HAL_InitTick+0xa8>)
 8005616:	f005 f83d 	bl	800a694 <HAL_TIM_Base_Init>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005620:	4806      	ldr	r0, [pc, #24]	; (800563c <HAL_InitTick+0xa8>)
 8005622:	f005 f88f 	bl	800a744 <HAL_TIM_Base_Start_IT>
 8005626:	4603      	mov	r3, r0
 8005628:	e000      	b.n	800562c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
}
 800562c:	4618      	mov	r0, r3
 800562e:	3730      	adds	r7, #48	; 0x30
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40023800 	.word	0x40023800
 8005638:	431bde83 	.word	0x431bde83
 800563c:	20008bec 	.word	0x20008bec
 8005640:	40001000 	.word	0x40001000

08005644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005648:	e7fe      	b.n	8005648 <NMI_Handler+0x4>

0800564a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800564a:	b480      	push	{r7}
 800564c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800564e:	e7fe      	b.n	800564e <HardFault_Handler+0x4>

08005650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005654:	e7fe      	b.n	8005654 <MemManage_Handler+0x4>

08005656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005656:	b480      	push	{r7}
 8005658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800565a:	e7fe      	b.n	800565a <BusFault_Handler+0x4>

0800565c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005660:	e7fe      	b.n	8005660 <UsageFault_Handler+0x4>

08005662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005662:	b480      	push	{r7}
 8005664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005666:	bf00      	nop
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <TIM6_DAC_IRQHandler+0x20>)
 8005676:	791b      	ldrb	r3, [r3, #4]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800567e:	4804      	ldr	r0, [pc, #16]	; (8005690 <TIM6_DAC_IRQHandler+0x20>)
 8005680:	f000 fdde 	bl	8006240 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005684:	4803      	ldr	r0, [pc, #12]	; (8005694 <TIM6_DAC_IRQHandler+0x24>)
 8005686:	f005 f8d5 	bl	800a834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20008928 	.word	0x20008928
 8005694:	20008bec 	.word	0x20008bec

08005698 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800569c:	4802      	ldr	r0, [pc, #8]	; (80056a8 <LTDC_IRQHandler+0x10>)
 800569e:	f002 fdf5 	bl	800828c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80056a2:	bf00      	nop
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20008764 	.word	0x20008764

080056ac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80056b0:	4802      	ldr	r0, [pc, #8]	; (80056bc <DMA2D_IRQHandler+0x10>)
 80056b2:	f001 f99f 	bl	80069f4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20008a48 	.word	0x20008a48

080056c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056c8:	4a14      	ldr	r2, [pc, #80]	; (800571c <_sbrk+0x5c>)
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <_sbrk+0x60>)
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <_sbrk+0x64>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <_sbrk+0x64>)
 80056de:	4a12      	ldr	r2, [pc, #72]	; (8005728 <_sbrk+0x68>)
 80056e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <_sbrk+0x64>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d207      	bcs.n	8005700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056f0:	f009 fd84 	bl	800f1fc <__errno>
 80056f4:	4603      	mov	r3, r0
 80056f6:	220c      	movs	r2, #12
 80056f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fe:	e009      	b.n	8005714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <_sbrk+0x64>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <_sbrk+0x64>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	4a05      	ldr	r2, [pc, #20]	; (8005724 <_sbrk+0x64>)
 8005710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20050000 	.word	0x20050000
 8005720:	00000400 	.word	0x00000400
 8005724:	20000a88 	.word	0x20000a88
 8005728:	20008c90 	.word	0x20008c90

0800572c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <SystemInit+0x20>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	4a05      	ldr	r2, [pc, #20]	; (800574c <SystemInit+0x20>)
 8005738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800573c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005754:	480d      	ldr	r0, [pc, #52]	; (800578c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005756:	490e      	ldr	r1, [pc, #56]	; (8005790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005758:	4a0e      	ldr	r2, [pc, #56]	; (8005794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800575a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800575c:	e002      	b.n	8005764 <LoopCopyDataInit>

0800575e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800575e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005762:	3304      	adds	r3, #4

08005764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005768:	d3f9      	bcc.n	800575e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800576c:	4c0b      	ldr	r4, [pc, #44]	; (800579c <LoopFillZerobss+0x26>)
  movs r3, #0
 800576e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005770:	e001      	b.n	8005776 <LoopFillZerobss>

08005772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005774:	3204      	adds	r2, #4

08005776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005778:	d3fb      	bcc.n	8005772 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800577a:	f7ff ffd7 	bl	800572c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800577e:	f009 fd43 	bl	800f208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005782:	f7fb f9ef 	bl	8000b64 <main>
  bx  lr    
 8005786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005788:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800578c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005790:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005794:	080d2188 	.word	0x080d2188
  ldr r2, =_sbss
 8005798:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800579c:	20008c8c 	.word	0x20008c8c

080057a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057a0:	e7fe      	b.n	80057a0 <ADC_IRQHandler>

080057a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057a6:	2003      	movs	r0, #3
 80057a8:	f000 fcf3 	bl	8006192 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057ac:	200f      	movs	r0, #15
 80057ae:	f7ff fef1 	bl	8005594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057b2:	f7ff f953 	bl	8004a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_IncTick+0x20>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_IncTick+0x24>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4413      	add	r3, r2
 80057cc:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <HAL_IncTick+0x24>)
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000048 	.word	0x20000048
 80057e0:	20008c38 	.word	0x20008c38

080057e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return uwTick;
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <HAL_GetTick+0x14>)
 80057ea:	681b      	ldr	r3, [r3, #0]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20008c38 	.word	0x20008c38

080057fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005804:	f7ff ffee 	bl	80057e4 <HAL_GetTick>
 8005808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005814:	d005      	beq.n	8005822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <HAL_Delay+0x44>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005822:	bf00      	nop
 8005824:	f7ff ffde 	bl	80057e4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	d8f7      	bhi.n	8005824 <HAL_Delay+0x28>
  {
  }
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000048 	.word	0x20000048

08005844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e031      	b.n	80058be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d109      	bne.n	8005876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff f922 	bl	8004aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b00      	cmp	r3, #0
 8005880:	d116      	bne.n	80058b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_ADC_Init+0x84>)
 8005888:	4013      	ands	r3, r2
 800588a:	f043 0202 	orr.w	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fad6 	bl	8005e44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	f043 0201 	orr.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40
 80058ae:	e001      	b.n	80058b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	ffffeefd 	.word	0xffffeefd

080058cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_ADC_Start+0x1a>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0ad      	b.n	8005a42 <HAL_ADC_Start+0x176>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d018      	beq.n	800592e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800590c:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <HAL_ADC_Start+0x184>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a50      	ldr	r2, [pc, #320]	; (8005a54 <HAL_ADC_Start+0x188>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	0c9a      	lsrs	r2, r3, #18
 8005918:	4613      	mov	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4413      	add	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005920:	e002      	b.n	8005928 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3b01      	subs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f9      	bne.n	8005922 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d175      	bne.n	8005a28 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005940:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <HAL_ADC_Start+0x18c>)
 8005942:	4013      	ands	r3, r2
 8005944:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005962:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005976:	d106      	bne.n	8005986 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	f023 0206 	bic.w	r2, r3, #6
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	645a      	str	r2, [r3, #68]	; 0x44
 8005984:	e002      	b.n	800598c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800599c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800599e:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <HAL_ADC_Start+0x190>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10f      	bne.n	80059ca <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d143      	bne.n	8005a40 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	e03a      	b.n	8005a40 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <HAL_ADC_Start+0x194>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d10e      	bne.n	80059f2 <HAL_ADC_Start+0x126>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d107      	bne.n	80059f2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059f0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80059f2:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <HAL_ADC_Start+0x190>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d120      	bne.n	8005a40 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_ADC_Start+0x198>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d11b      	bne.n	8005a40 <HAL_ADC_Start+0x174>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d114      	bne.n	8005a40 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	e00b      	b.n	8005a40 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f043 0210 	orr.w	r2, r3, #16
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	f043 0201 	orr.w	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000040 	.word	0x20000040
 8005a54:	431bde83 	.word	0x431bde83
 8005a58:	fffff8fe 	.word	0xfffff8fe
 8005a5c:	40012300 	.word	0x40012300
 8005a60:	40012000 	.word	0x40012000
 8005a64:	40012200 	.word	0x40012200

08005a68 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a84:	d113      	bne.n	8005aae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a94:	d10b      	bne.n	8005aae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e063      	b.n	8005b76 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005aae:	f7ff fe99 	bl	80057e4 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ab4:	e021      	b.n	8005afa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005abc:	d01d      	beq.n	8005afa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_ADC_PollForConversion+0x6c>
 8005ac4:	f7ff fe8e 	bl	80057e4 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d212      	bcs.n	8005afa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d00b      	beq.n	8005afa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e03d      	b.n	8005b76 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d1d6      	bne.n	8005ab6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0212 	mvn.w	r2, #18
 8005b10:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d123      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11f      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d111      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	f043 0201 	orr.w	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x1c>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e136      	b.n	8005e22 <HAL_ADC_ConfigChannel+0x28a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	d93a      	bls.n	8005c3a <HAL_ADC_ConfigChannel+0xa2>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bcc:	d035      	beq.n	8005c3a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68d9      	ldr	r1, [r3, #12]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4613      	mov	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	4413      	add	r3, r2
 8005be2:	3b1e      	subs	r3, #30
 8005be4:	2207      	movs	r2, #7
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43da      	mvns	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	400a      	ands	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a8d      	ldr	r2, [pc, #564]	; (8005e30 <HAL_ADC_ConfigChannel+0x298>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10a      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68d9      	ldr	r1, [r3, #12]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	061a      	lsls	r2, r3, #24
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c12:	e035      	b.n	8005c80 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68d9      	ldr	r1, [r3, #12]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4618      	mov	r0, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4403      	add	r3, r0
 8005c2c:	3b1e      	subs	r3, #30
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c38:	e022      	b.n	8005c80 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6919      	ldr	r1, [r3, #16]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	2207      	movs	r2, #7
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43da      	mvns	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	400a      	ands	r2, r1
 8005c5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6919      	ldr	r1, [r3, #16]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4618      	mov	r0, r3
 8005c70:	4603      	mov	r3, r0
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4403      	add	r3, r0
 8005c76:	409a      	lsls	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b06      	cmp	r3, #6
 8005c86:	d824      	bhi.n	8005cd2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	3b05      	subs	r3, #5
 8005c9a:	221f      	movs	r2, #31
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43da      	mvns	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	400a      	ands	r2, r1
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3b05      	subs	r3, #5
 8005cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	635a      	str	r2, [r3, #52]	; 0x34
 8005cd0:	e04c      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b0c      	cmp	r3, #12
 8005cd8:	d824      	bhi.n	8005d24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	3b23      	subs	r3, #35	; 0x23
 8005cec:	221f      	movs	r2, #31
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43da      	mvns	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	400a      	ands	r2, r1
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4618      	mov	r0, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	3b23      	subs	r3, #35	; 0x23
 8005d16:	fa00 f203 	lsl.w	r2, r0, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
 8005d22:	e023      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	3b41      	subs	r3, #65	; 0x41
 8005d36:	221f      	movs	r2, #31
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43da      	mvns	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	400a      	ands	r2, r1
 8005d44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4618      	mov	r0, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3b41      	subs	r3, #65	; 0x41
 8005d60:	fa00 f203 	lsl.w	r2, r0, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a30      	ldr	r2, [pc, #192]	; (8005e34 <HAL_ADC_ConfigChannel+0x29c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10a      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x1f4>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d7e:	d105      	bne.n	8005d8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005d80:	4b2d      	ldr	r3, [pc, #180]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005d8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a28      	ldr	r2, [pc, #160]	; (8005e34 <HAL_ADC_ConfigChannel+0x29c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10f      	bne.n	8005db6 <HAL_ADC_ConfigChannel+0x21e>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b12      	cmp	r3, #18
 8005d9c:	d10b      	bne.n	8005db6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005d9e:	4b26      	ldr	r3, [pc, #152]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a25      	ldr	r2, [pc, #148]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005da4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005da8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005daa:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005db4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <HAL_ADC_ConfigChannel+0x29c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d12b      	bne.n	8005e18 <HAL_ADC_ConfigChannel+0x280>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <HAL_ADC_ConfigChannel+0x298>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <HAL_ADC_ConfigChannel+0x23a>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b11      	cmp	r3, #17
 8005dd0:	d122      	bne.n	8005e18 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005dd2:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005dd8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005ddc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005dde:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <HAL_ADC_ConfigChannel+0x2a0>)
 8005de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005de8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <HAL_ADC_ConfigChannel+0x298>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d111      	bne.n	8005e18 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005df4:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <HAL_ADC_ConfigChannel+0x2a4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <HAL_ADC_ConfigChannel+0x2a8>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	0c9a      	lsrs	r2, r3, #18
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e0a:	e002      	b.n	8005e12 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f9      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	10000012 	.word	0x10000012
 8005e34:	40012000 	.word	0x40012000
 8005e38:	40012300 	.word	0x40012300
 8005e3c:	20000040 	.word	0x20000040
 8005e40:	431bde83 	.word	0x431bde83

08005e44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005e4c:	4b78      	ldr	r3, [pc, #480]	; (8006030 <ADC_Init+0x1ec>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a77      	ldr	r2, [pc, #476]	; (8006030 <ADC_Init+0x1ec>)
 8005e52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005e56:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005e58:	4b75      	ldr	r3, [pc, #468]	; (8006030 <ADC_Init+0x1ec>)
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4973      	ldr	r1, [pc, #460]	; (8006030 <ADC_Init+0x1ec>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	021a      	lsls	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6859      	ldr	r1, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6899      	ldr	r1, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	4a58      	ldr	r2, [pc, #352]	; (8006034 <ADC_Init+0x1f0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d022      	beq.n	8005f1e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6899      	ldr	r1, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6899      	ldr	r1, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	e00f      	b.n	8005f3e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0202 	bic.w	r2, r2, #2
 8005f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6899      	ldr	r1, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	005a      	lsls	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005f8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	3b01      	subs	r3, #1
 8005f98:	035a      	lsls	r2, r3, #13
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	e007      	b.n	8005fb4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	051a      	lsls	r2, r3, #20
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6899      	ldr	r1, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff6:	025a      	lsls	r2, r3, #9
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6899      	ldr	r1, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	029a      	lsls	r2, r3, #10
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40012300 	.word	0x40012300
 8006034:	0f000001 	.word	0x0f000001

08006038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <__NVIC_SetPriorityGrouping+0x40>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006054:	4013      	ands	r3, r2
 8006056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006060:	4b06      	ldr	r3, [pc, #24]	; (800607c <__NVIC_SetPriorityGrouping+0x44>)
 8006062:	4313      	orrs	r3, r2
 8006064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006066:	4a04      	ldr	r2, [pc, #16]	; (8006078 <__NVIC_SetPriorityGrouping+0x40>)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	60d3      	str	r3, [r2, #12]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	e000ed00 	.word	0xe000ed00
 800607c:	05fa0000 	.word	0x05fa0000

08006080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <__NVIC_GetPriorityGrouping+0x18>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	0a1b      	lsrs	r3, r3, #8
 800608a:	f003 0307 	and.w	r3, r3, #7
}
 800608e:	4618      	mov	r0, r3
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	e000ed00 	.word	0xe000ed00

0800609c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db0b      	blt.n	80060c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	f003 021f 	and.w	r2, r3, #31
 80060b4:	4907      	ldr	r1, [pc, #28]	; (80060d4 <__NVIC_EnableIRQ+0x38>)
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2001      	movs	r0, #1
 80060be:	fa00 f202 	lsl.w	r2, r0, r2
 80060c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	e000e100 	.word	0xe000e100

080060d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	db0a      	blt.n	8006102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	490c      	ldr	r1, [pc, #48]	; (8006124 <__NVIC_SetPriority+0x4c>)
 80060f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f6:	0112      	lsls	r2, r2, #4
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	440b      	add	r3, r1
 80060fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006100:	e00a      	b.n	8006118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	4908      	ldr	r1, [pc, #32]	; (8006128 <__NVIC_SetPriority+0x50>)
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	3b04      	subs	r3, #4
 8006110:	0112      	lsls	r2, r2, #4
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	440b      	add	r3, r1
 8006116:	761a      	strb	r2, [r3, #24]
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	e000e100 	.word	0xe000e100
 8006128:	e000ed00 	.word	0xe000ed00

0800612c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f1c3 0307 	rsb	r3, r3, #7
 8006146:	2b04      	cmp	r3, #4
 8006148:	bf28      	it	cs
 800614a:	2304      	movcs	r3, #4
 800614c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3304      	adds	r3, #4
 8006152:	2b06      	cmp	r3, #6
 8006154:	d902      	bls.n	800615c <NVIC_EncodePriority+0x30>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	3b03      	subs	r3, #3
 800615a:	e000      	b.n	800615e <NVIC_EncodePriority+0x32>
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	43da      	mvns	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	401a      	ands	r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	fa01 f303 	lsl.w	r3, r1, r3
 800617e:	43d9      	mvns	r1, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006184:	4313      	orrs	r3, r2
         );
}
 8006186:	4618      	mov	r0, r3
 8006188:	3724      	adds	r7, #36	; 0x24
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ff4c 	bl	8006038 <__NVIC_SetPriorityGrouping>
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061ba:	f7ff ff61 	bl	8006080 <__NVIC_GetPriorityGrouping>
 80061be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	6978      	ldr	r0, [r7, #20]
 80061c6:	f7ff ffb1 	bl	800612c <NVIC_EncodePriority>
 80061ca:	4602      	mov	r2, r0
 80061cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff ff80 	bl	80060d8 <__NVIC_SetPriority>
}
 80061d8:	bf00      	nop
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff ff54 	bl	800609c <__NVIC_EnableIRQ>
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e014      	b.n	8006238 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	791b      	ldrb	r3, [r3, #4]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fe fcb2 	bl	8004b88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	d120      	bne.n	800629a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006266:	d118      	bne.n	800629a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2204      	movs	r2, #4
 800626c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f043 0201 	orr.w	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006292:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f82d 	bl	80062f4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062a8:	d120      	bne.n	80062ec <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b8:	d118      	bne.n	80062ec <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2204      	movs	r2, #4
 80062be:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f043 0202 	orr.w	r2, r3, #2
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80062d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f85d 	bl	80063a6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	795b      	ldrb	r3, [r3, #5]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_DAC_ConfigChannel+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e03c      	b.n	800639a <HAL_DAC_ConfigChannel+0x92>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2202      	movs	r2, #2
 800632a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	43db      	mvns	r3, r3
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4013      	ands	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6819      	ldr	r1, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	22c0      	movs	r2, #192	; 0xc0
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	43da      	mvns	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	400a      	ands	r2, r1
 800638a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063c8:	f7ff fa0c 	bl	80057e4 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e099      	b.n	800650c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063f8:	e00f      	b.n	800641a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063fa:	f7ff f9f3 	bl	80057e4 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b05      	cmp	r3, #5
 8006406:	d908      	bls.n	800641a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2203      	movs	r2, #3
 8006412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e078      	b.n	800650c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e8      	bne.n	80063fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4b38      	ldr	r3, [pc, #224]	; (8006514 <HAL_DMA_Init+0x158>)
 8006434:	4013      	ands	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006446:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800645e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	2b04      	cmp	r3, #4
 8006472:	d107      	bne.n	8006484 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	4313      	orrs	r3, r2
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d117      	bne.n	80064de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00e      	beq.n	80064de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8bd 	bl	8006640 <DMA_CheckFifoParam>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2240      	movs	r2, #64	; 0x40
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80064da:	2301      	movs	r3, #1
 80064dc:	e016      	b.n	800650c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f874 	bl	80065d4 <DMA_CalcBaseAndBitshift>
 80064ec:	4603      	mov	r3, r0
 80064ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f4:	223f      	movs	r2, #63	; 0x3f
 80064f6:	409a      	lsls	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	f010803f 	.word	0xf010803f

08006518 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e050      	b.n	80065cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d101      	bne.n	800653a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006536:	2302      	movs	r3, #2
 8006538:	e048      	b.n	80065cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0201 	bic.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2221      	movs	r2, #33	; 0x21
 8006578:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f82a 	bl	80065d4 <DMA_CalcBaseAndBitshift>
 8006580:	4603      	mov	r3, r0
 8006582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006588:	223f      	movs	r2, #63	; 0x3f
 800658a:	409a      	lsls	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	3b10      	subs	r3, #16
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <DMA_CalcBaseAndBitshift+0x60>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065ee:	4a12      	ldr	r2, [pc, #72]	; (8006638 <DMA_CalcBaseAndBitshift+0x64>)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d908      	bls.n	8006614 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <DMA_CalcBaseAndBitshift+0x68>)
 800660a:	4013      	ands	r3, r2
 800660c:	1d1a      	adds	r2, r3, #4
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	659a      	str	r2, [r3, #88]	; 0x58
 8006612:	e006      	b.n	8006622 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <DMA_CalcBaseAndBitshift+0x68>)
 800661c:	4013      	ands	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	aaaaaaab 	.word	0xaaaaaaab
 8006638:	080d20dc 	.word	0x080d20dc
 800663c:	fffffc00 	.word	0xfffffc00

08006640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d11f      	bne.n	800669a <DMA_CheckFifoParam+0x5a>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d856      	bhi.n	800670e <DMA_CheckFifoParam+0xce>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <DMA_CheckFifoParam+0x28>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	08006679 	.word	0x08006679
 800666c:	0800668b 	.word	0x0800668b
 8006670:	08006679 	.word	0x08006679
 8006674:	0800670f 	.word	0x0800670f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d046      	beq.n	8006712 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006688:	e043      	b.n	8006712 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006692:	d140      	bne.n	8006716 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006698:	e03d      	b.n	8006716 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a2:	d121      	bne.n	80066e8 <DMA_CheckFifoParam+0xa8>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d837      	bhi.n	800671a <DMA_CheckFifoParam+0xda>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <DMA_CheckFifoParam+0x70>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066c7 	.word	0x080066c7
 80066b8:	080066c1 	.word	0x080066c1
 80066bc:	080066d9 	.word	0x080066d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
      break;
 80066c4:	e030      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d025      	beq.n	800671e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066d6:	e022      	b.n	800671e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066e0:	d11f      	bne.n	8006722 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80066e6:	e01c      	b.n	8006722 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d903      	bls.n	80066f6 <DMA_CheckFifoParam+0xb6>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d003      	beq.n	80066fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066f4:	e018      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
      break;
 80066fa:	e015      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
      break;
 800670c:	e00b      	b.n	8006726 <DMA_CheckFifoParam+0xe6>
      break;
 800670e:	bf00      	nop
 8006710:	e00a      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      break;
 8006712:	bf00      	nop
 8006714:	e008      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      break;
 8006716:	bf00      	nop
 8006718:	e006      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      break;
 800671a:	bf00      	nop
 800671c:	e004      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      break;
 800671e:	bf00      	nop
 8006720:	e002      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      break;   
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <DMA_CheckFifoParam+0xe8>
      break;
 8006726:	bf00      	nop
    }
  } 
  
  return status; 
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop

08006738 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e039      	b.n	80067be <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fe fa5a 	bl	8004c18 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006788:	f023 0107 	bic.w	r1, r3, #7
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679e:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <HAL_DMA2D_Init+0x90>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68d1      	ldr	r1, [r2, #12]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	ffffc000 	.word	0xffffc000

080067cc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_DMA2D_Start+0x1c>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e018      	b.n	800681a <HAL_DMA2D_Start+0x4e>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fa98 	bl	8006d38 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d056      	beq.n	80068ec <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800683e:	f7fe ffd1 	bl	80057e4 <HAL_GetTick>
 8006842:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006844:	e04b      	b.n	80068de <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006854:	2b00      	cmp	r3, #0
 8006856:	d023      	beq.n	80068a0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	f043 0202 	orr.w	r2, r3, #2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	f043 0201 	orr.w	r2, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2221      	movs	r2, #33	; 0x21
 800688a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2204      	movs	r2, #4
 8006890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0a5      	b.n	80069ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a6:	d01a      	beq.n	80068de <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068a8:	f7fe ff9c 	bl	80057e4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d302      	bcc.n	80068be <HAL_DMA2D_PollForTransfer+0x9c>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10f      	bne.n	80068de <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	f043 0220 	orr.w	r2, r3, #32
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2203      	movs	r2, #3
 80068ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e086      	b.n	80069ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0ac      	beq.n	8006846 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d061      	beq.n	80069d2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800690e:	f7fe ff69 	bl	80057e4 <HAL_GetTick>
 8006912:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006914:	e056      	b.n	80069c4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006924:	2b00      	cmp	r3, #0
 8006926:	d02e      	beq.n	8006986 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	f043 0204 	orr.w	r2, r3, #4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	f043 0202 	orr.w	r2, r3, #2
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	f043 0201 	orr.w	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2229      	movs	r2, #41	; 0x29
 8006970:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2204      	movs	r2, #4
 8006976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e032      	b.n	80069ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698c:	d01a      	beq.n	80069c4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800698e:	f7fe ff29 	bl	80057e4 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <HAL_DMA2D_PollForTransfer+0x182>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10f      	bne.n	80069c4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2203      	movs	r2, #3
 80069b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e013      	b.n	80069ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0a1      	beq.n	8006916 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2212      	movs	r2, #18
 80069d8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d026      	beq.n	8006a64 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d021      	beq.n	8006a64 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a2e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	f043 0201 	orr.w	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2201      	movs	r2, #1
 8006a42:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2204      	movs	r2, #4
 8006a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d026      	beq.n	8006abc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d021      	beq.n	8006abc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a86:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a94:	f043 0202 	orr.w	r2, r3, #2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d026      	beq.n	8006b14 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d021      	beq.n	8006b14 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ade:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	f043 0204 	orr.w	r2, r3, #4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2204      	movs	r2, #4
 8006af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d013      	beq.n	8006b46 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b36:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f853 	bl	8006bec <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d024      	beq.n	8006b9a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01f      	beq.n	8006b9a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01f      	beq.n	8006be4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01a      	beq.n	8006be4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bbc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f80e 	bl	8006c00 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_DMA2D_ConfigLayer+0x20>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e079      	b.n	8006d28 <HAL_DMA2D_ConfigLayer+0x114>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	3318      	adds	r3, #24
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	041b      	lsls	r3, r3, #16
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006c5e:	4b35      	ldr	r3, [pc, #212]	; (8006d34 <HAL_DMA2D_ConfigLayer+0x120>)
 8006c60:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b0a      	cmp	r3, #10
 8006c68:	d003      	beq.n	8006c72 <HAL_DMA2D_ConfigLayer+0x5e>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	d107      	bne.n	8006c82 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	e005      	b.n	8006c8e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	061b      	lsls	r3, r3, #24
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d120      	bne.n	8006cd6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	ea02 0103 	and.w	r1, r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b0a      	cmp	r3, #10
 8006cbc:	d003      	beq.n	8006cc6 <HAL_DMA2D_ConfigLayer+0xb2>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d127      	bne.n	8006d16 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8006cd4:	e01f      	b.n	8006d16 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	ea02 0103 	and.w	r1, r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b0a      	cmp	r3, #10
 8006cfe:	d003      	beq.n	8006d08 <HAL_DMA2D_ConfigLayer+0xf4>
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b09      	cmp	r3, #9
 8006d06:	d106      	bne.n	8006d16 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006d14:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	ff03000f 	.word	0xff03000f

08006d38 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b08b      	sub	sp, #44	; 0x2c
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	041a      	lsls	r2, r3, #16
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	431a      	orrs	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d70:	d174      	bne.n	8006e5c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d80:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d88:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d108      	bne.n	8006daa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
 8006da8:	e053      	b.n	8006e52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d106      	bne.n	8006dc0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbe:	e048      	b.n	8006e52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d111      	bne.n	8006dec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	0cdb      	lsrs	r3, r3, #19
 8006dcc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	0a9b      	lsrs	r3, r3, #10
 8006dd2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	08db      	lsrs	r3, r3, #3
 8006dd8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	02db      	lsls	r3, r3, #11
 8006de2:	4313      	orrs	r3, r2
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dea:	e032      	b.n	8006e52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d117      	bne.n	8006e24 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	0fdb      	lsrs	r3, r3, #31
 8006df8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	0cdb      	lsrs	r3, r3, #19
 8006dfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	0adb      	lsrs	r3, r3, #11
 8006e04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	08db      	lsrs	r3, r3, #3
 8006e0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	029b      	lsls	r3, r3, #10
 8006e14:	431a      	orrs	r2, r3
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	03db      	lsls	r3, r3, #15
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
 8006e22:	e016      	b.n	8006e52 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	0f1b      	lsrs	r3, r3, #28
 8006e28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	0d1b      	lsrs	r3, r3, #20
 8006e2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	0b1b      	lsrs	r3, r3, #12
 8006e34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	091b      	lsrs	r3, r3, #4
 8006e3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	011a      	lsls	r2, r3, #4
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	431a      	orrs	r2, r3
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e58:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006e5a:	e003      	b.n	8006e64 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	60da      	str	r2, [r3, #12]
}
 8006e64:	bf00      	nop
 8006e66:	372c      	adds	r7, #44	; 0x2c
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e175      	b.n	800717c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e90:	2201      	movs	r2, #1
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	f040 8164 	bne.w	8007176 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d005      	beq.n	8006ec6 <HAL_GPIO_Init+0x56>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d130      	bne.n	8006f28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	4013      	ands	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006efc:	2201      	movs	r2, #1
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	fa02 f303 	lsl.w	r3, r2, r3
 8006f04:	43db      	mvns	r3, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	091b      	lsrs	r3, r3, #4
 8006f12:	f003 0201 	and.w	r2, r3, #1
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d017      	beq.n	8006f64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	2203      	movs	r2, #3
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	43db      	mvns	r3, r3
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d123      	bne.n	8006fb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	08da      	lsrs	r2, r3, #3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3208      	adds	r2, #8
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	220f      	movs	r2, #15
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4013      	ands	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	08da      	lsrs	r2, r3, #3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3208      	adds	r2, #8
 8006fb2:	69b9      	ldr	r1, [r7, #24]
 8006fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f003 0203 	and.w	r2, r3, #3
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80be 	beq.w	8007176 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ffa:	4b66      	ldr	r3, [pc, #408]	; (8007194 <HAL_GPIO_Init+0x324>)
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffe:	4a65      	ldr	r2, [pc, #404]	; (8007194 <HAL_GPIO_Init+0x324>)
 8007000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007004:	6453      	str	r3, [r2, #68]	; 0x44
 8007006:	4b63      	ldr	r3, [pc, #396]	; (8007194 <HAL_GPIO_Init+0x324>)
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007012:	4a61      	ldr	r2, [pc, #388]	; (8007198 <HAL_GPIO_Init+0x328>)
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	3302      	adds	r3, #2
 800701a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800701e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	220f      	movs	r2, #15
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	43db      	mvns	r3, r3
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4013      	ands	r3, r2
 8007034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a58      	ldr	r2, [pc, #352]	; (800719c <HAL_GPIO_Init+0x32c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d037      	beq.n	80070ae <HAL_GPIO_Init+0x23e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a57      	ldr	r2, [pc, #348]	; (80071a0 <HAL_GPIO_Init+0x330>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d031      	beq.n	80070aa <HAL_GPIO_Init+0x23a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a56      	ldr	r2, [pc, #344]	; (80071a4 <HAL_GPIO_Init+0x334>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d02b      	beq.n	80070a6 <HAL_GPIO_Init+0x236>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a55      	ldr	r2, [pc, #340]	; (80071a8 <HAL_GPIO_Init+0x338>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d025      	beq.n	80070a2 <HAL_GPIO_Init+0x232>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a54      	ldr	r2, [pc, #336]	; (80071ac <HAL_GPIO_Init+0x33c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01f      	beq.n	800709e <HAL_GPIO_Init+0x22e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a53      	ldr	r2, [pc, #332]	; (80071b0 <HAL_GPIO_Init+0x340>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d019      	beq.n	800709a <HAL_GPIO_Init+0x22a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a52      	ldr	r2, [pc, #328]	; (80071b4 <HAL_GPIO_Init+0x344>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <HAL_GPIO_Init+0x226>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a51      	ldr	r2, [pc, #324]	; (80071b8 <HAL_GPIO_Init+0x348>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00d      	beq.n	8007092 <HAL_GPIO_Init+0x222>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a50      	ldr	r2, [pc, #320]	; (80071bc <HAL_GPIO_Init+0x34c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <HAL_GPIO_Init+0x21e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a4f      	ldr	r2, [pc, #316]	; (80071c0 <HAL_GPIO_Init+0x350>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d101      	bne.n	800708a <HAL_GPIO_Init+0x21a>
 8007086:	2309      	movs	r3, #9
 8007088:	e012      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 800708a:	230a      	movs	r3, #10
 800708c:	e010      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 800708e:	2308      	movs	r3, #8
 8007090:	e00e      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 8007092:	2307      	movs	r3, #7
 8007094:	e00c      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 8007096:	2306      	movs	r3, #6
 8007098:	e00a      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 800709a:	2305      	movs	r3, #5
 800709c:	e008      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 800709e:	2304      	movs	r3, #4
 80070a0:	e006      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 80070a2:	2303      	movs	r3, #3
 80070a4:	e004      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e002      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <HAL_GPIO_Init+0x240>
 80070ae:	2300      	movs	r3, #0
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	f002 0203 	and.w	r2, r2, #3
 80070b6:	0092      	lsls	r2, r2, #2
 80070b8:	4093      	lsls	r3, r2
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4313      	orrs	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80070c0:	4935      	ldr	r1, [pc, #212]	; (8007198 <HAL_GPIO_Init+0x328>)
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	089b      	lsrs	r3, r3, #2
 80070c6:	3302      	adds	r3, #2
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ce:	4b3d      	ldr	r3, [pc, #244]	; (80071c4 <HAL_GPIO_Init+0x354>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070f2:	4a34      	ldr	r2, [pc, #208]	; (80071c4 <HAL_GPIO_Init+0x354>)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070f8:	4b32      	ldr	r3, [pc, #200]	; (80071c4 <HAL_GPIO_Init+0x354>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	43db      	mvns	r3, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4013      	ands	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800711c:	4a29      	ldr	r2, [pc, #164]	; (80071c4 <HAL_GPIO_Init+0x354>)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007122:	4b28      	ldr	r3, [pc, #160]	; (80071c4 <HAL_GPIO_Init+0x354>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	43db      	mvns	r3, r3
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	4013      	ands	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007146:	4a1f      	ldr	r2, [pc, #124]	; (80071c4 <HAL_GPIO_Init+0x354>)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800714c:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <HAL_GPIO_Init+0x354>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	43db      	mvns	r3, r3
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	4013      	ands	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007170:	4a14      	ldr	r2, [pc, #80]	; (80071c4 <HAL_GPIO_Init+0x354>)
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3301      	adds	r3, #1
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	f67f ae86 	bls.w	8006e90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	3724      	adds	r7, #36	; 0x24
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40023800 	.word	0x40023800
 8007198:	40013800 	.word	0x40013800
 800719c:	40020000 	.word	0x40020000
 80071a0:	40020400 	.word	0x40020400
 80071a4:	40020800 	.word	0x40020800
 80071a8:	40020c00 	.word	0x40020c00
 80071ac:	40021000 	.word	0x40021000
 80071b0:	40021400 	.word	0x40021400
 80071b4:	40021800 	.word	0x40021800
 80071b8:	40021c00 	.word	0x40021c00
 80071bc:	40022000 	.word	0x40022000
 80071c0:	40022400 	.word	0x40022400
 80071c4:	40013c00 	.word	0x40013c00

080071c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80071d2:	2300      	movs	r3, #0
 80071d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80071da:	2300      	movs	r3, #0
 80071dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	e0d9      	b.n	8007398 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80071e4:	2201      	movs	r2, #1
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4013      	ands	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f040 80c9 	bne.w	8007392 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007200:	4a6b      	ldr	r2, [pc, #428]	; (80073b0 <HAL_GPIO_DeInit+0x1e8>)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	3302      	adds	r3, #2
 8007208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800720c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	220f      	movs	r2, #15
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	4013      	ands	r3, r2
 8007220:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a63      	ldr	r2, [pc, #396]	; (80073b4 <HAL_GPIO_DeInit+0x1ec>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d037      	beq.n	800729a <HAL_GPIO_DeInit+0xd2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a62      	ldr	r2, [pc, #392]	; (80073b8 <HAL_GPIO_DeInit+0x1f0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d031      	beq.n	8007296 <HAL_GPIO_DeInit+0xce>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a61      	ldr	r2, [pc, #388]	; (80073bc <HAL_GPIO_DeInit+0x1f4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d02b      	beq.n	8007292 <HAL_GPIO_DeInit+0xca>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a60      	ldr	r2, [pc, #384]	; (80073c0 <HAL_GPIO_DeInit+0x1f8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d025      	beq.n	800728e <HAL_GPIO_DeInit+0xc6>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a5f      	ldr	r2, [pc, #380]	; (80073c4 <HAL_GPIO_DeInit+0x1fc>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01f      	beq.n	800728a <HAL_GPIO_DeInit+0xc2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a5e      	ldr	r2, [pc, #376]	; (80073c8 <HAL_GPIO_DeInit+0x200>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d019      	beq.n	8007286 <HAL_GPIO_DeInit+0xbe>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a5d      	ldr	r2, [pc, #372]	; (80073cc <HAL_GPIO_DeInit+0x204>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <HAL_GPIO_DeInit+0xba>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a5c      	ldr	r2, [pc, #368]	; (80073d0 <HAL_GPIO_DeInit+0x208>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00d      	beq.n	800727e <HAL_GPIO_DeInit+0xb6>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a5b      	ldr	r2, [pc, #364]	; (80073d4 <HAL_GPIO_DeInit+0x20c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <HAL_GPIO_DeInit+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a5a      	ldr	r2, [pc, #360]	; (80073d8 <HAL_GPIO_DeInit+0x210>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d101      	bne.n	8007276 <HAL_GPIO_DeInit+0xae>
 8007272:	2309      	movs	r3, #9
 8007274:	e012      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 8007276:	230a      	movs	r3, #10
 8007278:	e010      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 800727a:	2308      	movs	r3, #8
 800727c:	e00e      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 800727e:	2307      	movs	r3, #7
 8007280:	e00c      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 8007282:	2306      	movs	r3, #6
 8007284:	e00a      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 8007286:	2305      	movs	r3, #5
 8007288:	e008      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 800728a:	2304      	movs	r3, #4
 800728c:	e006      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 800728e:	2303      	movs	r3, #3
 8007290:	e004      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 8007292:	2302      	movs	r3, #2
 8007294:	e002      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <HAL_GPIO_DeInit+0xd4>
 800729a:	2300      	movs	r3, #0
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	f002 0203 	and.w	r2, r2, #3
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	4093      	lsls	r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d132      	bne.n	8007312 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80072ac:	4b4b      	ldr	r3, [pc, #300]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	43db      	mvns	r3, r3
 80072b4:	4949      	ldr	r1, [pc, #292]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80072ba:	4b48      	ldr	r3, [pc, #288]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	4946      	ldr	r1, [pc, #280]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80072c8:	4b44      	ldr	r3, [pc, #272]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	43db      	mvns	r3, r3
 80072d0:	4942      	ldr	r1, [pc, #264]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80072d6:	4b41      	ldr	r3, [pc, #260]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	43db      	mvns	r3, r3
 80072de:	493f      	ldr	r1, [pc, #252]	; (80073dc <HAL_GPIO_DeInit+0x214>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	220f      	movs	r2, #15
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80072f4:	4a2e      	ldr	r2, [pc, #184]	; (80073b0 <HAL_GPIO_DeInit+0x1e8>)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	089b      	lsrs	r3, r3, #2
 80072fa:	3302      	adds	r3, #2
 80072fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	43da      	mvns	r2, r3
 8007304:	482a      	ldr	r0, [pc, #168]	; (80073b0 <HAL_GPIO_DeInit+0x1e8>)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	089b      	lsrs	r3, r3, #2
 800730a:	400a      	ands	r2, r1
 800730c:	3302      	adds	r3, #2
 800730e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	2103      	movs	r1, #3
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	08da      	lsrs	r2, r3, #3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3208      	adds	r2, #8
 8007330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	220f      	movs	r2, #15
 800733e:	fa02 f303 	lsl.w	r3, r2, r3
 8007342:	43db      	mvns	r3, r3
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	08d2      	lsrs	r2, r2, #3
 8007348:	4019      	ands	r1, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3208      	adds	r2, #8
 800734e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	2103      	movs	r1, #3
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	43db      	mvns	r3, r3
 8007362:	401a      	ands	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	2101      	movs	r1, #1
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	fa01 f303 	lsl.w	r3, r1, r3
 8007374:	43db      	mvns	r3, r3
 8007376:	401a      	ands	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	2103      	movs	r1, #3
 8007386:	fa01 f303 	lsl.w	r3, r1, r3
 800738a:	43db      	mvns	r3, r3
 800738c:	401a      	ands	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	3301      	adds	r3, #1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b0f      	cmp	r3, #15
 800739c:	f67f af22 	bls.w	80071e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40013800 	.word	0x40013800
 80073b4:	40020000 	.word	0x40020000
 80073b8:	40020400 	.word	0x40020400
 80073bc:	40020800 	.word	0x40020800
 80073c0:	40020c00 	.word	0x40020c00
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40021400 	.word	0x40021400
 80073cc:	40021800 	.word	0x40021800
 80073d0:	40021c00 	.word	0x40021c00
 80073d4:	40022000 	.word	0x40022000
 80073d8:	40022400 	.word	0x40022400
 80073dc:	40013c00 	.word	0x40013c00

080073e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	887b      	ldrh	r3, [r7, #2]
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	e001      	b.n	8007402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	807b      	strh	r3, [r7, #2]
 800741c:	4613      	mov	r3, r2
 800741e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007420:	787b      	ldrb	r3, [r7, #1]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007426:	887a      	ldrh	r2, [r7, #2]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800742c:	e003      	b.n	8007436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800742e:	887b      	ldrh	r3, [r7, #2]
 8007430:	041a      	lsls	r2, r3, #16
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	619a      	str	r2, [r3, #24]
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007454:	887a      	ldrh	r2, [r7, #2]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4013      	ands	r3, r2
 800745a:	041a      	lsls	r2, r3, #16
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	43d9      	mvns	r1, r3
 8007460:	887b      	ldrh	r3, [r7, #2]
 8007462:	400b      	ands	r3, r1
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	619a      	str	r2, [r3, #24]
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e07f      	b.n	800758a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fd fbe0 	bl	8004c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2224      	movs	r2, #36	; 0x24
 80074a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d107      	bne.n	80074f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	e006      	b.n	8007500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d104      	bne.n	8007512 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6859      	ldr	r1, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <HAL_I2C_Init+0x11c>)
 800751e:	430b      	orrs	r3, r1
 8007520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69d9      	ldr	r1, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	02008000 	.word	0x02008000

08007598 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e021      	b.n	80075ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2224      	movs	r2, #36	; 0x24
 80075ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fd fbf6 	bl	8004db4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	461a      	mov	r2, r3
 8007606:	4603      	mov	r3, r0
 8007608:	817b      	strh	r3, [r7, #10]
 800760a:	460b      	mov	r3, r1
 800760c:	813b      	strh	r3, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b20      	cmp	r3, #32
 800761c:	f040 80f9 	bne.w	8007812 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_I2C_Mem_Write+0x34>
 8007626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007632:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0ed      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <HAL_I2C_Mem_Write+0x4e>
 8007642:	2302      	movs	r3, #2
 8007644:	e0e6      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800764e:	f7fe f8c9 	bl	80057e4 <HAL_GetTick>
 8007652:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2319      	movs	r3, #25
 800765a:	2201      	movs	r2, #1
 800765c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fad1 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e0d1      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2221      	movs	r2, #33	; 0x21
 8007674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2240      	movs	r2, #64	; 0x40
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a3a      	ldr	r2, [r7, #32]
 800768a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007698:	88f8      	ldrh	r0, [r7, #6]
 800769a:	893a      	ldrh	r2, [r7, #8]
 800769c:	8979      	ldrh	r1, [r7, #10]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	4603      	mov	r3, r0
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f9e1 	bl	8007a70 <I2C_RequestMemoryWrite>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e0a9      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2bff      	cmp	r3, #255	; 0xff
 80076c8:	d90e      	bls.n	80076e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	22ff      	movs	r2, #255	; 0xff
 80076ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	8979      	ldrh	r1, [r7, #10]
 80076d8:	2300      	movs	r3, #0
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fc39 	bl	8007f58 <I2C_TransferConfig>
 80076e6:	e00f      	b.n	8007708 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	8979      	ldrh	r1, [r7, #10]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fc28 	bl	8007f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fabb 	bl	8007c88 <I2C_WaitOnTXISFlagUntilTimeout>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e07b      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d034      	beq.n	80077c0 <HAL_I2C_Mem_Write+0x1c8>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d130      	bne.n	80077c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	2200      	movs	r2, #0
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fa4d 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e04d      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2bff      	cmp	r3, #255	; 0xff
 8007780:	d90e      	bls.n	80077a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	b2da      	uxtb	r2, r3
 800778e:	8979      	ldrh	r1, [r7, #10]
 8007790:	2300      	movs	r3, #0
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fbdd 	bl	8007f58 <I2C_TransferConfig>
 800779e:	e00f      	b.n	80077c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	8979      	ldrh	r1, [r7, #10]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fbcc 	bl	8007f58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d19e      	bne.n	8007708 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fa9a 	bl	8007d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e01a      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2220      	movs	r2, #32
 80077e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <HAL_I2C_Mem_Write+0x224>)
 80077f2:	400b      	ands	r3, r1
 80077f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	e000      	b.n	8007814 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007812:	2302      	movs	r3, #2
  }
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	fe00e800 	.word	0xfe00e800

08007820 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	4608      	mov	r0, r1
 800782a:	4611      	mov	r1, r2
 800782c:	461a      	mov	r2, r3
 800782e:	4603      	mov	r3, r0
 8007830:	817b      	strh	r3, [r7, #10]
 8007832:	460b      	mov	r3, r1
 8007834:	813b      	strh	r3, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b20      	cmp	r3, #32
 8007844:	f040 80fd 	bne.w	8007a42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_I2C_Mem_Read+0x34>
 800784e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800785a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0f1      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <HAL_I2C_Mem_Read+0x4e>
 800786a:	2302      	movs	r3, #2
 800786c:	e0ea      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007876:	f7fd ffb5 	bl	80057e4 <HAL_GetTick>
 800787a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	2319      	movs	r3, #25
 8007882:	2201      	movs	r2, #1
 8007884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f9bd 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e0d5      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2222      	movs	r2, #34	; 0x22
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2240      	movs	r2, #64	; 0x40
 80078a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6a3a      	ldr	r2, [r7, #32]
 80078b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078c0:	88f8      	ldrh	r0, [r7, #6]
 80078c2:	893a      	ldrh	r2, [r7, #8]
 80078c4:	8979      	ldrh	r1, [r7, #10]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	4603      	mov	r3, r0
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f921 	bl	8007b18 <I2C_RequestMemoryRead>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0ad      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	d90e      	bls.n	8007910 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	22ff      	movs	r2, #255	; 0xff
 80078f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	8979      	ldrh	r1, [r7, #10]
 8007900:	4b52      	ldr	r3, [pc, #328]	; (8007a4c <HAL_I2C_Mem_Read+0x22c>)
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 fb25 	bl	8007f58 <I2C_TransferConfig>
 800790e:	e00f      	b.n	8007930 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	b2da      	uxtb	r2, r3
 8007920:	8979      	ldrh	r1, [r7, #10]
 8007922:	4b4a      	ldr	r3, [pc, #296]	; (8007a4c <HAL_I2C_Mem_Read+0x22c>)
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fb14 	bl	8007f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	2200      	movs	r2, #0
 8007938:	2104      	movs	r1, #4
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f964 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e07c      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d034      	beq.n	80079f0 <HAL_I2C_Mem_Read+0x1d0>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798a:	2b00      	cmp	r3, #0
 800798c:	d130      	bne.n	80079f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	2200      	movs	r2, #0
 8007996:	2180      	movs	r1, #128	; 0x80
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f935 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e04d      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2bff      	cmp	r3, #255	; 0xff
 80079b0:	d90e      	bls.n	80079d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	22ff      	movs	r2, #255	; 0xff
 80079b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	8979      	ldrh	r1, [r7, #10]
 80079c0:	2300      	movs	r3, #0
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fac5 	bl	8007f58 <I2C_TransferConfig>
 80079ce:	e00f      	b.n	80079f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	8979      	ldrh	r1, [r7, #10]
 80079e2:	2300      	movs	r3, #0
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 fab4 	bl	8007f58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d19a      	bne.n	8007930 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 f982 	bl	8007d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e01a      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2220      	movs	r2, #32
 8007a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6859      	ldr	r1, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <HAL_I2C_Mem_Read+0x230>)
 8007a22:	400b      	ands	r3, r1
 8007a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e000      	b.n	8007a44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007a42:	2302      	movs	r3, #2
  }
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	80002400 	.word	0x80002400
 8007a50:	fe00e800 	.word	0xfe00e800

08007a54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a62:	b2db      	uxtb	r3, r3
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	817b      	strh	r3, [r7, #10]
 8007a82:	460b      	mov	r3, r1
 8007a84:	813b      	strh	r3, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	8979      	ldrh	r1, [r7, #10]
 8007a90:	4b20      	ldr	r3, [pc, #128]	; (8007b14 <I2C_RequestMemoryWrite+0xa4>)
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fa5d 	bl	8007f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	69b9      	ldr	r1, [r7, #24]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f8f0 	bl	8007c88 <I2C_WaitOnTXISFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e02c      	b.n	8007b0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d105      	bne.n	8007ac4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ab8:	893b      	ldrh	r3, [r7, #8]
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8007ac2:	e015      	b.n	8007af0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ac4:	893b      	ldrh	r3, [r7, #8]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	69b9      	ldr	r1, [r7, #24]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f8d6 	bl	8007c88 <I2C_WaitOnTXISFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e012      	b.n	8007b0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ae6:	893b      	ldrh	r3, [r7, #8]
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	2200      	movs	r2, #0
 8007af8:	2180      	movs	r1, #128	; 0x80
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f884 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	80002000 	.word	0x80002000

08007b18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	4608      	mov	r0, r1
 8007b22:	4611      	mov	r1, r2
 8007b24:	461a      	mov	r2, r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	817b      	strh	r3, [r7, #10]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	813b      	strh	r3, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	8979      	ldrh	r1, [r7, #10]
 8007b38:	4b20      	ldr	r3, [pc, #128]	; (8007bbc <I2C_RequestMemoryRead+0xa4>)
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fa0a 	bl	8007f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	69b9      	ldr	r1, [r7, #24]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f89d 	bl	8007c88 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e02c      	b.n	8007bb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d105      	bne.n	8007b6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b5e:	893b      	ldrh	r3, [r7, #8]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	629a      	str	r2, [r3, #40]	; 0x28
 8007b68:	e015      	b.n	8007b96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b6a:	893b      	ldrh	r3, [r7, #8]
 8007b6c:	0a1b      	lsrs	r3, r3, #8
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	69b9      	ldr	r1, [r7, #24]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f883 	bl	8007c88 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e012      	b.n	8007bb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b8c:	893b      	ldrh	r3, [r7, #8]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2140      	movs	r1, #64	; 0x40
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f831 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	80002000 	.word	0x80002000

08007bc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d103      	bne.n	8007bde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d007      	beq.n	8007bfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	619a      	str	r2, [r3, #24]
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c18:	e022      	b.n	8007c60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c20:	d01e      	beq.n	8007c60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c22:	f7fd fddf 	bl	80057e4 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d302      	bcc.n	8007c38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d113      	bne.n	8007c60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e00f      	b.n	8007c80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4013      	ands	r3, r2
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	461a      	mov	r2, r3
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d0cd      	beq.n	8007c1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c94:	e02c      	b.n	8007cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f870 	bl	8007d80 <I2C_IsErrorOccurred>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e02a      	b.n	8007d00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cb0:	d01e      	beq.n	8007cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb2:	f7fd fd97 	bl	80057e4 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d302      	bcc.n	8007cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d113      	bne.n	8007cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e007      	b.n	8007d00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d1cb      	bne.n	8007c96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d14:	e028      	b.n	8007d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f830 	bl	8007d80 <I2C_IsErrorOccurred>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e026      	b.n	8007d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d2a:	f7fd fd5b 	bl	80057e4 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d302      	bcc.n	8007d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d113      	bne.n	8007d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d44:	f043 0220 	orr.w	r2, r3, #32
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e007      	b.n	8007d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	f003 0320 	and.w	r3, r3, #32
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	d1cf      	bne.n	8007d16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08a      	sub	sp, #40	; 0x28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d075      	beq.n	8007e98 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2210      	movs	r2, #16
 8007db2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007db4:	e056      	b.n	8007e64 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dbc:	d052      	beq.n	8007e64 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007dbe:	f7fd fd11 	bl	80057e4 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d302      	bcc.n	8007dd4 <I2C_IsErrorOccurred+0x54>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d147      	bne.n	8007e64 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007de6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df6:	d12e      	bne.n	8007e56 <I2C_IsErrorOccurred+0xd6>
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dfe:	d02a      	beq.n	8007e56 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007e00:	7cfb      	ldrb	r3, [r7, #19]
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d027      	beq.n	8007e56 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e14:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007e16:	f7fd fce5 	bl	80057e4 <HAL_GetTick>
 8007e1a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e1c:	e01b      	b.n	8007e56 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e1e:	f7fd fce1 	bl	80057e4 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b19      	cmp	r3, #25
 8007e2a:	d914      	bls.n	8007e56 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e30:	f043 0220 	orr.w	r2, r3, #32
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	f003 0320 	and.w	r3, r3, #32
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d1dc      	bne.n	8007e1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d003      	beq.n	8007e7a <I2C_IsErrorOccurred+0xfa>
 8007e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d09d      	beq.n	8007db6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d103      	bne.n	8007e8a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2220      	movs	r2, #32
 8007e88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	f043 0304 	orr.w	r3, r3, #4
 8007e90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00b      	beq.n	8007ec2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	f043 0308 	orr.w	r3, r3, #8
 8007ed2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	f043 0302 	orr.w	r3, r3, #2
 8007ef4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01c      	beq.n	8007f48 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fe56 	bl	8007bc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6859      	ldr	r1, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <I2C_IsErrorOccurred+0x1d4>)
 8007f20:	400b      	ands	r3, r1
 8007f22:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3728      	adds	r7, #40	; 0x28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	fe00e800 	.word	0xfe00e800

08007f58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	817b      	strh	r3, [r7, #10]
 8007f66:	4613      	mov	r3, r2
 8007f68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f6a:	897b      	ldrh	r3, [r7, #10]
 8007f6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f70:	7a7b      	ldrb	r3, [r7, #9]
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f78:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f86:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	0d5b      	lsrs	r3, r3, #21
 8007f92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007f96:	4b08      	ldr	r3, [pc, #32]	; (8007fb8 <I2C_TransferConfig+0x60>)
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	43db      	mvns	r3, r3
 8007f9c:	ea02 0103 	and.w	r1, r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	03ff63ff 	.word	0x03ff63ff

08007fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d138      	bne.n	8008044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e032      	b.n	8008046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2224      	movs	r2, #36	; 0x24
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0201 	bic.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800800e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6819      	ldr	r1, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	e000      	b.n	8008046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008044:	2302      	movs	r3, #2
  }
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008052:	b480      	push	{r7}
 8008054:	b085      	sub	sp, #20
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b20      	cmp	r3, #32
 8008066:	d139      	bne.n	80080dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008072:	2302      	movs	r3, #2
 8008074:	e033      	b.n	80080de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2224      	movs	r2, #36	; 0x24
 8008082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0201 	bic.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
	...

080080ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e0bf      	b.n	800827e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fc fe8a 	bl	8004e2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800812e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6999      	ldr	r1, [r3, #24]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008144:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6899      	ldr	r1, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b4a      	ldr	r3, [pc, #296]	; (8008288 <HAL_LTDC_Init+0x19c>)
 8008160:	400b      	ands	r3, r1
 8008162:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6899      	ldr	r1, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68d9      	ldr	r1, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	4b3e      	ldr	r3, [pc, #248]	; (8008288 <HAL_LTDC_Init+0x19c>)
 800818e:	400b      	ands	r3, r1
 8008190:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68d9      	ldr	r1, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6919      	ldr	r1, [r3, #16]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4b33      	ldr	r3, [pc, #204]	; (8008288 <HAL_LTDC_Init+0x19c>)
 80081bc:	400b      	ands	r3, r1
 80081be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6919      	ldr	r1, [r3, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6959      	ldr	r1, [r3, #20]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4b27      	ldr	r3, [pc, #156]	; (8008288 <HAL_LTDC_Init+0x19c>)
 80081ea:	400b      	ands	r3, r1
 80081ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6959      	ldr	r1, [r3, #20]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0206 	orr.w	r2, r2, #6
 800825a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0201 	orr.w	r2, r2, #1
 800826a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	f000f800 	.word	0xf000f800

0800828c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d023      	beq.n	80082f6 <HAL_LTDC_IRQHandler+0x6a>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01e      	beq.n	80082f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0204 	bic.w	r2, r2, #4
 80082c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2204      	movs	r2, #4
 80082ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082d6:	f043 0201 	orr.w	r2, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2204      	movs	r2, #4
 80082e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f86f 	bl	80083d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d023      	beq.n	8008348 <HAL_LTDC_IRQHandler+0xbc>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01e      	beq.n	8008348 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0202 	bic.w	r2, r2, #2
 8008318:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2202      	movs	r2, #2
 8008320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008328:	f043 0202 	orr.w	r2, r3, #2
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2204      	movs	r2, #4
 8008336:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f846 	bl	80083d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <HAL_LTDC_IRQHandler+0xfe>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d016      	beq.n	800838a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2201      	movs	r2, #1
 8008372:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f82f 	bl	80083e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01b      	beq.n	80083cc <HAL_LTDC_IRQHandler+0x140>
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f003 0308 	and.w	r3, r3, #8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d016      	beq.n	80083cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0208 	bic.w	r2, r2, #8
 80083ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2208      	movs	r2, #8
 80083b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f818 	bl	80083fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008410:	b5b0      	push	{r4, r5, r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_LTDC_ConfigLayer+0x1a>
 8008426:	2302      	movs	r3, #2
 8008428:	e02c      	b.n	8008484 <HAL_LTDC_ConfigLayer+0x74>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2134      	movs	r1, #52	; 0x34
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	4413      	add	r3, r2
 8008446:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	4614      	mov	r4, r2
 800844e:	461d      	mov	r5, r3
 8008450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800845a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f81f 	bl	80084a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2201      	movs	r2, #1
 8008470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bdb0      	pop	{r4, r5, r7, pc}

0800848c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800849a:	b2db      	uxtb	r3, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	; 0x24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	0c1b      	lsrs	r3, r3, #16
 80084c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084c4:	4413      	add	r3, r2
 80084c6:	041b      	lsls	r3, r3, #16
 80084c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	01db      	lsls	r3, r3, #7
 80084d4:	4413      	add	r3, r2
 80084d6:	3384      	adds	r3, #132	; 0x84
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	4611      	mov	r1, r2
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	01d2      	lsls	r2, r2, #7
 80084e4:	440a      	add	r2, r1
 80084e6:	3284      	adds	r2, #132	; 0x84
 80084e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80084ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	0c1b      	lsrs	r3, r3, #16
 80084fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084fe:	4413      	add	r3, r2
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4619      	mov	r1, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	01db      	lsls	r3, r3, #7
 800850c:	440b      	add	r3, r1
 800850e:	3384      	adds	r3, #132	; 0x84
 8008510:	4619      	mov	r1, r3
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4313      	orrs	r3, r2
 8008516:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008526:	4413      	add	r3, r2
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	01db      	lsls	r3, r3, #7
 8008536:	4413      	add	r3, r2
 8008538:	3384      	adds	r3, #132	; 0x84
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	4611      	mov	r1, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	01d2      	lsls	r2, r2, #7
 8008546:	440a      	add	r2, r1
 8008548:	3284      	adds	r2, #132	; 0x84
 800854a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800854e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800855e:	4413      	add	r3, r2
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4619      	mov	r1, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	01db      	lsls	r3, r3, #7
 800856c:	440b      	add	r3, r1
 800856e:	3384      	adds	r3, #132	; 0x84
 8008570:	4619      	mov	r1, r3
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4313      	orrs	r3, r2
 8008576:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	01db      	lsls	r3, r3, #7
 8008582:	4413      	add	r3, r2
 8008584:	3384      	adds	r3, #132	; 0x84
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	6812      	ldr	r2, [r2, #0]
 800858c:	4611      	mov	r1, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	01d2      	lsls	r2, r2, #7
 8008592:	440a      	add	r2, r1
 8008594:	3284      	adds	r2, #132	; 0x84
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	01db      	lsls	r3, r3, #7
 80085a6:	4413      	add	r3, r2
 80085a8:	3384      	adds	r3, #132	; 0x84
 80085aa:	461a      	mov	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	061b      	lsls	r3, r3, #24
 80085cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	01db      	lsls	r3, r3, #7
 80085d8:	4413      	add	r3, r2
 80085da:	3384      	adds	r3, #132	; 0x84
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	01db      	lsls	r3, r3, #7
 80085e8:	4413      	add	r3, r2
 80085ea:	3384      	adds	r3, #132	; 0x84
 80085ec:	461a      	mov	r2, r3
 80085ee:	2300      	movs	r3, #0
 80085f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085f8:	461a      	mov	r2, r3
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	431a      	orrs	r2, r3
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	431a      	orrs	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4619      	mov	r1, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	01db      	lsls	r3, r3, #7
 800860c:	440b      	add	r3, r1
 800860e:	3384      	adds	r3, #132	; 0x84
 8008610:	4619      	mov	r1, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	4313      	orrs	r3, r2
 8008616:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	01db      	lsls	r3, r3, #7
 8008622:	4413      	add	r3, r2
 8008624:	3384      	adds	r3, #132	; 0x84
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	6812      	ldr	r2, [r2, #0]
 800862c:	4611      	mov	r1, r2
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	01d2      	lsls	r2, r2, #7
 8008632:	440a      	add	r2, r1
 8008634:	3284      	adds	r2, #132	; 0x84
 8008636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800863a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	01db      	lsls	r3, r3, #7
 8008646:	4413      	add	r3, r2
 8008648:	3384      	adds	r3, #132	; 0x84
 800864a:	461a      	mov	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	01db      	lsls	r3, r3, #7
 800865c:	4413      	add	r3, r2
 800865e:	3384      	adds	r3, #132	; 0x84
 8008660:	69da      	ldr	r2, [r3, #28]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4619      	mov	r1, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	01db      	lsls	r3, r3, #7
 800866c:	440b      	add	r3, r1
 800866e:	3384      	adds	r3, #132	; 0x84
 8008670:	4619      	mov	r1, r3
 8008672:	4b58      	ldr	r3, [pc, #352]	; (80087d4 <LTDC_SetConfig+0x32c>)
 8008674:	4013      	ands	r3, r2
 8008676:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	69da      	ldr	r2, [r3, #28]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	6809      	ldr	r1, [r1, #0]
 8008684:	4608      	mov	r0, r1
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	01c9      	lsls	r1, r1, #7
 800868a:	4401      	add	r1, r0
 800868c:	3184      	adds	r1, #132	; 0x84
 800868e:	4313      	orrs	r3, r2
 8008690:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	01db      	lsls	r3, r3, #7
 800869c:	4413      	add	r3, r2
 800869e:	3384      	adds	r3, #132	; 0x84
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	01db      	lsls	r3, r3, #7
 80086ac:	4413      	add	r3, r2
 80086ae:	3384      	adds	r3, #132	; 0x84
 80086b0:	461a      	mov	r2, r3
 80086b2:	2300      	movs	r3, #0
 80086b4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	01db      	lsls	r3, r3, #7
 80086c0:	4413      	add	r3, r2
 80086c2:	3384      	adds	r3, #132	; 0x84
 80086c4:	461a      	mov	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80086d4:	2304      	movs	r3, #4
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	e01b      	b.n	8008712 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d102      	bne.n	80086e8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80086e2:	2303      	movs	r3, #3
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	e014      	b.n	8008712 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d00b      	beq.n	8008708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d007      	beq.n	8008708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d003      	beq.n	8008708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008704:	2b07      	cmp	r3, #7
 8008706:	d102      	bne.n	800870e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008708:	2302      	movs	r3, #2
 800870a:	61fb      	str	r3, [r7, #28]
 800870c:	e001      	b.n	8008712 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800870e:	2301      	movs	r3, #1
 8008710:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	01db      	lsls	r3, r3, #7
 800871c:	4413      	add	r3, r2
 800871e:	3384      	adds	r3, #132	; 0x84
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	4611      	mov	r1, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	01d2      	lsls	r2, r2, #7
 800872c:	440a      	add	r2, r1
 800872e:	3284      	adds	r2, #132	; 0x84
 8008730:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008734:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	041a      	lsls	r2, r3, #16
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6859      	ldr	r1, [r3, #4]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	1acb      	subs	r3, r1, r3
 800874c:	69f9      	ldr	r1, [r7, #28]
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	3303      	adds	r3, #3
 8008754:	68f9      	ldr	r1, [r7, #12]
 8008756:	6809      	ldr	r1, [r1, #0]
 8008758:	4608      	mov	r0, r1
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	01c9      	lsls	r1, r1, #7
 800875e:	4401      	add	r1, r0
 8008760:	3184      	adds	r1, #132	; 0x84
 8008762:	4313      	orrs	r3, r2
 8008764:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	01db      	lsls	r3, r3, #7
 8008770:	4413      	add	r3, r2
 8008772:	3384      	adds	r3, #132	; 0x84
 8008774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4619      	mov	r1, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	01db      	lsls	r3, r3, #7
 8008780:	440b      	add	r3, r1
 8008782:	3384      	adds	r3, #132	; 0x84
 8008784:	4619      	mov	r1, r3
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <LTDC_SetConfig+0x330>)
 8008788:	4013      	ands	r3, r2
 800878a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	01db      	lsls	r3, r3, #7
 8008796:	4413      	add	r3, r2
 8008798:	3384      	adds	r3, #132	; 0x84
 800879a:	461a      	mov	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	01db      	lsls	r3, r3, #7
 80087ac:	4413      	add	r3, r2
 80087ae:	3384      	adds	r3, #132	; 0x84
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	6812      	ldr	r2, [r2, #0]
 80087b6:	4611      	mov	r1, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	01d2      	lsls	r2, r2, #7
 80087bc:	440a      	add	r2, r1
 80087be:	3284      	adds	r2, #132	; 0x84
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	6013      	str	r3, [r2, #0]
}
 80087c6:	bf00      	nop
 80087c8:	3724      	adds	r7, #36	; 0x24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	fffff8f8 	.word	0xfffff8f8
 80087d8:	fffff800 	.word	0xfffff800

080087dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a04      	ldr	r2, [pc, #16]	; (80087f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ea:	6013      	str	r3, [r2, #0]
}
 80087ec:	bf00      	nop
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40007000 	.word	0x40007000

080087fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008806:	4b23      	ldr	r3, [pc, #140]	; (8008894 <HAL_PWREx_EnableOverDrive+0x98>)
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	4a22      	ldr	r2, [pc, #136]	; (8008894 <HAL_PWREx_EnableOverDrive+0x98>)
 800880c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008810:	6413      	str	r3, [r2, #64]	; 0x40
 8008812:	4b20      	ldr	r3, [pc, #128]	; (8008894 <HAL_PWREx_EnableOverDrive+0x98>)
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800881e:	4b1e      	ldr	r3, [pc, #120]	; (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008828:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800882a:	f7fc ffdb 	bl	80057e4 <HAL_GetTick>
 800882e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008830:	e009      	b.n	8008846 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008832:	f7fc ffd7 	bl	80057e4 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008840:	d901      	bls.n	8008846 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e022      	b.n	800888c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800884e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008852:	d1ee      	bne.n	8008832 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008854:	4b10      	ldr	r3, [pc, #64]	; (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a0f      	ldr	r2, [pc, #60]	; (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800885a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800885e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008860:	f7fc ffc0 	bl	80057e4 <HAL_GetTick>
 8008864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008866:	e009      	b.n	800887c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008868:	f7fc ffbc 	bl	80057e4 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008876:	d901      	bls.n	800887c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e007      	b.n	800888c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008888:	d1ee      	bne.n	8008868 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40023800 	.word	0x40023800
 8008898:	40007000 	.word	0x40007000

0800889c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e291      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8087 	beq.w	80089ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088c0:	4b96      	ldr	r3, [pc, #600]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 030c 	and.w	r3, r3, #12
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d00c      	beq.n	80088e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088cc:	4b93      	ldr	r3, [pc, #588]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d112      	bne.n	80088fe <HAL_RCC_OscConfig+0x62>
 80088d8:	4b90      	ldr	r3, [pc, #576]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088e4:	d10b      	bne.n	80088fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088e6:	4b8d      	ldr	r3, [pc, #564]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d06c      	beq.n	80089cc <HAL_RCC_OscConfig+0x130>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d168      	bne.n	80089cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e26b      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008906:	d106      	bne.n	8008916 <HAL_RCC_OscConfig+0x7a>
 8008908:	4b84      	ldr	r3, [pc, #528]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a83      	ldr	r2, [pc, #524]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 800890e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e02e      	b.n	8008974 <HAL_RCC_OscConfig+0xd8>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <HAL_RCC_OscConfig+0x9c>
 800891e:	4b7f      	ldr	r3, [pc, #508]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a7e      	ldr	r2, [pc, #504]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	4b7c      	ldr	r3, [pc, #496]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a7b      	ldr	r2, [pc, #492]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	e01d      	b.n	8008974 <HAL_RCC_OscConfig+0xd8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008940:	d10c      	bne.n	800895c <HAL_RCC_OscConfig+0xc0>
 8008942:	4b76      	ldr	r3, [pc, #472]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a75      	ldr	r2, [pc, #468]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	4b73      	ldr	r3, [pc, #460]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a72      	ldr	r2, [pc, #456]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	e00b      	b.n	8008974 <HAL_RCC_OscConfig+0xd8>
 800895c:	4b6f      	ldr	r3, [pc, #444]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a6e      	ldr	r2, [pc, #440]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	4b6c      	ldr	r3, [pc, #432]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a6b      	ldr	r2, [pc, #428]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 800896e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d013      	beq.n	80089a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897c:	f7fc ff32 	bl	80057e4 <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008984:	f7fc ff2e 	bl	80057e4 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b64      	cmp	r3, #100	; 0x64
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e21f      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008996:	4b61      	ldr	r3, [pc, #388]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0f0      	beq.n	8008984 <HAL_RCC_OscConfig+0xe8>
 80089a2:	e014      	b.n	80089ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a4:	f7fc ff1e 	bl	80057e4 <HAL_GetTick>
 80089a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089aa:	e008      	b.n	80089be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ac:	f7fc ff1a 	bl	80057e4 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b64      	cmp	r3, #100	; 0x64
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e20b      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089be:	4b57      	ldr	r3, [pc, #348]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f0      	bne.n	80089ac <HAL_RCC_OscConfig+0x110>
 80089ca:	e000      	b.n	80089ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d069      	beq.n	8008aae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089da:	4b50      	ldr	r3, [pc, #320]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f003 030c 	and.w	r3, r3, #12
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089e6:	4b4d      	ldr	r3, [pc, #308]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 030c 	and.w	r3, r3, #12
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d11c      	bne.n	8008a2c <HAL_RCC_OscConfig+0x190>
 80089f2:	4b4a      	ldr	r3, [pc, #296]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d116      	bne.n	8008a2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089fe:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <HAL_RCC_OscConfig+0x17a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d001      	beq.n	8008a16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e1df      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a16:	4b41      	ldr	r3, [pc, #260]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	493d      	ldr	r1, [pc, #244]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a2a:	e040      	b.n	8008aae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d023      	beq.n	8008a7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a34:	4b39      	ldr	r3, [pc, #228]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a38      	ldr	r2, [pc, #224]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a40:	f7fc fed0 	bl	80057e4 <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a46:	e008      	b.n	8008a5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a48:	f7fc fecc 	bl	80057e4 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e1bd      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a5a:	4b30      	ldr	r3, [pc, #192]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a66:	4b2d      	ldr	r3, [pc, #180]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	4929      	ldr	r1, [pc, #164]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	600b      	str	r3, [r1, #0]
 8008a7a:	e018      	b.n	8008aae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a7c:	4b27      	ldr	r3, [pc, #156]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a26      	ldr	r2, [pc, #152]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008a82:	f023 0301 	bic.w	r3, r3, #1
 8008a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fc feac 	bl	80057e4 <HAL_GetTick>
 8008a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a90:	f7fc fea8 	bl	80057e4 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e199      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aa2:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f0      	bne.n	8008a90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d038      	beq.n	8008b2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d019      	beq.n	8008af6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ac2:	4b16      	ldr	r3, [pc, #88]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac6:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ace:	f7fc fe89 	bl	80057e4 <HAL_GetTick>
 8008ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad6:	f7fc fe85 	bl	80057e4 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e176      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0f0      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x23a>
 8008af4:	e01a      	b.n	8008b2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008af6:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afa:	4a08      	ldr	r2, [pc, #32]	; (8008b1c <HAL_RCC_OscConfig+0x280>)
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b02:	f7fc fe6f 	bl	80057e4 <HAL_GetTick>
 8008b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b08:	e00a      	b.n	8008b20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b0a:	f7fc fe6b 	bl	80057e4 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d903      	bls.n	8008b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e15c      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
 8008b1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b20:	4b91      	ldr	r3, [pc, #580]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1ee      	bne.n	8008b0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80a4 	beq.w	8008c82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b3a:	4b8b      	ldr	r3, [pc, #556]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10d      	bne.n	8008b62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b46:	4b88      	ldr	r3, [pc, #544]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	4a87      	ldr	r2, [pc, #540]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b50:	6413      	str	r3, [r2, #64]	; 0x40
 8008b52:	4b85      	ldr	r3, [pc, #532]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b5a:	60bb      	str	r3, [r7, #8]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b62:	4b82      	ldr	r3, [pc, #520]	; (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d118      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008b6e:	4b7f      	ldr	r3, [pc, #508]	; (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a7e      	ldr	r2, [pc, #504]	; (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b7a:	f7fc fe33 	bl	80057e4 <HAL_GetTick>
 8008b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b80:	e008      	b.n	8008b94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b82:	f7fc fe2f 	bl	80057e4 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b64      	cmp	r3, #100	; 0x64
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e120      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b94:	4b75      	ldr	r3, [pc, #468]	; (8008d6c <HAL_RCC_OscConfig+0x4d0>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0f0      	beq.n	8008b82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d106      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x31a>
 8008ba8:	4b6f      	ldr	r3, [pc, #444]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bac:	4a6e      	ldr	r2, [pc, #440]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8008bb4:	e02d      	b.n	8008c12 <HAL_RCC_OscConfig+0x376>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10c      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x33c>
 8008bbe:	4b6a      	ldr	r3, [pc, #424]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	4a69      	ldr	r2, [pc, #420]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bc4:	f023 0301 	bic.w	r3, r3, #1
 8008bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8008bca:	4b67      	ldr	r3, [pc, #412]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bce:	4a66      	ldr	r2, [pc, #408]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bd0:	f023 0304 	bic.w	r3, r3, #4
 8008bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd6:	e01c      	b.n	8008c12 <HAL_RCC_OscConfig+0x376>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2b05      	cmp	r3, #5
 8008bde:	d10c      	bne.n	8008bfa <HAL_RCC_OscConfig+0x35e>
 8008be0:	4b61      	ldr	r3, [pc, #388]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be4:	4a60      	ldr	r2, [pc, #384]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008be6:	f043 0304 	orr.w	r3, r3, #4
 8008bea:	6713      	str	r3, [r2, #112]	; 0x70
 8008bec:	4b5e      	ldr	r3, [pc, #376]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	4a5d      	ldr	r2, [pc, #372]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bf2:	f043 0301 	orr.w	r3, r3, #1
 8008bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf8:	e00b      	b.n	8008c12 <HAL_RCC_OscConfig+0x376>
 8008bfa:	4b5b      	ldr	r3, [pc, #364]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfe:	4a5a      	ldr	r2, [pc, #360]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c00:	f023 0301 	bic.w	r3, r3, #1
 8008c04:	6713      	str	r3, [r2, #112]	; 0x70
 8008c06:	4b58      	ldr	r3, [pc, #352]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0a:	4a57      	ldr	r2, [pc, #348]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c0c:	f023 0304 	bic.w	r3, r3, #4
 8008c10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d015      	beq.n	8008c46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c1a:	f7fc fde3 	bl	80057e4 <HAL_GetTick>
 8008c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c20:	e00a      	b.n	8008c38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c22:	f7fc fddf 	bl	80057e4 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d901      	bls.n	8008c38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e0ce      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c38:	4b4b      	ldr	r3, [pc, #300]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0ee      	beq.n	8008c22 <HAL_RCC_OscConfig+0x386>
 8008c44:	e014      	b.n	8008c70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c46:	f7fc fdcd 	bl	80057e4 <HAL_GetTick>
 8008c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c4c:	e00a      	b.n	8008c64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c4e:	f7fc fdc9 	bl	80057e4 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e0b8      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c64:	4b40      	ldr	r3, [pc, #256]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1ee      	bne.n	8008c4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d105      	bne.n	8008c82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c76:	4b3c      	ldr	r3, [pc, #240]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	4a3b      	ldr	r2, [pc, #236]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80a4 	beq.w	8008dd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c8c:	4b36      	ldr	r3, [pc, #216]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 030c 	and.w	r3, r3, #12
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d06b      	beq.n	8008d70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d149      	bne.n	8008d34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca0:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a30      	ldr	r2, [pc, #192]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cac:	f7fc fd9a 	bl	80057e4 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb4:	f7fc fd96 	bl	80057e4 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e087      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cc6:	4b28      	ldr	r3, [pc, #160]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	019b      	lsls	r3, r3, #6
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	3b01      	subs	r3, #1
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008cfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d00:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a18      	ldr	r2, [pc, #96]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0c:	f7fc fd6a 	bl	80057e4 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d14:	f7fc fd66 	bl	80057e4 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e057      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d26:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x478>
 8008d32:	e04f      	b.n	8008dd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a0b      	ldr	r2, [pc, #44]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fc fd50 	bl	80057e4 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d48:	f7fc fd4c 	bl	80057e4 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e03d      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5a:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <HAL_RCC_OscConfig+0x4cc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f0      	bne.n	8008d48 <HAL_RCC_OscConfig+0x4ac>
 8008d66:	e035      	b.n	8008dd4 <HAL_RCC_OscConfig+0x538>
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <HAL_RCC_OscConfig+0x544>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d028      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d121      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d11a      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008da0:	4013      	ands	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008da6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d111      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	3b01      	subs	r3, #1
 8008dba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800

08008de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e0d0      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dfc:	4b6a      	ldr	r3, [pc, #424]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d910      	bls.n	8008e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0a:	4b67      	ldr	r3, [pc, #412]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f023 020f 	bic.w	r2, r3, #15
 8008e12:	4965      	ldr	r1, [pc, #404]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1a:	4b63      	ldr	r3, [pc, #396]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d001      	beq.n	8008e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0b8      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d020      	beq.n	8008e7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d005      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e44:	4b59      	ldr	r3, [pc, #356]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	4a58      	ldr	r2, [pc, #352]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d005      	beq.n	8008e68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e5c:	4b53      	ldr	r3, [pc, #332]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	4a52      	ldr	r2, [pc, #328]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e68:	4b50      	ldr	r3, [pc, #320]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	494d      	ldr	r1, [pc, #308]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d040      	beq.n	8008f08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d107      	bne.n	8008e9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e8e:	4b47      	ldr	r3, [pc, #284]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d115      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e07f      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d107      	bne.n	8008eb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ea6:	4b41      	ldr	r3, [pc, #260]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d109      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e073      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eb6:	4b3d      	ldr	r3, [pc, #244]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e06b      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ec6:	4b39      	ldr	r3, [pc, #228]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f023 0203 	bic.w	r2, r3, #3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4936      	ldr	r1, [pc, #216]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed8:	f7fc fc84 	bl	80057e4 <HAL_GetTick>
 8008edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ede:	e00a      	b.n	8008ef6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ee0:	f7fc fc80 	bl	80057e4 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d901      	bls.n	8008ef6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e053      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ef6:	4b2d      	ldr	r3, [pc, #180]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 020c 	and.w	r2, r3, #12
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d1eb      	bne.n	8008ee0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f08:	4b27      	ldr	r3, [pc, #156]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d210      	bcs.n	8008f38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f16:	4b24      	ldr	r3, [pc, #144]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f023 020f 	bic.w	r2, r3, #15
 8008f1e:	4922      	ldr	r1, [pc, #136]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f26:	4b20      	ldr	r3, [pc, #128]	; (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d001      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e032      	b.n	8008f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d008      	beq.n	8008f56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f44:	4b19      	ldr	r3, [pc, #100]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4916      	ldr	r1, [pc, #88]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0308 	and.w	r3, r3, #8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f62:	4b12      	ldr	r3, [pc, #72]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	490e      	ldr	r1, [pc, #56]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f76:	f000 f821 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	; (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	490a      	ldr	r1, [pc, #40]	; (8008fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8008f88:	5ccb      	ldrb	r3, [r1, r3]
 8008f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8e:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8008f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <HAL_RCC_ClockConfig+0x1d4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fc fafc 	bl	8005594 <HAL_InitTick>

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	40023c00 	.word	0x40023c00
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	080d20c4 	.word	0x080d20c4
 8008fb4:	20000040 	.word	0x20000040
 8008fb8:	20000044 	.word	0x20000044

08008fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fbc:	b5b0      	push	{r4, r5, r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6079      	str	r1, [r7, #4]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	60f9      	str	r1, [r7, #12]
 8008fca:	2100      	movs	r1, #0
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008fce:	2100      	movs	r1, #0
 8008fd0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fd2:	4952      	ldr	r1, [pc, #328]	; (800911c <HAL_RCC_GetSysClockFreq+0x160>)
 8008fd4:	6889      	ldr	r1, [r1, #8]
 8008fd6:	f001 010c 	and.w	r1, r1, #12
 8008fda:	2908      	cmp	r1, #8
 8008fdc:	d00d      	beq.n	8008ffa <HAL_RCC_GetSysClockFreq+0x3e>
 8008fde:	2908      	cmp	r1, #8
 8008fe0:	f200 8094 	bhi.w	800910c <HAL_RCC_GetSysClockFreq+0x150>
 8008fe4:	2900      	cmp	r1, #0
 8008fe6:	d002      	beq.n	8008fee <HAL_RCC_GetSysClockFreq+0x32>
 8008fe8:	2904      	cmp	r1, #4
 8008fea:	d003      	beq.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x38>
 8008fec:	e08e      	b.n	800910c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fee:	4b4c      	ldr	r3, [pc, #304]	; (8009120 <HAL_RCC_GetSysClockFreq+0x164>)
 8008ff0:	60bb      	str	r3, [r7, #8]
      break;
 8008ff2:	e08e      	b.n	8009112 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ff4:	4b4b      	ldr	r3, [pc, #300]	; (8009124 <HAL_RCC_GetSysClockFreq+0x168>)
 8008ff6:	60bb      	str	r3, [r7, #8]
      break;
 8008ff8:	e08b      	b.n	8009112 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ffa:	4948      	ldr	r1, [pc, #288]	; (800911c <HAL_RCC_GetSysClockFreq+0x160>)
 8008ffc:	6849      	ldr	r1, [r1, #4]
 8008ffe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009002:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009004:	4945      	ldr	r1, [pc, #276]	; (800911c <HAL_RCC_GetSysClockFreq+0x160>)
 8009006:	6849      	ldr	r1, [r1, #4]
 8009008:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800900c:	2900      	cmp	r1, #0
 800900e:	d024      	beq.n	800905a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009010:	4942      	ldr	r1, [pc, #264]	; (800911c <HAL_RCC_GetSysClockFreq+0x160>)
 8009012:	6849      	ldr	r1, [r1, #4]
 8009014:	0989      	lsrs	r1, r1, #6
 8009016:	4608      	mov	r0, r1
 8009018:	f04f 0100 	mov.w	r1, #0
 800901c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009020:	f04f 0500 	mov.w	r5, #0
 8009024:	ea00 0204 	and.w	r2, r0, r4
 8009028:	ea01 0305 	and.w	r3, r1, r5
 800902c:	493d      	ldr	r1, [pc, #244]	; (8009124 <HAL_RCC_GetSysClockFreq+0x168>)
 800902e:	fb01 f003 	mul.w	r0, r1, r3
 8009032:	2100      	movs	r1, #0
 8009034:	fb01 f102 	mul.w	r1, r1, r2
 8009038:	1844      	adds	r4, r0, r1
 800903a:	493a      	ldr	r1, [pc, #232]	; (8009124 <HAL_RCC_GetSysClockFreq+0x168>)
 800903c:	fba2 0101 	umull	r0, r1, r2, r1
 8009040:	1863      	adds	r3, r4, r1
 8009042:	4619      	mov	r1, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	461a      	mov	r2, r3
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	f7f7 f938 	bl	80002c0 <__aeabi_uldivmod>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4613      	mov	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	e04a      	b.n	80090f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800905a:	4b30      	ldr	r3, [pc, #192]	; (800911c <HAL_RCC_GetSysClockFreq+0x160>)
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	099b      	lsrs	r3, r3, #6
 8009060:	461a      	mov	r2, r3
 8009062:	f04f 0300 	mov.w	r3, #0
 8009066:	f240 10ff 	movw	r0, #511	; 0x1ff
 800906a:	f04f 0100 	mov.w	r1, #0
 800906e:	ea02 0400 	and.w	r4, r2, r0
 8009072:	ea03 0501 	and.w	r5, r3, r1
 8009076:	4620      	mov	r0, r4
 8009078:	4629      	mov	r1, r5
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	014b      	lsls	r3, r1, #5
 8009084:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009088:	0142      	lsls	r2, r0, #5
 800908a:	4610      	mov	r0, r2
 800908c:	4619      	mov	r1, r3
 800908e:	1b00      	subs	r0, r0, r4
 8009090:	eb61 0105 	sbc.w	r1, r1, r5
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	018b      	lsls	r3, r1, #6
 800909e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80090a2:	0182      	lsls	r2, r0, #6
 80090a4:	1a12      	subs	r2, r2, r0
 80090a6:	eb63 0301 	sbc.w	r3, r3, r1
 80090aa:	f04f 0000 	mov.w	r0, #0
 80090ae:	f04f 0100 	mov.w	r1, #0
 80090b2:	00d9      	lsls	r1, r3, #3
 80090b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090b8:	00d0      	lsls	r0, r2, #3
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	1912      	adds	r2, r2, r4
 80090c0:	eb45 0303 	adc.w	r3, r5, r3
 80090c4:	f04f 0000 	mov.w	r0, #0
 80090c8:	f04f 0100 	mov.w	r1, #0
 80090cc:	0299      	lsls	r1, r3, #10
 80090ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80090d2:	0290      	lsls	r0, r2, #10
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4610      	mov	r0, r2
 80090da:	4619      	mov	r1, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	461a      	mov	r2, r3
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	f7f7 f8ec 	bl	80002c0 <__aeabi_uldivmod>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4613      	mov	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80090f0:	4b0a      	ldr	r3, [pc, #40]	; (800911c <HAL_RCC_GetSysClockFreq+0x160>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	0c1b      	lsrs	r3, r3, #16
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	3301      	adds	r3, #1
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	fbb2 f3f3 	udiv	r3, r2, r3
 8009108:	60bb      	str	r3, [r7, #8]
      break;
 800910a:	e002      	b.n	8009112 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800910c:	4b04      	ldr	r3, [pc, #16]	; (8009120 <HAL_RCC_GetSysClockFreq+0x164>)
 800910e:	60bb      	str	r3, [r7, #8]
      break;
 8009110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009112:	68bb      	ldr	r3, [r7, #8]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bdb0      	pop	{r4, r5, r7, pc}
 800911c:	40023800 	.word	0x40023800
 8009120:	00f42400 	.word	0x00f42400
 8009124:	017d7840 	.word	0x017d7840

08009128 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800912c:	4b03      	ldr	r3, [pc, #12]	; (800913c <HAL_RCC_GetHCLKFreq+0x14>)
 800912e:	681b      	ldr	r3, [r3, #0]
}
 8009130:	4618      	mov	r0, r3
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20000040 	.word	0x20000040

08009140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009144:	f7ff fff0 	bl	8009128 <HAL_RCC_GetHCLKFreq>
 8009148:	4602      	mov	r2, r0
 800914a:	4b05      	ldr	r3, [pc, #20]	; (8009160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	0a9b      	lsrs	r3, r3, #10
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	4903      	ldr	r1, [pc, #12]	; (8009164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009156:	5ccb      	ldrb	r3, [r1, r3]
 8009158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800915c:	4618      	mov	r0, r3
 800915e:	bd80      	pop	{r7, pc}
 8009160:	40023800 	.word	0x40023800
 8009164:	080d20d4 	.word	0x080d20d4

08009168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800916c:	f7ff ffdc 	bl	8009128 <HAL_RCC_GetHCLKFreq>
 8009170:	4602      	mov	r2, r0
 8009172:	4b05      	ldr	r3, [pc, #20]	; (8009188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	0b5b      	lsrs	r3, r3, #13
 8009178:	f003 0307 	and.w	r3, r3, #7
 800917c:	4903      	ldr	r1, [pc, #12]	; (800918c <HAL_RCC_GetPCLK2Freq+0x24>)
 800917e:	5ccb      	ldrb	r3, [r1, r3]
 8009180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009184:	4618      	mov	r0, r3
 8009186:	bd80      	pop	{r7, pc}
 8009188:	40023800 	.word	0x40023800
 800918c:	080d20d4 	.word	0x080d20d4

08009190 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	220f      	movs	r2, #15
 800919e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80091a0:	4b12      	ldr	r3, [pc, #72]	; (80091ec <HAL_RCC_GetClockConfig+0x5c>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f003 0203 	and.w	r2, r3, #3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <HAL_RCC_GetClockConfig+0x5c>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <HAL_RCC_GetClockConfig+0x5c>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80091c4:	4b09      	ldr	r3, [pc, #36]	; (80091ec <HAL_RCC_GetClockConfig+0x5c>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	08db      	lsrs	r3, r3, #3
 80091ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <HAL_RCC_GetClockConfig+0x60>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 020f 	and.w	r2, r3, #15
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	601a      	str	r2, [r3, #0]
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40023800 	.word	0x40023800
 80091f0:	40023c00 	.word	0x40023c00

080091f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b00      	cmp	r3, #0
 800921a:	d012      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800921c:	4b69      	ldr	r3, [pc, #420]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	4a68      	ldr	r2, [pc, #416]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009226:	6093      	str	r3, [r2, #8]
 8009228:	4b66      	ldr	r3, [pc, #408]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	4964      	ldr	r1, [pc, #400]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009232:	4313      	orrs	r3, r2
 8009234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800923e:	2301      	movs	r3, #1
 8009240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d017      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800924e:	4b5d      	ldr	r3, [pc, #372]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925c:	4959      	ldr	r1, [pc, #356]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800925e:	4313      	orrs	r3, r2
 8009260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800926c:	d101      	bne.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800926e:	2301      	movs	r3, #1
 8009270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800927a:	2301      	movs	r3, #1
 800927c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d017      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800928a:	4b4e      	ldr	r3, [pc, #312]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800928c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	494a      	ldr	r1, [pc, #296]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800929a:	4313      	orrs	r3, r2
 800929c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092a8:	d101      	bne.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80092aa:	2301      	movs	r3, #1
 80092ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80092b6:	2301      	movs	r3, #1
 80092b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80092c6:	2301      	movs	r3, #1
 80092c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 808b 	beq.w	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092d8:	4b3a      	ldr	r3, [pc, #232]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092dc:	4a39      	ldr	r2, [pc, #228]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092e2:	6413      	str	r3, [r2, #64]	; 0x40
 80092e4:	4b37      	ldr	r3, [pc, #220]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ec:	60bb      	str	r3, [r7, #8]
 80092ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092f0:	4b35      	ldr	r3, [pc, #212]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a34      	ldr	r2, [pc, #208]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092fc:	f7fc fa72 	bl	80057e4 <HAL_GetTick>
 8009300:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009302:	e008      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009304:	f7fc fa6e 	bl	80057e4 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b64      	cmp	r3, #100	; 0x64
 8009310:	d901      	bls.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e357      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009316:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0f0      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009322:	4b28      	ldr	r3, [pc, #160]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800932a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d035      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	429a      	cmp	r2, r3
 800933e:	d02e      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009340:	4b20      	ldr	r3, [pc, #128]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009348:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800934a:	4b1e      	ldr	r3, [pc, #120]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800934c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934e:	4a1d      	ldr	r2, [pc, #116]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009354:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009356:	4b1b      	ldr	r3, [pc, #108]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	4a1a      	ldr	r2, [pc, #104]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800935c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009360:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009362:	4a18      	ldr	r2, [pc, #96]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009368:	4b16      	ldr	r3, [pc, #88]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b01      	cmp	r3, #1
 8009372:	d114      	bne.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fc fa36 	bl	80057e4 <HAL_GetTick>
 8009378:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800937a:	e00a      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800937c:	f7fc fa32 	bl	80057e4 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	f241 3288 	movw	r2, #5000	; 0x1388
 800938a:	4293      	cmp	r3, r2
 800938c:	d901      	bls.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e319      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009392:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0ee      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093aa:	d111      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80093ac:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80093b8:	4b04      	ldr	r3, [pc, #16]	; (80093cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80093ba:	400b      	ands	r3, r1
 80093bc:	4901      	ldr	r1, [pc, #4]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	608b      	str	r3, [r1, #8]
 80093c2:	e00b      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80093c4:	40023800 	.word	0x40023800
 80093c8:	40007000 	.word	0x40007000
 80093cc:	0ffffcff 	.word	0x0ffffcff
 80093d0:	4bb1      	ldr	r3, [pc, #708]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	4ab0      	ldr	r2, [pc, #704]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80093da:	6093      	str	r3, [r2, #8]
 80093dc:	4bae      	ldr	r3, [pc, #696]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093e8:	49ab      	ldr	r1, [pc, #684]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0310 	and.w	r3, r3, #16
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d010      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093fa:	4ba7      	ldr	r3, [pc, #668]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009400:	4aa5      	ldr	r2, [pc, #660]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009406:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800940a:	4ba3      	ldr	r3, [pc, #652]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800940c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	49a0      	ldr	r1, [pc, #640]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009416:	4313      	orrs	r3, r2
 8009418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00a      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009428:	4b9b      	ldr	r3, [pc, #620]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800942a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009436:	4998      	ldr	r1, [pc, #608]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009438:	4313      	orrs	r3, r2
 800943a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800944a:	4b93      	ldr	r3, [pc, #588]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800944c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009458:	498f      	ldr	r1, [pc, #572]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800945a:	4313      	orrs	r3, r2
 800945c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800946c:	4b8a      	ldr	r3, [pc, #552]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800946e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947a:	4987      	ldr	r1, [pc, #540]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800947c:	4313      	orrs	r3, r2
 800947e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800948e:	4b82      	ldr	r3, [pc, #520]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949c:	497e      	ldr	r1, [pc, #504]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00a      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094b0:	4b79      	ldr	r3, [pc, #484]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b6:	f023 0203 	bic.w	r2, r3, #3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	4976      	ldr	r1, [pc, #472]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094d2:	4b71      	ldr	r3, [pc, #452]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d8:	f023 020c 	bic.w	r2, r3, #12
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e0:	496d      	ldr	r1, [pc, #436]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00a      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094f4:	4b68      	ldr	r3, [pc, #416]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009502:	4965      	ldr	r1, [pc, #404]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009504:	4313      	orrs	r3, r2
 8009506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009516:	4b60      	ldr	r3, [pc, #384]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800951c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009524:	495c      	ldr	r1, [pc, #368]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009526:	4313      	orrs	r3, r2
 8009528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00a      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009538:	4b57      	ldr	r3, [pc, #348]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800953a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009546:	4954      	ldr	r1, [pc, #336]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009548:	4313      	orrs	r3, r2
 800954a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800955a:	4b4f      	ldr	r3, [pc, #316]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800955c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009560:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009568:	494b      	ldr	r1, [pc, #300]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800956a:	4313      	orrs	r3, r2
 800956c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800957c:	4b46      	ldr	r3, [pc, #280]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800957e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800958a:	4943      	ldr	r1, [pc, #268]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800959e:	4b3e      	ldr	r3, [pc, #248]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ac:	493a      	ldr	r1, [pc, #232]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095c0:	4b35      	ldr	r3, [pc, #212]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ce:	4932      	ldr	r1, [pc, #200]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d011      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80095e2:	4b2d      	ldr	r3, [pc, #180]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f0:	4929      	ldr	r1, [pc, #164]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009600:	d101      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009602:	2301      	movs	r3, #1
 8009604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009612:	2301      	movs	r3, #1
 8009614:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009622:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009628:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009630:	4919      	ldr	r1, [pc, #100]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009644:	4b14      	ldr	r3, [pc, #80]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800964a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009654:	4910      	ldr	r1, [pc, #64]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009656:	4313      	orrs	r3, r2
 8009658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d006      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 80d9 	beq.w	8009822 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a08      	ldr	r2, [pc, #32]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800967a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800967c:	f7fc f8b2 	bl	80057e4 <HAL_GetTick>
 8009680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009682:	e00b      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009684:	f7fc f8ae 	bl	80057e4 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b64      	cmp	r3, #100	; 0x64
 8009690:	d904      	bls.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e197      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009696:	bf00      	nop
 8009698:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800969c:	4b6c      	ldr	r3, [pc, #432]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1ed      	bne.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d021      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d11d      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80096bc:	4b64      	ldr	r3, [pc, #400]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c2:	0c1b      	lsrs	r3, r3, #16
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096ca:	4b61      	ldr	r3, [pc, #388]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d0:	0e1b      	lsrs	r3, r3, #24
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	019a      	lsls	r2, r3, #6
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	041b      	lsls	r3, r3, #16
 80096e2:	431a      	orrs	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	061b      	lsls	r3, r3, #24
 80096e8:	431a      	orrs	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	071b      	lsls	r3, r3, #28
 80096f0:	4957      	ldr	r1, [pc, #348]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800970c:	d00a      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009716:	2b00      	cmp	r3, #0
 8009718:	d02e      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009722:	d129      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009724:	4b4a      	ldr	r3, [pc, #296]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800972a:	0c1b      	lsrs	r3, r3, #16
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009732:	4b47      	ldr	r3, [pc, #284]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009738:	0f1b      	lsrs	r3, r3, #28
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	019a      	lsls	r2, r3, #6
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	041b      	lsls	r3, r3, #16
 800974a:	431a      	orrs	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	061b      	lsls	r3, r3, #24
 8009752:	431a      	orrs	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	071b      	lsls	r3, r3, #28
 8009758:	493d      	ldr	r1, [pc, #244]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800975a:	4313      	orrs	r3, r2
 800975c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009760:	4b3b      	ldr	r3, [pc, #236]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009766:	f023 021f 	bic.w	r2, r3, #31
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	3b01      	subs	r3, #1
 8009770:	4937      	ldr	r1, [pc, #220]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d01d      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009784:	4b32      	ldr	r3, [pc, #200]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800978a:	0e1b      	lsrs	r3, r3, #24
 800978c:	f003 030f 	and.w	r3, r3, #15
 8009790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009792:	4b2f      	ldr	r3, [pc, #188]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009798:	0f1b      	lsrs	r3, r3, #28
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	019a      	lsls	r2, r3, #6
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	431a      	orrs	r2, r3
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	061b      	lsls	r3, r3, #24
 80097b2:	431a      	orrs	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	071b      	lsls	r3, r3, #28
 80097b8:	4925      	ldr	r1, [pc, #148]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d011      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	019a      	lsls	r2, r3, #6
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	061b      	lsls	r3, r3, #24
 80097e0:	431a      	orrs	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	071b      	lsls	r3, r3, #28
 80097e8:	4919      	ldr	r1, [pc, #100]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097f0:	4b17      	ldr	r3, [pc, #92]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a16      	ldr	r2, [pc, #88]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097fc:	f7fb fff2 	bl	80057e4 <HAL_GetTick>
 8009800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009802:	e008      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009804:	f7fb ffee 	bl	80057e4 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	2b64      	cmp	r3, #100	; 0x64
 8009810:	d901      	bls.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e0d7      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009816:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0f0      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b01      	cmp	r3, #1
 8009826:	f040 80cd 	bne.w	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800982a:	4b09      	ldr	r3, [pc, #36]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a08      	ldr	r2, [pc, #32]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009836:	f7fb ffd5 	bl	80057e4 <HAL_GetTick>
 800983a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800983c:	e00a      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800983e:	f7fb ffd1 	bl	80057e4 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b64      	cmp	r3, #100	; 0x64
 800984a:	d903      	bls.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e0ba      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009850:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009854:	4b5e      	ldr	r3, [pc, #376]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800985c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009860:	d0ed      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800987e:	2b00      	cmp	r3, #0
 8009880:	d02e      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d12a      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800988a:	4b51      	ldr	r3, [pc, #324]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800988c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009890:	0c1b      	lsrs	r3, r3, #16
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009898:	4b4d      	ldr	r3, [pc, #308]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800989a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989e:	0f1b      	lsrs	r3, r3, #28
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	019a      	lsls	r2, r3, #6
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	041b      	lsls	r3, r3, #16
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	061b      	lsls	r3, r3, #24
 80098b8:	431a      	orrs	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	071b      	lsls	r3, r3, #28
 80098be:	4944      	ldr	r1, [pc, #272]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80098c6:	4b42      	ldr	r3, [pc, #264]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d4:	3b01      	subs	r3, #1
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	493d      	ldr	r1, [pc, #244]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d022      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098f4:	d11d      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80098f6:	4b36      	ldr	r3, [pc, #216]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098fc:	0e1b      	lsrs	r3, r3, #24
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009904:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	019a      	lsls	r2, r3, #6
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	041b      	lsls	r3, r3, #16
 800991e:	431a      	orrs	r2, r3
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	061b      	lsls	r3, r3, #24
 8009924:	431a      	orrs	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	071b      	lsls	r3, r3, #28
 800992a:	4929      	ldr	r1, [pc, #164]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800992c:	4313      	orrs	r3, r2
 800992e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0308 	and.w	r3, r3, #8
 800993a:	2b00      	cmp	r3, #0
 800993c:	d028      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800993e:	4b24      	ldr	r3, [pc, #144]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009944:	0e1b      	lsrs	r3, r3, #24
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800994c:	4b20      	ldr	r3, [pc, #128]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009952:	0c1b      	lsrs	r3, r3, #16
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	019a      	lsls	r2, r3, #6
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	041b      	lsls	r3, r3, #16
 8009964:	431a      	orrs	r2, r3
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	061b      	lsls	r3, r3, #24
 800996a:	431a      	orrs	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	071b      	lsls	r3, r3, #28
 8009972:	4917      	ldr	r1, [pc, #92]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009974:	4313      	orrs	r3, r2
 8009976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800997a:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800997c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	4911      	ldr	r1, [pc, #68]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800998a:	4313      	orrs	r3, r2
 800998c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009990:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a0e      	ldr	r2, [pc, #56]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800999a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999c:	f7fb ff22 	bl	80057e4 <HAL_GetTick>
 80099a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099a2:	e008      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80099a4:	f7fb ff1e 	bl	80057e4 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	2b64      	cmp	r3, #100	; 0x64
 80099b0:	d901      	bls.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e007      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099b6:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099c2:	d1ef      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	40023800 	.word	0x40023800

080099d4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e01c      	b.n	8009a20 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	795b      	ldrb	r3, [r3, #5]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d105      	bne.n	80099fc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7fb fae0 	bl	8004fbc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f042 0204 	orr.w	r2, r2, #4
 8009a10:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	791b      	ldrb	r3, [r3, #4]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d101      	bne.n	8009a42 <HAL_RNG_GenerateRandomNumber+0x1a>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	e044      	b.n	8009acc <HAL_RNG_GenerateRandomNumber+0xa4>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	795b      	ldrb	r3, [r3, #5]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d133      	bne.n	8009aba <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2202      	movs	r2, #2
 8009a56:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a58:	f7fb fec4 	bl	80057e4 <HAL_GetTick>
 8009a5c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009a5e:	e018      	b.n	8009a92 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009a60:	f7fb fec0 	bl	80057e4 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d911      	bls.n	8009a92 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d00a      	beq.n	8009a92 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2202      	movs	r2, #2
 8009a86:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e01c      	b.n	8009acc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d1df      	bne.n	8009a60 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	715a      	strb	r2, [r3, #5]
 8009ab8:	e004      	b.n	8009ac4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2204      	movs	r2, #4
 8009abe:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	711a      	strb	r2, [r3, #4]

  return status;
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e081      	b.n	8009bea <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	7f5b      	ldrb	r3, [r3, #29]
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d105      	bne.n	8009afc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7fb fa80 	bl	8004ffc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	22ca      	movs	r2, #202	; 0xca
 8009b08:	625a      	str	r2, [r3, #36]	; 0x24
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2253      	movs	r2, #83	; 0x53
 8009b10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fbc4 	bl	800a2a0 <RTC_EnterInitMode>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d008      	beq.n	8009b30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	22ff      	movs	r2, #255	; 0xff
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2204      	movs	r2, #4
 8009b2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e05c      	b.n	8009bea <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6899      	ldr	r1, [r3, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	4b2e      	ldr	r3, [pc, #184]	; (8009bf4 <HAL_RTC_Init+0x120>)
 8009b3c:	400b      	ands	r3, r1
 8009b3e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6899      	ldr	r1, [r3, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	431a      	orrs	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	68d2      	ldr	r2, [r2, #12]
 8009b66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6919      	ldr	r1, [r3, #16]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	041a      	lsls	r2, r3, #16
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68da      	ldr	r2, [r3, #12]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b8a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10e      	bne.n	8009bb8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fb58 	bl	800a250 <HAL_RTC_WaitForSynchro>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d008      	beq.n	8009bb8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	22ff      	movs	r2, #255	; 0xff
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2204      	movs	r2, #4
 8009bb2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e018      	b.n	8009bea <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0208 	bic.w	r2, r2, #8
 8009bc6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	22ff      	movs	r2, #255	; 0xff
 8009be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009be8:	2300      	movs	r3, #0
  }
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	ff8fffbf 	.word	0xff8fffbf

08009bf8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bf8:	b590      	push	{r4, r7, lr}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	7f1b      	ldrb	r3, [r3, #28]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_RTC_SetTime+0x1c>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e0a8      	b.n	8009d66 <HAL_RTC_SetTime+0x16e>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d126      	bne.n	8009c74 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d102      	bne.n	8009c3a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2200      	movs	r2, #0
 8009c38:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 fb5a 	bl	800a2f8 <RTC_ByteToBcd2>
 8009c44:	4603      	mov	r3, r0
 8009c46:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fb53 	bl	800a2f8 <RTC_ByteToBcd2>
 8009c52:	4603      	mov	r3, r0
 8009c54:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009c56:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	789b      	ldrb	r3, [r3, #2]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 fb4b 	bl	800a2f8 <RTC_ByteToBcd2>
 8009c62:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009c64:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	7b1b      	ldrb	r3, [r3, #12]
 8009c6c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	e018      	b.n	8009ca6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d102      	bne.n	8009c88 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2200      	movs	r2, #0
 8009c86:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009c94:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009c9a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	7b1b      	ldrb	r3, [r3, #12]
 8009ca0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	22ca      	movs	r2, #202	; 0xca
 8009cac:	625a      	str	r2, [r3, #36]	; 0x24
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2253      	movs	r2, #83	; 0x53
 8009cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 faf2 	bl	800a2a0 <RTC_EnterInitMode>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	22ff      	movs	r2, #255	; 0xff
 8009cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2204      	movs	r2, #4
 8009cce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e045      	b.n	8009d66 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	6979      	ldr	r1, [r7, #20]
 8009ce0:	4b23      	ldr	r3, [pc, #140]	; (8009d70 <HAL_RTC_SetTime+0x178>)
 8009ce2:	400b      	ands	r3, r1
 8009ce4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009cf4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6899      	ldr	r1, [r3, #8]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	431a      	orrs	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d1c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f003 0320 	and.w	r3, r3, #32
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d111      	bne.n	8009d50 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fa8f 	bl	800a250 <HAL_RTC_WaitForSynchro>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	22ff      	movs	r2, #255	; 0xff
 8009d3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2204      	movs	r2, #4
 8009d44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e00a      	b.n	8009d66 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	22ff      	movs	r2, #255	; 0xff
 8009d56:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009d64:	2300      	movs	r3, #0
  }
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	371c      	adds	r7, #28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd90      	pop	{r4, r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	007f7f7f 	.word	0x007f7f7f

08009d74 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b22      	ldr	r3, [pc, #136]	; (8009e2c <HAL_RTC_GetTime+0xb8>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	0c1b      	lsrs	r3, r3, #16
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	0c1b      	lsrs	r3, r3, #16
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d11a      	bne.n	8009e22 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 fa9f 	bl	800a334 <RTC_Bcd2ToByte>
 8009df6:	4603      	mov	r3, r0
 8009df8:	461a      	mov	r2, r3
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fa96 	bl	800a334 <RTC_Bcd2ToByte>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	789b      	ldrb	r3, [r3, #2]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fa8d 	bl	800a334 <RTC_Bcd2ToByte>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	007f7f7f 	.word	0x007f7f7f

08009e30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e30:	b590      	push	{r4, r7, lr}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	7f1b      	ldrb	r3, [r3, #28]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d101      	bne.n	8009e4c <HAL_RTC_SetDate+0x1c>
 8009e48:	2302      	movs	r3, #2
 8009e4a:	e092      	b.n	8009f72 <HAL_RTC_SetDate+0x142>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2202      	movs	r2, #2
 8009e56:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10e      	bne.n	8009e7c <HAL_RTC_SetDate+0x4c>
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	f003 0310 	and.w	r3, r3, #16
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d008      	beq.n	8009e7c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	785b      	ldrb	r3, [r3, #1]
 8009e6e:	f023 0310 	bic.w	r3, r3, #16
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	330a      	adds	r3, #10
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d11c      	bne.n	8009ebc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	78db      	ldrb	r3, [r3, #3]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fa36 	bl	800a2f8 <RTC_ByteToBcd2>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 fa2f 	bl	800a2f8 <RTC_ByteToBcd2>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009e9e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	789b      	ldrb	r3, [r3, #2]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fa27 	bl	800a2f8 <RTC_ByteToBcd2>
 8009eaa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009eac:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	617b      	str	r3, [r7, #20]
 8009eba:	e00e      	b.n	8009eda <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	78db      	ldrb	r3, [r3, #3]
 8009ec0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009ec8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009ece:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	22ca      	movs	r2, #202	; 0xca
 8009ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2253      	movs	r2, #83	; 0x53
 8009ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 f9d8 	bl	800a2a0 <RTC_EnterInitMode>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00b      	beq.n	8009f0e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	22ff      	movs	r2, #255	; 0xff
 8009efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2204      	movs	r2, #4
 8009f02:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e031      	b.n	8009f72 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	6979      	ldr	r1, [r7, #20]
 8009f14:	4b19      	ldr	r3, [pc, #100]	; (8009f7c <HAL_RTC_SetDate+0x14c>)
 8009f16:	400b      	ands	r3, r1
 8009f18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f28:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d111      	bne.n	8009f5c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f000 f989 	bl	800a250 <HAL_RTC_WaitForSynchro>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	22ff      	movs	r2, #255	; 0xff
 8009f4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2204      	movs	r2, #4
 8009f50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e00a      	b.n	8009f72 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	22ff      	movs	r2, #255	; 0xff
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2201      	movs	r2, #1
 8009f68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009f70:	2300      	movs	r3, #0
  }
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd90      	pop	{r4, r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	00ffff3f 	.word	0x00ffff3f

08009f80 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	4b21      	ldr	r3, [pc, #132]	; (800a01c <HAL_RTC_GetDate+0x9c>)
 8009f98:	4013      	ands	r3, r2
 8009f9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	0c1b      	lsrs	r3, r3, #16
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	0a1b      	lsrs	r3, r3, #8
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 031f 	and.w	r3, r3, #31
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	0b5b      	lsrs	r3, r3, #13
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d11a      	bne.n	800a010 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	78db      	ldrb	r3, [r3, #3]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 f9a8 	bl	800a334 <RTC_Bcd2ToByte>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 f99f 	bl	800a334 <RTC_Bcd2ToByte>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	789b      	ldrb	r3, [r3, #2]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f996 	bl	800a334 <RTC_Bcd2ToByte>
 800a008:	4603      	mov	r3, r0
 800a00a:	461a      	mov	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	00ffff3f 	.word	0x00ffff3f

0800a020 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a020:	b590      	push	{r4, r7, lr}
 800a022:	b089      	sub	sp, #36	; 0x24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	7f1b      	ldrb	r3, [r3, #28]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <HAL_RTC_SetAlarm+0x24>
 800a040:	2302      	movs	r3, #2
 800a042:	e101      	b.n	800a248 <HAL_RTC_SetAlarm+0x228>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2201      	movs	r2, #1
 800a048:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2202      	movs	r2, #2
 800a04e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d137      	bne.n	800a0c6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2200      	movs	r2, #0
 800a068:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f942 	bl	800a2f8 <RTC_ByteToBcd2>
 800a074:	4603      	mov	r3, r0
 800a076:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 f93b 	bl	800a2f8 <RTC_ByteToBcd2>
 800a082:	4603      	mov	r3, r0
 800a084:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a086:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	789b      	ldrb	r3, [r3, #2]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 f933 	bl	800a2f8 <RTC_ByteToBcd2>
 800a092:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a094:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	7b1b      	ldrb	r3, [r3, #12]
 800a09c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a09e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 f925 	bl	800a2f8 <RTC_ByteToBcd2>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a0b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a0ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	e023      	b.n	800a10e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a0e6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a0ec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	7b1b      	ldrb	r3, [r3, #12]
 800a0f2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a0f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a0fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a104:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a10a:	4313      	orrs	r3, r2
 800a10c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	22ca      	movs	r2, #202	; 0xca
 800a120:	625a      	str	r2, [r3, #36]	; 0x24
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2253      	movs	r2, #83	; 0x53
 800a128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a132:	d13f      	bne.n	800a1b4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a142:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a152:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a154:	f7fb fb46 	bl	80057e4 <HAL_GetTick>
 800a158:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a15a:	e013      	b.n	800a184 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a15c:	f7fb fb42 	bl	80057e4 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a16a:	d90b      	bls.n	800a184 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	22ff      	movs	r2, #255	; 0xff
 800a172:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2203      	movs	r2, #3
 800a178:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e061      	b.n	800a248 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0e4      	beq.n	800a15c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69fa      	ldr	r2, [r7, #28]
 800a198:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b0:	609a      	str	r2, [r3, #8]
 800a1b2:	e03e      	b.n	800a232 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689a      	ldr	r2, [r3, #8]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a1c2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1d2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1d4:	f7fb fb06 	bl	80057e4 <HAL_GetTick>
 800a1d8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a1da:	e013      	b.n	800a204 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a1dc:	f7fb fb02 	bl	80057e4 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1ea:	d90b      	bls.n	800a204 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	22ff      	movs	r2, #255	; 0xff
 800a1f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2203      	movs	r2, #3
 800a1f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e021      	b.n	800a248 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0e4      	beq.n	800a1dc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69fa      	ldr	r2, [r7, #28]
 800a218:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a230:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	22ff      	movs	r2, #255	; 0xff
 800a238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3724      	adds	r7, #36	; 0x24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd90      	pop	{r4, r7, pc}

0800a250 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a26a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a26c:	f7fb faba 	bl	80057e4 <HAL_GetTick>
 800a270:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a272:	e009      	b.n	800a288 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a274:	f7fb fab6 	bl	80057e4 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a282:	d901      	bls.n	800a288 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e007      	b.n	800a298 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	f003 0320 	and.w	r3, r3, #32
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0ee      	beq.n	800a274 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d119      	bne.n	800a2ee <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a2c4:	f7fb fa8e 	bl	80057e4 <HAL_GetTick>
 800a2c8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a2ca:	e009      	b.n	800a2e0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a2cc:	f7fb fa8a 	bl	80057e4 <HAL_GetTick>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2da:	d901      	bls.n	800a2e0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e007      	b.n	800a2f0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0ee      	beq.n	800a2cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a306:	e005      	b.n	800a314 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3301      	adds	r3, #1
 800a30c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	3b0a      	subs	r3, #10
 800a312:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	2b09      	cmp	r3, #9
 800a318:	d8f6      	bhi.n	800a308 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	b2da      	uxtb	r2, r3
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	4313      	orrs	r3, r2
 800a326:	b2db      	uxtb	r3, r3
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	091b      	lsrs	r3, r3, #4
 800a346:	b2db      	uxtb	r3, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	4613      	mov	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	4413      	add	r3, r2
 800a362:	b2db      	uxtb	r3, r3
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	7f1b      	ldrb	r3, [r3, #28]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d101      	bne.n	800a38c <HAL_RTCEx_SetTimeStamp+0x1c>
 800a388:	2302      	movs	r3, #2
 800a38a:	e03e      	b.n	800a40a <HAL_RTCEx_SetTimeStamp+0x9a>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2201      	movs	r2, #1
 800a390:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2202      	movs	r2, #2
 800a396:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	4b1e      	ldr	r3, [pc, #120]	; (800a418 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	22ca      	movs	r2, #202	; 0xca
 800a3b2:	625a      	str	r2, [r3, #36]	; 0x24
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2253      	movs	r2, #83	; 0x53
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0206 	bic.w	r2, r2, #6
 800a3ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	22ff      	movs	r2, #255	; 0xff
 800a3fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2201      	movs	r2, #1
 800a400:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	fffff7f7 	.word	0xfffff7f7

0800a41c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e025      	b.n	800a47c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d106      	bne.n	800a44a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7fb f89b 	bl	8005580 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3304      	adds	r3, #4
 800a45a:	4619      	mov	r1, r3
 800a45c:	4610      	mov	r0, r2
 800a45e:	f001 fb8f 	bl	800bb80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	461a      	mov	r2, r3
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	f001 fbe3 	bl	800bc38 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a496:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d101      	bne.n	800a4a2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e021      	b.n	800a4e6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d002      	beq.n	800a4ae <HAL_SDRAM_SendCommand+0x2a>
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	2b05      	cmp	r3, #5
 800a4ac:	d118      	bne.n	800a4e0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	68b9      	ldr	r1, [r7, #8]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f001 fc24 	bl	800bd0c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d104      	bne.n	800a4d6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2205      	movs	r2, #5
 800a4d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4d4:	e006      	b.n	800a4e4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4de:	e001      	b.n	800a4e4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b02      	cmp	r3, #2
 800a502:	d101      	bne.n	800a508 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a504:	2302      	movs	r3, #2
 800a506:	e016      	b.n	800a536 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	d10f      	bne.n	800a534 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f001 fc16 	bl	800bd54 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	e000      	b.n	800a536 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e09d      	b.n	800a68c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b00      	cmp	r3, #0
 800a556:	d108      	bne.n	800a56a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a560:	d009      	beq.n	800a576 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	61da      	str	r2, [r3, #28]
 800a568:	e005      	b.n	800a576 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	d106      	bne.n	800a596 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7fa fd61 	bl	8005058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2202      	movs	r2, #2
 800a59a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5b6:	d902      	bls.n	800a5be <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	e002      	b.n	800a5c4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a5cc:	d007      	beq.n	800a5de <HAL_SPI_Init+0xa0>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5d6:	d002      	beq.n	800a5de <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a60c:	431a      	orrs	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a616:	431a      	orrs	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a620:	ea42 0103 	orr.w	r1, r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	0c1b      	lsrs	r3, r3, #16
 800a63a:	f003 0204 	and.w	r2, r3, #4
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a642:	f003 0310 	and.w	r3, r3, #16
 800a646:	431a      	orrs	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	431a      	orrs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a65a:	ea42 0103 	orr.w	r1, r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	69da      	ldr	r2, [r3, #28]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a67a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e049      	b.n	800a73a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d106      	bne.n	800a6c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7fa fd2e 	bl	800511c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	f000 fac0 	bl	800ac58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b01      	cmp	r3, #1
 800a756:	d001      	beq.n	800a75c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e054      	b.n	800a806 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68da      	ldr	r2, [r3, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0201 	orr.w	r2, r2, #1
 800a772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a26      	ldr	r2, [pc, #152]	; (800a814 <HAL_TIM_Base_Start_IT+0xd0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d022      	beq.n	800a7c4 <HAL_TIM_Base_Start_IT+0x80>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a786:	d01d      	beq.n	800a7c4 <HAL_TIM_Base_Start_IT+0x80>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a22      	ldr	r2, [pc, #136]	; (800a818 <HAL_TIM_Base_Start_IT+0xd4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d018      	beq.n	800a7c4 <HAL_TIM_Base_Start_IT+0x80>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a21      	ldr	r2, [pc, #132]	; (800a81c <HAL_TIM_Base_Start_IT+0xd8>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d013      	beq.n	800a7c4 <HAL_TIM_Base_Start_IT+0x80>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a1f      	ldr	r2, [pc, #124]	; (800a820 <HAL_TIM_Base_Start_IT+0xdc>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d00e      	beq.n	800a7c4 <HAL_TIM_Base_Start_IT+0x80>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <HAL_TIM_Base_Start_IT+0xe0>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d009      	beq.n	800a7c4 <HAL_TIM_Base_Start_IT+0x80>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a1c      	ldr	r2, [pc, #112]	; (800a828 <HAL_TIM_Base_Start_IT+0xe4>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d004      	beq.n	800a7c4 <HAL_TIM_Base_Start_IT+0x80>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a1b      	ldr	r2, [pc, #108]	; (800a82c <HAL_TIM_Base_Start_IT+0xe8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d115      	bne.n	800a7f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	689a      	ldr	r2, [r3, #8]
 800a7ca:	4b19      	ldr	r3, [pc, #100]	; (800a830 <HAL_TIM_Base_Start_IT+0xec>)
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b06      	cmp	r3, #6
 800a7d4:	d015      	beq.n	800a802 <HAL_TIM_Base_Start_IT+0xbe>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7dc:	d011      	beq.n	800a802 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f042 0201 	orr.w	r2, r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ee:	e008      	b.n	800a802 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e000      	b.n	800a804 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	40010000 	.word	0x40010000
 800a818:	40000400 	.word	0x40000400
 800a81c:	40000800 	.word	0x40000800
 800a820:	40000c00 	.word	0x40000c00
 800a824:	40010400 	.word	0x40010400
 800a828:	40014000 	.word	0x40014000
 800a82c:	40001800 	.word	0x40001800
 800a830:	00010007 	.word	0x00010007

0800a834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	2b02      	cmp	r3, #2
 800a848:	d122      	bne.n	800a890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b02      	cmp	r3, #2
 800a856:	d11b      	bne.n	800a890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f06f 0202 	mvn.w	r2, #2
 800a860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f9d0 	bl	800ac1c <HAL_TIM_IC_CaptureCallback>
 800a87c:	e005      	b.n	800a88a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f9c2 	bl	800ac08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f9d3 	bl	800ac30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	f003 0304 	and.w	r3, r3, #4
 800a89a:	2b04      	cmp	r3, #4
 800a89c:	d122      	bne.n	800a8e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f003 0304 	and.w	r3, r3, #4
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d11b      	bne.n	800a8e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f06f 0204 	mvn.w	r2, #4
 800a8b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f9a6 	bl	800ac1c <HAL_TIM_IC_CaptureCallback>
 800a8d0:	e005      	b.n	800a8de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f998 	bl	800ac08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f9a9 	bl	800ac30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f003 0308 	and.w	r3, r3, #8
 800a8ee:	2b08      	cmp	r3, #8
 800a8f0:	d122      	bne.n	800a938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f003 0308 	and.w	r3, r3, #8
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d11b      	bne.n	800a938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f06f 0208 	mvn.w	r2, #8
 800a908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2204      	movs	r2, #4
 800a90e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f97c 	bl	800ac1c <HAL_TIM_IC_CaptureCallback>
 800a924:	e005      	b.n	800a932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f96e 	bl	800ac08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f97f 	bl	800ac30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f003 0310 	and.w	r3, r3, #16
 800a942:	2b10      	cmp	r3, #16
 800a944:	d122      	bne.n	800a98c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f003 0310 	and.w	r3, r3, #16
 800a950:	2b10      	cmp	r3, #16
 800a952:	d11b      	bne.n	800a98c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f06f 0210 	mvn.w	r2, #16
 800a95c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2208      	movs	r2, #8
 800a962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f952 	bl	800ac1c <HAL_TIM_IC_CaptureCallback>
 800a978:	e005      	b.n	800a986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f944 	bl	800ac08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f955 	bl	800ac30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b01      	cmp	r3, #1
 800a998:	d10e      	bne.n	800a9b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d107      	bne.n	800a9b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f06f 0201 	mvn.w	r2, #1
 800a9b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7f8 f9da 	bl	8002d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c2:	2b80      	cmp	r3, #128	; 0x80
 800a9c4:	d10e      	bne.n	800a9e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d0:	2b80      	cmp	r3, #128	; 0x80
 800a9d2:	d107      	bne.n	800a9e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fb0c 	bl	800affc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f2:	d10e      	bne.n	800aa12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fe:	2b80      	cmp	r3, #128	; 0x80
 800aa00:	d107      	bne.n	800aa12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 faff 	bl	800b010 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1c:	2b40      	cmp	r3, #64	; 0x40
 800aa1e:	d10e      	bne.n	800aa3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2a:	2b40      	cmp	r3, #64	; 0x40
 800aa2c:	d107      	bne.n	800aa3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f903 	bl	800ac44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	f003 0320 	and.w	r3, r3, #32
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	d10e      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	d107      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f06f 0220 	mvn.w	r2, #32
 800aa62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fabf 	bl	800afe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
	...

0800aa74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d101      	bne.n	800aa90 <HAL_TIM_ConfigClockSource+0x1c>
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	e0b4      	b.n	800abfa <HAL_TIM_ConfigClockSource+0x186>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	4b56      	ldr	r3, [pc, #344]	; (800ac04 <HAL_TIM_ConfigClockSource+0x190>)
 800aaac:	4013      	ands	r3, r2
 800aaae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac8:	d03e      	beq.n	800ab48 <HAL_TIM_ConfigClockSource+0xd4>
 800aaca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aace:	f200 8087 	bhi.w	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad6:	f000 8086 	beq.w	800abe6 <HAL_TIM_ConfigClockSource+0x172>
 800aada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aade:	d87f      	bhi.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aae0:	2b70      	cmp	r3, #112	; 0x70
 800aae2:	d01a      	beq.n	800ab1a <HAL_TIM_ConfigClockSource+0xa6>
 800aae4:	2b70      	cmp	r3, #112	; 0x70
 800aae6:	d87b      	bhi.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aae8:	2b60      	cmp	r3, #96	; 0x60
 800aaea:	d050      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x11a>
 800aaec:	2b60      	cmp	r3, #96	; 0x60
 800aaee:	d877      	bhi.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf0:	2b50      	cmp	r3, #80	; 0x50
 800aaf2:	d03c      	beq.n	800ab6e <HAL_TIM_ConfigClockSource+0xfa>
 800aaf4:	2b50      	cmp	r3, #80	; 0x50
 800aaf6:	d873      	bhi.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf8:	2b40      	cmp	r3, #64	; 0x40
 800aafa:	d058      	beq.n	800abae <HAL_TIM_ConfigClockSource+0x13a>
 800aafc:	2b40      	cmp	r3, #64	; 0x40
 800aafe:	d86f      	bhi.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800ab00:	2b30      	cmp	r3, #48	; 0x30
 800ab02:	d064      	beq.n	800abce <HAL_TIM_ConfigClockSource+0x15a>
 800ab04:	2b30      	cmp	r3, #48	; 0x30
 800ab06:	d86b      	bhi.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d060      	beq.n	800abce <HAL_TIM_ConfigClockSource+0x15a>
 800ab0c:	2b20      	cmp	r3, #32
 800ab0e:	d867      	bhi.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d05c      	beq.n	800abce <HAL_TIM_ConfigClockSource+0x15a>
 800ab14:	2b10      	cmp	r3, #16
 800ab16:	d05a      	beq.n	800abce <HAL_TIM_ConfigClockSource+0x15a>
 800ab18:	e062      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	6899      	ldr	r1, [r3, #8]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f000 f9af 	bl	800ae8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	609a      	str	r2, [r3, #8]
      break;
 800ab46:	e04f      	b.n	800abe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6818      	ldr	r0, [r3, #0]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	6899      	ldr	r1, [r3, #8]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	f000 f998 	bl	800ae8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	689a      	ldr	r2, [r3, #8]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab6a:	609a      	str	r2, [r3, #8]
      break;
 800ab6c:	e03c      	b.n	800abe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	6859      	ldr	r1, [r3, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f000 f90c 	bl	800ad98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2150      	movs	r1, #80	; 0x50
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f965 	bl	800ae56 <TIM_ITRx_SetConfig>
      break;
 800ab8c:	e02c      	b.n	800abe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	6859      	ldr	r1, [r3, #4]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	f000 f92b 	bl	800adf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2160      	movs	r1, #96	; 0x60
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 f955 	bl	800ae56 <TIM_ITRx_SetConfig>
      break;
 800abac:	e01c      	b.n	800abe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	6859      	ldr	r1, [r3, #4]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	461a      	mov	r2, r3
 800abbc:	f000 f8ec 	bl	800ad98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2140      	movs	r1, #64	; 0x40
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 f945 	bl	800ae56 <TIM_ITRx_SetConfig>
      break;
 800abcc:	e00c      	b.n	800abe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4619      	mov	r1, r3
 800abd8:	4610      	mov	r0, r2
 800abda:	f000 f93c 	bl	800ae56 <TIM_ITRx_SetConfig>
      break;
 800abde:	e003      	b.n	800abe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	73fb      	strb	r3, [r7, #15]
      break;
 800abe4:	e000      	b.n	800abe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800abe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	fffeff88 	.word	0xfffeff88

0800ac08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a40      	ldr	r2, [pc, #256]	; (800ad6c <TIM_Base_SetConfig+0x114>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d013      	beq.n	800ac98 <TIM_Base_SetConfig+0x40>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac76:	d00f      	beq.n	800ac98 <TIM_Base_SetConfig+0x40>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a3d      	ldr	r2, [pc, #244]	; (800ad70 <TIM_Base_SetConfig+0x118>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00b      	beq.n	800ac98 <TIM_Base_SetConfig+0x40>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a3c      	ldr	r2, [pc, #240]	; (800ad74 <TIM_Base_SetConfig+0x11c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d007      	beq.n	800ac98 <TIM_Base_SetConfig+0x40>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a3b      	ldr	r2, [pc, #236]	; (800ad78 <TIM_Base_SetConfig+0x120>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_Base_SetConfig+0x40>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a3a      	ldr	r2, [pc, #232]	; (800ad7c <TIM_Base_SetConfig+0x124>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d108      	bne.n	800acaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a2f      	ldr	r2, [pc, #188]	; (800ad6c <TIM_Base_SetConfig+0x114>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d02b      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb8:	d027      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a2c      	ldr	r2, [pc, #176]	; (800ad70 <TIM_Base_SetConfig+0x118>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d023      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a2b      	ldr	r2, [pc, #172]	; (800ad74 <TIM_Base_SetConfig+0x11c>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d01f      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a2a      	ldr	r2, [pc, #168]	; (800ad78 <TIM_Base_SetConfig+0x120>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d01b      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a29      	ldr	r2, [pc, #164]	; (800ad7c <TIM_Base_SetConfig+0x124>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d017      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a28      	ldr	r2, [pc, #160]	; (800ad80 <TIM_Base_SetConfig+0x128>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d013      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a27      	ldr	r2, [pc, #156]	; (800ad84 <TIM_Base_SetConfig+0x12c>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d00f      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a26      	ldr	r2, [pc, #152]	; (800ad88 <TIM_Base_SetConfig+0x130>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d00b      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a25      	ldr	r2, [pc, #148]	; (800ad8c <TIM_Base_SetConfig+0x134>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d007      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a24      	ldr	r2, [pc, #144]	; (800ad90 <TIM_Base_SetConfig+0x138>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d003      	beq.n	800ad0a <TIM_Base_SetConfig+0xb2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a23      	ldr	r2, [pc, #140]	; (800ad94 <TIM_Base_SetConfig+0x13c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d108      	bne.n	800ad1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <TIM_Base_SetConfig+0x114>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d003      	beq.n	800ad50 <TIM_Base_SetConfig+0xf8>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a0c      	ldr	r2, [pc, #48]	; (800ad7c <TIM_Base_SetConfig+0x124>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d103      	bne.n	800ad58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	691a      	ldr	r2, [r3, #16]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	615a      	str	r2, [r3, #20]
}
 800ad5e:	bf00      	nop
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	40010000 	.word	0x40010000
 800ad70:	40000400 	.word	0x40000400
 800ad74:	40000800 	.word	0x40000800
 800ad78:	40000c00 	.word	0x40000c00
 800ad7c:	40010400 	.word	0x40010400
 800ad80:	40014000 	.word	0x40014000
 800ad84:	40014400 	.word	0x40014400
 800ad88:	40014800 	.word	0x40014800
 800ad8c:	40001800 	.word	0x40001800
 800ad90:	40001c00 	.word	0x40001c00
 800ad94:	40002000 	.word	0x40002000

0800ad98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	f023 0201 	bic.w	r2, r3, #1
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	011b      	lsls	r3, r3, #4
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	4313      	orrs	r3, r2
 800adcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f023 030a 	bic.w	r3, r3, #10
 800add4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4313      	orrs	r3, r2
 800addc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	621a      	str	r2, [r3, #32]
}
 800adea:	bf00      	nop
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b087      	sub	sp, #28
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	f023 0210 	bic.w	r2, r3, #16
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	031b      	lsls	r3, r3, #12
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	011b      	lsls	r3, r3, #4
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	621a      	str	r2, [r3, #32]
}
 800ae4a:	bf00      	nop
 800ae4c:	371c      	adds	r7, #28
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b085      	sub	sp, #20
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	f043 0307 	orr.w	r3, r3, #7
 800ae78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	609a      	str	r2, [r3, #8]
}
 800ae80:	bf00      	nop
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	021a      	lsls	r2, r3, #8
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	609a      	str	r2, [r3, #8]
}
 800aec0:	bf00      	nop
 800aec2:	371c      	adds	r7, #28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d101      	bne.n	800aee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aee0:	2302      	movs	r3, #2
 800aee2:	e06d      	b.n	800afc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a30      	ldr	r2, [pc, #192]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d004      	beq.n	800af18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a2f      	ldr	r2, [pc, #188]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d108      	bne.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4313      	orrs	r3, r2
 800af28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a20      	ldr	r2, [pc, #128]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d022      	beq.n	800af94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af56:	d01d      	beq.n	800af94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a1d      	ldr	r2, [pc, #116]	; (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d018      	beq.n	800af94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a1c      	ldr	r2, [pc, #112]	; (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d013      	beq.n	800af94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a1a      	ldr	r2, [pc, #104]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d00e      	beq.n	800af94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a15      	ldr	r2, [pc, #84]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d009      	beq.n	800af94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a16      	ldr	r2, [pc, #88]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d004      	beq.n	800af94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a15      	ldr	r2, [pc, #84]	; (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d10c      	bne.n	800afae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	40010000 	.word	0x40010000
 800afd0:	40010400 	.word	0x40010400
 800afd4:	40000400 	.word	0x40000400
 800afd8:	40000800 	.word	0x40000800
 800afdc:	40000c00 	.word	0x40000c00
 800afe0:	40014000 	.word	0x40014000
 800afe4:	40001800 	.word	0x40001800

0800afe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e040      	b.n	800b0b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7fa f8fa 	bl	8005240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2224      	movs	r2, #36	; 0x24
 800b050:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f022 0201 	bic.w	r2, r2, #1
 800b060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f990 	bl	800b388 <UART_SetConfig>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e022      	b.n	800b0b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fbe6 	bl	800b84c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b08e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b09e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0201 	orr.w	r2, r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fc6d 	bl	800b990 <UART_CheckIdleState>
 800b0b6:	4603      	mov	r3, r0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08a      	sub	sp, #40	; 0x28
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	603b      	str	r3, [r7, #0]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0d4:	2b20      	cmp	r3, #32
 800b0d6:	f040 8081 	bne.w	800b1dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <HAL_UART_Transmit+0x26>
 800b0e0:	88fb      	ldrh	r3, [r7, #6]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e079      	b.n	800b1de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d101      	bne.n	800b0f8 <HAL_UART_Transmit+0x38>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e072      	b.n	800b1de <HAL_UART_Transmit+0x11e>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2221      	movs	r2, #33	; 0x21
 800b10c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b10e:	f7fa fb69 	bl	80057e4 <HAL_GetTick>
 800b112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	88fa      	ldrh	r2, [r7, #6]
 800b118:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	88fa      	ldrh	r2, [r7, #6]
 800b120:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b12c:	d108      	bne.n	800b140 <HAL_UART_Transmit+0x80>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d104      	bne.n	800b140 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b136:	2300      	movs	r3, #0
 800b138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	e003      	b.n	800b148 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b144:	2300      	movs	r3, #0
 800b146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b150:	e02c      	b.n	800b1ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2200      	movs	r2, #0
 800b15a:	2180      	movs	r1, #128	; 0x80
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fc4a 	bl	800b9f6 <UART_WaitOnFlagUntilTimeout>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e038      	b.n	800b1de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10b      	bne.n	800b18a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	881b      	ldrh	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	3302      	adds	r3, #2
 800b186:	61bb      	str	r3, [r7, #24]
 800b188:	e007      	b.n	800b19a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	781a      	ldrb	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	3301      	adds	r3, #1
 800b198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1cc      	bne.n	800b152 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2140      	movs	r1, #64	; 0x40
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f000 fc17 	bl	800b9f6 <UART_WaitOnFlagUntilTimeout>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e005      	b.n	800b1de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e000      	b.n	800b1de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b1dc:	2302      	movs	r3, #2
  }
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3720      	adds	r7, #32
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b08a      	sub	sp, #40	; 0x28
 800b1ea:	af02      	add	r7, sp, #8
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	603b      	str	r3, [r7, #0]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1fa:	2b20      	cmp	r3, #32
 800b1fc:	f040 80be 	bne.w	800b37c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <HAL_UART_Receive+0x26>
 800b206:	88fb      	ldrh	r3, [r7, #6]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0b6      	b.n	800b37e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b216:	2b01      	cmp	r3, #1
 800b218:	d101      	bne.n	800b21e <HAL_UART_Receive+0x38>
 800b21a:	2302      	movs	r3, #2
 800b21c:	e0af      	b.n	800b37e <HAL_UART_Receive+0x198>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2222      	movs	r2, #34	; 0x22
 800b232:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b23a:	f7fa fad3 	bl	80057e4 <HAL_GetTick>
 800b23e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	88fa      	ldrh	r2, [r7, #6]
 800b244:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	88fa      	ldrh	r2, [r7, #6]
 800b24c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b258:	d10e      	bne.n	800b278 <HAL_UART_Receive+0x92>
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d105      	bne.n	800b26e <HAL_UART_Receive+0x88>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b268:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b26c:	e02d      	b.n	800b2ca <HAL_UART_Receive+0xe4>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	22ff      	movs	r2, #255	; 0xff
 800b272:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b276:	e028      	b.n	800b2ca <HAL_UART_Receive+0xe4>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10d      	bne.n	800b29c <HAL_UART_Receive+0xb6>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <HAL_UART_Receive+0xac>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	22ff      	movs	r2, #255	; 0xff
 800b28c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b290:	e01b      	b.n	800b2ca <HAL_UART_Receive+0xe4>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	227f      	movs	r2, #127	; 0x7f
 800b296:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b29a:	e016      	b.n	800b2ca <HAL_UART_Receive+0xe4>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2a4:	d10d      	bne.n	800b2c2 <HAL_UART_Receive+0xdc>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d104      	bne.n	800b2b8 <HAL_UART_Receive+0xd2>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	227f      	movs	r2, #127	; 0x7f
 800b2b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b2b6:	e008      	b.n	800b2ca <HAL_UART_Receive+0xe4>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	223f      	movs	r2, #63	; 0x3f
 800b2bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b2c0:	e003      	b.n	800b2ca <HAL_UART_Receive+0xe4>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2da:	d108      	bne.n	800b2ee <HAL_UART_Receive+0x108>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d104      	bne.n	800b2ee <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	61bb      	str	r3, [r7, #24]
 800b2ec:	e003      	b.n	800b2f6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b2fe:	e032      	b.n	800b366 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2200      	movs	r2, #0
 800b308:	2120      	movs	r1, #32
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f000 fb73 	bl	800b9f6 <UART_WaitOnFlagUntilTimeout>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	e031      	b.n	800b37e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10c      	bne.n	800b33a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	b29a      	uxth	r2, r3
 800b328:	8a7b      	ldrh	r3, [r7, #18]
 800b32a:	4013      	ands	r3, r2
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	3302      	adds	r3, #2
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	e00c      	b.n	800b354 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b340:	b2da      	uxtb	r2, r3
 800b342:	8a7b      	ldrh	r3, [r7, #18]
 800b344:	b2db      	uxtb	r3, r3
 800b346:	4013      	ands	r3, r2
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	3301      	adds	r3, #1
 800b352:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	3b01      	subs	r3, #1
 800b35e:	b29a      	uxth	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1c6      	bne.n	800b300 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2220      	movs	r2, #32
 800b376:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	e000      	b.n	800b37e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800b37c:	2302      	movs	r3, #2
  }
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3720      	adds	r7, #32
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	431a      	orrs	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	4ba7      	ldr	r3, [pc, #668]	; (800b650 <UART_SetConfig+0x2c8>)
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	6979      	ldr	r1, [r7, #20]
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a95      	ldr	r2, [pc, #596]	; (800b654 <UART_SetConfig+0x2cc>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d120      	bne.n	800b446 <UART_SetConfig+0xbe>
 800b404:	4b94      	ldr	r3, [pc, #592]	; (800b658 <UART_SetConfig+0x2d0>)
 800b406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b40a:	f003 0303 	and.w	r3, r3, #3
 800b40e:	2b03      	cmp	r3, #3
 800b410:	d816      	bhi.n	800b440 <UART_SetConfig+0xb8>
 800b412:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <UART_SetConfig+0x90>)
 800b414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b418:	0800b429 	.word	0x0800b429
 800b41c:	0800b435 	.word	0x0800b435
 800b420:	0800b42f 	.word	0x0800b42f
 800b424:	0800b43b 	.word	0x0800b43b
 800b428:	2301      	movs	r3, #1
 800b42a:	77fb      	strb	r3, [r7, #31]
 800b42c:	e14f      	b.n	800b6ce <UART_SetConfig+0x346>
 800b42e:	2302      	movs	r3, #2
 800b430:	77fb      	strb	r3, [r7, #31]
 800b432:	e14c      	b.n	800b6ce <UART_SetConfig+0x346>
 800b434:	2304      	movs	r3, #4
 800b436:	77fb      	strb	r3, [r7, #31]
 800b438:	e149      	b.n	800b6ce <UART_SetConfig+0x346>
 800b43a:	2308      	movs	r3, #8
 800b43c:	77fb      	strb	r3, [r7, #31]
 800b43e:	e146      	b.n	800b6ce <UART_SetConfig+0x346>
 800b440:	2310      	movs	r3, #16
 800b442:	77fb      	strb	r3, [r7, #31]
 800b444:	e143      	b.n	800b6ce <UART_SetConfig+0x346>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a84      	ldr	r2, [pc, #528]	; (800b65c <UART_SetConfig+0x2d4>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d132      	bne.n	800b4b6 <UART_SetConfig+0x12e>
 800b450:	4b81      	ldr	r3, [pc, #516]	; (800b658 <UART_SetConfig+0x2d0>)
 800b452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b456:	f003 030c 	and.w	r3, r3, #12
 800b45a:	2b0c      	cmp	r3, #12
 800b45c:	d828      	bhi.n	800b4b0 <UART_SetConfig+0x128>
 800b45e:	a201      	add	r2, pc, #4	; (adr r2, 800b464 <UART_SetConfig+0xdc>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b499 	.word	0x0800b499
 800b468:	0800b4b1 	.word	0x0800b4b1
 800b46c:	0800b4b1 	.word	0x0800b4b1
 800b470:	0800b4b1 	.word	0x0800b4b1
 800b474:	0800b4a5 	.word	0x0800b4a5
 800b478:	0800b4b1 	.word	0x0800b4b1
 800b47c:	0800b4b1 	.word	0x0800b4b1
 800b480:	0800b4b1 	.word	0x0800b4b1
 800b484:	0800b49f 	.word	0x0800b49f
 800b488:	0800b4b1 	.word	0x0800b4b1
 800b48c:	0800b4b1 	.word	0x0800b4b1
 800b490:	0800b4b1 	.word	0x0800b4b1
 800b494:	0800b4ab 	.word	0x0800b4ab
 800b498:	2300      	movs	r3, #0
 800b49a:	77fb      	strb	r3, [r7, #31]
 800b49c:	e117      	b.n	800b6ce <UART_SetConfig+0x346>
 800b49e:	2302      	movs	r3, #2
 800b4a0:	77fb      	strb	r3, [r7, #31]
 800b4a2:	e114      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4a4:	2304      	movs	r3, #4
 800b4a6:	77fb      	strb	r3, [r7, #31]
 800b4a8:	e111      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4aa:	2308      	movs	r3, #8
 800b4ac:	77fb      	strb	r3, [r7, #31]
 800b4ae:	e10e      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4b0:	2310      	movs	r3, #16
 800b4b2:	77fb      	strb	r3, [r7, #31]
 800b4b4:	e10b      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a69      	ldr	r2, [pc, #420]	; (800b660 <UART_SetConfig+0x2d8>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d120      	bne.n	800b502 <UART_SetConfig+0x17a>
 800b4c0:	4b65      	ldr	r3, [pc, #404]	; (800b658 <UART_SetConfig+0x2d0>)
 800b4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b4ca:	2b30      	cmp	r3, #48	; 0x30
 800b4cc:	d013      	beq.n	800b4f6 <UART_SetConfig+0x16e>
 800b4ce:	2b30      	cmp	r3, #48	; 0x30
 800b4d0:	d814      	bhi.n	800b4fc <UART_SetConfig+0x174>
 800b4d2:	2b20      	cmp	r3, #32
 800b4d4:	d009      	beq.n	800b4ea <UART_SetConfig+0x162>
 800b4d6:	2b20      	cmp	r3, #32
 800b4d8:	d810      	bhi.n	800b4fc <UART_SetConfig+0x174>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <UART_SetConfig+0x15c>
 800b4de:	2b10      	cmp	r3, #16
 800b4e0:	d006      	beq.n	800b4f0 <UART_SetConfig+0x168>
 800b4e2:	e00b      	b.n	800b4fc <UART_SetConfig+0x174>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e0f1      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	e0ee      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	77fb      	strb	r3, [r7, #31]
 800b4f4:	e0eb      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4f6:	2308      	movs	r3, #8
 800b4f8:	77fb      	strb	r3, [r7, #31]
 800b4fa:	e0e8      	b.n	800b6ce <UART_SetConfig+0x346>
 800b4fc:	2310      	movs	r3, #16
 800b4fe:	77fb      	strb	r3, [r7, #31]
 800b500:	e0e5      	b.n	800b6ce <UART_SetConfig+0x346>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a57      	ldr	r2, [pc, #348]	; (800b664 <UART_SetConfig+0x2dc>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d120      	bne.n	800b54e <UART_SetConfig+0x1c6>
 800b50c:	4b52      	ldr	r3, [pc, #328]	; (800b658 <UART_SetConfig+0x2d0>)
 800b50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b512:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b516:	2bc0      	cmp	r3, #192	; 0xc0
 800b518:	d013      	beq.n	800b542 <UART_SetConfig+0x1ba>
 800b51a:	2bc0      	cmp	r3, #192	; 0xc0
 800b51c:	d814      	bhi.n	800b548 <UART_SetConfig+0x1c0>
 800b51e:	2b80      	cmp	r3, #128	; 0x80
 800b520:	d009      	beq.n	800b536 <UART_SetConfig+0x1ae>
 800b522:	2b80      	cmp	r3, #128	; 0x80
 800b524:	d810      	bhi.n	800b548 <UART_SetConfig+0x1c0>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <UART_SetConfig+0x1a8>
 800b52a:	2b40      	cmp	r3, #64	; 0x40
 800b52c:	d006      	beq.n	800b53c <UART_SetConfig+0x1b4>
 800b52e:	e00b      	b.n	800b548 <UART_SetConfig+0x1c0>
 800b530:	2300      	movs	r3, #0
 800b532:	77fb      	strb	r3, [r7, #31]
 800b534:	e0cb      	b.n	800b6ce <UART_SetConfig+0x346>
 800b536:	2302      	movs	r3, #2
 800b538:	77fb      	strb	r3, [r7, #31]
 800b53a:	e0c8      	b.n	800b6ce <UART_SetConfig+0x346>
 800b53c:	2304      	movs	r3, #4
 800b53e:	77fb      	strb	r3, [r7, #31]
 800b540:	e0c5      	b.n	800b6ce <UART_SetConfig+0x346>
 800b542:	2308      	movs	r3, #8
 800b544:	77fb      	strb	r3, [r7, #31]
 800b546:	e0c2      	b.n	800b6ce <UART_SetConfig+0x346>
 800b548:	2310      	movs	r3, #16
 800b54a:	77fb      	strb	r3, [r7, #31]
 800b54c:	e0bf      	b.n	800b6ce <UART_SetConfig+0x346>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a45      	ldr	r2, [pc, #276]	; (800b668 <UART_SetConfig+0x2e0>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d125      	bne.n	800b5a4 <UART_SetConfig+0x21c>
 800b558:	4b3f      	ldr	r3, [pc, #252]	; (800b658 <UART_SetConfig+0x2d0>)
 800b55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b566:	d017      	beq.n	800b598 <UART_SetConfig+0x210>
 800b568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b56c:	d817      	bhi.n	800b59e <UART_SetConfig+0x216>
 800b56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b572:	d00b      	beq.n	800b58c <UART_SetConfig+0x204>
 800b574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b578:	d811      	bhi.n	800b59e <UART_SetConfig+0x216>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <UART_SetConfig+0x1fe>
 800b57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b582:	d006      	beq.n	800b592 <UART_SetConfig+0x20a>
 800b584:	e00b      	b.n	800b59e <UART_SetConfig+0x216>
 800b586:	2300      	movs	r3, #0
 800b588:	77fb      	strb	r3, [r7, #31]
 800b58a:	e0a0      	b.n	800b6ce <UART_SetConfig+0x346>
 800b58c:	2302      	movs	r3, #2
 800b58e:	77fb      	strb	r3, [r7, #31]
 800b590:	e09d      	b.n	800b6ce <UART_SetConfig+0x346>
 800b592:	2304      	movs	r3, #4
 800b594:	77fb      	strb	r3, [r7, #31]
 800b596:	e09a      	b.n	800b6ce <UART_SetConfig+0x346>
 800b598:	2308      	movs	r3, #8
 800b59a:	77fb      	strb	r3, [r7, #31]
 800b59c:	e097      	b.n	800b6ce <UART_SetConfig+0x346>
 800b59e:	2310      	movs	r3, #16
 800b5a0:	77fb      	strb	r3, [r7, #31]
 800b5a2:	e094      	b.n	800b6ce <UART_SetConfig+0x346>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a30      	ldr	r2, [pc, #192]	; (800b66c <UART_SetConfig+0x2e4>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d125      	bne.n	800b5fa <UART_SetConfig+0x272>
 800b5ae:	4b2a      	ldr	r3, [pc, #168]	; (800b658 <UART_SetConfig+0x2d0>)
 800b5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5bc:	d017      	beq.n	800b5ee <UART_SetConfig+0x266>
 800b5be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5c2:	d817      	bhi.n	800b5f4 <UART_SetConfig+0x26c>
 800b5c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5c8:	d00b      	beq.n	800b5e2 <UART_SetConfig+0x25a>
 800b5ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5ce:	d811      	bhi.n	800b5f4 <UART_SetConfig+0x26c>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <UART_SetConfig+0x254>
 800b5d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5d8:	d006      	beq.n	800b5e8 <UART_SetConfig+0x260>
 800b5da:	e00b      	b.n	800b5f4 <UART_SetConfig+0x26c>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	77fb      	strb	r3, [r7, #31]
 800b5e0:	e075      	b.n	800b6ce <UART_SetConfig+0x346>
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	77fb      	strb	r3, [r7, #31]
 800b5e6:	e072      	b.n	800b6ce <UART_SetConfig+0x346>
 800b5e8:	2304      	movs	r3, #4
 800b5ea:	77fb      	strb	r3, [r7, #31]
 800b5ec:	e06f      	b.n	800b6ce <UART_SetConfig+0x346>
 800b5ee:	2308      	movs	r3, #8
 800b5f0:	77fb      	strb	r3, [r7, #31]
 800b5f2:	e06c      	b.n	800b6ce <UART_SetConfig+0x346>
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e069      	b.n	800b6ce <UART_SetConfig+0x346>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a1c      	ldr	r2, [pc, #112]	; (800b670 <UART_SetConfig+0x2e8>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d137      	bne.n	800b674 <UART_SetConfig+0x2ec>
 800b604:	4b14      	ldr	r3, [pc, #80]	; (800b658 <UART_SetConfig+0x2d0>)
 800b606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b60a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b60e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b612:	d017      	beq.n	800b644 <UART_SetConfig+0x2bc>
 800b614:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b618:	d817      	bhi.n	800b64a <UART_SetConfig+0x2c2>
 800b61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b61e:	d00b      	beq.n	800b638 <UART_SetConfig+0x2b0>
 800b620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b624:	d811      	bhi.n	800b64a <UART_SetConfig+0x2c2>
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <UART_SetConfig+0x2aa>
 800b62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b62e:	d006      	beq.n	800b63e <UART_SetConfig+0x2b6>
 800b630:	e00b      	b.n	800b64a <UART_SetConfig+0x2c2>
 800b632:	2300      	movs	r3, #0
 800b634:	77fb      	strb	r3, [r7, #31]
 800b636:	e04a      	b.n	800b6ce <UART_SetConfig+0x346>
 800b638:	2302      	movs	r3, #2
 800b63a:	77fb      	strb	r3, [r7, #31]
 800b63c:	e047      	b.n	800b6ce <UART_SetConfig+0x346>
 800b63e:	2304      	movs	r3, #4
 800b640:	77fb      	strb	r3, [r7, #31]
 800b642:	e044      	b.n	800b6ce <UART_SetConfig+0x346>
 800b644:	2308      	movs	r3, #8
 800b646:	77fb      	strb	r3, [r7, #31]
 800b648:	e041      	b.n	800b6ce <UART_SetConfig+0x346>
 800b64a:	2310      	movs	r3, #16
 800b64c:	77fb      	strb	r3, [r7, #31]
 800b64e:	e03e      	b.n	800b6ce <UART_SetConfig+0x346>
 800b650:	efff69f3 	.word	0xefff69f3
 800b654:	40011000 	.word	0x40011000
 800b658:	40023800 	.word	0x40023800
 800b65c:	40004400 	.word	0x40004400
 800b660:	40004800 	.word	0x40004800
 800b664:	40004c00 	.word	0x40004c00
 800b668:	40005000 	.word	0x40005000
 800b66c:	40011400 	.word	0x40011400
 800b670:	40007800 	.word	0x40007800
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a71      	ldr	r2, [pc, #452]	; (800b840 <UART_SetConfig+0x4b8>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d125      	bne.n	800b6ca <UART_SetConfig+0x342>
 800b67e:	4b71      	ldr	r3, [pc, #452]	; (800b844 <UART_SetConfig+0x4bc>)
 800b680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b688:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b68c:	d017      	beq.n	800b6be <UART_SetConfig+0x336>
 800b68e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b692:	d817      	bhi.n	800b6c4 <UART_SetConfig+0x33c>
 800b694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b698:	d00b      	beq.n	800b6b2 <UART_SetConfig+0x32a>
 800b69a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b69e:	d811      	bhi.n	800b6c4 <UART_SetConfig+0x33c>
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <UART_SetConfig+0x324>
 800b6a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6a8:	d006      	beq.n	800b6b8 <UART_SetConfig+0x330>
 800b6aa:	e00b      	b.n	800b6c4 <UART_SetConfig+0x33c>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	77fb      	strb	r3, [r7, #31]
 800b6b0:	e00d      	b.n	800b6ce <UART_SetConfig+0x346>
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	77fb      	strb	r3, [r7, #31]
 800b6b6:	e00a      	b.n	800b6ce <UART_SetConfig+0x346>
 800b6b8:	2304      	movs	r3, #4
 800b6ba:	77fb      	strb	r3, [r7, #31]
 800b6bc:	e007      	b.n	800b6ce <UART_SetConfig+0x346>
 800b6be:	2308      	movs	r3, #8
 800b6c0:	77fb      	strb	r3, [r7, #31]
 800b6c2:	e004      	b.n	800b6ce <UART_SetConfig+0x346>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	77fb      	strb	r3, [r7, #31]
 800b6c8:	e001      	b.n	800b6ce <UART_SetConfig+0x346>
 800b6ca:	2310      	movs	r3, #16
 800b6cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	69db      	ldr	r3, [r3, #28]
 800b6d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6d6:	d15a      	bne.n	800b78e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b6d8:	7ffb      	ldrb	r3, [r7, #31]
 800b6da:	2b08      	cmp	r3, #8
 800b6dc:	d827      	bhi.n	800b72e <UART_SetConfig+0x3a6>
 800b6de:	a201      	add	r2, pc, #4	; (adr r2, 800b6e4 <UART_SetConfig+0x35c>)
 800b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e4:	0800b709 	.word	0x0800b709
 800b6e8:	0800b711 	.word	0x0800b711
 800b6ec:	0800b719 	.word	0x0800b719
 800b6f0:	0800b72f 	.word	0x0800b72f
 800b6f4:	0800b71f 	.word	0x0800b71f
 800b6f8:	0800b72f 	.word	0x0800b72f
 800b6fc:	0800b72f 	.word	0x0800b72f
 800b700:	0800b72f 	.word	0x0800b72f
 800b704:	0800b727 	.word	0x0800b727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b708:	f7fd fd1a 	bl	8009140 <HAL_RCC_GetPCLK1Freq>
 800b70c:	61b8      	str	r0, [r7, #24]
        break;
 800b70e:	e013      	b.n	800b738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b710:	f7fd fd2a 	bl	8009168 <HAL_RCC_GetPCLK2Freq>
 800b714:	61b8      	str	r0, [r7, #24]
        break;
 800b716:	e00f      	b.n	800b738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b718:	4b4b      	ldr	r3, [pc, #300]	; (800b848 <UART_SetConfig+0x4c0>)
 800b71a:	61bb      	str	r3, [r7, #24]
        break;
 800b71c:	e00c      	b.n	800b738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b71e:	f7fd fc4d 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 800b722:	61b8      	str	r0, [r7, #24]
        break;
 800b724:	e008      	b.n	800b738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b72a:	61bb      	str	r3, [r7, #24]
        break;
 800b72c:	e004      	b.n	800b738 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b72e:	2300      	movs	r3, #0
 800b730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	77bb      	strb	r3, [r7, #30]
        break;
 800b736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d074      	beq.n	800b828 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	005a      	lsls	r2, r3, #1
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	441a      	add	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b0f      	cmp	r3, #15
 800b758:	d916      	bls.n	800b788 <UART_SetConfig+0x400>
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b760:	d212      	bcs.n	800b788 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	b29b      	uxth	r3, r3
 800b766:	f023 030f 	bic.w	r3, r3, #15
 800b76a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	085b      	lsrs	r3, r3, #1
 800b770:	b29b      	uxth	r3, r3
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	b29a      	uxth	r2, r3
 800b778:	89fb      	ldrh	r3, [r7, #14]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	89fa      	ldrh	r2, [r7, #14]
 800b784:	60da      	str	r2, [r3, #12]
 800b786:	e04f      	b.n	800b828 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	77bb      	strb	r3, [r7, #30]
 800b78c:	e04c      	b.n	800b828 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b78e:	7ffb      	ldrb	r3, [r7, #31]
 800b790:	2b08      	cmp	r3, #8
 800b792:	d828      	bhi.n	800b7e6 <UART_SetConfig+0x45e>
 800b794:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <UART_SetConfig+0x414>)
 800b796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79a:	bf00      	nop
 800b79c:	0800b7c1 	.word	0x0800b7c1
 800b7a0:	0800b7c9 	.word	0x0800b7c9
 800b7a4:	0800b7d1 	.word	0x0800b7d1
 800b7a8:	0800b7e7 	.word	0x0800b7e7
 800b7ac:	0800b7d7 	.word	0x0800b7d7
 800b7b0:	0800b7e7 	.word	0x0800b7e7
 800b7b4:	0800b7e7 	.word	0x0800b7e7
 800b7b8:	0800b7e7 	.word	0x0800b7e7
 800b7bc:	0800b7df 	.word	0x0800b7df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7c0:	f7fd fcbe 	bl	8009140 <HAL_RCC_GetPCLK1Freq>
 800b7c4:	61b8      	str	r0, [r7, #24]
        break;
 800b7c6:	e013      	b.n	800b7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7c8:	f7fd fcce 	bl	8009168 <HAL_RCC_GetPCLK2Freq>
 800b7cc:	61b8      	str	r0, [r7, #24]
        break;
 800b7ce:	e00f      	b.n	800b7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7d0:	4b1d      	ldr	r3, [pc, #116]	; (800b848 <UART_SetConfig+0x4c0>)
 800b7d2:	61bb      	str	r3, [r7, #24]
        break;
 800b7d4:	e00c      	b.n	800b7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7d6:	f7fd fbf1 	bl	8008fbc <HAL_RCC_GetSysClockFreq>
 800b7da:	61b8      	str	r0, [r7, #24]
        break;
 800b7dc:	e008      	b.n	800b7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7e2:	61bb      	str	r3, [r7, #24]
        break;
 800b7e4:	e004      	b.n	800b7f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	77bb      	strb	r3, [r7, #30]
        break;
 800b7ee:	bf00      	nop
    }

    if (pclk != 0U)
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d018      	beq.n	800b828 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	085a      	lsrs	r2, r3, #1
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	441a      	add	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	fbb2 f3f3 	udiv	r3, r2, r3
 800b808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	2b0f      	cmp	r3, #15
 800b80e:	d909      	bls.n	800b824 <UART_SetConfig+0x49c>
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b816:	d205      	bcs.n	800b824 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	60da      	str	r2, [r3, #12]
 800b822:	e001      	b.n	800b828 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b834:	7fbb      	ldrb	r3, [r7, #30]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3720      	adds	r7, #32
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	40007c00 	.word	0x40007c00
 800b844:	40023800 	.word	0x40023800
 800b848:	00f42400 	.word	0x00f42400

0800b84c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00a      	beq.n	800b876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	430a      	orrs	r2, r1
 800b874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	f003 0302 	and.w	r3, r3, #2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00a      	beq.n	800b898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	430a      	orrs	r2, r1
 800b896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00a      	beq.n	800b8ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8be:	f003 0308 	and.w	r3, r3, #8
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00a      	beq.n	800b8dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e0:	f003 0310 	and.w	r3, r3, #16
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00a      	beq.n	800b8fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	f003 0320 	and.w	r3, r3, #32
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	430a      	orrs	r2, r1
 800b91e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d01a      	beq.n	800b962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b94a:	d10a      	bne.n	800b962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	430a      	orrs	r2, r1
 800b960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	605a      	str	r2, [r3, #4]
  }
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af02      	add	r7, sp, #8
 800b996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9a0:	f7f9 ff20 	bl	80057e4 <HAL_GetTick>
 800b9a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 0308 	and.w	r3, r3, #8
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d10e      	bne.n	800b9d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f817 	bl	800b9f6 <UART_WaitOnFlagUntilTimeout>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e00d      	b.n	800b9ee <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2220      	movs	r2, #32
 800b9dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b09c      	sub	sp, #112	; 0x70
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	603b      	str	r3, [r7, #0]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba06:	e0a5      	b.n	800bb54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba0e:	f000 80a1 	beq.w	800bb54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba12:	f7f9 fee7 	bl	80057e4 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d302      	bcc.n	800ba28 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d13e      	bne.n	800baa6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba30:	e853 3f00 	ldrex	r3, [r3]
 800ba34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba3c:	667b      	str	r3, [r7, #100]	; 0x64
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ba54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e6      	bne.n	800ba28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3308      	adds	r3, #8
 800ba60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba64:	e853 3f00 	ldrex	r3, [r3]
 800ba68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6c:	f023 0301 	bic.w	r3, r3, #1
 800ba70:	663b      	str	r3, [r7, #96]	; 0x60
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3308      	adds	r3, #8
 800ba78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ba7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba82:	e841 2300 	strex	r3, r2, [r1]
 800ba86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ba88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1e5      	bne.n	800ba5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2220      	movs	r2, #32
 800ba92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2220      	movs	r2, #32
 800ba98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e067      	b.n	800bb76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0304 	and.w	r3, r3, #4
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d04f      	beq.n	800bb54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	69db      	ldr	r3, [r3, #28]
 800baba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800babe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bac2:	d147      	bne.n	800bb54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bacc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	e853 3f00 	ldrex	r3, [r3]
 800bada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	461a      	mov	r2, r3
 800baea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baec:	637b      	str	r3, [r7, #52]	; 0x34
 800baee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800baf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baf4:	e841 2300 	strex	r3, r2, [r1]
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e6      	bne.n	800bace <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3308      	adds	r3, #8
 800bb06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	e853 3f00 	ldrex	r3, [r3]
 800bb0e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f023 0301 	bic.w	r3, r3, #1
 800bb16:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb20:	623a      	str	r2, [r7, #32]
 800bb22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb24:	69f9      	ldr	r1, [r7, #28]
 800bb26:	6a3a      	ldr	r2, [r7, #32]
 800bb28:	e841 2300 	strex	r3, r2, [r1]
 800bb2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1e5      	bne.n	800bb00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2220      	movs	r2, #32
 800bb38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2220      	movs	r2, #32
 800bb44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e010      	b.n	800bb76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	69da      	ldr	r2, [r3, #28]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	bf0c      	ite	eq
 800bb64:	2301      	moveq	r3, #1
 800bb66:	2300      	movne	r3, #0
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	f43f af4a 	beq.w	800ba08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3770      	adds	r7, #112	; 0x70
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d121      	bne.n	800bbd6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	4b27      	ldr	r3, [pc, #156]	; (800bc34 <FMC_SDRAM_Init+0xb4>)
 800bb98:	4013      	ands	r3, r2
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	6851      	ldr	r1, [r2, #4]
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	6892      	ldr	r2, [r2, #8]
 800bba2:	4311      	orrs	r1, r2
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	68d2      	ldr	r2, [r2, #12]
 800bba8:	4311      	orrs	r1, r2
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	6912      	ldr	r2, [r2, #16]
 800bbae:	4311      	orrs	r1, r2
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	6952      	ldr	r2, [r2, #20]
 800bbb4:	4311      	orrs	r1, r2
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	6992      	ldr	r2, [r2, #24]
 800bbba:	4311      	orrs	r1, r2
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	69d2      	ldr	r2, [r2, #28]
 800bbc0:	4311      	orrs	r1, r2
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	6a12      	ldr	r2, [r2, #32]
 800bbc6:	4311      	orrs	r1, r2
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bbcc:	430a      	orrs	r2, r1
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	e026      	b.n	800bc24 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	69d9      	ldr	r1, [r3, #28]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	4319      	orrs	r1, r3
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbec:	430b      	orrs	r3, r1
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <FMC_SDRAM_Init+0xb4>)
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	6851      	ldr	r1, [r2, #4]
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	6892      	ldr	r2, [r2, #8]
 800bc04:	4311      	orrs	r1, r2
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	68d2      	ldr	r2, [r2, #12]
 800bc0a:	4311      	orrs	r1, r2
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	6912      	ldr	r2, [r2, #16]
 800bc10:	4311      	orrs	r1, r2
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	6952      	ldr	r2, [r2, #20]
 800bc16:	4311      	orrs	r1, r2
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	6992      	ldr	r2, [r2, #24]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	ffff8000 	.word	0xffff8000

0800bc38 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d128      	bne.n	800bc9c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	1e59      	subs	r1, r3, #1
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	011b      	lsls	r3, r3, #4
 800bc60:	4319      	orrs	r1, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	021b      	lsls	r3, r3, #8
 800bc6a:	4319      	orrs	r1, r3
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	031b      	lsls	r3, r3, #12
 800bc74:	4319      	orrs	r1, r3
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	041b      	lsls	r3, r3, #16
 800bc7e:	4319      	orrs	r1, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	3b01      	subs	r3, #1
 800bc86:	051b      	lsls	r3, r3, #20
 800bc88:	4319      	orrs	r1, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	061b      	lsls	r3, r3, #24
 800bc92:	430b      	orrs	r3, r1
 800bc94:	431a      	orrs	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	609a      	str	r2, [r3, #8]
 800bc9a:	e02d      	b.n	800bcf8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	4b19      	ldr	r3, [pc, #100]	; (800bd08 <FMC_SDRAM_Timing_Init+0xd0>)
 800bca2:	4013      	ands	r3, r2
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	68d2      	ldr	r2, [r2, #12]
 800bca8:	3a01      	subs	r2, #1
 800bcaa:	0311      	lsls	r1, r2, #12
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	6952      	ldr	r2, [r2, #20]
 800bcb0:	3a01      	subs	r2, #1
 800bcb2:	0512      	lsls	r2, r2, #20
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	1e59      	subs	r1, r3, #1
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	011b      	lsls	r3, r3, #4
 800bcd2:	4319      	orrs	r1, r3
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	021b      	lsls	r3, r3, #8
 800bcdc:	4319      	orrs	r1, r3
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	3b01      	subs	r3, #1
 800bce4:	041b      	lsls	r3, r3, #16
 800bce6:	4319      	orrs	r1, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	061b      	lsls	r3, r3, #24
 800bcf0:	430b      	orrs	r3, r1
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	ff0f0fff 	.word	0xff0f0fff

0800bd0c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <FMC_SDRAM_SendCommand+0x44>)
 800bd1e:	4013      	ands	r3, r2
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	6811      	ldr	r1, [r2, #0]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	6852      	ldr	r2, [r2, #4]
 800bd28:	4311      	orrs	r1, r2
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	6892      	ldr	r2, [r2, #8]
 800bd2e:	3a01      	subs	r2, #1
 800bd30:	0152      	lsls	r2, r2, #5
 800bd32:	4311      	orrs	r1, r2
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	68d2      	ldr	r2, [r2, #12]
 800bd38:	0252      	lsls	r2, r2, #9
 800bd3a:	430a      	orrs	r2, r1
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	ffc00000 	.word	0xffc00000

0800bd54 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	695a      	ldr	r2, [r3, #20]
 800bd62:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800bd64:	4013      	ands	r3, r2
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	0052      	lsls	r2, r2, #1
 800bd6a:	431a      	orrs	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	ffffc001 	.word	0xffffc001

0800bd84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bd92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd96:	2b84      	cmp	r3, #132	; 0x84
 800bd98:	d005      	beq.n	800bda6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bd9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	4413      	add	r3, r2
 800bda2:	3303      	adds	r3, #3
 800bda4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bda6:	68fb      	ldr	r3, [r7, #12]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdba:	f3ef 8305 	mrs	r3, IPSR
 800bdbe:	607b      	str	r3, [r7, #4]
  return(result);
 800bdc0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bf14      	ite	ne
 800bdc6:	2301      	movne	r3, #1
 800bdc8:	2300      	moveq	r3, #0
 800bdca:	b2db      	uxtb	r3, r3
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bddc:	f001 fb66 	bl	800d4ac <vTaskStartScheduler>
  
  return osOK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bde6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde8:	b089      	sub	sp, #36	; 0x24
 800bdea:	af04      	add	r7, sp, #16
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d020      	beq.n	800be3a <osThreadCreate+0x54>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d01c      	beq.n	800be3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685c      	ldr	r4, [r3, #4]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681d      	ldr	r5, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691e      	ldr	r6, [r3, #16]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff ffb6 	bl	800bd84 <makeFreeRtosPriority>
 800be18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be22:	9202      	str	r2, [sp, #8]
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	9100      	str	r1, [sp, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	4632      	mov	r2, r6
 800be2c:	4629      	mov	r1, r5
 800be2e:	4620      	mov	r0, r4
 800be30:	f001 f8c2 	bl	800cfb8 <xTaskCreateStatic>
 800be34:	4603      	mov	r3, r0
 800be36:	60fb      	str	r3, [r7, #12]
 800be38:	e01c      	b.n	800be74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685c      	ldr	r4, [r3, #4]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be46:	b29e      	uxth	r6, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff ff98 	bl	800bd84 <makeFreeRtosPriority>
 800be54:	4602      	mov	r2, r0
 800be56:	f107 030c 	add.w	r3, r7, #12
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	9200      	str	r2, [sp, #0]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	4632      	mov	r2, r6
 800be62:	4629      	mov	r1, r5
 800be64:	4620      	mov	r0, r4
 800be66:	f001 f90a 	bl	800d07e <xTaskCreate>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d001      	beq.n	800be74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	e000      	b.n	800be76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be74:	68fb      	ldr	r3, [r7, #12]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <osDelay+0x16>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	e000      	b.n	800be96 <osDelay+0x18>
 800be94:	2301      	movs	r3, #1
 800be96:	4618      	mov	r0, r3
 800be98:	f001 fad2 	bl	800d440 <vTaskDelay>
  
  return osOK;
 800be9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
	...

0800bea8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af02      	add	r7, sp, #8
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	460b      	mov	r3, r1
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d013      	beq.n	800bee6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800bebe:	7afb      	ldrb	r3, [r7, #11]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d101      	bne.n	800bec8 <osTimerCreate+0x20>
 800bec4:	2101      	movs	r1, #1
 800bec6:	e000      	b.n	800beca <osTimerCreate+0x22>
 800bec8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800bed2:	9201      	str	r2, [sp, #4]
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	460a      	mov	r2, r1
 800beda:	2101      	movs	r1, #1
 800bedc:	480b      	ldr	r0, [pc, #44]	; (800bf0c <osTimerCreate+0x64>)
 800bede:	f002 f9fa 	bl	800e2d6 <xTimerCreateStatic>
 800bee2:	4603      	mov	r3, r0
 800bee4:	e00e      	b.n	800bf04 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800bee6:	7afb      	ldrb	r3, [r7, #11]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <osTimerCreate+0x48>
 800beec:	2201      	movs	r2, #1
 800beee:	e000      	b.n	800bef2 <osTimerCreate+0x4a>
 800bef0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2101      	movs	r1, #1
 800befc:	4803      	ldr	r0, [pc, #12]	; (800bf0c <osTimerCreate+0x64>)
 800befe:	f002 f9c9 	bl	800e294 <xTimerCreate>
 800bf02:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	0800fd7c 	.word	0x0800fd7c

0800bf10 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <osTimerStart+0x20>
    ticks = 1;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800bf30:	f7ff ff40 	bl	800bdb4 <inHandlerMode>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d01a      	beq.n	800bf70 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800bf3a:	f107 030c 	add.w	r3, r7, #12
 800bf3e:	2200      	movs	r2, #0
 800bf40:	9200      	str	r2, [sp, #0]
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	2109      	movs	r1, #9
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f002 fa44 	bl	800e3d4 <xTimerGenericCommand>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d002      	beq.n	800bf58 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800bf52:	23ff      	movs	r3, #255	; 0xff
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	e018      	b.n	800bf8a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d015      	beq.n	800bf8a <osTimerStart+0x7a>
 800bf5e:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <osTimerStart+0x84>)
 800bf60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	e00c      	b.n	800bf8a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800bf70:	2300      	movs	r3, #0
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	2300      	movs	r3, #0
 800bf76:	693a      	ldr	r2, [r7, #16]
 800bf78:	2104      	movs	r1, #4
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f002 fa2a 	bl	800e3d4 <xTimerGenericCommand>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d001      	beq.n	800bf8a <osTimerStart+0x7a>
      result = osErrorOS;
 800bf86:	23ff      	movs	r3, #255	; 0xff
 800bf88:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800bf8a:	697b      	ldr	r3, [r7, #20]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	e000ed04 	.word	0xe000ed04

0800bf98 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af02      	add	r7, sp, #8
 800bf9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800bfa8:	f7ff ff04 	bl	800bdb4 <inHandlerMode>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d019      	beq.n	800bfe6 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800bfb2:	f107 0308 	add.w	r3, r7, #8
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	9200      	str	r2, [sp, #0]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2108      	movs	r1, #8
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f002 fa08 	bl	800e3d4 <xTimerGenericCommand>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d001      	beq.n	800bfce <osTimerStop+0x36>
      return osErrorOS;
 800bfca:	23ff      	movs	r3, #255	; 0xff
 800bfcc:	e019      	b.n	800c002 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d015      	beq.n	800c000 <osTimerStop+0x68>
 800bfd4:	4b0d      	ldr	r3, [pc, #52]	; (800c00c <osTimerStop+0x74>)
 800bfd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	e00c      	b.n	800c000 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	2300      	movs	r3, #0
 800bfec:	2200      	movs	r2, #0
 800bfee:	2103      	movs	r1, #3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f002 f9ef 	bl	800e3d4 <xTimerGenericCommand>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d001      	beq.n	800c000 <osTimerStop+0x68>
      result = osErrorOS;
 800bffc:	23ff      	movs	r3, #255	; 0xff
 800bffe:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800c000:	68fb      	ldr	r3, [r7, #12]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	e000ed04 	.word	0xe000ed04

0800c010 <osTimerDelete>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerDelete (osTimerId timer_id)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af02      	add	r7, sp, #8
 800c016:	6078      	str	r0, [r7, #4]
osStatus result = osOK;
 800c018:	2300      	movs	r3, #0
 800c01a:	60fb      	str	r3, [r7, #12]

#if (configUSE_TIMERS == 1)

   if (inHandlerMode()) {
 800c01c:	f7ff feca 	bl	800bdb4 <inHandlerMode>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <osTimerDelete+0x1a>
     return osErrorISR;
 800c026:	2382      	movs	r3, #130	; 0x82
 800c028:	e00e      	b.n	800c048 <osTimerDelete+0x38>
  }
  else { 
    if ((xTimerDelete(timer_id, osWaitForever )) != pdPASS) {
 800c02a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	2300      	movs	r3, #0
 800c032:	2200      	movs	r2, #0
 800c034:	2105      	movs	r1, #5
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f002 f9cc 	bl	800e3d4 <xTimerGenericCommand>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d001      	beq.n	800c046 <osTimerDelete+0x36>
      result = osErrorOS;
 800c042:	23ff      	movs	r3, #255	; 0xff
 800c044:	60fb      	str	r3, [r7, #12]
    
#else 
  result = osErrorOS;
#endif 
 
  return result;
 800c046:	68fb      	ldr	r3, [r7, #12]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	4619      	mov	r1, r3
 800c066:	2001      	movs	r0, #1
 800c068:	f000 fa65 	bl	800c536 <xQueueCreateMutexStatic>
 800c06c:	4603      	mov	r3, r0
 800c06e:	e003      	b.n	800c078 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c070:	2001      	movs	r0, #1
 800c072:	f000 fa48 	bl	800c506 <xQueueCreateMutex>
 800c076:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c080:	b590      	push	{r4, r7, lr}
 800c082:	b085      	sub	sp, #20
 800c084:	af02      	add	r7, sp, #8
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d011      	beq.n	800c0b6 <osMessageCreate+0x36>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00d      	beq.n	800c0b6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6859      	ldr	r1, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	689a      	ldr	r2, [r3, #8]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	2400      	movs	r4, #0
 800c0ac:	9400      	str	r4, [sp, #0]
 800c0ae:	f000 f92d 	bl	800c30c <xQueueGenericCreateStatic>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	e008      	b.n	800c0c8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6818      	ldr	r0, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f000 f9a5 	bl	800c410 <xQueueGenericCreate>
 800c0c6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd90      	pop	{r4, r7, pc}

0800c0d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f103 0208 	add.w	r2, r3, #8
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f103 0208 	add.w	r2, r3, #8
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f103 0208 	add.w	r2, r3, #8
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c11e:	bf00      	nop
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c12a:	b480      	push	{r7}
 800c12c:	b085      	sub	sp, #20
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
}
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c188:	d103      	bne.n	800c192 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	60fb      	str	r3, [r7, #12]
 800c190:	e00c      	b.n	800c1ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3308      	adds	r3, #8
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e002      	b.n	800c1a0 <vListInsert+0x2e>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d2f6      	bcs.n	800c19a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	1c5a      	adds	r2, r3, #1
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	601a      	str	r2, [r3, #0]
}
 800c1d8:	bf00      	nop
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	6892      	ldr	r2, [r2, #8]
 800c1fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	6852      	ldr	r2, [r2, #4]
 800c204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d103      	bne.n	800c218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	689a      	ldr	r2, [r3, #8]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	1e5a      	subs	r2, r3, #1
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10c      	bne.n	800c266 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c266:	f002 fcb9 	bl	800ebdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c272:	68f9      	ldr	r1, [r7, #12]
 800c274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c276:	fb01 f303 	mul.w	r3, r1, r3
 800c27a:	441a      	add	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c296:	3b01      	subs	r3, #1
 800c298:	68f9      	ldr	r1, [r7, #12]
 800c29a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c29c:	fb01 f303 	mul.w	r3, r1, r3
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	22ff      	movs	r2, #255	; 0xff
 800c2aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	22ff      	movs	r2, #255	; 0xff
 800c2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d114      	bne.n	800c2e6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d01a      	beq.n	800c2fa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3310      	adds	r3, #16
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f001 fb91 	bl	800d9f0 <xTaskRemoveFromEventList>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d012      	beq.n	800c2fa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c2d4:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <xQueueGenericReset+0xd0>)
 800c2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2da:	601a      	str	r2, [r3, #0]
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	e009      	b.n	800c2fa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3310      	adds	r3, #16
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7ff fef0 	bl	800c0d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3324      	adds	r3, #36	; 0x24
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff feeb 	bl	800c0d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c2fa:	f002 fca3 	bl	800ec44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c2fe:	2301      	movs	r3, #1
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	e000ed04 	.word	0xe000ed04

0800c30c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08e      	sub	sp, #56	; 0x38
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10c      	bne.n	800c33a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	b672      	cpsid	i
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	b662      	cpsie	i
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10c      	bne.n	800c35a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c344:	b672      	cpsid	i
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	b662      	cpsie	i
 800c354:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <xQueueGenericCreateStatic+0x5a>
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <xQueueGenericCreateStatic+0x5e>
 800c366:	2301      	movs	r3, #1
 800c368:	e000      	b.n	800c36c <xQueueGenericCreateStatic+0x60>
 800c36a:	2300      	movs	r3, #0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10c      	bne.n	800c38a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c374:	b672      	cpsid	i
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	b662      	cpsie	i
 800c384:	623b      	str	r3, [r7, #32]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <xQueueGenericCreateStatic+0x8a>
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <xQueueGenericCreateStatic+0x8e>
 800c396:	2301      	movs	r3, #1
 800c398:	e000      	b.n	800c39c <xQueueGenericCreateStatic+0x90>
 800c39a:	2300      	movs	r3, #0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10c      	bne.n	800c3ba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	b672      	cpsid	i
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	b662      	cpsie	i
 800c3b4:	61fb      	str	r3, [r7, #28]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c3ba:	2348      	movs	r3, #72	; 0x48
 800c3bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	2b48      	cmp	r3, #72	; 0x48
 800c3c2:	d00c      	beq.n	800c3de <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	b672      	cpsid	i
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	b662      	cpsie	i
 800c3d8:	61bb      	str	r3, [r7, #24]
}
 800c3da:	bf00      	nop
 800c3dc:	e7fe      	b.n	800c3dc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00d      	beq.n	800c406 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 f847 	bl	800c494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c408:	4618      	mov	r0, r3
 800c40a:	3730      	adds	r7, #48	; 0x30
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08a      	sub	sp, #40	; 0x28
 800c414:	af02      	add	r7, sp, #8
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	4613      	mov	r3, r2
 800c41c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10c      	bne.n	800c43e <xQueueGenericCreate+0x2e>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	b672      	cpsid	i
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	b662      	cpsie	i
 800c438:	613b      	str	r3, [r7, #16]
}
 800c43a:	bf00      	nop
 800c43c:	e7fe      	b.n	800c43c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d102      	bne.n	800c44a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c444:	2300      	movs	r3, #0
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	e004      	b.n	800c454 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	fb02 f303 	mul.w	r3, r2, r3
 800c452:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	3348      	adds	r3, #72	; 0x48
 800c458:	4618      	mov	r0, r3
 800c45a:	f002 fceb 	bl	800ee34 <pvPortMalloc>
 800c45e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d011      	beq.n	800c48a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	3348      	adds	r3, #72	; 0x48
 800c46e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	2200      	movs	r2, #0
 800c474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c478:	79fa      	ldrb	r2, [r7, #7]
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	4613      	mov	r3, r2
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 f805 	bl	800c494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c48a:	69bb      	ldr	r3, [r7, #24]
	}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3720      	adds	r7, #32
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
 800c4a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	69ba      	ldr	r2, [r7, #24]
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	e002      	b.n	800c4b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c4c2:	2101      	movs	r1, #1
 800c4c4:	69b8      	ldr	r0, [r7, #24]
 800c4c6:	f7ff feb7 	bl	800c238 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c4ca:	bf00      	nop
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00e      	beq.n	800c4fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f837 	bl	800c56c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c506:	b580      	push	{r7, lr}
 800c508:	b086      	sub	sp, #24
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	4603      	mov	r3, r0
 800c50e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c510:	2301      	movs	r3, #1
 800c512:	617b      	str	r3, [r7, #20]
 800c514:	2300      	movs	r3, #0
 800c516:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c518:	79fb      	ldrb	r3, [r7, #7]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6939      	ldr	r1, [r7, #16]
 800c51e:	6978      	ldr	r0, [r7, #20]
 800c520:	f7ff ff76 	bl	800c410 <xQueueGenericCreate>
 800c524:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f7ff ffd3 	bl	800c4d2 <prvInitialiseMutex>

		return xNewQueue;
 800c52c:	68fb      	ldr	r3, [r7, #12]
	}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c536:	b580      	push	{r7, lr}
 800c538:	b088      	sub	sp, #32
 800c53a:	af02      	add	r7, sp, #8
 800c53c:	4603      	mov	r3, r0
 800c53e:	6039      	str	r1, [r7, #0]
 800c540:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c542:	2301      	movs	r3, #1
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2200      	movs	r2, #0
 800c552:	6939      	ldr	r1, [r7, #16]
 800c554:	6978      	ldr	r0, [r7, #20]
 800c556:	f7ff fed9 	bl	800c30c <xQueueGenericCreateStatic>
 800c55a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7ff ffb8 	bl	800c4d2 <prvInitialiseMutex>

		return xNewQueue;
 800c562:	68fb      	ldr	r3, [r7, #12]
	}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08e      	sub	sp, #56	; 0x38
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c57a:	2300      	movs	r3, #0
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10c      	bne.n	800c5a2 <xQueueGenericSend+0x36>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	b672      	cpsid	i
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	b662      	cpsie	i
 800c59c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d103      	bne.n	800c5b0 <xQueueGenericSend+0x44>
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <xQueueGenericSend+0x48>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e000      	b.n	800c5b6 <xQueueGenericSend+0x4a>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10c      	bne.n	800c5d4 <xQueueGenericSend+0x68>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	b672      	cpsid	i
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	b662      	cpsie	i
 800c5ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d103      	bne.n	800c5e2 <xQueueGenericSend+0x76>
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d101      	bne.n	800c5e6 <xQueueGenericSend+0x7a>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <xQueueGenericSend+0x7c>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10c      	bne.n	800c606 <xQueueGenericSend+0x9a>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	b672      	cpsid	i
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	b662      	cpsie	i
 800c600:	623b      	str	r3, [r7, #32]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c606:	f001 fbbb 	bl	800dd80 <xTaskGetSchedulerState>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <xQueueGenericSend+0xaa>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <xQueueGenericSend+0xae>
 800c616:	2301      	movs	r3, #1
 800c618:	e000      	b.n	800c61c <xQueueGenericSend+0xb0>
 800c61a:	2300      	movs	r3, #0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10c      	bne.n	800c63a <xQueueGenericSend+0xce>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	b672      	cpsid	i
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	b662      	cpsie	i
 800c634:	61fb      	str	r3, [r7, #28]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c63a:	f002 facf 	bl	800ebdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c646:	429a      	cmp	r2, r3
 800c648:	d302      	bcc.n	800c650 <xQueueGenericSend+0xe4>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d129      	bne.n	800c6a4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c656:	f000 fb41 	bl	800ccdc <prvCopyDataToQueue>
 800c65a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c660:	2b00      	cmp	r3, #0
 800c662:	d010      	beq.n	800c686 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	3324      	adds	r3, #36	; 0x24
 800c668:	4618      	mov	r0, r3
 800c66a:	f001 f9c1 	bl	800d9f0 <xTaskRemoveFromEventList>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d013      	beq.n	800c69c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c674:	4b3f      	ldr	r3, [pc, #252]	; (800c774 <xQueueGenericSend+0x208>)
 800c676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	e00a      	b.n	800c69c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d007      	beq.n	800c69c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c68c:	4b39      	ldr	r3, [pc, #228]	; (800c774 <xQueueGenericSend+0x208>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c69c:	f002 fad2 	bl	800ec44 <vPortExitCritical>
				return pdPASS;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e063      	b.n	800c76c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d103      	bne.n	800c6b2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6aa:	f002 facb 	bl	800ec44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e05c      	b.n	800c76c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d106      	bne.n	800c6c6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6b8:	f107 0314 	add.w	r3, r7, #20
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f001 f9fb 	bl	800dab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6c6:	f002 fabd 	bl	800ec44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6ca:	f000 ff63 	bl	800d594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6ce:	f002 fa85 	bl	800ebdc <vPortEnterCritical>
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6d8:	b25b      	sxtb	r3, r3
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6de:	d103      	bne.n	800c6e8 <xQueueGenericSend+0x17c>
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6ee:	b25b      	sxtb	r3, r3
 800c6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f4:	d103      	bne.n	800c6fe <xQueueGenericSend+0x192>
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6fe:	f002 faa1 	bl	800ec44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c702:	1d3a      	adds	r2, r7, #4
 800c704:	f107 0314 	add.w	r3, r7, #20
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f9ea 	bl	800dae4 <xTaskCheckForTimeOut>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d124      	bne.n	800c760 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c718:	f000 fbd8 	bl	800cecc <prvIsQueueFull>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d018      	beq.n	800c754 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	3310      	adds	r3, #16
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f001 f90c 	bl	800d948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c732:	f000 fb63 	bl	800cdfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c736:	f000 ff3b 	bl	800d5b0 <xTaskResumeAll>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f47f af7c 	bne.w	800c63a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c742:	4b0c      	ldr	r3, [pc, #48]	; (800c774 <xQueueGenericSend+0x208>)
 800c744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	e772      	b.n	800c63a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c756:	f000 fb51 	bl	800cdfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c75a:	f000 ff29 	bl	800d5b0 <xTaskResumeAll>
 800c75e:	e76c      	b.n	800c63a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c762:	f000 fb4b 	bl	800cdfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c766:	f000 ff23 	bl	800d5b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c76a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3738      	adds	r7, #56	; 0x38
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	e000ed04 	.word	0xe000ed04

0800c778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08e      	sub	sp, #56	; 0x38
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10c      	bne.n	800c7aa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	b672      	cpsid	i
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	b662      	cpsie	i
 800c7a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d103      	bne.n	800c7b8 <xQueueGenericSendFromISR+0x40>
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <xQueueGenericSendFromISR+0x44>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e000      	b.n	800c7be <xQueueGenericSendFromISR+0x46>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10c      	bne.n	800c7dc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	b672      	cpsid	i
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	b662      	cpsie	i
 800c7d6:	623b      	str	r3, [r7, #32]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d103      	bne.n	800c7ea <xQueueGenericSendFromISR+0x72>
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d101      	bne.n	800c7ee <xQueueGenericSendFromISR+0x76>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <xQueueGenericSendFromISR+0x78>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10c      	bne.n	800c80e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	b672      	cpsid	i
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	b662      	cpsie	i
 800c808:	61fb      	str	r3, [r7, #28]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c80e:	f002 facd 	bl	800edac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c812:	f3ef 8211 	mrs	r2, BASEPRI
 800c816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81a:	b672      	cpsid	i
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	b662      	cpsie	i
 800c82a:	61ba      	str	r2, [r7, #24]
 800c82c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c82e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d302      	bcc.n	800c844 <xQueueGenericSendFromISR+0xcc>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2b02      	cmp	r3, #2
 800c842:	d12c      	bne.n	800c89e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c84a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c854:	f000 fa42 	bl	800ccdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c858:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c85c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c860:	d112      	bne.n	800c888 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c866:	2b00      	cmp	r3, #0
 800c868:	d016      	beq.n	800c898 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	3324      	adds	r3, #36	; 0x24
 800c86e:	4618      	mov	r0, r3
 800c870:	f001 f8be 	bl	800d9f0 <xTaskRemoveFromEventList>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00e      	beq.n	800c898 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00b      	beq.n	800c898 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	601a      	str	r2, [r3, #0]
 800c886:	e007      	b.n	800c898 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c888:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c88c:	3301      	adds	r3, #1
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	b25a      	sxtb	r2, r3
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c898:	2301      	movs	r3, #1
 800c89a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c89c:	e001      	b.n	800c8a2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c8ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3738      	adds	r7, #56	; 0x38
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08c      	sub	sp, #48	; 0x30
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10c      	bne.n	800c8ec <xQueueReceive+0x34>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d6:	b672      	cpsid	i
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	b662      	cpsie	i
 800c8e6:	623b      	str	r3, [r7, #32]
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d103      	bne.n	800c8fa <xQueueReceive+0x42>
 800c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <xQueueReceive+0x46>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e000      	b.n	800c900 <xQueueReceive+0x48>
 800c8fe:	2300      	movs	r3, #0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10c      	bne.n	800c91e <xQueueReceive+0x66>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	b672      	cpsid	i
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	b662      	cpsie	i
 800c918:	61fb      	str	r3, [r7, #28]
}
 800c91a:	bf00      	nop
 800c91c:	e7fe      	b.n	800c91c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c91e:	f001 fa2f 	bl	800dd80 <xTaskGetSchedulerState>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <xQueueReceive+0x76>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <xQueueReceive+0x7a>
 800c92e:	2301      	movs	r3, #1
 800c930:	e000      	b.n	800c934 <xQueueReceive+0x7c>
 800c932:	2300      	movs	r3, #0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10c      	bne.n	800c952 <xQueueReceive+0x9a>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93c:	b672      	cpsid	i
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	b662      	cpsie	i
 800c94c:	61bb      	str	r3, [r7, #24]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c952:	f002 f943 	bl	800ebdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d01f      	beq.n	800c9a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c966:	f000 fa23 	bl	800cdb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	1e5a      	subs	r2, r3, #1
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00f      	beq.n	800c99a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	3310      	adds	r3, #16
 800c97e:	4618      	mov	r0, r3
 800c980:	f001 f836 	bl	800d9f0 <xTaskRemoveFromEventList>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d007      	beq.n	800c99a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c98a:	4b3d      	ldr	r3, [pc, #244]	; (800ca80 <xQueueReceive+0x1c8>)
 800c98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c99a:	f002 f953 	bl	800ec44 <vPortExitCritical>
				return pdPASS;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e069      	b.n	800ca76 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d103      	bne.n	800c9b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9a8:	f002 f94c 	bl	800ec44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	e062      	b.n	800ca76 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d106      	bne.n	800c9c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9b6:	f107 0310 	add.w	r3, r7, #16
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f001 f87c 	bl	800dab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9c4:	f002 f93e 	bl	800ec44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9c8:	f000 fde4 	bl	800d594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9cc:	f002 f906 	bl	800ebdc <vPortEnterCritical>
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9d6:	b25b      	sxtb	r3, r3
 800c9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9dc:	d103      	bne.n	800c9e6 <xQueueReceive+0x12e>
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9ec:	b25b      	sxtb	r3, r3
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9f2:	d103      	bne.n	800c9fc <xQueueReceive+0x144>
 800c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9fc:	f002 f922 	bl	800ec44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca00:	1d3a      	adds	r2, r7, #4
 800ca02:	f107 0310 	add.w	r3, r7, #16
 800ca06:	4611      	mov	r1, r2
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f001 f86b 	bl	800dae4 <xTaskCheckForTimeOut>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d123      	bne.n	800ca5c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca16:	f000 fa43 	bl	800cea0 <prvIsQueueEmpty>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d017      	beq.n	800ca50 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	3324      	adds	r3, #36	; 0x24
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 ff8d 	bl	800d948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca30:	f000 f9e4 	bl	800cdfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca34:	f000 fdbc 	bl	800d5b0 <xTaskResumeAll>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d189      	bne.n	800c952 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ca3e:	4b10      	ldr	r3, [pc, #64]	; (800ca80 <xQueueReceive+0x1c8>)
 800ca40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	e780      	b.n	800c952 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca52:	f000 f9d3 	bl	800cdfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca56:	f000 fdab 	bl	800d5b0 <xTaskResumeAll>
 800ca5a:	e77a      	b.n	800c952 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca5e:	f000 f9cd 	bl	800cdfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca62:	f000 fda5 	bl	800d5b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca68:	f000 fa1a 	bl	800cea0 <prvIsQueueEmpty>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f43f af6f 	beq.w	800c952 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3730      	adds	r7, #48	; 0x30
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08e      	sub	sp, #56	; 0x38
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ca96:	2300      	movs	r3, #0
 800ca98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10c      	bne.n	800caba <xQueueSemaphoreTake+0x36>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	b672      	cpsid	i
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	b662      	cpsie	i
 800cab4:	623b      	str	r3, [r7, #32]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00c      	beq.n	800cadc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	b672      	cpsid	i
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	b662      	cpsie	i
 800cad6:	61fb      	str	r3, [r7, #28]
}
 800cad8:	bf00      	nop
 800cada:	e7fe      	b.n	800cada <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cadc:	f001 f950 	bl	800dd80 <xTaskGetSchedulerState>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <xQueueSemaphoreTake+0x68>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d101      	bne.n	800caf0 <xQueueSemaphoreTake+0x6c>
 800caec:	2301      	movs	r3, #1
 800caee:	e000      	b.n	800caf2 <xQueueSemaphoreTake+0x6e>
 800caf0:	2300      	movs	r3, #0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10c      	bne.n	800cb10 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	b672      	cpsid	i
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	b662      	cpsie	i
 800cb0a:	61bb      	str	r3, [r7, #24]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb10:	f002 f864 	bl	800ebdc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d024      	beq.n	800cb6a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	1e5a      	subs	r2, r3, #1
 800cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d104      	bne.n	800cb3a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb30:	f001 faec 	bl	800e10c <pvTaskIncrementMutexHeldCount>
 800cb34:	4602      	mov	r2, r0
 800cb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00f      	beq.n	800cb62 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	3310      	adds	r3, #16
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 ff52 	bl	800d9f0 <xTaskRemoveFromEventList>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d007      	beq.n	800cb62 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb52:	4b55      	ldr	r3, [pc, #340]	; (800cca8 <xQueueSemaphoreTake+0x224>)
 800cb54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb62:	f002 f86f 	bl	800ec44 <vPortExitCritical>
				return pdPASS;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e099      	b.n	800cc9e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d113      	bne.n	800cb98 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00c      	beq.n	800cb90 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7a:	b672      	cpsid	i
 800cb7c:	f383 8811 	msr	BASEPRI, r3
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	b662      	cpsie	i
 800cb8a:	617b      	str	r3, [r7, #20]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cb90:	f002 f858 	bl	800ec44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb94:	2300      	movs	r3, #0
 800cb96:	e082      	b.n	800cc9e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d106      	bne.n	800cbac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb9e:	f107 030c 	add.w	r3, r7, #12
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 ff88 	bl	800dab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbac:	f002 f84a 	bl	800ec44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbb0:	f000 fcf0 	bl	800d594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbb4:	f002 f812 	bl	800ebdc <vPortEnterCritical>
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbbe:	b25b      	sxtb	r3, r3
 800cbc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbc4:	d103      	bne.n	800cbce <xQueueSemaphoreTake+0x14a>
 800cbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbd4:	b25b      	sxtb	r3, r3
 800cbd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbda:	d103      	bne.n	800cbe4 <xQueueSemaphoreTake+0x160>
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbe4:	f002 f82e 	bl	800ec44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbe8:	463a      	mov	r2, r7
 800cbea:	f107 030c 	add.w	r3, r7, #12
 800cbee:	4611      	mov	r1, r2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 ff77 	bl	800dae4 <xTaskCheckForTimeOut>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d132      	bne.n	800cc62 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbfe:	f000 f94f 	bl	800cea0 <prvIsQueueEmpty>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d026      	beq.n	800cc56 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d109      	bne.n	800cc24 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800cc10:	f001 ffe4 	bl	800ebdc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f001 f8cf 	bl	800ddbc <xTaskPriorityInherit>
 800cc1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cc20:	f002 f810 	bl	800ec44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	3324      	adds	r3, #36	; 0x24
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 fe8b 	bl	800d948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc34:	f000 f8e2 	bl	800cdfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc38:	f000 fcba 	bl	800d5b0 <xTaskResumeAll>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f47f af66 	bne.w	800cb10 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800cc44:	4b18      	ldr	r3, [pc, #96]	; (800cca8 <xQueueSemaphoreTake+0x224>)
 800cc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	e75c      	b.n	800cb10 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cc56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc58:	f000 f8d0 	bl	800cdfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc5c:	f000 fca8 	bl	800d5b0 <xTaskResumeAll>
 800cc60:	e756      	b.n	800cb10 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cc62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc64:	f000 f8ca 	bl	800cdfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc68:	f000 fca2 	bl	800d5b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc6e:	f000 f917 	bl	800cea0 <prvIsQueueEmpty>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f43f af4b 	beq.w	800cb10 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00d      	beq.n	800cc9c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800cc80:	f001 ffac 	bl	800ebdc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc86:	f000 f811 	bl	800ccac <prvGetDisinheritPriorityAfterTimeout>
 800cc8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc92:	4618      	mov	r0, r3
 800cc94:	f001 f99c 	bl	800dfd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cc98:	f001 ffd4 	bl	800ec44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3738      	adds	r7, #56	; 0x38
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	e000ed04 	.word	0xe000ed04

0800ccac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d006      	beq.n	800ccca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f1c3 0307 	rsb	r3, r3, #7
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	e001      	b.n	800ccce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ccca:	2300      	movs	r3, #0
 800cccc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ccce:	68fb      	ldr	r3, [r7, #12]
	}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10d      	bne.n	800cd16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d14d      	bne.n	800cd9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f001 f8d8 	bl	800debc <xTaskPriorityDisinherit>
 800cd0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	609a      	str	r2, [r3, #8]
 800cd14:	e043      	b.n	800cd9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d119      	bne.n	800cd50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6858      	ldr	r0, [r3, #4]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd24:	461a      	mov	r2, r3
 800cd26:	68b9      	ldr	r1, [r7, #8]
 800cd28:	f002 fa94 	bl	800f254 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	685a      	ldr	r2, [r3, #4]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd34:	441a      	add	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d32b      	bcc.n	800cd9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	e026      	b.n	800cd9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	68d8      	ldr	r0, [r3, #12]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd58:	461a      	mov	r2, r3
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	f002 fa7a 	bl	800f254 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	68da      	ldr	r2, [r3, #12]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	425b      	negs	r3, r3
 800cd6a:	441a      	add	r2, r3
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	68da      	ldr	r2, [r3, #12]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d207      	bcs.n	800cd8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	689a      	ldr	r2, [r3, #8]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd84:	425b      	negs	r3, r3
 800cd86:	441a      	add	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d105      	bne.n	800cd9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cda6:	697b      	ldr	r3, [r7, #20]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3718      	adds	r7, #24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d018      	beq.n	800cdf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68da      	ldr	r2, [r3, #12]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	441a      	add	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68da      	ldr	r2, [r3, #12]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d303      	bcc.n	800cde4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68d9      	ldr	r1, [r3, #12]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdec:	461a      	mov	r2, r3
 800cdee:	6838      	ldr	r0, [r7, #0]
 800cdf0:	f002 fa30 	bl	800f254 <memcpy>
	}
}
 800cdf4:	bf00      	nop
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce04:	f001 feea 	bl	800ebdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce10:	e011      	b.n	800ce36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d012      	beq.n	800ce40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3324      	adds	r3, #36	; 0x24
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 fde6 	bl	800d9f0 <xTaskRemoveFromEventList>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce2a:	f000 fec1 	bl	800dbb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	dce9      	bgt.n	800ce12 <prvUnlockQueue+0x16>
 800ce3e:	e000      	b.n	800ce42 <prvUnlockQueue+0x46>
					break;
 800ce40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	22ff      	movs	r2, #255	; 0xff
 800ce46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ce4a:	f001 fefb 	bl	800ec44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce4e:	f001 fec5 	bl	800ebdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce5a:	e011      	b.n	800ce80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d012      	beq.n	800ce8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	3310      	adds	r3, #16
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 fdc1 	bl	800d9f0 <xTaskRemoveFromEventList>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d001      	beq.n	800ce78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce74:	f000 fe9c 	bl	800dbb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	dce9      	bgt.n	800ce5c <prvUnlockQueue+0x60>
 800ce88:	e000      	b.n	800ce8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	22ff      	movs	r2, #255	; 0xff
 800ce90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ce94:	f001 fed6 	bl	800ec44 <vPortExitCritical>
}
 800ce98:	bf00      	nop
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cea8:	f001 fe98 	bl	800ebdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d102      	bne.n	800ceba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	60fb      	str	r3, [r7, #12]
 800ceb8:	e001      	b.n	800cebe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ceba:	2300      	movs	r3, #0
 800cebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cebe:	f001 fec1 	bl	800ec44 <vPortExitCritical>

	return xReturn;
 800cec2:	68fb      	ldr	r3, [r7, #12]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ced4:	f001 fe82 	bl	800ebdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d102      	bne.n	800ceea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cee4:	2301      	movs	r3, #1
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e001      	b.n	800ceee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ceea:	2300      	movs	r3, #0
 800ceec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ceee:	f001 fea9 	bl	800ec44 <vPortExitCritical>

	return xReturn;
 800cef2:	68fb      	ldr	r3, [r7, #12]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]
 800cf0a:	e014      	b.n	800cf36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cf0c:	4a0f      	ldr	r2, [pc, #60]	; (800cf4c <vQueueAddToRegistry+0x50>)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10b      	bne.n	800cf30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cf18:	490c      	ldr	r1, [pc, #48]	; (800cf4c <vQueueAddToRegistry+0x50>)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cf22:	4a0a      	ldr	r2, [pc, #40]	; (800cf4c <vQueueAddToRegistry+0x50>)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	00db      	lsls	r3, r3, #3
 800cf28:	4413      	add	r3, r2
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cf2e:	e006      	b.n	800cf3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3301      	adds	r3, #1
 800cf34:	60fb      	str	r3, [r7, #12]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2b07      	cmp	r3, #7
 800cf3a:	d9e7      	bls.n	800cf0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cf3c:	bf00      	nop
 800cf3e:	bf00      	nop
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	20008c3c 	.word	0x20008c3c

0800cf50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cf60:	f001 fe3c 	bl	800ebdc <vPortEnterCritical>
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf6a:	b25b      	sxtb	r3, r3
 800cf6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf70:	d103      	bne.n	800cf7a <vQueueWaitForMessageRestricted+0x2a>
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf80:	b25b      	sxtb	r3, r3
 800cf82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf86:	d103      	bne.n	800cf90 <vQueueWaitForMessageRestricted+0x40>
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf90:	f001 fe58 	bl	800ec44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d106      	bne.n	800cfaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	3324      	adds	r3, #36	; 0x24
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	68b9      	ldr	r1, [r7, #8]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 fcf5 	bl	800d994 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cfaa:	6978      	ldr	r0, [r7, #20]
 800cfac:	f7ff ff26 	bl	800cdfc <prvUnlockQueue>
	}
 800cfb0:	bf00      	nop
 800cfb2:	3718      	adds	r7, #24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08e      	sub	sp, #56	; 0x38
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
 800cfc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10c      	bne.n	800cfe6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800cfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd0:	b672      	cpsid	i
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	b662      	cpsie	i
 800cfe0:	623b      	str	r3, [r7, #32]
}
 800cfe2:	bf00      	nop
 800cfe4:	e7fe      	b.n	800cfe4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800cfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10c      	bne.n	800d006 <xTaskCreateStatic+0x4e>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	b672      	cpsid	i
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	b662      	cpsie	i
 800d000:	61fb      	str	r3, [r7, #28]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d006:	23b4      	movs	r3, #180	; 0xb4
 800d008:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2bb4      	cmp	r3, #180	; 0xb4
 800d00e:	d00c      	beq.n	800d02a <xTaskCreateStatic+0x72>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	b672      	cpsid	i
 800d016:	f383 8811 	msr	BASEPRI, r3
 800d01a:	f3bf 8f6f 	isb	sy
 800d01e:	f3bf 8f4f 	dsb	sy
 800d022:	b662      	cpsie	i
 800d024:	61bb      	str	r3, [r7, #24]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d02a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d01e      	beq.n	800d070 <xTaskCreateStatic+0xb8>
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d034:	2b00      	cmp	r3, #0
 800d036:	d01b      	beq.n	800d070 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d040:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	2202      	movs	r2, #2
 800d046:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d04a:	2300      	movs	r3, #0
 800d04c:	9303      	str	r3, [sp, #12]
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	9302      	str	r3, [sp, #8]
 800d052:	f107 0314 	add.w	r3, r7, #20
 800d056:	9301      	str	r3, [sp, #4]
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	68b9      	ldr	r1, [r7, #8]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f000 f850 	bl	800d108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d06a:	f000 f8ed 	bl	800d248 <prvAddNewTaskToReadyList>
 800d06e:	e001      	b.n	800d074 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d070:	2300      	movs	r3, #0
 800d072:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d074:	697b      	ldr	r3, [r7, #20]
	}
 800d076:	4618      	mov	r0, r3
 800d078:	3728      	adds	r7, #40	; 0x28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b08c      	sub	sp, #48	; 0x30
 800d082:	af04      	add	r7, sp, #16
 800d084:	60f8      	str	r0, [r7, #12]
 800d086:	60b9      	str	r1, [r7, #8]
 800d088:	603b      	str	r3, [r7, #0]
 800d08a:	4613      	mov	r3, r2
 800d08c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d08e:	88fb      	ldrh	r3, [r7, #6]
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	4618      	mov	r0, r3
 800d094:	f001 fece 	bl	800ee34 <pvPortMalloc>
 800d098:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00e      	beq.n	800d0be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0a0:	20b4      	movs	r0, #180	; 0xb4
 800d0a2:	f001 fec7 	bl	800ee34 <pvPortMalloc>
 800d0a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	697a      	ldr	r2, [r7, #20]
 800d0b2:	631a      	str	r2, [r3, #48]	; 0x30
 800d0b4:	e005      	b.n	800d0c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d0b6:	6978      	ldr	r0, [r7, #20]
 800d0b8:	f001 ff86 	bl	800efc8 <vPortFree>
 800d0bc:	e001      	b.n	800d0c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d017      	beq.n	800d0f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d0d0:	88fa      	ldrh	r2, [r7, #6]
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9303      	str	r3, [sp, #12]
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	9302      	str	r3, [sp, #8]
 800d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	68b9      	ldr	r1, [r7, #8]
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 f80e 	bl	800d108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0ec:	69f8      	ldr	r0, [r7, #28]
 800d0ee:	f000 f8ab 	bl	800d248 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	61bb      	str	r3, [r7, #24]
 800d0f6:	e002      	b.n	800d0fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d0fe:	69bb      	ldr	r3, [r7, #24]
	}
 800d100:	4618      	mov	r0, r3
 800d102:	3720      	adds	r7, #32
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d120:	440b      	add	r3, r1
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	4413      	add	r3, r2
 800d126:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	f023 0307 	bic.w	r3, r3, #7
 800d12e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	f003 0307 	and.w	r3, r3, #7
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00c      	beq.n	800d154 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	b672      	cpsid	i
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	b662      	cpsie	i
 800d14e:	617b      	str	r3, [r7, #20]
}
 800d150:	bf00      	nop
 800d152:	e7fe      	b.n	800d152 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d01f      	beq.n	800d19a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d15a:	2300      	movs	r3, #0
 800d15c:	61fb      	str	r3, [r7, #28]
 800d15e:	e012      	b.n	800d186 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	4413      	add	r3, r2
 800d166:	7819      	ldrb	r1, [r3, #0]
 800d168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	4413      	add	r3, r2
 800d16e:	3334      	adds	r3, #52	; 0x34
 800d170:	460a      	mov	r2, r1
 800d172:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	4413      	add	r3, r2
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d006      	beq.n	800d18e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	3301      	adds	r3, #1
 800d184:	61fb      	str	r3, [r7, #28]
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	2b0f      	cmp	r3, #15
 800d18a:	d9e9      	bls.n	800d160 <prvInitialiseNewTask+0x58>
 800d18c:	e000      	b.n	800d190 <prvInitialiseNewTask+0x88>
			{
				break;
 800d18e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d198:	e003      	b.n	800d1a2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	2b06      	cmp	r3, #6
 800d1a6:	d901      	bls.n	800d1ac <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1a8:	2306      	movs	r3, #6
 800d1aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe ffa4 	bl	800c110 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ca:	3318      	adds	r3, #24
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fe ff9f 	bl	800c110 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	f1c3 0207 	rsb	r2, r3, #7
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fa:	334c      	adds	r3, #76	; 0x4c
 800d1fc:	2260      	movs	r2, #96	; 0x60
 800d1fe:	2100      	movs	r1, #0
 800d200:	4618      	mov	r0, r3
 800d202:	f002 f835 	bl	800f270 <memset>
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	4a0c      	ldr	r2, [pc, #48]	; (800d23c <prvInitialiseNewTask+0x134>)
 800d20a:	651a      	str	r2, [r3, #80]	; 0x50
 800d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20e:	4a0c      	ldr	r2, [pc, #48]	; (800d240 <prvInitialiseNewTask+0x138>)
 800d210:	655a      	str	r2, [r3, #84]	; 0x54
 800d212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d214:	4a0b      	ldr	r2, [pc, #44]	; (800d244 <prvInitialiseNewTask+0x13c>)
 800d216:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	68f9      	ldr	r1, [r7, #12]
 800d21c:	69b8      	ldr	r0, [r7, #24]
 800d21e:	f001 fbcd 	bl	800e9bc <pxPortInitialiseStack>
 800d222:	4602      	mov	r2, r0
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d232:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d234:	bf00      	nop
 800d236:	3720      	adds	r7, #32
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	080d2104 	.word	0x080d2104
 800d240:	080d2124 	.word	0x080d2124
 800d244:	080d20e4 	.word	0x080d20e4

0800d248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d250:	f001 fcc4 	bl	800ebdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d254:	4b2a      	ldr	r3, [pc, #168]	; (800d300 <prvAddNewTaskToReadyList+0xb8>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	4a29      	ldr	r2, [pc, #164]	; (800d300 <prvAddNewTaskToReadyList+0xb8>)
 800d25c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d25e:	4b29      	ldr	r3, [pc, #164]	; (800d304 <prvAddNewTaskToReadyList+0xbc>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d109      	bne.n	800d27a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d266:	4a27      	ldr	r2, [pc, #156]	; (800d304 <prvAddNewTaskToReadyList+0xbc>)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d26c:	4b24      	ldr	r3, [pc, #144]	; (800d300 <prvAddNewTaskToReadyList+0xb8>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d110      	bne.n	800d296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d274:	f000 fcc0 	bl	800dbf8 <prvInitialiseTaskLists>
 800d278:	e00d      	b.n	800d296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d27a:	4b23      	ldr	r3, [pc, #140]	; (800d308 <prvAddNewTaskToReadyList+0xc0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d109      	bne.n	800d296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d282:	4b20      	ldr	r3, [pc, #128]	; (800d304 <prvAddNewTaskToReadyList+0xbc>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d802      	bhi.n	800d296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d290:	4a1c      	ldr	r2, [pc, #112]	; (800d304 <prvAddNewTaskToReadyList+0xbc>)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d296:	4b1d      	ldr	r3, [pc, #116]	; (800d30c <prvAddNewTaskToReadyList+0xc4>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3301      	adds	r3, #1
 800d29c:	4a1b      	ldr	r2, [pc, #108]	; (800d30c <prvAddNewTaskToReadyList+0xc4>)
 800d29e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	409a      	lsls	r2, r3
 800d2a8:	4b19      	ldr	r3, [pc, #100]	; (800d310 <prvAddNewTaskToReadyList+0xc8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	4a18      	ldr	r2, [pc, #96]	; (800d310 <prvAddNewTaskToReadyList+0xc8>)
 800d2b0:	6013      	str	r3, [r2, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4413      	add	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4a15      	ldr	r2, [pc, #84]	; (800d314 <prvAddNewTaskToReadyList+0xcc>)
 800d2c0:	441a      	add	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	f7fe ff2e 	bl	800c12a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d2ce:	f001 fcb9 	bl	800ec44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d2d2:	4b0d      	ldr	r3, [pc, #52]	; (800d308 <prvAddNewTaskToReadyList+0xc0>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00e      	beq.n	800d2f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d2da:	4b0a      	ldr	r3, [pc, #40]	; (800d304 <prvAddNewTaskToReadyList+0xbc>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d207      	bcs.n	800d2f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d2e8:	4b0b      	ldr	r3, [pc, #44]	; (800d318 <prvAddNewTaskToReadyList+0xd0>)
 800d2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2f8:	bf00      	nop
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	20000b8c 	.word	0x20000b8c
 800d304:	20000a8c 	.word	0x20000a8c
 800d308:	20000b98 	.word	0x20000b98
 800d30c:	20000ba8 	.word	0x20000ba8
 800d310:	20000b94 	.word	0x20000b94
 800d314:	20000a90 	.word	0x20000a90
 800d318:	e000ed04 	.word	0xe000ed04

0800d31c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d324:	f001 fc5a 	bl	800ebdc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d102      	bne.n	800d334 <vTaskDelete+0x18>
 800d32e:	4b3a      	ldr	r3, [pc, #232]	; (800d418 <vTaskDelete+0xfc>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	e000      	b.n	800d336 <vTaskDelete+0x1a>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	3304      	adds	r3, #4
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fe ff51 	bl	800c1e4 <uxListRemove>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d115      	bne.n	800d374 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34c:	4933      	ldr	r1, [pc, #204]	; (800d41c <vTaskDelete+0x100>)
 800d34e:	4613      	mov	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4413      	add	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	440b      	add	r3, r1
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10a      	bne.n	800d374 <vTaskDelete+0x58>
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	2201      	movs	r2, #1
 800d364:	fa02 f303 	lsl.w	r3, r2, r3
 800d368:	43da      	mvns	r2, r3
 800d36a:	4b2d      	ldr	r3, [pc, #180]	; (800d420 <vTaskDelete+0x104>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4013      	ands	r3, r2
 800d370:	4a2b      	ldr	r2, [pc, #172]	; (800d420 <vTaskDelete+0x104>)
 800d372:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	3318      	adds	r3, #24
 800d380:	4618      	mov	r0, r3
 800d382:	f7fe ff2f 	bl	800c1e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d386:	4b27      	ldr	r3, [pc, #156]	; (800d424 <vTaskDelete+0x108>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	3301      	adds	r3, #1
 800d38c:	4a25      	ldr	r2, [pc, #148]	; (800d424 <vTaskDelete+0x108>)
 800d38e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d390:	4b21      	ldr	r3, [pc, #132]	; (800d418 <vTaskDelete+0xfc>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	429a      	cmp	r2, r3
 800d398:	d10b      	bne.n	800d3b2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3304      	adds	r3, #4
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4821      	ldr	r0, [pc, #132]	; (800d428 <vTaskDelete+0x10c>)
 800d3a2:	f7fe fec2 	bl	800c12a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d3a6:	4b21      	ldr	r3, [pc, #132]	; (800d42c <vTaskDelete+0x110>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	4a1f      	ldr	r2, [pc, #124]	; (800d42c <vTaskDelete+0x110>)
 800d3ae:	6013      	str	r3, [r2, #0]
 800d3b0:	e009      	b.n	800d3c6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d3b2:	4b1f      	ldr	r3, [pc, #124]	; (800d430 <vTaskDelete+0x114>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	4a1d      	ldr	r2, [pc, #116]	; (800d430 <vTaskDelete+0x114>)
 800d3ba:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f000 fc89 	bl	800dcd4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d3c2:	f000 fcbd 	bl	800dd40 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800d3c6:	f001 fc3d 	bl	800ec44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d3ca:	4b1a      	ldr	r3, [pc, #104]	; (800d434 <vTaskDelete+0x118>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d01d      	beq.n	800d40e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800d3d2:	4b11      	ldr	r3, [pc, #68]	; (800d418 <vTaskDelete+0xfc>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d118      	bne.n	800d40e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d3dc:	4b16      	ldr	r3, [pc, #88]	; (800d438 <vTaskDelete+0x11c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00c      	beq.n	800d3fe <vTaskDelete+0xe2>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	b672      	cpsid	i
 800d3ea:	f383 8811 	msr	BASEPRI, r3
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	b662      	cpsie	i
 800d3f8:	60bb      	str	r3, [r7, #8]
}
 800d3fa:	bf00      	nop
 800d3fc:	e7fe      	b.n	800d3fc <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800d3fe:	4b0f      	ldr	r3, [pc, #60]	; (800d43c <vTaskDelete+0x120>)
 800d400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d404:	601a      	str	r2, [r3, #0]
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d40e:	bf00      	nop
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	20000a8c 	.word	0x20000a8c
 800d41c:	20000a90 	.word	0x20000a90
 800d420:	20000b94 	.word	0x20000b94
 800d424:	20000ba8 	.word	0x20000ba8
 800d428:	20000b60 	.word	0x20000b60
 800d42c:	20000b74 	.word	0x20000b74
 800d430:	20000b8c 	.word	0x20000b8c
 800d434:	20000b98 	.word	0x20000b98
 800d438:	20000bb4 	.word	0x20000bb4
 800d43c:	e000ed04 	.word	0xe000ed04

0800d440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d448:	2300      	movs	r3, #0
 800d44a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d019      	beq.n	800d486 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d452:	4b14      	ldr	r3, [pc, #80]	; (800d4a4 <vTaskDelay+0x64>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00c      	beq.n	800d474 <vTaskDelay+0x34>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	b672      	cpsid	i
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	b662      	cpsie	i
 800d46e:	60bb      	str	r3, [r7, #8]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d474:	f000 f88e 	bl	800d594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d478:	2100      	movs	r1, #0
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fe5a 	bl	800e134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d480:	f000 f896 	bl	800d5b0 <xTaskResumeAll>
 800d484:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d107      	bne.n	800d49c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d48c:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <vTaskDelay+0x68>)
 800d48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d49c:	bf00      	nop
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	20000bb4 	.word	0x20000bb4
 800d4a8:	e000ed04 	.word	0xe000ed04

0800d4ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	; 0x28
 800d4b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d4ba:	463a      	mov	r2, r7
 800d4bc:	1d39      	adds	r1, r7, #4
 800d4be:	f107 0308 	add.w	r3, r7, #8
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7f3 f878 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	9202      	str	r2, [sp, #8]
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	460a      	mov	r2, r1
 800d4da:	4926      	ldr	r1, [pc, #152]	; (800d574 <vTaskStartScheduler+0xc8>)
 800d4dc:	4826      	ldr	r0, [pc, #152]	; (800d578 <vTaskStartScheduler+0xcc>)
 800d4de:	f7ff fd6b 	bl	800cfb8 <xTaskCreateStatic>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	4a25      	ldr	r2, [pc, #148]	; (800d57c <vTaskStartScheduler+0xd0>)
 800d4e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d4e8:	4b24      	ldr	r3, [pc, #144]	; (800d57c <vTaskStartScheduler+0xd0>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	617b      	str	r3, [r7, #20]
 800d4f4:	e001      	b.n	800d4fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d102      	bne.n	800d506 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d500:	f000 fe7e 	bl	800e200 <xTimerCreateTimerTask>
 800d504:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d11d      	bne.n	800d548 <vTaskStartScheduler+0x9c>
	__asm volatile
 800d50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d510:	b672      	cpsid	i
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	b662      	cpsie	i
 800d520:	613b      	str	r3, [r7, #16]
}
 800d522:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d524:	4b16      	ldr	r3, [pc, #88]	; (800d580 <vTaskStartScheduler+0xd4>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	334c      	adds	r3, #76	; 0x4c
 800d52a:	4a16      	ldr	r2, [pc, #88]	; (800d584 <vTaskStartScheduler+0xd8>)
 800d52c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d52e:	4b16      	ldr	r3, [pc, #88]	; (800d588 <vTaskStartScheduler+0xdc>)
 800d530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d534:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d536:	4b15      	ldr	r3, [pc, #84]	; (800d58c <vTaskStartScheduler+0xe0>)
 800d538:	2201      	movs	r2, #1
 800d53a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d53c:	4b14      	ldr	r3, [pc, #80]	; (800d590 <vTaskStartScheduler+0xe4>)
 800d53e:	2200      	movs	r2, #0
 800d540:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d542:	f001 facd 	bl	800eae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d546:	e010      	b.n	800d56a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d54e:	d10c      	bne.n	800d56a <vTaskStartScheduler+0xbe>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	b672      	cpsid	i
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	b662      	cpsie	i
 800d564:	60fb      	str	r3, [r7, #12]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <vTaskStartScheduler+0xbc>
}
 800d56a:	bf00      	nop
 800d56c:	3718      	adds	r7, #24
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	0800fd80 	.word	0x0800fd80
 800d578:	0800dbc9 	.word	0x0800dbc9
 800d57c:	20000bb0 	.word	0x20000bb0
 800d580:	20000a8c 	.word	0x20000a8c
 800d584:	20000050 	.word	0x20000050
 800d588:	20000bac 	.word	0x20000bac
 800d58c:	20000b98 	.word	0x20000b98
 800d590:	20000b90 	.word	0x20000b90

0800d594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d594:	b480      	push	{r7}
 800d596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d598:	4b04      	ldr	r3, [pc, #16]	; (800d5ac <vTaskSuspendAll+0x18>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	3301      	adds	r3, #1
 800d59e:	4a03      	ldr	r2, [pc, #12]	; (800d5ac <vTaskSuspendAll+0x18>)
 800d5a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d5a2:	bf00      	nop
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	20000bb4 	.word	0x20000bb4

0800d5b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5be:	4b42      	ldr	r3, [pc, #264]	; (800d6c8 <xTaskResumeAll+0x118>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10c      	bne.n	800d5e0 <xTaskResumeAll+0x30>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	b672      	cpsid	i
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	b662      	cpsie	i
 800d5da:	603b      	str	r3, [r7, #0]
}
 800d5dc:	bf00      	nop
 800d5de:	e7fe      	b.n	800d5de <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d5e0:	f001 fafc 	bl	800ebdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d5e4:	4b38      	ldr	r3, [pc, #224]	; (800d6c8 <xTaskResumeAll+0x118>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	4a37      	ldr	r2, [pc, #220]	; (800d6c8 <xTaskResumeAll+0x118>)
 800d5ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5ee:	4b36      	ldr	r3, [pc, #216]	; (800d6c8 <xTaskResumeAll+0x118>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d161      	bne.n	800d6ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5f6:	4b35      	ldr	r3, [pc, #212]	; (800d6cc <xTaskResumeAll+0x11c>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d05d      	beq.n	800d6ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5fe:	e02e      	b.n	800d65e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d600:	4b33      	ldr	r3, [pc, #204]	; (800d6d0 <xTaskResumeAll+0x120>)
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3318      	adds	r3, #24
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fe fde9 	bl	800c1e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3304      	adds	r3, #4
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fde4 	bl	800c1e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d620:	2201      	movs	r2, #1
 800d622:	409a      	lsls	r2, r3
 800d624:	4b2b      	ldr	r3, [pc, #172]	; (800d6d4 <xTaskResumeAll+0x124>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4313      	orrs	r3, r2
 800d62a:	4a2a      	ldr	r2, [pc, #168]	; (800d6d4 <xTaskResumeAll+0x124>)
 800d62c:	6013      	str	r3, [r2, #0]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d632:	4613      	mov	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	4a27      	ldr	r2, [pc, #156]	; (800d6d8 <xTaskResumeAll+0x128>)
 800d63c:	441a      	add	r2, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3304      	adds	r3, #4
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f7fe fd70 	bl	800c12a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64e:	4b23      	ldr	r3, [pc, #140]	; (800d6dc <xTaskResumeAll+0x12c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d654:	429a      	cmp	r2, r3
 800d656:	d302      	bcc.n	800d65e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d658:	4b21      	ldr	r3, [pc, #132]	; (800d6e0 <xTaskResumeAll+0x130>)
 800d65a:	2201      	movs	r2, #1
 800d65c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d65e:	4b1c      	ldr	r3, [pc, #112]	; (800d6d0 <xTaskResumeAll+0x120>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1cc      	bne.n	800d600 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d66c:	f000 fb68 	bl	800dd40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d670:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <xTaskResumeAll+0x134>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d010      	beq.n	800d69e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d67c:	f000 f846 	bl	800d70c <xTaskIncrementTick>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d686:	4b16      	ldr	r3, [pc, #88]	; (800d6e0 <xTaskResumeAll+0x130>)
 800d688:	2201      	movs	r2, #1
 800d68a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3b01      	subs	r3, #1
 800d690:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1f1      	bne.n	800d67c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800d698:	4b12      	ldr	r3, [pc, #72]	; (800d6e4 <xTaskResumeAll+0x134>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d69e:	4b10      	ldr	r3, [pc, #64]	; (800d6e0 <xTaskResumeAll+0x130>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d009      	beq.n	800d6ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6aa:	4b0f      	ldr	r3, [pc, #60]	; (800d6e8 <xTaskResumeAll+0x138>)
 800d6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6ba:	f001 fac3 	bl	800ec44 <vPortExitCritical>

	return xAlreadyYielded;
 800d6be:	68bb      	ldr	r3, [r7, #8]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	20000bb4 	.word	0x20000bb4
 800d6cc:	20000b8c 	.word	0x20000b8c
 800d6d0:	20000b4c 	.word	0x20000b4c
 800d6d4:	20000b94 	.word	0x20000b94
 800d6d8:	20000a90 	.word	0x20000a90
 800d6dc:	20000a8c 	.word	0x20000a8c
 800d6e0:	20000ba0 	.word	0x20000ba0
 800d6e4:	20000b9c 	.word	0x20000b9c
 800d6e8:	e000ed04 	.word	0xe000ed04

0800d6ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d6f2:	4b05      	ldr	r3, [pc, #20]	; (800d708 <xTaskGetTickCount+0x1c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d6f8:	687b      	ldr	r3, [r7, #4]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	20000b90 	.word	0x20000b90

0800d70c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d716:	4b4f      	ldr	r3, [pc, #316]	; (800d854 <xTaskIncrementTick+0x148>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f040 808a 	bne.w	800d834 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d720:	4b4d      	ldr	r3, [pc, #308]	; (800d858 <xTaskIncrementTick+0x14c>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3301      	adds	r3, #1
 800d726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d728:	4a4b      	ldr	r2, [pc, #300]	; (800d858 <xTaskIncrementTick+0x14c>)
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d122      	bne.n	800d77a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d734:	4b49      	ldr	r3, [pc, #292]	; (800d85c <xTaskIncrementTick+0x150>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00c      	beq.n	800d758 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	b672      	cpsid	i
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	b662      	cpsie	i
 800d752:	603b      	str	r3, [r7, #0]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <xTaskIncrementTick+0x4a>
 800d758:	4b40      	ldr	r3, [pc, #256]	; (800d85c <xTaskIncrementTick+0x150>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	60fb      	str	r3, [r7, #12]
 800d75e:	4b40      	ldr	r3, [pc, #256]	; (800d860 <xTaskIncrementTick+0x154>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a3e      	ldr	r2, [pc, #248]	; (800d85c <xTaskIncrementTick+0x150>)
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	4a3e      	ldr	r2, [pc, #248]	; (800d860 <xTaskIncrementTick+0x154>)
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	4b3d      	ldr	r3, [pc, #244]	; (800d864 <xTaskIncrementTick+0x158>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3301      	adds	r3, #1
 800d772:	4a3c      	ldr	r2, [pc, #240]	; (800d864 <xTaskIncrementTick+0x158>)
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	f000 fae3 	bl	800dd40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d77a:	4b3b      	ldr	r3, [pc, #236]	; (800d868 <xTaskIncrementTick+0x15c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	693a      	ldr	r2, [r7, #16]
 800d780:	429a      	cmp	r2, r3
 800d782:	d348      	bcc.n	800d816 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d784:	4b35      	ldr	r3, [pc, #212]	; (800d85c <xTaskIncrementTick+0x150>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d104      	bne.n	800d798 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d78e:	4b36      	ldr	r3, [pc, #216]	; (800d868 <xTaskIncrementTick+0x15c>)
 800d790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d794:	601a      	str	r2, [r3, #0]
					break;
 800d796:	e03e      	b.n	800d816 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d798:	4b30      	ldr	r3, [pc, #192]	; (800d85c <xTaskIncrementTick+0x150>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d203      	bcs.n	800d7b8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d7b0:	4a2d      	ldr	r2, [pc, #180]	; (800d868 <xTaskIncrementTick+0x15c>)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d7b6:	e02e      	b.n	800d816 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fe fd11 	bl	800c1e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d004      	beq.n	800d7d4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	3318      	adds	r3, #24
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fd08 	bl	800c1e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	2201      	movs	r2, #1
 800d7da:	409a      	lsls	r2, r3
 800d7dc:	4b23      	ldr	r3, [pc, #140]	; (800d86c <xTaskIncrementTick+0x160>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	4a22      	ldr	r2, [pc, #136]	; (800d86c <xTaskIncrementTick+0x160>)
 800d7e4:	6013      	str	r3, [r2, #0]
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4413      	add	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4a1f      	ldr	r2, [pc, #124]	; (800d870 <xTaskIncrementTick+0x164>)
 800d7f4:	441a      	add	r2, r3
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	f7fe fc94 	bl	800c12a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d806:	4b1b      	ldr	r3, [pc, #108]	; (800d874 <xTaskIncrementTick+0x168>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d3b9      	bcc.n	800d784 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d814:	e7b6      	b.n	800d784 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d816:	4b17      	ldr	r3, [pc, #92]	; (800d874 <xTaskIncrementTick+0x168>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	4914      	ldr	r1, [pc, #80]	; (800d870 <xTaskIncrementTick+0x164>)
 800d81e:	4613      	mov	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4413      	add	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	440b      	add	r3, r1
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d907      	bls.n	800d83e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800d82e:	2301      	movs	r3, #1
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	e004      	b.n	800d83e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d834:	4b10      	ldr	r3, [pc, #64]	; (800d878 <xTaskIncrementTick+0x16c>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3301      	adds	r3, #1
 800d83a:	4a0f      	ldr	r2, [pc, #60]	; (800d878 <xTaskIncrementTick+0x16c>)
 800d83c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d83e:	4b0f      	ldr	r3, [pc, #60]	; (800d87c <xTaskIncrementTick+0x170>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d001      	beq.n	800d84a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800d846:	2301      	movs	r3, #1
 800d848:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d84a:	697b      	ldr	r3, [r7, #20]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	20000bb4 	.word	0x20000bb4
 800d858:	20000b90 	.word	0x20000b90
 800d85c:	20000b44 	.word	0x20000b44
 800d860:	20000b48 	.word	0x20000b48
 800d864:	20000ba4 	.word	0x20000ba4
 800d868:	20000bac 	.word	0x20000bac
 800d86c:	20000b94 	.word	0x20000b94
 800d870:	20000a90 	.word	0x20000a90
 800d874:	20000a8c 	.word	0x20000a8c
 800d878:	20000b9c 	.word	0x20000b9c
 800d87c:	20000ba0 	.word	0x20000ba0

0800d880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d886:	4b2a      	ldr	r3, [pc, #168]	; (800d930 <vTaskSwitchContext+0xb0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d003      	beq.n	800d896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d88e:	4b29      	ldr	r3, [pc, #164]	; (800d934 <vTaskSwitchContext+0xb4>)
 800d890:	2201      	movs	r2, #1
 800d892:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d894:	e046      	b.n	800d924 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d896:	4b27      	ldr	r3, [pc, #156]	; (800d934 <vTaskSwitchContext+0xb4>)
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d89c:	4b26      	ldr	r3, [pc, #152]	; (800d938 <vTaskSwitchContext+0xb8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	fab3 f383 	clz	r3, r3
 800d8a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d8aa:	7afb      	ldrb	r3, [r7, #11]
 800d8ac:	f1c3 031f 	rsb	r3, r3, #31
 800d8b0:	617b      	str	r3, [r7, #20]
 800d8b2:	4922      	ldr	r1, [pc, #136]	; (800d93c <vTaskSwitchContext+0xbc>)
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	440b      	add	r3, r1
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10c      	bne.n	800d8e0 <vTaskSwitchContext+0x60>
	__asm volatile
 800d8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ca:	b672      	cpsid	i
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	b662      	cpsie	i
 800d8da:	607b      	str	r3, [r7, #4]
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <vTaskSwitchContext+0x5e>
 800d8e0:	697a      	ldr	r2, [r7, #20]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	4413      	add	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	4a14      	ldr	r2, [pc, #80]	; (800d93c <vTaskSwitchContext+0xbc>)
 800d8ec:	4413      	add	r3, r2
 800d8ee:	613b      	str	r3, [r7, #16]
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	685a      	ldr	r2, [r3, #4]
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	605a      	str	r2, [r3, #4]
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	3308      	adds	r3, #8
 800d902:	429a      	cmp	r2, r3
 800d904:	d104      	bne.n	800d910 <vTaskSwitchContext+0x90>
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	605a      	str	r2, [r3, #4]
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	4a0a      	ldr	r2, [pc, #40]	; (800d940 <vTaskSwitchContext+0xc0>)
 800d918:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d91a:	4b09      	ldr	r3, [pc, #36]	; (800d940 <vTaskSwitchContext+0xc0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	334c      	adds	r3, #76	; 0x4c
 800d920:	4a08      	ldr	r2, [pc, #32]	; (800d944 <vTaskSwitchContext+0xc4>)
 800d922:	6013      	str	r3, [r2, #0]
}
 800d924:	bf00      	nop
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	20000bb4 	.word	0x20000bb4
 800d934:	20000ba0 	.word	0x20000ba0
 800d938:	20000b94 	.word	0x20000b94
 800d93c:	20000a90 	.word	0x20000a90
 800d940:	20000a8c 	.word	0x20000a8c
 800d944:	20000050 	.word	0x20000050

0800d948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10c      	bne.n	800d972 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	b672      	cpsid	i
 800d95e:	f383 8811 	msr	BASEPRI, r3
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	f3bf 8f4f 	dsb	sy
 800d96a:	b662      	cpsie	i
 800d96c:	60fb      	str	r3, [r7, #12]
}
 800d96e:	bf00      	nop
 800d970:	e7fe      	b.n	800d970 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d972:	4b07      	ldr	r3, [pc, #28]	; (800d990 <vTaskPlaceOnEventList+0x48>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3318      	adds	r3, #24
 800d978:	4619      	mov	r1, r3
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7fe fbf9 	bl	800c172 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d980:	2101      	movs	r1, #1
 800d982:	6838      	ldr	r0, [r7, #0]
 800d984:	f000 fbd6 	bl	800e134 <prvAddCurrentTaskToDelayedList>
}
 800d988:	bf00      	nop
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000a8c 	.word	0x20000a8c

0800d994 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10c      	bne.n	800d9c0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	b672      	cpsid	i
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	b662      	cpsie	i
 800d9ba:	617b      	str	r3, [r7, #20]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9c0:	4b0a      	ldr	r3, [pc, #40]	; (800d9ec <vTaskPlaceOnEventListRestricted+0x58>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	3318      	adds	r3, #24
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7fe fbae 	bl	800c12a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800d9d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9da:	6879      	ldr	r1, [r7, #4]
 800d9dc:	68b8      	ldr	r0, [r7, #8]
 800d9de:	f000 fba9 	bl	800e134 <prvAddCurrentTaskToDelayedList>
	}
 800d9e2:	bf00      	nop
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000a8c 	.word	0x20000a8c

0800d9f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10c      	bne.n	800da20 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0a:	b672      	cpsid	i
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	b662      	cpsie	i
 800da1a:	60fb      	str	r3, [r7, #12]
}
 800da1c:	bf00      	nop
 800da1e:	e7fe      	b.n	800da1e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	3318      	adds	r3, #24
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe fbdd 	bl	800c1e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da2a:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <xTaskRemoveFromEventList+0xb0>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d11c      	bne.n	800da6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	3304      	adds	r3, #4
 800da36:	4618      	mov	r0, r3
 800da38:	f7fe fbd4 	bl	800c1e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	2201      	movs	r2, #1
 800da42:	409a      	lsls	r2, r3
 800da44:	4b17      	ldr	r3, [pc, #92]	; (800daa4 <xTaskRemoveFromEventList+0xb4>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4313      	orrs	r3, r2
 800da4a:	4a16      	ldr	r2, [pc, #88]	; (800daa4 <xTaskRemoveFromEventList+0xb4>)
 800da4c:	6013      	str	r3, [r2, #0]
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da52:	4613      	mov	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4a13      	ldr	r2, [pc, #76]	; (800daa8 <xTaskRemoveFromEventList+0xb8>)
 800da5c:	441a      	add	r2, r3
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	3304      	adds	r3, #4
 800da62:	4619      	mov	r1, r3
 800da64:	4610      	mov	r0, r2
 800da66:	f7fe fb60 	bl	800c12a <vListInsertEnd>
 800da6a:	e005      	b.n	800da78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	3318      	adds	r3, #24
 800da70:	4619      	mov	r1, r3
 800da72:	480e      	ldr	r0, [pc, #56]	; (800daac <xTaskRemoveFromEventList+0xbc>)
 800da74:	f7fe fb59 	bl	800c12a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7c:	4b0c      	ldr	r3, [pc, #48]	; (800dab0 <xTaskRemoveFromEventList+0xc0>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da82:	429a      	cmp	r2, r3
 800da84:	d905      	bls.n	800da92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da86:	2301      	movs	r3, #1
 800da88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800da8a:	4b0a      	ldr	r3, [pc, #40]	; (800dab4 <xTaskRemoveFromEventList+0xc4>)
 800da8c:	2201      	movs	r2, #1
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	e001      	b.n	800da96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800da92:	2300      	movs	r3, #0
 800da94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800da96:	697b      	ldr	r3, [r7, #20]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3718      	adds	r7, #24
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20000bb4 	.word	0x20000bb4
 800daa4:	20000b94 	.word	0x20000b94
 800daa8:	20000a90 	.word	0x20000a90
 800daac:	20000b4c 	.word	0x20000b4c
 800dab0:	20000a8c 	.word	0x20000a8c
 800dab4:	20000ba0 	.word	0x20000ba0

0800dab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dab8:	b480      	push	{r7}
 800daba:	b083      	sub	sp, #12
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dac0:	4b06      	ldr	r3, [pc, #24]	; (800dadc <vTaskInternalSetTimeOutState+0x24>)
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dac8:	4b05      	ldr	r3, [pc, #20]	; (800dae0 <vTaskInternalSetTimeOutState+0x28>)
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	605a      	str	r2, [r3, #4]
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr
 800dadc:	20000ba4 	.word	0x20000ba4
 800dae0:	20000b90 	.word	0x20000b90

0800dae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b088      	sub	sp, #32
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10c      	bne.n	800db0e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	b672      	cpsid	i
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	b662      	cpsie	i
 800db08:	613b      	str	r3, [r7, #16]
}
 800db0a:	bf00      	nop
 800db0c:	e7fe      	b.n	800db0c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10c      	bne.n	800db2e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	b672      	cpsid	i
 800db1a:	f383 8811 	msr	BASEPRI, r3
 800db1e:	f3bf 8f6f 	isb	sy
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	b662      	cpsie	i
 800db28:	60fb      	str	r3, [r7, #12]
}
 800db2a:	bf00      	nop
 800db2c:	e7fe      	b.n	800db2c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800db2e:	f001 f855 	bl	800ebdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db32:	4b1d      	ldr	r3, [pc, #116]	; (800dba8 <xTaskCheckForTimeOut+0xc4>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	69ba      	ldr	r2, [r7, #24]
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db4a:	d102      	bne.n	800db52 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db4c:	2300      	movs	r3, #0
 800db4e:	61fb      	str	r3, [r7, #28]
 800db50:	e023      	b.n	800db9a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	4b15      	ldr	r3, [pc, #84]	; (800dbac <xTaskCheckForTimeOut+0xc8>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d007      	beq.n	800db6e <xTaskCheckForTimeOut+0x8a>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	69ba      	ldr	r2, [r7, #24]
 800db64:	429a      	cmp	r2, r3
 800db66:	d302      	bcc.n	800db6e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db68:	2301      	movs	r3, #1
 800db6a:	61fb      	str	r3, [r7, #28]
 800db6c:	e015      	b.n	800db9a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	697a      	ldr	r2, [r7, #20]
 800db74:	429a      	cmp	r2, r3
 800db76:	d20b      	bcs.n	800db90 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	1ad2      	subs	r2, r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff ff97 	bl	800dab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800db8a:	2300      	movs	r3, #0
 800db8c:	61fb      	str	r3, [r7, #28]
 800db8e:	e004      	b.n	800db9a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	2200      	movs	r2, #0
 800db94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800db96:	2301      	movs	r3, #1
 800db98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800db9a:	f001 f853 	bl	800ec44 <vPortExitCritical>

	return xReturn;
 800db9e:	69fb      	ldr	r3, [r7, #28]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3720      	adds	r7, #32
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	20000b90 	.word	0x20000b90
 800dbac:	20000ba4 	.word	0x20000ba4

0800dbb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dbb4:	4b03      	ldr	r3, [pc, #12]	; (800dbc4 <vTaskMissedYield+0x14>)
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	601a      	str	r2, [r3, #0]
}
 800dbba:	bf00      	nop
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	20000ba0 	.word	0x20000ba0

0800dbc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dbd0:	f000 f852 	bl	800dc78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dbd4:	4b06      	ldr	r3, [pc, #24]	; (800dbf0 <prvIdleTask+0x28>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d9f9      	bls.n	800dbd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <prvIdleTask+0x2c>)
 800dbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dbec:	e7f0      	b.n	800dbd0 <prvIdleTask+0x8>
 800dbee:	bf00      	nop
 800dbf0:	20000a90 	.word	0x20000a90
 800dbf4:	e000ed04 	.word	0xe000ed04

0800dbf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
 800dc02:	e00c      	b.n	800dc1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	4613      	mov	r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4413      	add	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4a12      	ldr	r2, [pc, #72]	; (800dc58 <prvInitialiseTaskLists+0x60>)
 800dc10:	4413      	add	r3, r2
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fe fa5c 	bl	800c0d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	607b      	str	r3, [r7, #4]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b06      	cmp	r3, #6
 800dc22:	d9ef      	bls.n	800dc04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc24:	480d      	ldr	r0, [pc, #52]	; (800dc5c <prvInitialiseTaskLists+0x64>)
 800dc26:	f7fe fa53 	bl	800c0d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc2a:	480d      	ldr	r0, [pc, #52]	; (800dc60 <prvInitialiseTaskLists+0x68>)
 800dc2c:	f7fe fa50 	bl	800c0d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc30:	480c      	ldr	r0, [pc, #48]	; (800dc64 <prvInitialiseTaskLists+0x6c>)
 800dc32:	f7fe fa4d 	bl	800c0d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc36:	480c      	ldr	r0, [pc, #48]	; (800dc68 <prvInitialiseTaskLists+0x70>)
 800dc38:	f7fe fa4a 	bl	800c0d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc3c:	480b      	ldr	r0, [pc, #44]	; (800dc6c <prvInitialiseTaskLists+0x74>)
 800dc3e:	f7fe fa47 	bl	800c0d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc42:	4b0b      	ldr	r3, [pc, #44]	; (800dc70 <prvInitialiseTaskLists+0x78>)
 800dc44:	4a05      	ldr	r2, [pc, #20]	; (800dc5c <prvInitialiseTaskLists+0x64>)
 800dc46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc48:	4b0a      	ldr	r3, [pc, #40]	; (800dc74 <prvInitialiseTaskLists+0x7c>)
 800dc4a:	4a05      	ldr	r2, [pc, #20]	; (800dc60 <prvInitialiseTaskLists+0x68>)
 800dc4c:	601a      	str	r2, [r3, #0]
}
 800dc4e:	bf00      	nop
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20000a90 	.word	0x20000a90
 800dc5c:	20000b1c 	.word	0x20000b1c
 800dc60:	20000b30 	.word	0x20000b30
 800dc64:	20000b4c 	.word	0x20000b4c
 800dc68:	20000b60 	.word	0x20000b60
 800dc6c:	20000b78 	.word	0x20000b78
 800dc70:	20000b44 	.word	0x20000b44
 800dc74:	20000b48 	.word	0x20000b48

0800dc78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc7e:	e019      	b.n	800dcb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dc80:	f000 ffac 	bl	800ebdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc84:	4b10      	ldr	r3, [pc, #64]	; (800dcc8 <prvCheckTasksWaitingTermination+0x50>)
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	3304      	adds	r3, #4
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fe faa7 	bl	800c1e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dc96:	4b0d      	ldr	r3, [pc, #52]	; (800dccc <prvCheckTasksWaitingTermination+0x54>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	4a0b      	ldr	r2, [pc, #44]	; (800dccc <prvCheckTasksWaitingTermination+0x54>)
 800dc9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dca0:	4b0b      	ldr	r3, [pc, #44]	; (800dcd0 <prvCheckTasksWaitingTermination+0x58>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3b01      	subs	r3, #1
 800dca6:	4a0a      	ldr	r2, [pc, #40]	; (800dcd0 <prvCheckTasksWaitingTermination+0x58>)
 800dca8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcaa:	f000 ffcb 	bl	800ec44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f810 	bl	800dcd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcb4:	4b06      	ldr	r3, [pc, #24]	; (800dcd0 <prvCheckTasksWaitingTermination+0x58>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1e1      	bne.n	800dc80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dcbc:	bf00      	nop
 800dcbe:	bf00      	nop
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	20000b60 	.word	0x20000b60
 800dccc:	20000b8c 	.word	0x20000b8c
 800dcd0:	20000b74 	.word	0x20000b74

0800dcd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	334c      	adds	r3, #76	; 0x4c
 800dce0:	4618      	mov	r0, r3
 800dce2:	f001 fb35 	bl	800f350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d108      	bne.n	800dd02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f001 f967 	bl	800efc8 <vPortFree>
				vPortFree( pxTCB );
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f001 f964 	bl	800efc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd00:	e01a      	b.n	800dd38 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d103      	bne.n	800dd14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f001 f95b 	bl	800efc8 <vPortFree>
	}
 800dd12:	e011      	b.n	800dd38 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d00c      	beq.n	800dd38 <prvDeleteTCB+0x64>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	b672      	cpsid	i
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	b662      	cpsie	i
 800dd32:	60fb      	str	r3, [r7, #12]
}
 800dd34:	bf00      	nop
 800dd36:	e7fe      	b.n	800dd36 <prvDeleteTCB+0x62>
	}
 800dd38:	bf00      	nop
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <prvResetNextTaskUnblockTime+0x38>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d104      	bne.n	800dd5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd50:	4b0a      	ldr	r3, [pc, #40]	; (800dd7c <prvResetNextTaskUnblockTime+0x3c>)
 800dd52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd58:	e008      	b.n	800dd6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd5a:	4b07      	ldr	r3, [pc, #28]	; (800dd78 <prvResetNextTaskUnblockTime+0x38>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	4a04      	ldr	r2, [pc, #16]	; (800dd7c <prvResetNextTaskUnblockTime+0x3c>)
 800dd6a:	6013      	str	r3, [r2, #0]
}
 800dd6c:	bf00      	nop
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	20000b44 	.word	0x20000b44
 800dd7c:	20000bac 	.word	0x20000bac

0800dd80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dd86:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <xTaskGetSchedulerState+0x34>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	607b      	str	r3, [r7, #4]
 800dd92:	e008      	b.n	800dda6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd94:	4b08      	ldr	r3, [pc, #32]	; (800ddb8 <xTaskGetSchedulerState+0x38>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d102      	bne.n	800dda2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	607b      	str	r3, [r7, #4]
 800dda0:	e001      	b.n	800dda6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dda2:	2300      	movs	r3, #0
 800dda4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dda6:	687b      	ldr	r3, [r7, #4]
	}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	20000b98 	.word	0x20000b98
 800ddb8:	20000bb4 	.word	0x20000bb4

0800ddbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d069      	beq.n	800dea6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd6:	4b36      	ldr	r3, [pc, #216]	; (800deb0 <xTaskPriorityInherit+0xf4>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d259      	bcs.n	800de94 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	699b      	ldr	r3, [r3, #24]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	db06      	blt.n	800ddf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dde8:	4b31      	ldr	r3, [pc, #196]	; (800deb0 <xTaskPriorityInherit+0xf4>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddee:	f1c3 0207 	rsb	r2, r3, #7
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	6959      	ldr	r1, [r3, #20]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfe:	4613      	mov	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4a2b      	ldr	r2, [pc, #172]	; (800deb4 <xTaskPriorityInherit+0xf8>)
 800de08:	4413      	add	r3, r2
 800de0a:	4299      	cmp	r1, r3
 800de0c:	d13a      	bne.n	800de84 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	3304      	adds	r3, #4
 800de12:	4618      	mov	r0, r3
 800de14:	f7fe f9e6 	bl	800c1e4 <uxListRemove>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d115      	bne.n	800de4a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de22:	4924      	ldr	r1, [pc, #144]	; (800deb4 <xTaskPriorityInherit+0xf8>)
 800de24:	4613      	mov	r3, r2
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	4413      	add	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	440b      	add	r3, r1
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10a      	bne.n	800de4a <xTaskPriorityInherit+0x8e>
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de38:	2201      	movs	r2, #1
 800de3a:	fa02 f303 	lsl.w	r3, r2, r3
 800de3e:	43da      	mvns	r2, r3
 800de40:	4b1d      	ldr	r3, [pc, #116]	; (800deb8 <xTaskPriorityInherit+0xfc>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4013      	ands	r3, r2
 800de46:	4a1c      	ldr	r2, [pc, #112]	; (800deb8 <xTaskPriorityInherit+0xfc>)
 800de48:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de4a:	4b19      	ldr	r3, [pc, #100]	; (800deb0 <xTaskPriorityInherit+0xf4>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de58:	2201      	movs	r2, #1
 800de5a:	409a      	lsls	r2, r3
 800de5c:	4b16      	ldr	r3, [pc, #88]	; (800deb8 <xTaskPriorityInherit+0xfc>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4313      	orrs	r3, r2
 800de62:	4a15      	ldr	r2, [pc, #84]	; (800deb8 <xTaskPriorityInherit+0xfc>)
 800de64:	6013      	str	r3, [r2, #0]
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6a:	4613      	mov	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4413      	add	r3, r2
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	4a10      	ldr	r2, [pc, #64]	; (800deb4 <xTaskPriorityInherit+0xf8>)
 800de74:	441a      	add	r2, r3
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	3304      	adds	r3, #4
 800de7a:	4619      	mov	r1, r3
 800de7c:	4610      	mov	r0, r2
 800de7e:	f7fe f954 	bl	800c12a <vListInsertEnd>
 800de82:	e004      	b.n	800de8e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <xTaskPriorityInherit+0xf4>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800de8e:	2301      	movs	r3, #1
 800de90:	60fb      	str	r3, [r7, #12]
 800de92:	e008      	b.n	800dea6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de98:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <xTaskPriorityInherit+0xf4>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d201      	bcs.n	800dea6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dea2:	2301      	movs	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dea6:	68fb      	ldr	r3, [r7, #12]
	}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	20000a8c 	.word	0x20000a8c
 800deb4:	20000a90 	.word	0x20000a90
 800deb8:	20000b94 	.word	0x20000b94

0800debc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dec8:	2300      	movs	r3, #0
 800deca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d072      	beq.n	800dfb8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ded2:	4b3c      	ldr	r3, [pc, #240]	; (800dfc4 <xTaskPriorityDisinherit+0x108>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	693a      	ldr	r2, [r7, #16]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d00c      	beq.n	800def6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	b672      	cpsid	i
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	b662      	cpsie	i
 800def0:	60fb      	str	r3, [r7, #12]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10c      	bne.n	800df18 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	b672      	cpsid	i
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	b662      	cpsie	i
 800df12:	60bb      	str	r3, [r7, #8]
}
 800df14:	bf00      	nop
 800df16:	e7fe      	b.n	800df16 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df1c:	1e5a      	subs	r2, r3, #1
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d044      	beq.n	800dfb8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df32:	2b00      	cmp	r3, #0
 800df34:	d140      	bne.n	800dfb8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	3304      	adds	r3, #4
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe f952 	bl	800c1e4 <uxListRemove>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d115      	bne.n	800df72 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4a:	491f      	ldr	r1, [pc, #124]	; (800dfc8 <xTaskPriorityDisinherit+0x10c>)
 800df4c:	4613      	mov	r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	440b      	add	r3, r1
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10a      	bne.n	800df72 <xTaskPriorityDisinherit+0xb6>
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df60:	2201      	movs	r2, #1
 800df62:	fa02 f303 	lsl.w	r3, r2, r3
 800df66:	43da      	mvns	r2, r3
 800df68:	4b18      	ldr	r3, [pc, #96]	; (800dfcc <xTaskPriorityDisinherit+0x110>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4013      	ands	r3, r2
 800df6e:	4a17      	ldr	r2, [pc, #92]	; (800dfcc <xTaskPriorityDisinherit+0x110>)
 800df70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7e:	f1c3 0207 	rsb	r2, r3, #7
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8a:	2201      	movs	r2, #1
 800df8c:	409a      	lsls	r2, r3
 800df8e:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <xTaskPriorityDisinherit+0x110>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4313      	orrs	r3, r2
 800df94:	4a0d      	ldr	r2, [pc, #52]	; (800dfcc <xTaskPriorityDisinherit+0x110>)
 800df96:	6013      	str	r3, [r2, #0]
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9c:	4613      	mov	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4a08      	ldr	r2, [pc, #32]	; (800dfc8 <xTaskPriorityDisinherit+0x10c>)
 800dfa6:	441a      	add	r2, r3
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	4619      	mov	r1, r3
 800dfae:	4610      	mov	r0, r2
 800dfb0:	f7fe f8bb 	bl	800c12a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfb8:	697b      	ldr	r3, [r7, #20]
	}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3718      	adds	r7, #24
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20000a8c 	.word	0x20000a8c
 800dfc8:	20000a90 	.word	0x20000a90
 800dfcc:	20000b94 	.word	0x20000b94

0800dfd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b088      	sub	sp, #32
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 8087 	beq.w	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10c      	bne.n	800e00c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	b672      	cpsid	i
 800dff8:	f383 8811 	msr	BASEPRI, r3
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	b662      	cpsie	i
 800e006:	60fb      	str	r3, [r7, #12]
}
 800e008:	bf00      	nop
 800e00a:	e7fe      	b.n	800e00a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	429a      	cmp	r2, r3
 800e014:	d902      	bls.n	800e01c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	61fb      	str	r3, [r7, #28]
 800e01a:	e002      	b.n	800e022 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e020:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e026:	69fa      	ldr	r2, [r7, #28]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d065      	beq.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e030:	697a      	ldr	r2, [r7, #20]
 800e032:	429a      	cmp	r2, r3
 800e034:	d160      	bne.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e036:	4b32      	ldr	r3, [pc, #200]	; (800e100 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	69ba      	ldr	r2, [r7, #24]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d10c      	bne.n	800e05a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	b672      	cpsid	i
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	b662      	cpsie	i
 800e054:	60bb      	str	r3, [r7, #8]
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	69fa      	ldr	r2, [r7, #28]
 800e064:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	db04      	blt.n	800e078 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	f1c3 0207 	rsb	r2, r3, #7
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	6959      	ldr	r1, [r3, #20]
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	4613      	mov	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4a1f      	ldr	r2, [pc, #124]	; (800e104 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e088:	4413      	add	r3, r2
 800e08a:	4299      	cmp	r1, r3
 800e08c:	d134      	bne.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	3304      	adds	r3, #4
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe f8a6 	bl	800c1e4 <uxListRemove>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d115      	bne.n	800e0ca <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a2:	4918      	ldr	r1, [pc, #96]	; (800e104 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4413      	add	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	440b      	add	r3, r1
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10a      	bne.n	800e0ca <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e0be:	43da      	mvns	r2, r3
 800e0c0:	4b11      	ldr	r3, [pc, #68]	; (800e108 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	4a10      	ldr	r2, [pc, #64]	; (800e108 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e0c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	409a      	lsls	r2, r3
 800e0d2:	4b0d      	ldr	r3, [pc, #52]	; (800e108 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	4a0b      	ldr	r2, [pc, #44]	; (800e108 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e0da:	6013      	str	r3, [r2, #0]
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4a06      	ldr	r2, [pc, #24]	; (800e104 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e0ea:	441a      	add	r2, r3
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	3304      	adds	r3, #4
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	f7fe f819 	bl	800c12a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0f8:	bf00      	nop
 800e0fa:	3720      	adds	r7, #32
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	20000a8c 	.word	0x20000a8c
 800e104:	20000a90 	.word	0x20000a90
 800e108:	20000b94 	.word	0x20000b94

0800e10c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e10c:	b480      	push	{r7}
 800e10e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e110:	4b07      	ldr	r3, [pc, #28]	; (800e130 <pvTaskIncrementMutexHeldCount+0x24>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e118:	4b05      	ldr	r3, [pc, #20]	; (800e130 <pvTaskIncrementMutexHeldCount+0x24>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e11e:	3201      	adds	r2, #1
 800e120:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e122:	4b03      	ldr	r3, [pc, #12]	; (800e130 <pvTaskIncrementMutexHeldCount+0x24>)
 800e124:	681b      	ldr	r3, [r3, #0]
	}
 800e126:	4618      	mov	r0, r3
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	20000a8c 	.word	0x20000a8c

0800e134 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e13e:	4b29      	ldr	r3, [pc, #164]	; (800e1e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e144:	4b28      	ldr	r3, [pc, #160]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3304      	adds	r3, #4
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe f84a 	bl	800c1e4 <uxListRemove>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10b      	bne.n	800e16e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e156:	4b24      	ldr	r3, [pc, #144]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15c:	2201      	movs	r2, #1
 800e15e:	fa02 f303 	lsl.w	r3, r2, r3
 800e162:	43da      	mvns	r2, r3
 800e164:	4b21      	ldr	r3, [pc, #132]	; (800e1ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4013      	ands	r3, r2
 800e16a:	4a20      	ldr	r2, [pc, #128]	; (800e1ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800e16c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e174:	d10a      	bne.n	800e18c <prvAddCurrentTaskToDelayedList+0x58>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d007      	beq.n	800e18c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e17c:	4b1a      	ldr	r3, [pc, #104]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	3304      	adds	r3, #4
 800e182:	4619      	mov	r1, r3
 800e184:	481a      	ldr	r0, [pc, #104]	; (800e1f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e186:	f7fd ffd0 	bl	800c12a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e18a:	e026      	b.n	800e1da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4413      	add	r3, r2
 800e192:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e194:	4b14      	ldr	r3, [pc, #80]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d209      	bcs.n	800e1b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1a4:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	4b0f      	ldr	r3, [pc, #60]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f7fd ffde 	bl	800c172 <vListInsert>
}
 800e1b6:	e010      	b.n	800e1da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1b8:	4b0f      	ldr	r3, [pc, #60]	; (800e1f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	4b0a      	ldr	r3, [pc, #40]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3304      	adds	r3, #4
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	f7fd ffd4 	bl	800c172 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e1ca:	4b0c      	ldr	r3, [pc, #48]	; (800e1fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d202      	bcs.n	800e1da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e1d4:	4a09      	ldr	r2, [pc, #36]	; (800e1fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	6013      	str	r3, [r2, #0]
}
 800e1da:	bf00      	nop
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	20000b90 	.word	0x20000b90
 800e1e8:	20000a8c 	.word	0x20000a8c
 800e1ec:	20000b94 	.word	0x20000b94
 800e1f0:	20000b78 	.word	0x20000b78
 800e1f4:	20000b48 	.word	0x20000b48
 800e1f8:	20000b44 	.word	0x20000b44
 800e1fc:	20000bac 	.word	0x20000bac

0800e200 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b08a      	sub	sp, #40	; 0x28
 800e204:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e206:	2300      	movs	r3, #0
 800e208:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e20a:	f000 fb97 	bl	800e93c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e20e:	4b1d      	ldr	r3, [pc, #116]	; (800e284 <xTimerCreateTimerTask+0x84>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d021      	beq.n	800e25a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e216:	2300      	movs	r3, #0
 800e218:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e21a:	2300      	movs	r3, #0
 800e21c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e21e:	1d3a      	adds	r2, r7, #4
 800e220:	f107 0108 	add.w	r1, r7, #8
 800e224:	f107 030c 	add.w	r3, r7, #12
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f2 f9df 	bl	80005ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e22e:	6879      	ldr	r1, [r7, #4]
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	9202      	str	r2, [sp, #8]
 800e236:	9301      	str	r3, [sp, #4]
 800e238:	2302      	movs	r3, #2
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	2300      	movs	r3, #0
 800e23e:	460a      	mov	r2, r1
 800e240:	4911      	ldr	r1, [pc, #68]	; (800e288 <xTimerCreateTimerTask+0x88>)
 800e242:	4812      	ldr	r0, [pc, #72]	; (800e28c <xTimerCreateTimerTask+0x8c>)
 800e244:	f7fe feb8 	bl	800cfb8 <xTaskCreateStatic>
 800e248:	4603      	mov	r3, r0
 800e24a:	4a11      	ldr	r2, [pc, #68]	; (800e290 <xTimerCreateTimerTask+0x90>)
 800e24c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e24e:	4b10      	ldr	r3, [pc, #64]	; (800e290 <xTimerCreateTimerTask+0x90>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d001      	beq.n	800e25a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e256:	2301      	movs	r3, #1
 800e258:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10c      	bne.n	800e27a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	b672      	cpsid	i
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	b662      	cpsie	i
 800e274:	613b      	str	r3, [r7, #16]
}
 800e276:	bf00      	nop
 800e278:	e7fe      	b.n	800e278 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800e27a:	697b      	ldr	r3, [r7, #20]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3718      	adds	r7, #24
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	20000be8 	.word	0x20000be8
 800e288:	0800fd88 	.word	0x0800fd88
 800e28c:	0800e511 	.word	0x0800e511
 800e290:	20000bec 	.word	0x20000bec

0800e294 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e294:	b580      	push	{r7, lr}
 800e296:	b088      	sub	sp, #32
 800e298:	af02      	add	r7, sp, #8
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
 800e2a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e2a2:	2028      	movs	r0, #40	; 0x28
 800e2a4:	f000 fdc6 	bl	800ee34 <pvPortMalloc>
 800e2a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00d      	beq.n	800e2cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	9301      	str	r3, [sp, #4]
 800e2bc:	6a3b      	ldr	r3, [r7, #32]
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	68b9      	ldr	r1, [r7, #8]
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f000 f847 	bl	800e35a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e2cc:	697b      	ldr	r3, [r7, #20]
	}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3718      	adds	r7, #24
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b08a      	sub	sp, #40	; 0x28
 800e2da:	af02      	add	r7, sp, #8
 800e2dc:	60f8      	str	r0, [r7, #12]
 800e2de:	60b9      	str	r1, [r7, #8]
 800e2e0:	607a      	str	r2, [r7, #4]
 800e2e2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e2e4:	2328      	movs	r3, #40	; 0x28
 800e2e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	2b28      	cmp	r3, #40	; 0x28
 800e2ec:	d00c      	beq.n	800e308 <xTimerCreateStatic+0x32>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	b672      	cpsid	i
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	b662      	cpsie	i
 800e302:	61bb      	str	r3, [r7, #24]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e308:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d10c      	bne.n	800e32a <xTimerCreateStatic+0x54>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e314:	b672      	cpsid	i
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	b662      	cpsie	i
 800e324:	617b      	str	r3, [r7, #20]
}
 800e326:	bf00      	nop
 800e328:	e7fe      	b.n	800e328 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00d      	beq.n	800e350 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	2202      	movs	r2, #2
 800e338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	9301      	str	r3, [sp, #4]
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	68b9      	ldr	r1, [r7, #8]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f000 f805 	bl	800e35a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e350:	69fb      	ldr	r3, [r7, #28]
	}
 800e352:	4618      	mov	r0, r3
 800e354:	3720      	adds	r7, #32
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b086      	sub	sp, #24
 800e35e:	af00      	add	r7, sp, #0
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	607a      	str	r2, [r7, #4]
 800e366:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d10c      	bne.n	800e388 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e372:	b672      	cpsid	i
 800e374:	f383 8811 	msr	BASEPRI, r3
 800e378:	f3bf 8f6f 	isb	sy
 800e37c:	f3bf 8f4f 	dsb	sy
 800e380:	b662      	cpsie	i
 800e382:	617b      	str	r3, [r7, #20]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d01e      	beq.n	800e3cc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e38e:	f000 fad5 	bl	800e93c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	6a3a      	ldr	r2, [r7, #32]
 800e3a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fd feae 	bl	800c110 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d008      	beq.n	800e3cc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e3c0:	f043 0304 	orr.w	r3, r3, #4
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e3cc:	bf00      	nop
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08a      	sub	sp, #40	; 0x28
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
 800e3e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10c      	bne.n	800e406 <xTimerGenericCommand+0x32>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	b672      	cpsid	i
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	b662      	cpsie	i
 800e400:	623b      	str	r3, [r7, #32]
}
 800e402:	bf00      	nop
 800e404:	e7fe      	b.n	800e404 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e406:	4b1a      	ldr	r3, [pc, #104]	; (800e470 <xTimerGenericCommand+0x9c>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d02a      	beq.n	800e464 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2b05      	cmp	r3, #5
 800e41e:	dc18      	bgt.n	800e452 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e420:	f7ff fcae 	bl	800dd80 <xTaskGetSchedulerState>
 800e424:	4603      	mov	r3, r0
 800e426:	2b02      	cmp	r3, #2
 800e428:	d109      	bne.n	800e43e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e42a:	4b11      	ldr	r3, [pc, #68]	; (800e470 <xTimerGenericCommand+0x9c>)
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	f107 0114 	add.w	r1, r7, #20
 800e432:	2300      	movs	r3, #0
 800e434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e436:	f7fe f899 	bl	800c56c <xQueueGenericSend>
 800e43a:	6278      	str	r0, [r7, #36]	; 0x24
 800e43c:	e012      	b.n	800e464 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e43e:	4b0c      	ldr	r3, [pc, #48]	; (800e470 <xTimerGenericCommand+0x9c>)
 800e440:	6818      	ldr	r0, [r3, #0]
 800e442:	f107 0114 	add.w	r1, r7, #20
 800e446:	2300      	movs	r3, #0
 800e448:	2200      	movs	r2, #0
 800e44a:	f7fe f88f 	bl	800c56c <xQueueGenericSend>
 800e44e:	6278      	str	r0, [r7, #36]	; 0x24
 800e450:	e008      	b.n	800e464 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <xTimerGenericCommand+0x9c>)
 800e454:	6818      	ldr	r0, [r3, #0]
 800e456:	f107 0114 	add.w	r1, r7, #20
 800e45a:	2300      	movs	r3, #0
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	f7fe f98b 	bl	800c778 <xQueueGenericSendFromISR>
 800e462:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e466:	4618      	mov	r0, r3
 800e468:	3728      	adds	r7, #40	; 0x28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	20000be8 	.word	0x20000be8

0800e474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af02      	add	r7, sp, #8
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e47e:	4b23      	ldr	r3, [pc, #140]	; (800e50c <prvProcessExpiredTimer+0x98>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	3304      	adds	r3, #4
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fd fea9 	bl	800c1e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e498:	f003 0304 	and.w	r3, r3, #4
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d024      	beq.n	800e4ea <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	699a      	ldr	r2, [r3, #24]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	18d1      	adds	r1, r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	683a      	ldr	r2, [r7, #0]
 800e4ac:	6978      	ldr	r0, [r7, #20]
 800e4ae:	f000 f8d3 	bl	800e658 <prvInsertTimerInActiveList>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d021      	beq.n	800e4fc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	2300      	movs	r3, #0
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	6978      	ldr	r0, [r7, #20]
 800e4c4:	f7ff ff86 	bl	800e3d4 <xTimerGenericCommand>
 800e4c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d115      	bne.n	800e4fc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	b672      	cpsid	i
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	b662      	cpsie	i
 800e4e4:	60fb      	str	r3, [r7, #12]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e4f0:	f023 0301 	bic.w	r3, r3, #1
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	6a1b      	ldr	r3, [r3, #32]
 800e500:	6978      	ldr	r0, [r7, #20]
 800e502:	4798      	blx	r3
}
 800e504:	bf00      	nop
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	20000be0 	.word	0x20000be0

0800e510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e518:	f107 0308 	add.w	r3, r7, #8
 800e51c:	4618      	mov	r0, r3
 800e51e:	f000 f857 	bl	800e5d0 <prvGetNextExpireTime>
 800e522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	4619      	mov	r1, r3
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 f803 	bl	800e534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e52e:	f000 f8d5 	bl	800e6dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e532:	e7f1      	b.n	800e518 <prvTimerTask+0x8>

0800e534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e53e:	f7ff f829 	bl	800d594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e542:	f107 0308 	add.w	r3, r7, #8
 800e546:	4618      	mov	r0, r3
 800e548:	f000 f866 	bl	800e618 <prvSampleTimeNow>
 800e54c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d130      	bne.n	800e5b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10a      	bne.n	800e570 <prvProcessTimerOrBlockTask+0x3c>
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d806      	bhi.n	800e570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e562:	f7ff f825 	bl	800d5b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e566:	68f9      	ldr	r1, [r7, #12]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7ff ff83 	bl	800e474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e56e:	e024      	b.n	800e5ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d008      	beq.n	800e588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e576:	4b13      	ldr	r3, [pc, #76]	; (800e5c4 <prvProcessTimerOrBlockTask+0x90>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <prvProcessTimerOrBlockTask+0x50>
 800e580:	2301      	movs	r3, #1
 800e582:	e000      	b.n	800e586 <prvProcessTimerOrBlockTask+0x52>
 800e584:	2300      	movs	r3, #0
 800e586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e588:	4b0f      	ldr	r3, [pc, #60]	; (800e5c8 <prvProcessTimerOrBlockTask+0x94>)
 800e58a:	6818      	ldr	r0, [r3, #0]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	4619      	mov	r1, r3
 800e596:	f7fe fcdb 	bl	800cf50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e59a:	f7ff f809 	bl	800d5b0 <xTaskResumeAll>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d10a      	bne.n	800e5ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e5a4:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <prvProcessTimerOrBlockTask+0x98>)
 800e5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5aa:	601a      	str	r2, [r3, #0]
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	f3bf 8f6f 	isb	sy
}
 800e5b4:	e001      	b.n	800e5ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5b6:	f7fe fffb 	bl	800d5b0 <xTaskResumeAll>
}
 800e5ba:	bf00      	nop
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000be4 	.word	0x20000be4
 800e5c8:	20000be8 	.word	0x20000be8
 800e5cc:	e000ed04 	.word	0xe000ed04

0800e5d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5d8:	4b0e      	ldr	r3, [pc, #56]	; (800e614 <prvGetNextExpireTime+0x44>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <prvGetNextExpireTime+0x16>
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	e000      	b.n	800e5e8 <prvGetNextExpireTime+0x18>
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d105      	bne.n	800e600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5f4:	4b07      	ldr	r3, [pc, #28]	; (800e614 <prvGetNextExpireTime+0x44>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	60fb      	str	r3, [r7, #12]
 800e5fe:	e001      	b.n	800e604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e600:	2300      	movs	r3, #0
 800e602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e604:	68fb      	ldr	r3, [r7, #12]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	20000be0 	.word	0x20000be0

0800e618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e620:	f7ff f864 	bl	800d6ec <xTaskGetTickCount>
 800e624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e626:	4b0b      	ldr	r3, [pc, #44]	; (800e654 <prvSampleTimeNow+0x3c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d205      	bcs.n	800e63c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e630:	f000 f91e 	bl	800e870 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	e002      	b.n	800e642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e642:	4a04      	ldr	r2, [pc, #16]	; (800e654 <prvSampleTimeNow+0x3c>)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e648:	68fb      	ldr	r3, [r7, #12]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	20000bf0 	.word	0x20000bf0

0800e658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e666:	2300      	movs	r3, #0
 800e668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d812      	bhi.n	800e6a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	1ad2      	subs	r2, r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	699b      	ldr	r3, [r3, #24]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d302      	bcc.n	800e692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e68c:	2301      	movs	r3, #1
 800e68e:	617b      	str	r3, [r7, #20]
 800e690:	e01b      	b.n	800e6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e692:	4b10      	ldr	r3, [pc, #64]	; (800e6d4 <prvInsertTimerInActiveList+0x7c>)
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3304      	adds	r3, #4
 800e69a:	4619      	mov	r1, r3
 800e69c:	4610      	mov	r0, r2
 800e69e:	f7fd fd68 	bl	800c172 <vListInsert>
 800e6a2:	e012      	b.n	800e6ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d206      	bcs.n	800e6ba <prvInsertTimerInActiveList+0x62>
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d302      	bcc.n	800e6ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	617b      	str	r3, [r7, #20]
 800e6b8:	e007      	b.n	800e6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6ba:	4b07      	ldr	r3, [pc, #28]	; (800e6d8 <prvInsertTimerInActiveList+0x80>)
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	4610      	mov	r0, r2
 800e6c6:	f7fd fd54 	bl	800c172 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e6ca:	697b      	ldr	r3, [r7, #20]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	20000be4 	.word	0x20000be4
 800e6d8:	20000be0 	.word	0x20000be0

0800e6dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b08c      	sub	sp, #48	; 0x30
 800e6e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6e2:	e0b2      	b.n	800e84a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f2c0 80ae 	blt.w	800e848 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	695b      	ldr	r3, [r3, #20]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d004      	beq.n	800e702 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fd fd71 	bl	800c1e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e702:	1d3b      	adds	r3, r7, #4
 800e704:	4618      	mov	r0, r3
 800e706:	f7ff ff87 	bl	800e618 <prvSampleTimeNow>
 800e70a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2b09      	cmp	r3, #9
 800e710:	f200 809b 	bhi.w	800e84a <prvProcessReceivedCommands+0x16e>
 800e714:	a201      	add	r2, pc, #4	; (adr r2, 800e71c <prvProcessReceivedCommands+0x40>)
 800e716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71a:	bf00      	nop
 800e71c:	0800e745 	.word	0x0800e745
 800e720:	0800e745 	.word	0x0800e745
 800e724:	0800e745 	.word	0x0800e745
 800e728:	0800e7bd 	.word	0x0800e7bd
 800e72c:	0800e7d1 	.word	0x0800e7d1
 800e730:	0800e81f 	.word	0x0800e81f
 800e734:	0800e745 	.word	0x0800e745
 800e738:	0800e745 	.word	0x0800e745
 800e73c:	0800e7bd 	.word	0x0800e7bd
 800e740:	0800e7d1 	.word	0x0800e7d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e74a:	f043 0301 	orr.w	r3, r3, #1
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	18d1      	adds	r1, r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6a3a      	ldr	r2, [r7, #32]
 800e762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e764:	f7ff ff78 	bl	800e658 <prvInsertTimerInActiveList>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d06d      	beq.n	800e84a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	6a1b      	ldr	r3, [r3, #32]
 800e772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e774:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e77c:	f003 0304 	and.w	r3, r3, #4
 800e780:	2b00      	cmp	r3, #0
 800e782:	d062      	beq.n	800e84a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	441a      	add	r2, r3
 800e78c:	2300      	movs	r3, #0
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	2300      	movs	r3, #0
 800e792:	2100      	movs	r1, #0
 800e794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e796:	f7ff fe1d 	bl	800e3d4 <xTimerGenericCommand>
 800e79a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d153      	bne.n	800e84a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800e7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a6:	b672      	cpsid	i
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	b662      	cpsie	i
 800e7b6:	61bb      	str	r3, [r7, #24]
}
 800e7b8:	bf00      	nop
 800e7ba:	e7fe      	b.n	800e7ba <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7c2:	f023 0301 	bic.w	r3, r3, #1
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e7ce:	e03c      	b.n	800e84a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7d6:	f043 0301 	orr.w	r3, r3, #1
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	699b      	ldr	r3, [r3, #24]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10c      	bne.n	800e80a <prvProcessReceivedCommands+0x12e>
	__asm volatile
 800e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f4:	b672      	cpsid	i
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	b662      	cpsie	i
 800e804:	617b      	str	r3, [r7, #20]
}
 800e806:	bf00      	nop
 800e808:	e7fe      	b.n	800e808 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80c:	699a      	ldr	r2, [r3, #24]
 800e80e:	6a3b      	ldr	r3, [r7, #32]
 800e810:	18d1      	adds	r1, r2, r3
 800e812:	6a3b      	ldr	r3, [r7, #32]
 800e814:	6a3a      	ldr	r2, [r7, #32]
 800e816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e818:	f7ff ff1e 	bl	800e658 <prvInsertTimerInActiveList>
					break;
 800e81c:	e015      	b.n	800e84a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d103      	bne.n	800e834 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800e82c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e82e:	f000 fbcb 	bl	800efc8 <vPortFree>
 800e832:	e00a      	b.n	800e84a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e83a:	f023 0301 	bic.w	r3, r3, #1
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e846:	e000      	b.n	800e84a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e84a:	4b08      	ldr	r3, [pc, #32]	; (800e86c <prvProcessReceivedCommands+0x190>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f107 0108 	add.w	r1, r7, #8
 800e852:	2200      	movs	r2, #0
 800e854:	4618      	mov	r0, r3
 800e856:	f7fe f82f 	bl	800c8b8 <xQueueReceive>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f47f af41 	bne.w	800e6e4 <prvProcessReceivedCommands+0x8>
	}
}
 800e862:	bf00      	nop
 800e864:	bf00      	nop
 800e866:	3728      	adds	r7, #40	; 0x28
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	20000be8 	.word	0x20000be8

0800e870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e876:	e04a      	b.n	800e90e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e878:	4b2e      	ldr	r3, [pc, #184]	; (800e934 <prvSwitchTimerLists+0xc4>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e882:	4b2c      	ldr	r3, [pc, #176]	; (800e934 <prvSwitchTimerLists+0xc4>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	3304      	adds	r3, #4
 800e890:	4618      	mov	r0, r3
 800e892:	f7fd fca7 	bl	800c1e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e8a4:	f003 0304 	and.w	r3, r3, #4
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d030      	beq.n	800e90e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	699b      	ldr	r3, [r3, #24]
 800e8b0:	693a      	ldr	r2, [r7, #16]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8b6:	68ba      	ldr	r2, [r7, #8]
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d90e      	bls.n	800e8dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8ca:	4b1a      	ldr	r3, [pc, #104]	; (800e934 <prvSwitchTimerLists+0xc4>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	f7fd fc4c 	bl	800c172 <vListInsert>
 800e8da:	e018      	b.n	800e90e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8dc:	2300      	movs	r3, #0
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	693a      	ldr	r2, [r7, #16]
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f7ff fd74 	bl	800e3d4 <xTimerGenericCommand>
 800e8ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10c      	bne.n	800e90e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	b672      	cpsid	i
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	b662      	cpsie	i
 800e908:	603b      	str	r3, [r7, #0]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e90e:	4b09      	ldr	r3, [pc, #36]	; (800e934 <prvSwitchTimerLists+0xc4>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1af      	bne.n	800e878 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e918:	4b06      	ldr	r3, [pc, #24]	; (800e934 <prvSwitchTimerLists+0xc4>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e91e:	4b06      	ldr	r3, [pc, #24]	; (800e938 <prvSwitchTimerLists+0xc8>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a04      	ldr	r2, [pc, #16]	; (800e934 <prvSwitchTimerLists+0xc4>)
 800e924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e926:	4a04      	ldr	r2, [pc, #16]	; (800e938 <prvSwitchTimerLists+0xc8>)
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	6013      	str	r3, [r2, #0]
}
 800e92c:	bf00      	nop
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	20000be0 	.word	0x20000be0
 800e938:	20000be4 	.word	0x20000be4

0800e93c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e942:	f000 f94b 	bl	800ebdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e946:	4b15      	ldr	r3, [pc, #84]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d120      	bne.n	800e990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e94e:	4814      	ldr	r0, [pc, #80]	; (800e9a0 <prvCheckForValidListAndQueue+0x64>)
 800e950:	f7fd fbbe 	bl	800c0d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e954:	4813      	ldr	r0, [pc, #76]	; (800e9a4 <prvCheckForValidListAndQueue+0x68>)
 800e956:	f7fd fbbb 	bl	800c0d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e95a:	4b13      	ldr	r3, [pc, #76]	; (800e9a8 <prvCheckForValidListAndQueue+0x6c>)
 800e95c:	4a10      	ldr	r2, [pc, #64]	; (800e9a0 <prvCheckForValidListAndQueue+0x64>)
 800e95e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e960:	4b12      	ldr	r3, [pc, #72]	; (800e9ac <prvCheckForValidListAndQueue+0x70>)
 800e962:	4a10      	ldr	r2, [pc, #64]	; (800e9a4 <prvCheckForValidListAndQueue+0x68>)
 800e964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e966:	2300      	movs	r3, #0
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <prvCheckForValidListAndQueue+0x74>)
 800e96c:	4a11      	ldr	r2, [pc, #68]	; (800e9b4 <prvCheckForValidListAndQueue+0x78>)
 800e96e:	210c      	movs	r1, #12
 800e970:	200a      	movs	r0, #10
 800e972:	f7fd fccb 	bl	800c30c <xQueueGenericCreateStatic>
 800e976:	4603      	mov	r3, r0
 800e978:	4a08      	ldr	r2, [pc, #32]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e97a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e97c:	4b07      	ldr	r3, [pc, #28]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d005      	beq.n	800e990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e984:	4b05      	ldr	r3, [pc, #20]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	490b      	ldr	r1, [pc, #44]	; (800e9b8 <prvCheckForValidListAndQueue+0x7c>)
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe fab6 	bl	800cefc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e990:	f000 f958 	bl	800ec44 <vPortExitCritical>
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20000be8 	.word	0x20000be8
 800e9a0:	20000bb8 	.word	0x20000bb8
 800e9a4:	20000bcc 	.word	0x20000bcc
 800e9a8:	20000be0 	.word	0x20000be0
 800e9ac:	20000be4 	.word	0x20000be4
 800e9b0:	20000c6c 	.word	0x20000c6c
 800e9b4:	20000bf4 	.word	0x20000bf4
 800e9b8:	0800fd90 	.word	0x0800fd90

0800e9bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	3b04      	subs	r3, #4
 800e9cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	3b04      	subs	r3, #4
 800e9da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	f023 0201 	bic.w	r2, r3, #1
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	3b04      	subs	r3, #4
 800e9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9ec:	4a0c      	ldr	r2, [pc, #48]	; (800ea20 <pxPortInitialiseStack+0x64>)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3b14      	subs	r3, #20
 800e9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3b04      	subs	r3, #4
 800ea02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f06f 0202 	mvn.w	r2, #2
 800ea0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	3b20      	subs	r3, #32
 800ea10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea12:	68fb      	ldr	r3, [r7, #12]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	0800ea25 	.word	0x0800ea25

0800ea24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea2e:	4b14      	ldr	r3, [pc, #80]	; (800ea80 <prvTaskExitError+0x5c>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea36:	d00c      	beq.n	800ea52 <prvTaskExitError+0x2e>
	__asm volatile
 800ea38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3c:	b672      	cpsid	i
 800ea3e:	f383 8811 	msr	BASEPRI, r3
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	f3bf 8f4f 	dsb	sy
 800ea4a:	b662      	cpsie	i
 800ea4c:	60fb      	str	r3, [r7, #12]
}
 800ea4e:	bf00      	nop
 800ea50:	e7fe      	b.n	800ea50 <prvTaskExitError+0x2c>
	__asm volatile
 800ea52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea56:	b672      	cpsid	i
 800ea58:	f383 8811 	msr	BASEPRI, r3
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	b662      	cpsie	i
 800ea66:	60bb      	str	r3, [r7, #8]
}
 800ea68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea6a:	bf00      	nop
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d0fc      	beq.n	800ea6c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea72:	bf00      	nop
 800ea74:	bf00      	nop
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	2000004c 	.word	0x2000004c
	...

0800ea90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea90:	4b07      	ldr	r3, [pc, #28]	; (800eab0 <pxCurrentTCBConst2>)
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	6808      	ldr	r0, [r1, #0]
 800ea96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9a:	f380 8809 	msr	PSP, r0
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f04f 0000 	mov.w	r0, #0
 800eaa6:	f380 8811 	msr	BASEPRI, r0
 800eaaa:	4770      	bx	lr
 800eaac:	f3af 8000 	nop.w

0800eab0 <pxCurrentTCBConst2>:
 800eab0:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop

0800eab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eab8:	4808      	ldr	r0, [pc, #32]	; (800eadc <prvPortStartFirstTask+0x24>)
 800eaba:	6800      	ldr	r0, [r0, #0]
 800eabc:	6800      	ldr	r0, [r0, #0]
 800eabe:	f380 8808 	msr	MSP, r0
 800eac2:	f04f 0000 	mov.w	r0, #0
 800eac6:	f380 8814 	msr	CONTROL, r0
 800eaca:	b662      	cpsie	i
 800eacc:	b661      	cpsie	f
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	df00      	svc	0
 800ead8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eada:	bf00      	nop
 800eadc:	e000ed08 	.word	0xe000ed08

0800eae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eae6:	4b37      	ldr	r3, [pc, #220]	; (800ebc4 <xPortStartScheduler+0xe4>)
 800eae8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	22ff      	movs	r2, #255	; 0xff
 800eaf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb00:	78fb      	ldrb	r3, [r7, #3]
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	4b2f      	ldr	r3, [pc, #188]	; (800ebc8 <xPortStartScheduler+0xe8>)
 800eb0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb0e:	4b2f      	ldr	r3, [pc, #188]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb10:	2207      	movs	r2, #7
 800eb12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb14:	e009      	b.n	800eb2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eb16:	4b2d      	ldr	r3, [pc, #180]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	4a2b      	ldr	r2, [pc, #172]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	005b      	lsls	r3, r3, #1
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb2a:	78fb      	ldrb	r3, [r7, #3]
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb32:	2b80      	cmp	r3, #128	; 0x80
 800eb34:	d0ef      	beq.n	800eb16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb36:	4b25      	ldr	r3, [pc, #148]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f1c3 0307 	rsb	r3, r3, #7
 800eb3e:	2b04      	cmp	r3, #4
 800eb40:	d00c      	beq.n	800eb5c <xPortStartScheduler+0x7c>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	b672      	cpsid	i
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	b662      	cpsie	i
 800eb56:	60bb      	str	r3, [r7, #8]
}
 800eb58:	bf00      	nop
 800eb5a:	e7fe      	b.n	800eb5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb5c:	4b1b      	ldr	r3, [pc, #108]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	021b      	lsls	r3, r3, #8
 800eb62:	4a1a      	ldr	r2, [pc, #104]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb66:	4b19      	ldr	r3, [pc, #100]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb6e:	4a17      	ldr	r2, [pc, #92]	; (800ebcc <xPortStartScheduler+0xec>)
 800eb70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb7a:	4b15      	ldr	r3, [pc, #84]	; (800ebd0 <xPortStartScheduler+0xf0>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4a14      	ldr	r2, [pc, #80]	; (800ebd0 <xPortStartScheduler+0xf0>)
 800eb80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb86:	4b12      	ldr	r3, [pc, #72]	; (800ebd0 <xPortStartScheduler+0xf0>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a11      	ldr	r2, [pc, #68]	; (800ebd0 <xPortStartScheduler+0xf0>)
 800eb8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb92:	f000 f8dd 	bl	800ed50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb96:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <xPortStartScheduler+0xf4>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb9c:	f000 f8fc 	bl	800ed98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eba0:	4b0d      	ldr	r3, [pc, #52]	; (800ebd8 <xPortStartScheduler+0xf8>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a0c      	ldr	r2, [pc, #48]	; (800ebd8 <xPortStartScheduler+0xf8>)
 800eba6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebaa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebac:	f7ff ff84 	bl	800eab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebb0:	f7fe fe66 	bl	800d880 <vTaskSwitchContext>
	prvTaskExitError();
 800ebb4:	f7ff ff36 	bl	800ea24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebb8:	2300      	movs	r3, #0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	e000e400 	.word	0xe000e400
 800ebc8:	20000cb4 	.word	0x20000cb4
 800ebcc:	20000cb8 	.word	0x20000cb8
 800ebd0:	e000ed20 	.word	0xe000ed20
 800ebd4:	2000004c 	.word	0x2000004c
 800ebd8:	e000ef34 	.word	0xe000ef34

0800ebdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe6:	b672      	cpsid	i
 800ebe8:	f383 8811 	msr	BASEPRI, r3
 800ebec:	f3bf 8f6f 	isb	sy
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	b662      	cpsie	i
 800ebf6:	607b      	str	r3, [r7, #4]
}
 800ebf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ebfa:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <vPortEnterCritical+0x60>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	4a0e      	ldr	r2, [pc, #56]	; (800ec3c <vPortEnterCritical+0x60>)
 800ec02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec04:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <vPortEnterCritical+0x60>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d111      	bne.n	800ec30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec0c:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <vPortEnterCritical+0x64>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00c      	beq.n	800ec30 <vPortEnterCritical+0x54>
	__asm volatile
 800ec16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1a:	b672      	cpsid	i
 800ec1c:	f383 8811 	msr	BASEPRI, r3
 800ec20:	f3bf 8f6f 	isb	sy
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	b662      	cpsie	i
 800ec2a:	603b      	str	r3, [r7, #0]
}
 800ec2c:	bf00      	nop
 800ec2e:	e7fe      	b.n	800ec2e <vPortEnterCritical+0x52>
	}
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr
 800ec3c:	2000004c 	.word	0x2000004c
 800ec40:	e000ed04 	.word	0xe000ed04

0800ec44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec4a:	4b13      	ldr	r3, [pc, #76]	; (800ec98 <vPortExitCritical+0x54>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d10c      	bne.n	800ec6c <vPortExitCritical+0x28>
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec56:	b672      	cpsid	i
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	b662      	cpsie	i
 800ec66:	607b      	str	r3, [r7, #4]
}
 800ec68:	bf00      	nop
 800ec6a:	e7fe      	b.n	800ec6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ec6c:	4b0a      	ldr	r3, [pc, #40]	; (800ec98 <vPortExitCritical+0x54>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	3b01      	subs	r3, #1
 800ec72:	4a09      	ldr	r2, [pc, #36]	; (800ec98 <vPortExitCritical+0x54>)
 800ec74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec76:	4b08      	ldr	r3, [pc, #32]	; (800ec98 <vPortExitCritical+0x54>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d105      	bne.n	800ec8a <vPortExitCritical+0x46>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	f383 8811 	msr	BASEPRI, r3
}
 800ec88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec8a:	bf00      	nop
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	2000004c 	.word	0x2000004c
 800ec9c:	00000000 	.word	0x00000000

0800eca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eca0:	f3ef 8009 	mrs	r0, PSP
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <pxCurrentTCBConst>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	f01e 0f10 	tst.w	lr, #16
 800ecb0:	bf08      	it	eq
 800ecb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ecb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecba:	6010      	str	r0, [r2, #0]
 800ecbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecc4:	b672      	cpsid	i
 800ecc6:	f380 8811 	msr	BASEPRI, r0
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	b662      	cpsie	i
 800ecd4:	f7fe fdd4 	bl	800d880 <vTaskSwitchContext>
 800ecd8:	f04f 0000 	mov.w	r0, #0
 800ecdc:	f380 8811 	msr	BASEPRI, r0
 800ece0:	bc09      	pop	{r0, r3}
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	6808      	ldr	r0, [r1, #0]
 800ece6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecea:	f01e 0f10 	tst.w	lr, #16
 800ecee:	bf08      	it	eq
 800ecf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ecf4:	f380 8809 	msr	PSP, r0
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop

0800ed00 <pxCurrentTCBConst>:
 800ed00:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop

0800ed08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	b672      	cpsid	i
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	b662      	cpsie	i
 800ed22:	607b      	str	r3, [r7, #4]
}
 800ed24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed26:	f7fe fcf1 	bl	800d70c <xTaskIncrementTick>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d003      	beq.n	800ed38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed30:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <SysTick_Handler+0x44>)
 800ed32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	2300      	movs	r3, #0
 800ed3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	f383 8811 	msr	BASEPRI, r3
}
 800ed42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed44:	bf00      	nop
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	e000ed04 	.word	0xe000ed04

0800ed50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed50:	b480      	push	{r7}
 800ed52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed54:	4b0b      	ldr	r3, [pc, #44]	; (800ed84 <vPortSetupTimerInterrupt+0x34>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed5a:	4b0b      	ldr	r3, [pc, #44]	; (800ed88 <vPortSetupTimerInterrupt+0x38>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed60:	4b0a      	ldr	r3, [pc, #40]	; (800ed8c <vPortSetupTimerInterrupt+0x3c>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a0a      	ldr	r2, [pc, #40]	; (800ed90 <vPortSetupTimerInterrupt+0x40>)
 800ed66:	fba2 2303 	umull	r2, r3, r2, r3
 800ed6a:	099b      	lsrs	r3, r3, #6
 800ed6c:	4a09      	ldr	r2, [pc, #36]	; (800ed94 <vPortSetupTimerInterrupt+0x44>)
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed72:	4b04      	ldr	r3, [pc, #16]	; (800ed84 <vPortSetupTimerInterrupt+0x34>)
 800ed74:	2207      	movs	r2, #7
 800ed76:	601a      	str	r2, [r3, #0]
}
 800ed78:	bf00      	nop
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	e000e010 	.word	0xe000e010
 800ed88:	e000e018 	.word	0xe000e018
 800ed8c:	20000040 	.word	0x20000040
 800ed90:	10624dd3 	.word	0x10624dd3
 800ed94:	e000e014 	.word	0xe000e014

0800ed98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eda8 <vPortEnableVFP+0x10>
 800ed9c:	6801      	ldr	r1, [r0, #0]
 800ed9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eda2:	6001      	str	r1, [r0, #0]
 800eda4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eda6:	bf00      	nop
 800eda8:	e000ed88 	.word	0xe000ed88

0800edac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edb2:	f3ef 8305 	mrs	r3, IPSR
 800edb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2b0f      	cmp	r3, #15
 800edbc:	d916      	bls.n	800edec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edbe:	4a19      	ldr	r2, [pc, #100]	; (800ee24 <vPortValidateInterruptPriority+0x78>)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	4413      	add	r3, r2
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edc8:	4b17      	ldr	r3, [pc, #92]	; (800ee28 <vPortValidateInterruptPriority+0x7c>)
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	7afa      	ldrb	r2, [r7, #11]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d20c      	bcs.n	800edec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	b672      	cpsid	i
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	b662      	cpsie	i
 800ede6:	607b      	str	r3, [r7, #4]
}
 800ede8:	bf00      	nop
 800edea:	e7fe      	b.n	800edea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800edec:	4b0f      	ldr	r3, [pc, #60]	; (800ee2c <vPortValidateInterruptPriority+0x80>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800edf4:	4b0e      	ldr	r3, [pc, #56]	; (800ee30 <vPortValidateInterruptPriority+0x84>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d90c      	bls.n	800ee16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800edfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee00:	b672      	cpsid	i
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	b662      	cpsie	i
 800ee10:	603b      	str	r3, [r7, #0]
}
 800ee12:	bf00      	nop
 800ee14:	e7fe      	b.n	800ee14 <vPortValidateInterruptPriority+0x68>
	}
 800ee16:	bf00      	nop
 800ee18:	3714      	adds	r7, #20
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	e000e3f0 	.word	0xe000e3f0
 800ee28:	20000cb4 	.word	0x20000cb4
 800ee2c:	e000ed0c 	.word	0xe000ed0c
 800ee30:	20000cb8 	.word	0x20000cb8

0800ee34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b08a      	sub	sp, #40	; 0x28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee40:	f7fe fba8 	bl	800d594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee44:	4b5b      	ldr	r3, [pc, #364]	; (800efb4 <pvPortMalloc+0x180>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee4c:	f000 f91a 	bl	800f084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee50:	4b59      	ldr	r3, [pc, #356]	; (800efb8 <pvPortMalloc+0x184>)
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4013      	ands	r3, r2
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f040 8092 	bne.w	800ef82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d01f      	beq.n	800eea4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ee64:	2208      	movs	r2, #8
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	4413      	add	r3, r2
 800ee6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f003 0307 	and.w	r3, r3, #7
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d016      	beq.n	800eea4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f023 0307 	bic.w	r3, r3, #7
 800ee7c:	3308      	adds	r3, #8
 800ee7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f003 0307 	and.w	r3, r3, #7
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00c      	beq.n	800eea4 <pvPortMalloc+0x70>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	b672      	cpsid	i
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	b662      	cpsie	i
 800ee9e:	617b      	str	r3, [r7, #20]
}
 800eea0:	bf00      	nop
 800eea2:	e7fe      	b.n	800eea2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d06b      	beq.n	800ef82 <pvPortMalloc+0x14e>
 800eeaa:	4b44      	ldr	r3, [pc, #272]	; (800efbc <pvPortMalloc+0x188>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d866      	bhi.n	800ef82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eeb4:	4b42      	ldr	r3, [pc, #264]	; (800efc0 <pvPortMalloc+0x18c>)
 800eeb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eeb8:	4b41      	ldr	r3, [pc, #260]	; (800efc0 <pvPortMalloc+0x18c>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eebe:	e004      	b.n	800eeca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d903      	bls.n	800eedc <pvPortMalloc+0xa8>
 800eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d1f1      	bne.n	800eec0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eedc:	4b35      	ldr	r3, [pc, #212]	; (800efb4 <pvPortMalloc+0x180>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d04d      	beq.n	800ef82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eee6:	6a3b      	ldr	r3, [r7, #32]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2208      	movs	r2, #8
 800eeec:	4413      	add	r3, r2
 800eeee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	6a3b      	ldr	r3, [r7, #32]
 800eef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefa:	685a      	ldr	r2, [r3, #4]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	1ad2      	subs	r2, r2, r3
 800ef00:	2308      	movs	r3, #8
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d921      	bls.n	800ef4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	f003 0307 	and.w	r3, r3, #7
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00c      	beq.n	800ef34 <pvPortMalloc+0x100>
	__asm volatile
 800ef1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1e:	b672      	cpsid	i
 800ef20:	f383 8811 	msr	BASEPRI, r3
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	b662      	cpsie	i
 800ef2e:	613b      	str	r3, [r7, #16]
}
 800ef30:	bf00      	nop
 800ef32:	e7fe      	b.n	800ef32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	685a      	ldr	r2, [r3, #4]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	1ad2      	subs	r2, r2, r3
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef46:	69b8      	ldr	r0, [r7, #24]
 800ef48:	f000 f8fe 	bl	800f148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef4c:	4b1b      	ldr	r3, [pc, #108]	; (800efbc <pvPortMalloc+0x188>)
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	4a19      	ldr	r2, [pc, #100]	; (800efbc <pvPortMalloc+0x188>)
 800ef58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef5a:	4b18      	ldr	r3, [pc, #96]	; (800efbc <pvPortMalloc+0x188>)
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	4b19      	ldr	r3, [pc, #100]	; (800efc4 <pvPortMalloc+0x190>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d203      	bcs.n	800ef6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef66:	4b15      	ldr	r3, [pc, #84]	; (800efbc <pvPortMalloc+0x188>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a16      	ldr	r2, [pc, #88]	; (800efc4 <pvPortMalloc+0x190>)
 800ef6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	685a      	ldr	r2, [r3, #4]
 800ef72:	4b11      	ldr	r3, [pc, #68]	; (800efb8 <pvPortMalloc+0x184>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	431a      	orrs	r2, r3
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	2200      	movs	r2, #0
 800ef80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef82:	f7fe fb15 	bl	800d5b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	f003 0307 	and.w	r3, r3, #7
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00c      	beq.n	800efaa <pvPortMalloc+0x176>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef94:	b672      	cpsid	i
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	b662      	cpsie	i
 800efa4:	60fb      	str	r3, [r7, #12]
}
 800efa6:	bf00      	nop
 800efa8:	e7fe      	b.n	800efa8 <pvPortMalloc+0x174>
	return pvReturn;
 800efaa:	69fb      	ldr	r3, [r7, #28]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3728      	adds	r7, #40	; 0x28
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	200084c4 	.word	0x200084c4
 800efb8:	200084d0 	.word	0x200084d0
 800efbc:	200084c8 	.word	0x200084c8
 800efc0:	200084bc 	.word	0x200084bc
 800efc4:	200084cc 	.word	0x200084cc

0800efc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d04c      	beq.n	800f074 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800efda:	2308      	movs	r3, #8
 800efdc:	425b      	negs	r3, r3
 800efde:	697a      	ldr	r2, [r7, #20]
 800efe0:	4413      	add	r3, r2
 800efe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	685a      	ldr	r2, [r3, #4]
 800efec:	4b23      	ldr	r3, [pc, #140]	; (800f07c <vPortFree+0xb4>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4013      	ands	r3, r2
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10c      	bne.n	800f010 <vPortFree+0x48>
	__asm volatile
 800eff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effa:	b672      	cpsid	i
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	b662      	cpsie	i
 800f00a:	60fb      	str	r3, [r7, #12]
}
 800f00c:	bf00      	nop
 800f00e:	e7fe      	b.n	800f00e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00c      	beq.n	800f032 <vPortFree+0x6a>
	__asm volatile
 800f018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01c:	b672      	cpsid	i
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	b662      	cpsie	i
 800f02c:	60bb      	str	r3, [r7, #8]
}
 800f02e:	bf00      	nop
 800f030:	e7fe      	b.n	800f030 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	685a      	ldr	r2, [r3, #4]
 800f036:	4b11      	ldr	r3, [pc, #68]	; (800f07c <vPortFree+0xb4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4013      	ands	r3, r2
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d019      	beq.n	800f074 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d115      	bne.n	800f074 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	685a      	ldr	r2, [r3, #4]
 800f04c:	4b0b      	ldr	r3, [pc, #44]	; (800f07c <vPortFree+0xb4>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	43db      	mvns	r3, r3
 800f052:	401a      	ands	r2, r3
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f058:	f7fe fa9c 	bl	800d594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	4b07      	ldr	r3, [pc, #28]	; (800f080 <vPortFree+0xb8>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4413      	add	r3, r2
 800f066:	4a06      	ldr	r2, [pc, #24]	; (800f080 <vPortFree+0xb8>)
 800f068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f06a:	6938      	ldr	r0, [r7, #16]
 800f06c:	f000 f86c 	bl	800f148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f070:	f7fe fa9e 	bl	800d5b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f074:	bf00      	nop
 800f076:	3718      	adds	r7, #24
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	200084d0 	.word	0x200084d0
 800f080:	200084c8 	.word	0x200084c8

0800f084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f084:	b480      	push	{r7}
 800f086:	b085      	sub	sp, #20
 800f088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f08a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800f08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f090:	4b27      	ldr	r3, [pc, #156]	; (800f130 <prvHeapInit+0xac>)
 800f092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f003 0307 	and.w	r3, r3, #7
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00c      	beq.n	800f0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	3307      	adds	r3, #7
 800f0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f023 0307 	bic.w	r3, r3, #7
 800f0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	4a1f      	ldr	r2, [pc, #124]	; (800f130 <prvHeapInit+0xac>)
 800f0b4:	4413      	add	r3, r2
 800f0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0bc:	4a1d      	ldr	r2, [pc, #116]	; (800f134 <prvHeapInit+0xb0>)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0c2:	4b1c      	ldr	r3, [pc, #112]	; (800f134 <prvHeapInit+0xb0>)
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0d0:	2208      	movs	r2, #8
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	1a9b      	subs	r3, r3, r2
 800f0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f023 0307 	bic.w	r3, r3, #7
 800f0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	4a15      	ldr	r2, [pc, #84]	; (800f138 <prvHeapInit+0xb4>)
 800f0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0e6:	4b14      	ldr	r3, [pc, #80]	; (800f138 <prvHeapInit+0xb4>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0ee:	4b12      	ldr	r3, [pc, #72]	; (800f138 <prvHeapInit+0xb4>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	1ad2      	subs	r2, r2, r3
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f104:	4b0c      	ldr	r3, [pc, #48]	; (800f138 <prvHeapInit+0xb4>)
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	4a0a      	ldr	r2, [pc, #40]	; (800f13c <prvHeapInit+0xb8>)
 800f112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	4a09      	ldr	r2, [pc, #36]	; (800f140 <prvHeapInit+0xbc>)
 800f11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f11c:	4b09      	ldr	r3, [pc, #36]	; (800f144 <prvHeapInit+0xc0>)
 800f11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f122:	601a      	str	r2, [r3, #0]
}
 800f124:	bf00      	nop
 800f126:	3714      	adds	r7, #20
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	20000cbc 	.word	0x20000cbc
 800f134:	200084bc 	.word	0x200084bc
 800f138:	200084c4 	.word	0x200084c4
 800f13c:	200084cc 	.word	0x200084cc
 800f140:	200084c8 	.word	0x200084c8
 800f144:	200084d0 	.word	0x200084d0

0800f148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f150:	4b28      	ldr	r3, [pc, #160]	; (800f1f4 <prvInsertBlockIntoFreeList+0xac>)
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	e002      	b.n	800f15c <prvInsertBlockIntoFreeList+0x14>
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	429a      	cmp	r2, r3
 800f164:	d8f7      	bhi.n	800f156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	4413      	add	r3, r2
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	429a      	cmp	r2, r3
 800f176:	d108      	bne.n	800f18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	441a      	add	r2, r3
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	441a      	add	r2, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d118      	bne.n	800f1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	4b15      	ldr	r3, [pc, #84]	; (800f1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d00d      	beq.n	800f1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	685a      	ldr	r2, [r3, #4]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	441a      	add	r2, r3
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	e008      	b.n	800f1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1c6:	4b0c      	ldr	r3, [pc, #48]	; (800f1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	601a      	str	r2, [r3, #0]
 800f1ce:	e003      	b.n	800f1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d002      	beq.n	800f1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1e6:	bf00      	nop
 800f1e8:	3714      	adds	r7, #20
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	200084bc 	.word	0x200084bc
 800f1f8:	200084c4 	.word	0x200084c4

0800f1fc <__errno>:
 800f1fc:	4b01      	ldr	r3, [pc, #4]	; (800f204 <__errno+0x8>)
 800f1fe:	6818      	ldr	r0, [r3, #0]
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	20000050 	.word	0x20000050

0800f208 <__libc_init_array>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	4d0d      	ldr	r5, [pc, #52]	; (800f240 <__libc_init_array+0x38>)
 800f20c:	4c0d      	ldr	r4, [pc, #52]	; (800f244 <__libc_init_array+0x3c>)
 800f20e:	1b64      	subs	r4, r4, r5
 800f210:	10a4      	asrs	r4, r4, #2
 800f212:	2600      	movs	r6, #0
 800f214:	42a6      	cmp	r6, r4
 800f216:	d109      	bne.n	800f22c <__libc_init_array+0x24>
 800f218:	4d0b      	ldr	r5, [pc, #44]	; (800f248 <__libc_init_array+0x40>)
 800f21a:	4c0c      	ldr	r4, [pc, #48]	; (800f24c <__libc_init_array+0x44>)
 800f21c:	f000 fcb8 	bl	800fb90 <_init>
 800f220:	1b64      	subs	r4, r4, r5
 800f222:	10a4      	asrs	r4, r4, #2
 800f224:	2600      	movs	r6, #0
 800f226:	42a6      	cmp	r6, r4
 800f228:	d105      	bne.n	800f236 <__libc_init_array+0x2e>
 800f22a:	bd70      	pop	{r4, r5, r6, pc}
 800f22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f230:	4798      	blx	r3
 800f232:	3601      	adds	r6, #1
 800f234:	e7ee      	b.n	800f214 <__libc_init_array+0xc>
 800f236:	f855 3b04 	ldr.w	r3, [r5], #4
 800f23a:	4798      	blx	r3
 800f23c:	3601      	adds	r6, #1
 800f23e:	e7f2      	b.n	800f226 <__libc_init_array+0x1e>
 800f240:	080d2180 	.word	0x080d2180
 800f244:	080d2180 	.word	0x080d2180
 800f248:	080d2180 	.word	0x080d2180
 800f24c:	080d2184 	.word	0x080d2184

0800f250 <__retarget_lock_acquire_recursive>:
 800f250:	4770      	bx	lr

0800f252 <__retarget_lock_release_recursive>:
 800f252:	4770      	bx	lr

0800f254 <memcpy>:
 800f254:	440a      	add	r2, r1
 800f256:	4291      	cmp	r1, r2
 800f258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f25c:	d100      	bne.n	800f260 <memcpy+0xc>
 800f25e:	4770      	bx	lr
 800f260:	b510      	push	{r4, lr}
 800f262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f26a:	4291      	cmp	r1, r2
 800f26c:	d1f9      	bne.n	800f262 <memcpy+0xe>
 800f26e:	bd10      	pop	{r4, pc}

0800f270 <memset>:
 800f270:	4402      	add	r2, r0
 800f272:	4603      	mov	r3, r0
 800f274:	4293      	cmp	r3, r2
 800f276:	d100      	bne.n	800f27a <memset+0xa>
 800f278:	4770      	bx	lr
 800f27a:	f803 1b01 	strb.w	r1, [r3], #1
 800f27e:	e7f9      	b.n	800f274 <memset+0x4>

0800f280 <_malloc_r>:
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f282:	1ccd      	adds	r5, r1, #3
 800f284:	f025 0503 	bic.w	r5, r5, #3
 800f288:	3508      	adds	r5, #8
 800f28a:	2d0c      	cmp	r5, #12
 800f28c:	bf38      	it	cc
 800f28e:	250c      	movcc	r5, #12
 800f290:	2d00      	cmp	r5, #0
 800f292:	4606      	mov	r6, r0
 800f294:	db01      	blt.n	800f29a <_malloc_r+0x1a>
 800f296:	42a9      	cmp	r1, r5
 800f298:	d903      	bls.n	800f2a2 <_malloc_r+0x22>
 800f29a:	230c      	movs	r3, #12
 800f29c:	6033      	str	r3, [r6, #0]
 800f29e:	2000      	movs	r0, #0
 800f2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a2:	f000 f8e1 	bl	800f468 <__malloc_lock>
 800f2a6:	4921      	ldr	r1, [pc, #132]	; (800f32c <_malloc_r+0xac>)
 800f2a8:	680a      	ldr	r2, [r1, #0]
 800f2aa:	4614      	mov	r4, r2
 800f2ac:	b99c      	cbnz	r4, 800f2d6 <_malloc_r+0x56>
 800f2ae:	4f20      	ldr	r7, [pc, #128]	; (800f330 <_malloc_r+0xb0>)
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	b923      	cbnz	r3, 800f2be <_malloc_r+0x3e>
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f000 f8a6 	bl	800f408 <_sbrk_r>
 800f2bc:	6038      	str	r0, [r7, #0]
 800f2be:	4629      	mov	r1, r5
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f000 f8a1 	bl	800f408 <_sbrk_r>
 800f2c6:	1c43      	adds	r3, r0, #1
 800f2c8:	d123      	bne.n	800f312 <_malloc_r+0x92>
 800f2ca:	230c      	movs	r3, #12
 800f2cc:	6033      	str	r3, [r6, #0]
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f000 f8d0 	bl	800f474 <__malloc_unlock>
 800f2d4:	e7e3      	b.n	800f29e <_malloc_r+0x1e>
 800f2d6:	6823      	ldr	r3, [r4, #0]
 800f2d8:	1b5b      	subs	r3, r3, r5
 800f2da:	d417      	bmi.n	800f30c <_malloc_r+0x8c>
 800f2dc:	2b0b      	cmp	r3, #11
 800f2de:	d903      	bls.n	800f2e8 <_malloc_r+0x68>
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	441c      	add	r4, r3
 800f2e4:	6025      	str	r5, [r4, #0]
 800f2e6:	e004      	b.n	800f2f2 <_malloc_r+0x72>
 800f2e8:	6863      	ldr	r3, [r4, #4]
 800f2ea:	42a2      	cmp	r2, r4
 800f2ec:	bf0c      	ite	eq
 800f2ee:	600b      	streq	r3, [r1, #0]
 800f2f0:	6053      	strne	r3, [r2, #4]
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	f000 f8be 	bl	800f474 <__malloc_unlock>
 800f2f8:	f104 000b 	add.w	r0, r4, #11
 800f2fc:	1d23      	adds	r3, r4, #4
 800f2fe:	f020 0007 	bic.w	r0, r0, #7
 800f302:	1ac2      	subs	r2, r0, r3
 800f304:	d0cc      	beq.n	800f2a0 <_malloc_r+0x20>
 800f306:	1a1b      	subs	r3, r3, r0
 800f308:	50a3      	str	r3, [r4, r2]
 800f30a:	e7c9      	b.n	800f2a0 <_malloc_r+0x20>
 800f30c:	4622      	mov	r2, r4
 800f30e:	6864      	ldr	r4, [r4, #4]
 800f310:	e7cc      	b.n	800f2ac <_malloc_r+0x2c>
 800f312:	1cc4      	adds	r4, r0, #3
 800f314:	f024 0403 	bic.w	r4, r4, #3
 800f318:	42a0      	cmp	r0, r4
 800f31a:	d0e3      	beq.n	800f2e4 <_malloc_r+0x64>
 800f31c:	1a21      	subs	r1, r4, r0
 800f31e:	4630      	mov	r0, r6
 800f320:	f000 f872 	bl	800f408 <_sbrk_r>
 800f324:	3001      	adds	r0, #1
 800f326:	d1dd      	bne.n	800f2e4 <_malloc_r+0x64>
 800f328:	e7cf      	b.n	800f2ca <_malloc_r+0x4a>
 800f32a:	bf00      	nop
 800f32c:	200084d4 	.word	0x200084d4
 800f330:	200084d8 	.word	0x200084d8

0800f334 <cleanup_glue>:
 800f334:	b538      	push	{r3, r4, r5, lr}
 800f336:	460c      	mov	r4, r1
 800f338:	6809      	ldr	r1, [r1, #0]
 800f33a:	4605      	mov	r5, r0
 800f33c:	b109      	cbz	r1, 800f342 <cleanup_glue+0xe>
 800f33e:	f7ff fff9 	bl	800f334 <cleanup_glue>
 800f342:	4621      	mov	r1, r4
 800f344:	4628      	mov	r0, r5
 800f346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f34a:	f000 b899 	b.w	800f480 <_free_r>
	...

0800f350 <_reclaim_reent>:
 800f350:	4b2c      	ldr	r3, [pc, #176]	; (800f404 <_reclaim_reent+0xb4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4283      	cmp	r3, r0
 800f356:	b570      	push	{r4, r5, r6, lr}
 800f358:	4604      	mov	r4, r0
 800f35a:	d051      	beq.n	800f400 <_reclaim_reent+0xb0>
 800f35c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f35e:	b143      	cbz	r3, 800f372 <_reclaim_reent+0x22>
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d14a      	bne.n	800f3fc <_reclaim_reent+0xac>
 800f366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f368:	6819      	ldr	r1, [r3, #0]
 800f36a:	b111      	cbz	r1, 800f372 <_reclaim_reent+0x22>
 800f36c:	4620      	mov	r0, r4
 800f36e:	f000 f887 	bl	800f480 <_free_r>
 800f372:	6961      	ldr	r1, [r4, #20]
 800f374:	b111      	cbz	r1, 800f37c <_reclaim_reent+0x2c>
 800f376:	4620      	mov	r0, r4
 800f378:	f000 f882 	bl	800f480 <_free_r>
 800f37c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f37e:	b111      	cbz	r1, 800f386 <_reclaim_reent+0x36>
 800f380:	4620      	mov	r0, r4
 800f382:	f000 f87d 	bl	800f480 <_free_r>
 800f386:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f388:	b111      	cbz	r1, 800f390 <_reclaim_reent+0x40>
 800f38a:	4620      	mov	r0, r4
 800f38c:	f000 f878 	bl	800f480 <_free_r>
 800f390:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f392:	b111      	cbz	r1, 800f39a <_reclaim_reent+0x4a>
 800f394:	4620      	mov	r0, r4
 800f396:	f000 f873 	bl	800f480 <_free_r>
 800f39a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f39c:	b111      	cbz	r1, 800f3a4 <_reclaim_reent+0x54>
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f000 f86e 	bl	800f480 <_free_r>
 800f3a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f3a6:	b111      	cbz	r1, 800f3ae <_reclaim_reent+0x5e>
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f000 f869 	bl	800f480 <_free_r>
 800f3ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f3b0:	b111      	cbz	r1, 800f3b8 <_reclaim_reent+0x68>
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f000 f864 	bl	800f480 <_free_r>
 800f3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3ba:	b111      	cbz	r1, 800f3c2 <_reclaim_reent+0x72>
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f000 f85f 	bl	800f480 <_free_r>
 800f3c2:	69a3      	ldr	r3, [r4, #24]
 800f3c4:	b1e3      	cbz	r3, 800f400 <_reclaim_reent+0xb0>
 800f3c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	4798      	blx	r3
 800f3cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f3ce:	b1b9      	cbz	r1, 800f400 <_reclaim_reent+0xb0>
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3d6:	f7ff bfad 	b.w	800f334 <cleanup_glue>
 800f3da:	5949      	ldr	r1, [r1, r5]
 800f3dc:	b941      	cbnz	r1, 800f3f0 <_reclaim_reent+0xa0>
 800f3de:	3504      	adds	r5, #4
 800f3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3e2:	2d80      	cmp	r5, #128	; 0x80
 800f3e4:	68d9      	ldr	r1, [r3, #12]
 800f3e6:	d1f8      	bne.n	800f3da <_reclaim_reent+0x8a>
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f000 f849 	bl	800f480 <_free_r>
 800f3ee:	e7ba      	b.n	800f366 <_reclaim_reent+0x16>
 800f3f0:	680e      	ldr	r6, [r1, #0]
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f000 f844 	bl	800f480 <_free_r>
 800f3f8:	4631      	mov	r1, r6
 800f3fa:	e7ef      	b.n	800f3dc <_reclaim_reent+0x8c>
 800f3fc:	2500      	movs	r5, #0
 800f3fe:	e7ef      	b.n	800f3e0 <_reclaim_reent+0x90>
 800f400:	bd70      	pop	{r4, r5, r6, pc}
 800f402:	bf00      	nop
 800f404:	20000050 	.word	0x20000050

0800f408 <_sbrk_r>:
 800f408:	b538      	push	{r3, r4, r5, lr}
 800f40a:	4d06      	ldr	r5, [pc, #24]	; (800f424 <_sbrk_r+0x1c>)
 800f40c:	2300      	movs	r3, #0
 800f40e:	4604      	mov	r4, r0
 800f410:	4608      	mov	r0, r1
 800f412:	602b      	str	r3, [r5, #0]
 800f414:	f7f6 f954 	bl	80056c0 <_sbrk>
 800f418:	1c43      	adds	r3, r0, #1
 800f41a:	d102      	bne.n	800f422 <_sbrk_r+0x1a>
 800f41c:	682b      	ldr	r3, [r5, #0]
 800f41e:	b103      	cbz	r3, 800f422 <_sbrk_r+0x1a>
 800f420:	6023      	str	r3, [r4, #0]
 800f422:	bd38      	pop	{r3, r4, r5, pc}
 800f424:	20008c88 	.word	0x20008c88

0800f428 <siprintf>:
 800f428:	b40e      	push	{r1, r2, r3}
 800f42a:	b500      	push	{lr}
 800f42c:	b09c      	sub	sp, #112	; 0x70
 800f42e:	ab1d      	add	r3, sp, #116	; 0x74
 800f430:	9002      	str	r0, [sp, #8]
 800f432:	9006      	str	r0, [sp, #24]
 800f434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f438:	4809      	ldr	r0, [pc, #36]	; (800f460 <siprintf+0x38>)
 800f43a:	9107      	str	r1, [sp, #28]
 800f43c:	9104      	str	r1, [sp, #16]
 800f43e:	4909      	ldr	r1, [pc, #36]	; (800f464 <siprintf+0x3c>)
 800f440:	f853 2b04 	ldr.w	r2, [r3], #4
 800f444:	9105      	str	r1, [sp, #20]
 800f446:	6800      	ldr	r0, [r0, #0]
 800f448:	9301      	str	r3, [sp, #4]
 800f44a:	a902      	add	r1, sp, #8
 800f44c:	f000 f8c4 	bl	800f5d8 <_svfiprintf_r>
 800f450:	9b02      	ldr	r3, [sp, #8]
 800f452:	2200      	movs	r2, #0
 800f454:	701a      	strb	r2, [r3, #0]
 800f456:	b01c      	add	sp, #112	; 0x70
 800f458:	f85d eb04 	ldr.w	lr, [sp], #4
 800f45c:	b003      	add	sp, #12
 800f45e:	4770      	bx	lr
 800f460:	20000050 	.word	0x20000050
 800f464:	ffff0208 	.word	0xffff0208

0800f468 <__malloc_lock>:
 800f468:	4801      	ldr	r0, [pc, #4]	; (800f470 <__malloc_lock+0x8>)
 800f46a:	f7ff bef1 	b.w	800f250 <__retarget_lock_acquire_recursive>
 800f46e:	bf00      	nop
 800f470:	20008c80 	.word	0x20008c80

0800f474 <__malloc_unlock>:
 800f474:	4801      	ldr	r0, [pc, #4]	; (800f47c <__malloc_unlock+0x8>)
 800f476:	f7ff beec 	b.w	800f252 <__retarget_lock_release_recursive>
 800f47a:	bf00      	nop
 800f47c:	20008c80 	.word	0x20008c80

0800f480 <_free_r>:
 800f480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f482:	2900      	cmp	r1, #0
 800f484:	d048      	beq.n	800f518 <_free_r+0x98>
 800f486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f48a:	9001      	str	r0, [sp, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f1a1 0404 	sub.w	r4, r1, #4
 800f492:	bfb8      	it	lt
 800f494:	18e4      	addlt	r4, r4, r3
 800f496:	f7ff ffe7 	bl	800f468 <__malloc_lock>
 800f49a:	4a20      	ldr	r2, [pc, #128]	; (800f51c <_free_r+0x9c>)
 800f49c:	9801      	ldr	r0, [sp, #4]
 800f49e:	6813      	ldr	r3, [r2, #0]
 800f4a0:	4615      	mov	r5, r2
 800f4a2:	b933      	cbnz	r3, 800f4b2 <_free_r+0x32>
 800f4a4:	6063      	str	r3, [r4, #4]
 800f4a6:	6014      	str	r4, [r2, #0]
 800f4a8:	b003      	add	sp, #12
 800f4aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ae:	f7ff bfe1 	b.w	800f474 <__malloc_unlock>
 800f4b2:	42a3      	cmp	r3, r4
 800f4b4:	d90b      	bls.n	800f4ce <_free_r+0x4e>
 800f4b6:	6821      	ldr	r1, [r4, #0]
 800f4b8:	1862      	adds	r2, r4, r1
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	bf04      	itt	eq
 800f4be:	681a      	ldreq	r2, [r3, #0]
 800f4c0:	685b      	ldreq	r3, [r3, #4]
 800f4c2:	6063      	str	r3, [r4, #4]
 800f4c4:	bf04      	itt	eq
 800f4c6:	1852      	addeq	r2, r2, r1
 800f4c8:	6022      	streq	r2, [r4, #0]
 800f4ca:	602c      	str	r4, [r5, #0]
 800f4cc:	e7ec      	b.n	800f4a8 <_free_r+0x28>
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	b10b      	cbz	r3, 800f4d8 <_free_r+0x58>
 800f4d4:	42a3      	cmp	r3, r4
 800f4d6:	d9fa      	bls.n	800f4ce <_free_r+0x4e>
 800f4d8:	6811      	ldr	r1, [r2, #0]
 800f4da:	1855      	adds	r5, r2, r1
 800f4dc:	42a5      	cmp	r5, r4
 800f4de:	d10b      	bne.n	800f4f8 <_free_r+0x78>
 800f4e0:	6824      	ldr	r4, [r4, #0]
 800f4e2:	4421      	add	r1, r4
 800f4e4:	1854      	adds	r4, r2, r1
 800f4e6:	42a3      	cmp	r3, r4
 800f4e8:	6011      	str	r1, [r2, #0]
 800f4ea:	d1dd      	bne.n	800f4a8 <_free_r+0x28>
 800f4ec:	681c      	ldr	r4, [r3, #0]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	6053      	str	r3, [r2, #4]
 800f4f2:	4421      	add	r1, r4
 800f4f4:	6011      	str	r1, [r2, #0]
 800f4f6:	e7d7      	b.n	800f4a8 <_free_r+0x28>
 800f4f8:	d902      	bls.n	800f500 <_free_r+0x80>
 800f4fa:	230c      	movs	r3, #12
 800f4fc:	6003      	str	r3, [r0, #0]
 800f4fe:	e7d3      	b.n	800f4a8 <_free_r+0x28>
 800f500:	6825      	ldr	r5, [r4, #0]
 800f502:	1961      	adds	r1, r4, r5
 800f504:	428b      	cmp	r3, r1
 800f506:	bf04      	itt	eq
 800f508:	6819      	ldreq	r1, [r3, #0]
 800f50a:	685b      	ldreq	r3, [r3, #4]
 800f50c:	6063      	str	r3, [r4, #4]
 800f50e:	bf04      	itt	eq
 800f510:	1949      	addeq	r1, r1, r5
 800f512:	6021      	streq	r1, [r4, #0]
 800f514:	6054      	str	r4, [r2, #4]
 800f516:	e7c7      	b.n	800f4a8 <_free_r+0x28>
 800f518:	b003      	add	sp, #12
 800f51a:	bd30      	pop	{r4, r5, pc}
 800f51c:	200084d4 	.word	0x200084d4

0800f520 <__ssputs_r>:
 800f520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f524:	688e      	ldr	r6, [r1, #8]
 800f526:	429e      	cmp	r6, r3
 800f528:	4682      	mov	sl, r0
 800f52a:	460c      	mov	r4, r1
 800f52c:	4690      	mov	r8, r2
 800f52e:	461f      	mov	r7, r3
 800f530:	d838      	bhi.n	800f5a4 <__ssputs_r+0x84>
 800f532:	898a      	ldrh	r2, [r1, #12]
 800f534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f538:	d032      	beq.n	800f5a0 <__ssputs_r+0x80>
 800f53a:	6825      	ldr	r5, [r4, #0]
 800f53c:	6909      	ldr	r1, [r1, #16]
 800f53e:	eba5 0901 	sub.w	r9, r5, r1
 800f542:	6965      	ldr	r5, [r4, #20]
 800f544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f54c:	3301      	adds	r3, #1
 800f54e:	444b      	add	r3, r9
 800f550:	106d      	asrs	r5, r5, #1
 800f552:	429d      	cmp	r5, r3
 800f554:	bf38      	it	cc
 800f556:	461d      	movcc	r5, r3
 800f558:	0553      	lsls	r3, r2, #21
 800f55a:	d531      	bpl.n	800f5c0 <__ssputs_r+0xa0>
 800f55c:	4629      	mov	r1, r5
 800f55e:	f7ff fe8f 	bl	800f280 <_malloc_r>
 800f562:	4606      	mov	r6, r0
 800f564:	b950      	cbnz	r0, 800f57c <__ssputs_r+0x5c>
 800f566:	230c      	movs	r3, #12
 800f568:	f8ca 3000 	str.w	r3, [sl]
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f572:	81a3      	strh	r3, [r4, #12]
 800f574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f57c:	6921      	ldr	r1, [r4, #16]
 800f57e:	464a      	mov	r2, r9
 800f580:	f7ff fe68 	bl	800f254 <memcpy>
 800f584:	89a3      	ldrh	r3, [r4, #12]
 800f586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f58a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f58e:	81a3      	strh	r3, [r4, #12]
 800f590:	6126      	str	r6, [r4, #16]
 800f592:	6165      	str	r5, [r4, #20]
 800f594:	444e      	add	r6, r9
 800f596:	eba5 0509 	sub.w	r5, r5, r9
 800f59a:	6026      	str	r6, [r4, #0]
 800f59c:	60a5      	str	r5, [r4, #8]
 800f59e:	463e      	mov	r6, r7
 800f5a0:	42be      	cmp	r6, r7
 800f5a2:	d900      	bls.n	800f5a6 <__ssputs_r+0x86>
 800f5a4:	463e      	mov	r6, r7
 800f5a6:	4632      	mov	r2, r6
 800f5a8:	6820      	ldr	r0, [r4, #0]
 800f5aa:	4641      	mov	r1, r8
 800f5ac:	f000 faa8 	bl	800fb00 <memmove>
 800f5b0:	68a3      	ldr	r3, [r4, #8]
 800f5b2:	6822      	ldr	r2, [r4, #0]
 800f5b4:	1b9b      	subs	r3, r3, r6
 800f5b6:	4432      	add	r2, r6
 800f5b8:	60a3      	str	r3, [r4, #8]
 800f5ba:	6022      	str	r2, [r4, #0]
 800f5bc:	2000      	movs	r0, #0
 800f5be:	e7db      	b.n	800f578 <__ssputs_r+0x58>
 800f5c0:	462a      	mov	r2, r5
 800f5c2:	f000 fab7 	bl	800fb34 <_realloc_r>
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d1e1      	bne.n	800f590 <__ssputs_r+0x70>
 800f5cc:	6921      	ldr	r1, [r4, #16]
 800f5ce:	4650      	mov	r0, sl
 800f5d0:	f7ff ff56 	bl	800f480 <_free_r>
 800f5d4:	e7c7      	b.n	800f566 <__ssputs_r+0x46>
	...

0800f5d8 <_svfiprintf_r>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	4698      	mov	r8, r3
 800f5de:	898b      	ldrh	r3, [r1, #12]
 800f5e0:	061b      	lsls	r3, r3, #24
 800f5e2:	b09d      	sub	sp, #116	; 0x74
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	460d      	mov	r5, r1
 800f5e8:	4614      	mov	r4, r2
 800f5ea:	d50e      	bpl.n	800f60a <_svfiprintf_r+0x32>
 800f5ec:	690b      	ldr	r3, [r1, #16]
 800f5ee:	b963      	cbnz	r3, 800f60a <_svfiprintf_r+0x32>
 800f5f0:	2140      	movs	r1, #64	; 0x40
 800f5f2:	f7ff fe45 	bl	800f280 <_malloc_r>
 800f5f6:	6028      	str	r0, [r5, #0]
 800f5f8:	6128      	str	r0, [r5, #16]
 800f5fa:	b920      	cbnz	r0, 800f606 <_svfiprintf_r+0x2e>
 800f5fc:	230c      	movs	r3, #12
 800f5fe:	603b      	str	r3, [r7, #0]
 800f600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f604:	e0d1      	b.n	800f7aa <_svfiprintf_r+0x1d2>
 800f606:	2340      	movs	r3, #64	; 0x40
 800f608:	616b      	str	r3, [r5, #20]
 800f60a:	2300      	movs	r3, #0
 800f60c:	9309      	str	r3, [sp, #36]	; 0x24
 800f60e:	2320      	movs	r3, #32
 800f610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f614:	f8cd 800c 	str.w	r8, [sp, #12]
 800f618:	2330      	movs	r3, #48	; 0x30
 800f61a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f7c4 <_svfiprintf_r+0x1ec>
 800f61e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f622:	f04f 0901 	mov.w	r9, #1
 800f626:	4623      	mov	r3, r4
 800f628:	469a      	mov	sl, r3
 800f62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f62e:	b10a      	cbz	r2, 800f634 <_svfiprintf_r+0x5c>
 800f630:	2a25      	cmp	r2, #37	; 0x25
 800f632:	d1f9      	bne.n	800f628 <_svfiprintf_r+0x50>
 800f634:	ebba 0b04 	subs.w	fp, sl, r4
 800f638:	d00b      	beq.n	800f652 <_svfiprintf_r+0x7a>
 800f63a:	465b      	mov	r3, fp
 800f63c:	4622      	mov	r2, r4
 800f63e:	4629      	mov	r1, r5
 800f640:	4638      	mov	r0, r7
 800f642:	f7ff ff6d 	bl	800f520 <__ssputs_r>
 800f646:	3001      	adds	r0, #1
 800f648:	f000 80aa 	beq.w	800f7a0 <_svfiprintf_r+0x1c8>
 800f64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f64e:	445a      	add	r2, fp
 800f650:	9209      	str	r2, [sp, #36]	; 0x24
 800f652:	f89a 3000 	ldrb.w	r3, [sl]
 800f656:	2b00      	cmp	r3, #0
 800f658:	f000 80a2 	beq.w	800f7a0 <_svfiprintf_r+0x1c8>
 800f65c:	2300      	movs	r3, #0
 800f65e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f666:	f10a 0a01 	add.w	sl, sl, #1
 800f66a:	9304      	str	r3, [sp, #16]
 800f66c:	9307      	str	r3, [sp, #28]
 800f66e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f672:	931a      	str	r3, [sp, #104]	; 0x68
 800f674:	4654      	mov	r4, sl
 800f676:	2205      	movs	r2, #5
 800f678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f67c:	4851      	ldr	r0, [pc, #324]	; (800f7c4 <_svfiprintf_r+0x1ec>)
 800f67e:	f7f0 fdcf 	bl	8000220 <memchr>
 800f682:	9a04      	ldr	r2, [sp, #16]
 800f684:	b9d8      	cbnz	r0, 800f6be <_svfiprintf_r+0xe6>
 800f686:	06d0      	lsls	r0, r2, #27
 800f688:	bf44      	itt	mi
 800f68a:	2320      	movmi	r3, #32
 800f68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f690:	0711      	lsls	r1, r2, #28
 800f692:	bf44      	itt	mi
 800f694:	232b      	movmi	r3, #43	; 0x2b
 800f696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f69a:	f89a 3000 	ldrb.w	r3, [sl]
 800f69e:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a0:	d015      	beq.n	800f6ce <_svfiprintf_r+0xf6>
 800f6a2:	9a07      	ldr	r2, [sp, #28]
 800f6a4:	4654      	mov	r4, sl
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	f04f 0c0a 	mov.w	ip, #10
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6b2:	3b30      	subs	r3, #48	; 0x30
 800f6b4:	2b09      	cmp	r3, #9
 800f6b6:	d94e      	bls.n	800f756 <_svfiprintf_r+0x17e>
 800f6b8:	b1b0      	cbz	r0, 800f6e8 <_svfiprintf_r+0x110>
 800f6ba:	9207      	str	r2, [sp, #28]
 800f6bc:	e014      	b.n	800f6e8 <_svfiprintf_r+0x110>
 800f6be:	eba0 0308 	sub.w	r3, r0, r8
 800f6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	9304      	str	r3, [sp, #16]
 800f6ca:	46a2      	mov	sl, r4
 800f6cc:	e7d2      	b.n	800f674 <_svfiprintf_r+0x9c>
 800f6ce:	9b03      	ldr	r3, [sp, #12]
 800f6d0:	1d19      	adds	r1, r3, #4
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	9103      	str	r1, [sp, #12]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	bfbb      	ittet	lt
 800f6da:	425b      	neglt	r3, r3
 800f6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800f6e0:	9307      	strge	r3, [sp, #28]
 800f6e2:	9307      	strlt	r3, [sp, #28]
 800f6e4:	bfb8      	it	lt
 800f6e6:	9204      	strlt	r2, [sp, #16]
 800f6e8:	7823      	ldrb	r3, [r4, #0]
 800f6ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f6ec:	d10c      	bne.n	800f708 <_svfiprintf_r+0x130>
 800f6ee:	7863      	ldrb	r3, [r4, #1]
 800f6f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f6f2:	d135      	bne.n	800f760 <_svfiprintf_r+0x188>
 800f6f4:	9b03      	ldr	r3, [sp, #12]
 800f6f6:	1d1a      	adds	r2, r3, #4
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	9203      	str	r2, [sp, #12]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	bfb8      	it	lt
 800f700:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f704:	3402      	adds	r4, #2
 800f706:	9305      	str	r3, [sp, #20]
 800f708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f7d4 <_svfiprintf_r+0x1fc>
 800f70c:	7821      	ldrb	r1, [r4, #0]
 800f70e:	2203      	movs	r2, #3
 800f710:	4650      	mov	r0, sl
 800f712:	f7f0 fd85 	bl	8000220 <memchr>
 800f716:	b140      	cbz	r0, 800f72a <_svfiprintf_r+0x152>
 800f718:	2340      	movs	r3, #64	; 0x40
 800f71a:	eba0 000a 	sub.w	r0, r0, sl
 800f71e:	fa03 f000 	lsl.w	r0, r3, r0
 800f722:	9b04      	ldr	r3, [sp, #16]
 800f724:	4303      	orrs	r3, r0
 800f726:	3401      	adds	r4, #1
 800f728:	9304      	str	r3, [sp, #16]
 800f72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f72e:	4826      	ldr	r0, [pc, #152]	; (800f7c8 <_svfiprintf_r+0x1f0>)
 800f730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f734:	2206      	movs	r2, #6
 800f736:	f7f0 fd73 	bl	8000220 <memchr>
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d038      	beq.n	800f7b0 <_svfiprintf_r+0x1d8>
 800f73e:	4b23      	ldr	r3, [pc, #140]	; (800f7cc <_svfiprintf_r+0x1f4>)
 800f740:	bb1b      	cbnz	r3, 800f78a <_svfiprintf_r+0x1b2>
 800f742:	9b03      	ldr	r3, [sp, #12]
 800f744:	3307      	adds	r3, #7
 800f746:	f023 0307 	bic.w	r3, r3, #7
 800f74a:	3308      	adds	r3, #8
 800f74c:	9303      	str	r3, [sp, #12]
 800f74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f750:	4433      	add	r3, r6
 800f752:	9309      	str	r3, [sp, #36]	; 0x24
 800f754:	e767      	b.n	800f626 <_svfiprintf_r+0x4e>
 800f756:	fb0c 3202 	mla	r2, ip, r2, r3
 800f75a:	460c      	mov	r4, r1
 800f75c:	2001      	movs	r0, #1
 800f75e:	e7a5      	b.n	800f6ac <_svfiprintf_r+0xd4>
 800f760:	2300      	movs	r3, #0
 800f762:	3401      	adds	r4, #1
 800f764:	9305      	str	r3, [sp, #20]
 800f766:	4619      	mov	r1, r3
 800f768:	f04f 0c0a 	mov.w	ip, #10
 800f76c:	4620      	mov	r0, r4
 800f76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f772:	3a30      	subs	r2, #48	; 0x30
 800f774:	2a09      	cmp	r2, #9
 800f776:	d903      	bls.n	800f780 <_svfiprintf_r+0x1a8>
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d0c5      	beq.n	800f708 <_svfiprintf_r+0x130>
 800f77c:	9105      	str	r1, [sp, #20]
 800f77e:	e7c3      	b.n	800f708 <_svfiprintf_r+0x130>
 800f780:	fb0c 2101 	mla	r1, ip, r1, r2
 800f784:	4604      	mov	r4, r0
 800f786:	2301      	movs	r3, #1
 800f788:	e7f0      	b.n	800f76c <_svfiprintf_r+0x194>
 800f78a:	ab03      	add	r3, sp, #12
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	462a      	mov	r2, r5
 800f790:	4b0f      	ldr	r3, [pc, #60]	; (800f7d0 <_svfiprintf_r+0x1f8>)
 800f792:	a904      	add	r1, sp, #16
 800f794:	4638      	mov	r0, r7
 800f796:	f3af 8000 	nop.w
 800f79a:	1c42      	adds	r2, r0, #1
 800f79c:	4606      	mov	r6, r0
 800f79e:	d1d6      	bne.n	800f74e <_svfiprintf_r+0x176>
 800f7a0:	89ab      	ldrh	r3, [r5, #12]
 800f7a2:	065b      	lsls	r3, r3, #25
 800f7a4:	f53f af2c 	bmi.w	800f600 <_svfiprintf_r+0x28>
 800f7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7aa:	b01d      	add	sp, #116	; 0x74
 800f7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b0:	ab03      	add	r3, sp, #12
 800f7b2:	9300      	str	r3, [sp, #0]
 800f7b4:	462a      	mov	r2, r5
 800f7b6:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <_svfiprintf_r+0x1f8>)
 800f7b8:	a904      	add	r1, sp, #16
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	f000 f87a 	bl	800f8b4 <_printf_i>
 800f7c0:	e7eb      	b.n	800f79a <_svfiprintf_r+0x1c2>
 800f7c2:	bf00      	nop
 800f7c4:	080d2144 	.word	0x080d2144
 800f7c8:	080d214e 	.word	0x080d214e
 800f7cc:	00000000 	.word	0x00000000
 800f7d0:	0800f521 	.word	0x0800f521
 800f7d4:	080d214a 	.word	0x080d214a

0800f7d8 <_printf_common>:
 800f7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7dc:	4616      	mov	r6, r2
 800f7de:	4699      	mov	r9, r3
 800f7e0:	688a      	ldr	r2, [r1, #8]
 800f7e2:	690b      	ldr	r3, [r1, #16]
 800f7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	bfb8      	it	lt
 800f7ec:	4613      	movlt	r3, r2
 800f7ee:	6033      	str	r3, [r6, #0]
 800f7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7f4:	4607      	mov	r7, r0
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	b10a      	cbz	r2, 800f7fe <_printf_common+0x26>
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	6033      	str	r3, [r6, #0]
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	0699      	lsls	r1, r3, #26
 800f802:	bf42      	ittt	mi
 800f804:	6833      	ldrmi	r3, [r6, #0]
 800f806:	3302      	addmi	r3, #2
 800f808:	6033      	strmi	r3, [r6, #0]
 800f80a:	6825      	ldr	r5, [r4, #0]
 800f80c:	f015 0506 	ands.w	r5, r5, #6
 800f810:	d106      	bne.n	800f820 <_printf_common+0x48>
 800f812:	f104 0a19 	add.w	sl, r4, #25
 800f816:	68e3      	ldr	r3, [r4, #12]
 800f818:	6832      	ldr	r2, [r6, #0]
 800f81a:	1a9b      	subs	r3, r3, r2
 800f81c:	42ab      	cmp	r3, r5
 800f81e:	dc26      	bgt.n	800f86e <_printf_common+0x96>
 800f820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f824:	1e13      	subs	r3, r2, #0
 800f826:	6822      	ldr	r2, [r4, #0]
 800f828:	bf18      	it	ne
 800f82a:	2301      	movne	r3, #1
 800f82c:	0692      	lsls	r2, r2, #26
 800f82e:	d42b      	bmi.n	800f888 <_printf_common+0xb0>
 800f830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f834:	4649      	mov	r1, r9
 800f836:	4638      	mov	r0, r7
 800f838:	47c0      	blx	r8
 800f83a:	3001      	adds	r0, #1
 800f83c:	d01e      	beq.n	800f87c <_printf_common+0xa4>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	68e5      	ldr	r5, [r4, #12]
 800f842:	6832      	ldr	r2, [r6, #0]
 800f844:	f003 0306 	and.w	r3, r3, #6
 800f848:	2b04      	cmp	r3, #4
 800f84a:	bf08      	it	eq
 800f84c:	1aad      	subeq	r5, r5, r2
 800f84e:	68a3      	ldr	r3, [r4, #8]
 800f850:	6922      	ldr	r2, [r4, #16]
 800f852:	bf0c      	ite	eq
 800f854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f858:	2500      	movne	r5, #0
 800f85a:	4293      	cmp	r3, r2
 800f85c:	bfc4      	itt	gt
 800f85e:	1a9b      	subgt	r3, r3, r2
 800f860:	18ed      	addgt	r5, r5, r3
 800f862:	2600      	movs	r6, #0
 800f864:	341a      	adds	r4, #26
 800f866:	42b5      	cmp	r5, r6
 800f868:	d11a      	bne.n	800f8a0 <_printf_common+0xc8>
 800f86a:	2000      	movs	r0, #0
 800f86c:	e008      	b.n	800f880 <_printf_common+0xa8>
 800f86e:	2301      	movs	r3, #1
 800f870:	4652      	mov	r2, sl
 800f872:	4649      	mov	r1, r9
 800f874:	4638      	mov	r0, r7
 800f876:	47c0      	blx	r8
 800f878:	3001      	adds	r0, #1
 800f87a:	d103      	bne.n	800f884 <_printf_common+0xac>
 800f87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f884:	3501      	adds	r5, #1
 800f886:	e7c6      	b.n	800f816 <_printf_common+0x3e>
 800f888:	18e1      	adds	r1, r4, r3
 800f88a:	1c5a      	adds	r2, r3, #1
 800f88c:	2030      	movs	r0, #48	; 0x30
 800f88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f892:	4422      	add	r2, r4
 800f894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f89c:	3302      	adds	r3, #2
 800f89e:	e7c7      	b.n	800f830 <_printf_common+0x58>
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	4622      	mov	r2, r4
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	4638      	mov	r0, r7
 800f8a8:	47c0      	blx	r8
 800f8aa:	3001      	adds	r0, #1
 800f8ac:	d0e6      	beq.n	800f87c <_printf_common+0xa4>
 800f8ae:	3601      	adds	r6, #1
 800f8b0:	e7d9      	b.n	800f866 <_printf_common+0x8e>
	...

0800f8b4 <_printf_i>:
 800f8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b8:	460c      	mov	r4, r1
 800f8ba:	4691      	mov	r9, r2
 800f8bc:	7e27      	ldrb	r7, [r4, #24]
 800f8be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f8c0:	2f78      	cmp	r7, #120	; 0x78
 800f8c2:	4680      	mov	r8, r0
 800f8c4:	469a      	mov	sl, r3
 800f8c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8ca:	d807      	bhi.n	800f8dc <_printf_i+0x28>
 800f8cc:	2f62      	cmp	r7, #98	; 0x62
 800f8ce:	d80a      	bhi.n	800f8e6 <_printf_i+0x32>
 800f8d0:	2f00      	cmp	r7, #0
 800f8d2:	f000 80d8 	beq.w	800fa86 <_printf_i+0x1d2>
 800f8d6:	2f58      	cmp	r7, #88	; 0x58
 800f8d8:	f000 80a3 	beq.w	800fa22 <_printf_i+0x16e>
 800f8dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f8e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f8e4:	e03a      	b.n	800f95c <_printf_i+0xa8>
 800f8e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f8ea:	2b15      	cmp	r3, #21
 800f8ec:	d8f6      	bhi.n	800f8dc <_printf_i+0x28>
 800f8ee:	a001      	add	r0, pc, #4	; (adr r0, 800f8f4 <_printf_i+0x40>)
 800f8f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f8f4:	0800f94d 	.word	0x0800f94d
 800f8f8:	0800f961 	.word	0x0800f961
 800f8fc:	0800f8dd 	.word	0x0800f8dd
 800f900:	0800f8dd 	.word	0x0800f8dd
 800f904:	0800f8dd 	.word	0x0800f8dd
 800f908:	0800f8dd 	.word	0x0800f8dd
 800f90c:	0800f961 	.word	0x0800f961
 800f910:	0800f8dd 	.word	0x0800f8dd
 800f914:	0800f8dd 	.word	0x0800f8dd
 800f918:	0800f8dd 	.word	0x0800f8dd
 800f91c:	0800f8dd 	.word	0x0800f8dd
 800f920:	0800fa6d 	.word	0x0800fa6d
 800f924:	0800f991 	.word	0x0800f991
 800f928:	0800fa4f 	.word	0x0800fa4f
 800f92c:	0800f8dd 	.word	0x0800f8dd
 800f930:	0800f8dd 	.word	0x0800f8dd
 800f934:	0800fa8f 	.word	0x0800fa8f
 800f938:	0800f8dd 	.word	0x0800f8dd
 800f93c:	0800f991 	.word	0x0800f991
 800f940:	0800f8dd 	.word	0x0800f8dd
 800f944:	0800f8dd 	.word	0x0800f8dd
 800f948:	0800fa57 	.word	0x0800fa57
 800f94c:	680b      	ldr	r3, [r1, #0]
 800f94e:	1d1a      	adds	r2, r3, #4
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	600a      	str	r2, [r1, #0]
 800f954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f95c:	2301      	movs	r3, #1
 800f95e:	e0a3      	b.n	800faa8 <_printf_i+0x1f4>
 800f960:	6825      	ldr	r5, [r4, #0]
 800f962:	6808      	ldr	r0, [r1, #0]
 800f964:	062e      	lsls	r6, r5, #24
 800f966:	f100 0304 	add.w	r3, r0, #4
 800f96a:	d50a      	bpl.n	800f982 <_printf_i+0xce>
 800f96c:	6805      	ldr	r5, [r0, #0]
 800f96e:	600b      	str	r3, [r1, #0]
 800f970:	2d00      	cmp	r5, #0
 800f972:	da03      	bge.n	800f97c <_printf_i+0xc8>
 800f974:	232d      	movs	r3, #45	; 0x2d
 800f976:	426d      	negs	r5, r5
 800f978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f97c:	485e      	ldr	r0, [pc, #376]	; (800faf8 <_printf_i+0x244>)
 800f97e:	230a      	movs	r3, #10
 800f980:	e019      	b.n	800f9b6 <_printf_i+0x102>
 800f982:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f986:	6805      	ldr	r5, [r0, #0]
 800f988:	600b      	str	r3, [r1, #0]
 800f98a:	bf18      	it	ne
 800f98c:	b22d      	sxthne	r5, r5
 800f98e:	e7ef      	b.n	800f970 <_printf_i+0xbc>
 800f990:	680b      	ldr	r3, [r1, #0]
 800f992:	6825      	ldr	r5, [r4, #0]
 800f994:	1d18      	adds	r0, r3, #4
 800f996:	6008      	str	r0, [r1, #0]
 800f998:	0628      	lsls	r0, r5, #24
 800f99a:	d501      	bpl.n	800f9a0 <_printf_i+0xec>
 800f99c:	681d      	ldr	r5, [r3, #0]
 800f99e:	e002      	b.n	800f9a6 <_printf_i+0xf2>
 800f9a0:	0669      	lsls	r1, r5, #25
 800f9a2:	d5fb      	bpl.n	800f99c <_printf_i+0xe8>
 800f9a4:	881d      	ldrh	r5, [r3, #0]
 800f9a6:	4854      	ldr	r0, [pc, #336]	; (800faf8 <_printf_i+0x244>)
 800f9a8:	2f6f      	cmp	r7, #111	; 0x6f
 800f9aa:	bf0c      	ite	eq
 800f9ac:	2308      	moveq	r3, #8
 800f9ae:	230a      	movne	r3, #10
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9b6:	6866      	ldr	r6, [r4, #4]
 800f9b8:	60a6      	str	r6, [r4, #8]
 800f9ba:	2e00      	cmp	r6, #0
 800f9bc:	bfa2      	ittt	ge
 800f9be:	6821      	ldrge	r1, [r4, #0]
 800f9c0:	f021 0104 	bicge.w	r1, r1, #4
 800f9c4:	6021      	strge	r1, [r4, #0]
 800f9c6:	b90d      	cbnz	r5, 800f9cc <_printf_i+0x118>
 800f9c8:	2e00      	cmp	r6, #0
 800f9ca:	d04d      	beq.n	800fa68 <_printf_i+0x1b4>
 800f9cc:	4616      	mov	r6, r2
 800f9ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9d2:	fb03 5711 	mls	r7, r3, r1, r5
 800f9d6:	5dc7      	ldrb	r7, [r0, r7]
 800f9d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f9dc:	462f      	mov	r7, r5
 800f9de:	42bb      	cmp	r3, r7
 800f9e0:	460d      	mov	r5, r1
 800f9e2:	d9f4      	bls.n	800f9ce <_printf_i+0x11a>
 800f9e4:	2b08      	cmp	r3, #8
 800f9e6:	d10b      	bne.n	800fa00 <_printf_i+0x14c>
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	07df      	lsls	r7, r3, #31
 800f9ec:	d508      	bpl.n	800fa00 <_printf_i+0x14c>
 800f9ee:	6923      	ldr	r3, [r4, #16]
 800f9f0:	6861      	ldr	r1, [r4, #4]
 800f9f2:	4299      	cmp	r1, r3
 800f9f4:	bfde      	ittt	le
 800f9f6:	2330      	movle	r3, #48	; 0x30
 800f9f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f9fc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800fa00:	1b92      	subs	r2, r2, r6
 800fa02:	6122      	str	r2, [r4, #16]
 800fa04:	f8cd a000 	str.w	sl, [sp]
 800fa08:	464b      	mov	r3, r9
 800fa0a:	aa03      	add	r2, sp, #12
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	4640      	mov	r0, r8
 800fa10:	f7ff fee2 	bl	800f7d8 <_printf_common>
 800fa14:	3001      	adds	r0, #1
 800fa16:	d14c      	bne.n	800fab2 <_printf_i+0x1fe>
 800fa18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa1c:	b004      	add	sp, #16
 800fa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa22:	4835      	ldr	r0, [pc, #212]	; (800faf8 <_printf_i+0x244>)
 800fa24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	680e      	ldr	r6, [r1, #0]
 800fa2c:	061f      	lsls	r7, r3, #24
 800fa2e:	f856 5b04 	ldr.w	r5, [r6], #4
 800fa32:	600e      	str	r6, [r1, #0]
 800fa34:	d514      	bpl.n	800fa60 <_printf_i+0x1ac>
 800fa36:	07d9      	lsls	r1, r3, #31
 800fa38:	bf44      	itt	mi
 800fa3a:	f043 0320 	orrmi.w	r3, r3, #32
 800fa3e:	6023      	strmi	r3, [r4, #0]
 800fa40:	b91d      	cbnz	r5, 800fa4a <_printf_i+0x196>
 800fa42:	6823      	ldr	r3, [r4, #0]
 800fa44:	f023 0320 	bic.w	r3, r3, #32
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	2310      	movs	r3, #16
 800fa4c:	e7b0      	b.n	800f9b0 <_printf_i+0xfc>
 800fa4e:	6823      	ldr	r3, [r4, #0]
 800fa50:	f043 0320 	orr.w	r3, r3, #32
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	2378      	movs	r3, #120	; 0x78
 800fa58:	4828      	ldr	r0, [pc, #160]	; (800fafc <_printf_i+0x248>)
 800fa5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa5e:	e7e3      	b.n	800fa28 <_printf_i+0x174>
 800fa60:	065e      	lsls	r6, r3, #25
 800fa62:	bf48      	it	mi
 800fa64:	b2ad      	uxthmi	r5, r5
 800fa66:	e7e6      	b.n	800fa36 <_printf_i+0x182>
 800fa68:	4616      	mov	r6, r2
 800fa6a:	e7bb      	b.n	800f9e4 <_printf_i+0x130>
 800fa6c:	680b      	ldr	r3, [r1, #0]
 800fa6e:	6826      	ldr	r6, [r4, #0]
 800fa70:	6960      	ldr	r0, [r4, #20]
 800fa72:	1d1d      	adds	r5, r3, #4
 800fa74:	600d      	str	r5, [r1, #0]
 800fa76:	0635      	lsls	r5, r6, #24
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	d501      	bpl.n	800fa80 <_printf_i+0x1cc>
 800fa7c:	6018      	str	r0, [r3, #0]
 800fa7e:	e002      	b.n	800fa86 <_printf_i+0x1d2>
 800fa80:	0671      	lsls	r1, r6, #25
 800fa82:	d5fb      	bpl.n	800fa7c <_printf_i+0x1c8>
 800fa84:	8018      	strh	r0, [r3, #0]
 800fa86:	2300      	movs	r3, #0
 800fa88:	6123      	str	r3, [r4, #16]
 800fa8a:	4616      	mov	r6, r2
 800fa8c:	e7ba      	b.n	800fa04 <_printf_i+0x150>
 800fa8e:	680b      	ldr	r3, [r1, #0]
 800fa90:	1d1a      	adds	r2, r3, #4
 800fa92:	600a      	str	r2, [r1, #0]
 800fa94:	681e      	ldr	r6, [r3, #0]
 800fa96:	6862      	ldr	r2, [r4, #4]
 800fa98:	2100      	movs	r1, #0
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	f7f0 fbc0 	bl	8000220 <memchr>
 800faa0:	b108      	cbz	r0, 800faa6 <_printf_i+0x1f2>
 800faa2:	1b80      	subs	r0, r0, r6
 800faa4:	6060      	str	r0, [r4, #4]
 800faa6:	6863      	ldr	r3, [r4, #4]
 800faa8:	6123      	str	r3, [r4, #16]
 800faaa:	2300      	movs	r3, #0
 800faac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fab0:	e7a8      	b.n	800fa04 <_printf_i+0x150>
 800fab2:	6923      	ldr	r3, [r4, #16]
 800fab4:	4632      	mov	r2, r6
 800fab6:	4649      	mov	r1, r9
 800fab8:	4640      	mov	r0, r8
 800faba:	47d0      	blx	sl
 800fabc:	3001      	adds	r0, #1
 800fabe:	d0ab      	beq.n	800fa18 <_printf_i+0x164>
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	079b      	lsls	r3, r3, #30
 800fac4:	d413      	bmi.n	800faee <_printf_i+0x23a>
 800fac6:	68e0      	ldr	r0, [r4, #12]
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	4298      	cmp	r0, r3
 800facc:	bfb8      	it	lt
 800face:	4618      	movlt	r0, r3
 800fad0:	e7a4      	b.n	800fa1c <_printf_i+0x168>
 800fad2:	2301      	movs	r3, #1
 800fad4:	4632      	mov	r2, r6
 800fad6:	4649      	mov	r1, r9
 800fad8:	4640      	mov	r0, r8
 800fada:	47d0      	blx	sl
 800fadc:	3001      	adds	r0, #1
 800fade:	d09b      	beq.n	800fa18 <_printf_i+0x164>
 800fae0:	3501      	adds	r5, #1
 800fae2:	68e3      	ldr	r3, [r4, #12]
 800fae4:	9903      	ldr	r1, [sp, #12]
 800fae6:	1a5b      	subs	r3, r3, r1
 800fae8:	42ab      	cmp	r3, r5
 800faea:	dcf2      	bgt.n	800fad2 <_printf_i+0x21e>
 800faec:	e7eb      	b.n	800fac6 <_printf_i+0x212>
 800faee:	2500      	movs	r5, #0
 800faf0:	f104 0619 	add.w	r6, r4, #25
 800faf4:	e7f5      	b.n	800fae2 <_printf_i+0x22e>
 800faf6:	bf00      	nop
 800faf8:	080d2155 	.word	0x080d2155
 800fafc:	080d2166 	.word	0x080d2166

0800fb00 <memmove>:
 800fb00:	4288      	cmp	r0, r1
 800fb02:	b510      	push	{r4, lr}
 800fb04:	eb01 0402 	add.w	r4, r1, r2
 800fb08:	d902      	bls.n	800fb10 <memmove+0x10>
 800fb0a:	4284      	cmp	r4, r0
 800fb0c:	4623      	mov	r3, r4
 800fb0e:	d807      	bhi.n	800fb20 <memmove+0x20>
 800fb10:	1e43      	subs	r3, r0, #1
 800fb12:	42a1      	cmp	r1, r4
 800fb14:	d008      	beq.n	800fb28 <memmove+0x28>
 800fb16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb1e:	e7f8      	b.n	800fb12 <memmove+0x12>
 800fb20:	4402      	add	r2, r0
 800fb22:	4601      	mov	r1, r0
 800fb24:	428a      	cmp	r2, r1
 800fb26:	d100      	bne.n	800fb2a <memmove+0x2a>
 800fb28:	bd10      	pop	{r4, pc}
 800fb2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb32:	e7f7      	b.n	800fb24 <memmove+0x24>

0800fb34 <_realloc_r>:
 800fb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb36:	4607      	mov	r7, r0
 800fb38:	4614      	mov	r4, r2
 800fb3a:	460e      	mov	r6, r1
 800fb3c:	b921      	cbnz	r1, 800fb48 <_realloc_r+0x14>
 800fb3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb42:	4611      	mov	r1, r2
 800fb44:	f7ff bb9c 	b.w	800f280 <_malloc_r>
 800fb48:	b922      	cbnz	r2, 800fb54 <_realloc_r+0x20>
 800fb4a:	f7ff fc99 	bl	800f480 <_free_r>
 800fb4e:	4625      	mov	r5, r4
 800fb50:	4628      	mov	r0, r5
 800fb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb54:	f000 f814 	bl	800fb80 <_malloc_usable_size_r>
 800fb58:	42a0      	cmp	r0, r4
 800fb5a:	d20f      	bcs.n	800fb7c <_realloc_r+0x48>
 800fb5c:	4621      	mov	r1, r4
 800fb5e:	4638      	mov	r0, r7
 800fb60:	f7ff fb8e 	bl	800f280 <_malloc_r>
 800fb64:	4605      	mov	r5, r0
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d0f2      	beq.n	800fb50 <_realloc_r+0x1c>
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	4622      	mov	r2, r4
 800fb6e:	f7ff fb71 	bl	800f254 <memcpy>
 800fb72:	4631      	mov	r1, r6
 800fb74:	4638      	mov	r0, r7
 800fb76:	f7ff fc83 	bl	800f480 <_free_r>
 800fb7a:	e7e9      	b.n	800fb50 <_realloc_r+0x1c>
 800fb7c:	4635      	mov	r5, r6
 800fb7e:	e7e7      	b.n	800fb50 <_realloc_r+0x1c>

0800fb80 <_malloc_usable_size_r>:
 800fb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb84:	1f18      	subs	r0, r3, #4
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	bfbc      	itt	lt
 800fb8a:	580b      	ldrlt	r3, [r1, r0]
 800fb8c:	18c0      	addlt	r0, r0, r3
 800fb8e:	4770      	bx	lr

0800fb90 <_init>:
 800fb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb92:	bf00      	nop
 800fb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb96:	bc08      	pop	{r3}
 800fb98:	469e      	mov	lr, r3
 800fb9a:	4770      	bx	lr

0800fb9c <_fini>:
 800fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb9e:	bf00      	nop
 800fba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fba2:	bc08      	pop	{r3}
 800fba4:	469e      	mov	lr, r3
 800fba6:	4770      	bx	lr
