
TP_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fae8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000c25d0  0800fcb8  0800fcb8  0001fcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d2288  080d2288  000f00b4  2**0
                  CONTENTS
  4 .ARM          00000008  080d2288  080d2288  000e2288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d2290  080d2290  000f00b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d2290  080d2290  000e2290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080d2294  080d2294  000e2294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080d2298  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008bd8  200000b4  080d234c  000f00b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008c8c  080d234c  000f8c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000f00b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035d1d  00000000  00000000  000f00e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006410  00000000  00000000  00125e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002800  00000000  00000000  0012c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002578  00000000  00000000  0012ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f104  00000000  00000000  00130f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f188  00000000  00000000  00160094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001183b1  00000000  00000000  0018f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002a75cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aeb0  00000000  00000000  002a7620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fca0 	.word	0x0800fca0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800fca0 	.word	0x0800fca0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000d0 	.word	0x200000d0
 80005e8:	20000184 	.word	0x20000184

080005ec <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <vApplicationGetTimerTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <vApplicationGetTimerTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	20000384 	.word	0x20000384
 800061c:	20000438 	.word	0x20000438

08000620 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800062a:	20c8      	movs	r0, #200	; 0xc8
 800062c:	f002 fdb6 	bl	800319c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000630:	f000 fa7a 	bl	8000b28 <ft5336_I2C_InitializeIfRequired>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b084      	sub	sp, #16
 8000656:	af00      	add	r7, sp, #0
 8000658:	4603      	mov	r3, r0
 800065a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000664:	2300      	movs	r3, #0
 8000666:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000668:	f000 fa5e 	bl	8000b28 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e010      	b.n	8000694 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	21a8      	movs	r1, #168	; 0xa8
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fd71 	bl	8003160 <TS_IO_Read>
 800067e:	4603      	mov	r3, r0
 8000680:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b51      	cmp	r3, #81	; 0x51
 8000688:	d101      	bne.n	800068e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	3301      	adds	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d802      	bhi.n	80006a0 <ft5336_ReadID+0x4e>
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0e8      	beq.n	8000672 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80006a0:	7b7b      	ldrb	r3, [r7, #13]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b29b      	uxth	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fa44 	bl	8000b48 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f932 	bl	800092c <ft5336_TS_DisableIT>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fd3b 	bl	8003160 <TS_IO_Read>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d901      	bls.n	8000706 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <ft5336_TS_DetectTouch+0x50>)
 800070c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <ft5336_TS_DetectTouch+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	b2db      	uxtb	r3, r3
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000838 	.word	0x20000838

08000724 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000746:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 8000748:	789a      	ldrb	r2, [r3, #2]
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	429a      	cmp	r2, r3
 8000750:	f080 80cf 	bcs.w	80008f2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000754:	4b69      	ldr	r3, [pc, #420]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d871      	bhi.n	8000840 <ft5336_TS_GetXY+0x11c>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <ft5336_TS_GetXY+0x40>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	0800078d 	.word	0x0800078d
 8000768:	0800079f 	.word	0x0800079f
 800076c:	080007b1 	.word	0x080007b1
 8000770:	080007c3 	.word	0x080007c3
 8000774:	080007d5 	.word	0x080007d5
 8000778:	080007e7 	.word	0x080007e7
 800077c:	080007f9 	.word	0x080007f9
 8000780:	0800080b 	.word	0x0800080b
 8000784:	0800081d 	.word	0x0800081d
 8000788:	0800082f 	.word	0x0800082f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800078c:	2304      	movs	r3, #4
 800078e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000790:	2303      	movs	r3, #3
 8000792:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000794:	2306      	movs	r3, #6
 8000796:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000798:	2305      	movs	r3, #5
 800079a:	753b      	strb	r3, [r7, #20]
      break;
 800079c:	e051      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800079e:	230a      	movs	r3, #10
 80007a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80007a2:	2309      	movs	r3, #9
 80007a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80007a6:	230c      	movs	r3, #12
 80007a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007aa:	230b      	movs	r3, #11
 80007ac:	753b      	strb	r3, [r7, #20]
      break;
 80007ae:	e048      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007b0:	2310      	movs	r3, #16
 80007b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007b4:	230f      	movs	r3, #15
 80007b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b8:	2312      	movs	r3, #18
 80007ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007bc:	2311      	movs	r3, #17
 80007be:	753b      	strb	r3, [r7, #20]
      break;
 80007c0:	e03f      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007c2:	2316      	movs	r3, #22
 80007c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007c6:	2315      	movs	r3, #21
 80007c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007ca:	2318      	movs	r3, #24
 80007cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007ce:	2317      	movs	r3, #23
 80007d0:	753b      	strb	r3, [r7, #20]
      break;
 80007d2:	e036      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007d4:	231c      	movs	r3, #28
 80007d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d8:	231b      	movs	r3, #27
 80007da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007dc:	231e      	movs	r3, #30
 80007de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007e0:	231d      	movs	r3, #29
 80007e2:	753b      	strb	r3, [r7, #20]
      break;
 80007e4:	e02d      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007e6:	2322      	movs	r3, #34	; 0x22
 80007e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007ea:	2321      	movs	r3, #33	; 0x21
 80007ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007ee:	2324      	movs	r3, #36	; 0x24
 80007f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007f2:	2323      	movs	r3, #35	; 0x23
 80007f4:	753b      	strb	r3, [r7, #20]
      break;
 80007f6:	e024      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f8:	2328      	movs	r3, #40	; 0x28
 80007fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007fc:	2327      	movs	r3, #39	; 0x27
 80007fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000800:	232a      	movs	r3, #42	; 0x2a
 8000802:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000804:	2329      	movs	r3, #41	; 0x29
 8000806:	753b      	strb	r3, [r7, #20]
      break;
 8000808:	e01b      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800080a:	232e      	movs	r3, #46	; 0x2e
 800080c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000812:	2330      	movs	r3, #48	; 0x30
 8000814:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000816:	232f      	movs	r3, #47	; 0x2f
 8000818:	753b      	strb	r3, [r7, #20]
      break;
 800081a:	e012      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800081c:	2334      	movs	r3, #52	; 0x34
 800081e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000820:	2333      	movs	r3, #51	; 0x33
 8000822:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000824:	2336      	movs	r3, #54	; 0x36
 8000826:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000828:	2335      	movs	r3, #53	; 0x35
 800082a:	753b      	strb	r3, [r7, #20]
      break;
 800082c:	e009      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800082e:	233a      	movs	r3, #58	; 0x3a
 8000830:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000832:	2339      	movs	r3, #57	; 0x39
 8000834:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000836:	233c      	movs	r3, #60	; 0x3c
 8000838:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800083a:	233b      	movs	r3, #59	; 0x3b
 800083c:	753b      	strb	r3, [r7, #20]
      break;
 800083e:	e000      	b.n	8000842 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000840:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	7dfa      	ldrb	r2, [r7, #23]
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fc88 	bl	8003160 <TS_IO_Read>
 8000850:	4603      	mov	r3, r0
 8000852:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800085c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	7dba      	ldrb	r2, [r7, #22]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fc7a 	bl	8003160 <TS_IO_Read>
 800086c:	4603      	mov	r3, r0
 800086e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000870:	7cfb      	ldrb	r3, [r7, #19]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800088a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	7d7a      	ldrb	r2, [r7, #21]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fc5f 	bl	8003160 <TS_IO_Read>
 80008a2:	4603      	mov	r3, r0
 80008a4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008ae:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	7d3a      	ldrb	r2, [r7, #20]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fc51 	bl	8003160 <TS_IO_Read>
 80008be:	4603      	mov	r3, r0
 80008c0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008c2:	7cfb      	ldrb	r3, [r7, #19]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008dc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <ft5336_TS_GetXY+0x1dc>)
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 80008e8:	789b      	ldrb	r3, [r3, #2]
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <ft5336_TS_GetXY+0x1d8>)
 80008f0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000838 	.word	0x20000838
 8000900:	2000083c 	.word	0x2000083c

08000904 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	21a4      	movs	r1, #164	; 0xa4
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fc04 	bl	800312c <TS_IO_Write>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	21a4      	movs	r1, #164	; 0xa4
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fbf0 	bl	800312c <TS_IO_Write>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	6039      	str	r1, [r7, #0]
 800098c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2101      	movs	r1, #1
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fbe1 	bl	8003160 <TS_IO_Read>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4603      	mov	r3, r0
 80009c2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <ft5336_TS_GetTouchInfo+0x158>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	461a      	mov	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	4293      	cmp	r3, r2
 80009de:	f080 8090 	bcs.w	8000b02 <ft5336_TS_GetTouchInfo+0x14e>
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	2b09      	cmp	r3, #9
 80009e6:	d85d      	bhi.n	8000aa4 <ft5336_TS_GetTouchInfo+0xf0>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <ft5336_TS_GetTouchInfo+0x3c>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a27 	.word	0x08000a27
 80009f8:	08000a35 	.word	0x08000a35
 80009fc:	08000a43 	.word	0x08000a43
 8000a00:	08000a51 	.word	0x08000a51
 8000a04:	08000a5f 	.word	0x08000a5f
 8000a08:	08000a6d 	.word	0x08000a6d
 8000a0c:	08000a7b 	.word	0x08000a7b
 8000a10:	08000a89 	.word	0x08000a89
 8000a14:	08000a97 	.word	0x08000a97
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a20:	2308      	movs	r3, #8
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e03f      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a26:	2309      	movs	r3, #9
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a2a:	230d      	movs	r3, #13
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a2e:	230e      	movs	r3, #14
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e038      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a34:	230f      	movs	r3, #15
 8000a36:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a38:	2313      	movs	r3, #19
 8000a3a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a3c:	2314      	movs	r3, #20
 8000a3e:	757b      	strb	r3, [r7, #21]
      break;
 8000a40:	e031      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a42:	2315      	movs	r3, #21
 8000a44:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a46:	2319      	movs	r3, #25
 8000a48:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a4a:	231a      	movs	r3, #26
 8000a4c:	757b      	strb	r3, [r7, #21]
      break;
 8000a4e:	e02a      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a50:	231b      	movs	r3, #27
 8000a52:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a54:	231f      	movs	r3, #31
 8000a56:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	757b      	strb	r3, [r7, #21]
      break;
 8000a5c:	e023      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a5e:	2321      	movs	r3, #33	; 0x21
 8000a60:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a62:	2325      	movs	r3, #37	; 0x25
 8000a64:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a66:	2326      	movs	r3, #38	; 0x26
 8000a68:	757b      	strb	r3, [r7, #21]
      break;
 8000a6a:	e01c      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a6c:	2327      	movs	r3, #39	; 0x27
 8000a6e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a70:	232b      	movs	r3, #43	; 0x2b
 8000a72:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a74:	232c      	movs	r3, #44	; 0x2c
 8000a76:	757b      	strb	r3, [r7, #21]
      break;
 8000a78:	e015      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a7a:	232d      	movs	r3, #45	; 0x2d
 8000a7c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a7e:	2331      	movs	r3, #49	; 0x31
 8000a80:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a82:	2332      	movs	r3, #50	; 0x32
 8000a84:	757b      	strb	r3, [r7, #21]
      break;
 8000a86:	e00e      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a88:	2333      	movs	r3, #51	; 0x33
 8000a8a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a8c:	2337      	movs	r3, #55	; 0x37
 8000a8e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a90:	2338      	movs	r3, #56	; 0x38
 8000a92:	757b      	strb	r3, [r7, #21]
      break;
 8000a94:	e007      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a96:	2339      	movs	r3, #57	; 0x39
 8000a98:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a9a:	233d      	movs	r3, #61	; 0x3d
 8000a9c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a9e:	233e      	movs	r3, #62	; 0x3e
 8000aa0:	757b      	strb	r3, [r7, #21]
      break;
 8000aa2:	e000      	b.n	8000aa6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000aa4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	7dfa      	ldrb	r2, [r7, #23]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fb56 	bl	8003160 <TS_IO_Read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab8:	7d3b      	ldrb	r3, [r7, #20]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	119b      	asrs	r3, r3, #6
 8000abe:	f003 0203 	and.w	r2, r3, #3
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	7dba      	ldrb	r2, [r7, #22]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fb46 	bl	8003160 <TS_IO_Read>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad8:	7d3b      	ldrb	r3, [r7, #20]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	7d7a      	ldrb	r2, [r7, #21]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fb38 	bl	8003160 <TS_IO_Read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000af4:	7d3b      	ldrb	r3, [r7, #20]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	111b      	asrs	r3, r3, #4
 8000afa:	f003 0204 	and.w	r2, r3, #4
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000838 	.word	0x20000838

08000b10 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000838 	.word	0x20000838

08000b28 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b2c:	f7ff fff0 	bl	8000b10 <ft5336_Get_I2C_InitializedStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b36:	f002 faef 	bl	8003118 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b3a:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
  }
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000838 	.word	0x20000838

08000b48 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b5b0      	push	{r4, r5, r7, lr}
 8000b66:	b0c0      	sub	sp, #256	; 0x100
 8000b68:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	stateEtat = JEU_ACCUEIL;
 8000b6a:	4bd7      	ldr	r3, [pc, #860]	; (8000ec8 <main+0x364>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
	score = 0;
 8000b70:	4bd6      	ldr	r3, [pc, #856]	; (8000ecc <main+0x368>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	801a      	strh	r2, [r3, #0]
	vitesse = 1;
 8000b76:	4bd6      	ldr	r3, [pc, #856]	; (8000ed0 <main+0x36c>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
	parties = 0;
 8000b7c:	4bd5      	ldr	r3, [pc, #852]	; (8000ed4 <main+0x370>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	char text[50]={};
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000b88:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b8c:	222e      	movs	r2, #46	; 0x2e
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00e fbf5 	bl	800f380 <memset>
	char textFromUart0[50]={};
 8000b96:	2300      	movs	r3, #0
 8000b98:	673b      	str	r3, [r7, #112]	; 0x70
 8000b9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b9e:	222e      	movs	r2, #46	; 0x2e
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00e fbec 	bl	800f380 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potlb,potl,potr,joystick_h, joystick_v;
	potlb = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	667b      	str	r3, [r7, #100]	; 0x64
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66bb      	str	r3, [r7, #104]	; 0x68

	RTC_TimeTypeDef* sT = {0};
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	RTC_DateTypeDef* sD = {0};
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	uint8_t BP_old,BP_new;
	uint8_t light = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f004 fe54 	bl	8005882 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 fa47 	bl	800106c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bde:	f000 fab7 	bl	8001150 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f001 f84d 	bl	8001c80 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000be6:	f000 fb31 	bl	800124c <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000bea:	f000 fbab 	bl	8001344 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000bee:	f000 fff7 	bl	8001be0 <MX_FMC_Init>
  MX_I2C1_Init();
 8000bf2:	f000 fbd9 	bl	80013a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000bf6:	f000 fc17 	bl	8001428 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000bfa:	f000 fc55 	bl	80014a8 <MX_LTDC_Init>
  MX_RTC_Init();
 8000bfe:	f000 fce9 	bl	80015d4 <MX_RTC_Init>
  MX_SPI2_Init();
 8000c02:	f000 fd8d 	bl	8001720 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c06:	f000 fdc9 	bl	800179c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c0a:	f000 fe1b 	bl	8001844 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c0e:	f000 fe67 	bl	80018e0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000c12:	f000 feb3 	bl	800197c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000c16:	f000 feff 	bl	8001a18 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000c1a:	f000 ff81 	bl	8001b20 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000c1e:	f000 ffaf 	bl	8001b80 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000c22:	f000 fac1 	bl	80011a8 <MX_ADC1_Init>
  MX_DAC_Init();
 8000c26:	f000 fb63 	bl	80012f0 <MX_DAC_Init>
  MX_UART7_Init();
 8000c2a:	f000 ff49 	bl	8001ac0 <MX_UART7_Init>
  MX_RNG_Init();
 8000c2e:	f000 fcbd 	bl	80015ac <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000c32:	f002 fabf 	bl	80031b4 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000c36:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f002 fb52 	bl	80032e4 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000c40:	f002 fb28 	bl	8003294 <BSP_LCD_GetXSize>
 8000c44:	4604      	mov	r4, r0
 8000c46:	f002 fb39 	bl	80032bc <BSP_LCD_GetYSize>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	fb03 f304 	mul.w	r3, r3, r4
 8000c50:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4619      	mov	r1, r3
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f002 fb43 	bl	80032e4 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000c5e:	f003 f8bb 	bl	8003dd8 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f002 fb9e 	bl	80033a4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8000c68:	489b      	ldr	r0, [pc, #620]	; (8000ed8 <main+0x374>)
 8000c6a:	f002 fc0d 	bl	8003488 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(amongx,amongy,(uint8_t*)Amongus_bmp);
    //BSP_LCD_SelectLayer(1);
    //BSP_LCD_Clear(LCD_COLOR_RED);
    //BSP_LCD_DrawBitmap(250,120,(uint8_t*)Karim_bmp);
    BSP_LCD_SelectLayer(1);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f002 fb98 	bl	80033a4 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8000c74:	4898      	ldr	r0, [pc, #608]	; (8000ed8 <main+0x374>)
 8000c76:	f002 fc07 	bl	8003488 <BSP_LCD_Clear>
    BSP_LCD_Clear(00);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f002 fc04 	bl	8003488 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 8000c80:	4896      	ldr	r0, [pc, #600]	; (8000edc <main+0x378>)
 8000c82:	f002 fbd1 	bl	8003428 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8a:	f002 fb9b 	bl	80033c4 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(00);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f002 fbb0 	bl	80033f4 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c94:	f002 fafe 	bl	8003294 <BSP_LCD_GetXSize>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29c      	uxth	r4, r3
 8000c9c:	f002 fb0e 	bl	80032bc <BSP_LCD_GetYSize>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f003 fca8 	bl	80045fc <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutexScreen */
  osMutexDef(mutexScreen);
 8000cac:	2300      	movs	r3, #0
 8000cae:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  mutexScreenHandle = osMutexCreate(osMutex(mutexScreen));
 8000cb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f00b fa51 	bl	800c160 <osMutexCreate>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a87      	ldr	r2, [pc, #540]	; (8000ee0 <main+0x37c>)
 8000cc2:	6013      	str	r3, [r2, #0]
  /* definition and creation of TimerAffichage */
  //osTimerDef(TimerAffichage, CallbackDisplay);
  //TimerAffichageHandle = osTimerCreate(osTimer(TimerAffichage), osTimerOnce, NULL);

  /* definition and creation of TimerLED */
  osTimerDef(TimerLED, CallbackLED);
 8000cc4:	4b87      	ldr	r3, [pc, #540]	; (8000ee4 <main+0x380>)
 8000cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8000cc8:	2300      	movs	r3, #0
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
  TimerLEDHandle = osTimerCreate(osTimer(TimerLED), osTimerPeriodic, NULL);
 8000ccc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00b f96f 	bl	800bfb8 <osTimerCreate>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a82      	ldr	r2, [pc, #520]	; (8000ee8 <main+0x384>)
 8000cde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  osTimerStart(TimerLEDHandle,1000);
 8000ce0:	4b81      	ldr	r3, [pc, #516]	; (8000ee8 <main+0x384>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00b f999 	bl	800c020 <osTimerStart>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of swordsPos */
  osMessageQDef(swordsPos, 16, uint8_t);
 8000cee:	4b7f      	ldr	r3, [pc, #508]	; (8000eec <main+0x388>)
 8000cf0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  swordsPosHandle = osMessageCreate(osMessageQ(swordsPos), NULL);
 8000cfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f00b fa45 	bl	800c190 <osMessageCreate>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a79      	ldr	r2, [pc, #484]	; (8000ef0 <main+0x38c>)
 8000d0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of collideFlag */
  osMessageQDef(collideFlag, 16, uint32_t);
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <main+0x390>)
 8000d0e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  collideFlagHandle = osMessageCreate(osMessageQ(collideFlag), NULL);
 8000d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00b fa36 	bl	800c190 <osMessageCreate>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a74      	ldr	r2, [pc, #464]	; (8000ef8 <main+0x394>)
 8000d28:	6013      	str	r3, [r2, #0]

  /* definition and creation of scoreIncrem */
  osMessageQDef(scoreIncrem, 8, uint16_t);
 8000d2a:	4b74      	ldr	r3, [pc, #464]	; (8000efc <main+0x398>)
 8000d2c:	f107 0420 	add.w	r4, r7, #32
 8000d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  scoreIncremHandle = osMessageCreate(osMessageQ(scoreIncrem), NULL);
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00b fa27 	bl	800c190 <osMessageCreate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a6e      	ldr	r2, [pc, #440]	; (8000f00 <main+0x39c>)
 8000d46:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 1024);
 8000d48:	4b6e      	ldr	r3, [pc, #440]	; (8000f04 <main+0x3a0>)
 8000d4a:	1d3c      	adds	r4, r7, #4
 8000d4c:	461d      	mov	r5, r3
 8000d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00b f8c9 	bl	800bef6 <osThreadCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a68      	ldr	r2, [pc, #416]	; (8000f08 <main+0x3a4>)
 8000d68:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d6a:	f00b f8bd 	bl	800bee8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	4866      	ldr	r0, [pc, #408]	; (8000f0c <main+0x3a8>)
 8000d74:	f006 fba4 	bl	80074c0 <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d80:	4863      	ldr	r0, [pc, #396]	; (8000f10 <main+0x3ac>)
 8000d82:	f006 fbb5 	bl	80074f0 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8a:	4860      	ldr	r0, [pc, #384]	; (8000f0c <main+0x3a8>)
 8000d8c:	f006 fb98 	bl	80074c0 <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	2120      	movs	r1, #32
 8000d96:	485f      	ldr	r0, [pc, #380]	; (8000f14 <main+0x3b0>)
 8000d98:	f006 fbaa 	bl	80074f0 <HAL_GPIO_WritePin>
	  	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da0:	485a      	ldr	r0, [pc, #360]	; (8000f0c <main+0x3a8>)
 8000da2:	f006 fb8d 	bl	80074c0 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dae:	495a      	ldr	r1, [pc, #360]	; (8000f18 <main+0x3b4>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f00e fbc1 	bl	800f538 <siprintf>
	  	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000db6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2005      	movs	r0, #5
 8000dbe:	f002 fc97 	bl	80036f0 <BSP_LCD_DisplayStringAtLine>

	  	  sConfig.Channel = ADC_CHANNEL_6;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000dc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4853      	ldr	r0, [pc, #332]	; (8000f1c <main+0x3b8>)
 8000dce:	f004 ff53 	bl	8005c78 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000dd2:	4852      	ldr	r0, [pc, #328]	; (8000f1c <main+0x3b8>)
 8000dd4:	f004 fdea 	bl	80059ac <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dd8:	bf00      	nop
 8000dda:	2164      	movs	r1, #100	; 0x64
 8000ddc:	484f      	ldr	r0, [pc, #316]	; (8000f1c <main+0x3b8>)
 8000dde:	f004 feb3 	bl	8005b48 <HAL_ADC_PollForConversion>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f8      	bne.n	8000dda <main+0x276>
	  	  potr = HAL_ADC_GetValue(&hadc3);
 8000de8:	484c      	ldr	r0, [pc, #304]	; (8000f1c <main+0x3b8>)
 8000dea:	f004 ff38 	bl	8005c5e <HAL_ADC_GetValue>
 8000dee:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

	  	  sConfig.Channel = ADC_CHANNEL_7;
 8000df2:	2307      	movs	r3, #7
 8000df4:	663b      	str	r3, [r7, #96]	; 0x60
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000df6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4847      	ldr	r0, [pc, #284]	; (8000f1c <main+0x3b8>)
 8000dfe:	f004 ff3b 	bl	8005c78 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000e02:	4846      	ldr	r0, [pc, #280]	; (8000f1c <main+0x3b8>)
 8000e04:	f004 fdd2 	bl	80059ac <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000e08:	bf00      	nop
 8000e0a:	2164      	movs	r1, #100	; 0x64
 8000e0c:	4843      	ldr	r0, [pc, #268]	; (8000f1c <main+0x3b8>)
 8000e0e:	f004 fe9b 	bl	8005b48 <HAL_ADC_PollForConversion>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f8      	bne.n	8000e0a <main+0x2a6>
	  	  potl = HAL_ADC_GetValue(&hadc3);
 8000e18:	4840      	ldr	r0, [pc, #256]	; (8000f1c <main+0x3b8>)
 8000e1a:	f004 ff20 	bl	8005c5e <HAL_ADC_GetValue>
 8000e1e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

	  	  sConfig.Channel = ADC_CHANNEL_8;
 8000e22:	2308      	movs	r3, #8
 8000e24:	663b      	str	r3, [r7, #96]	; 0x60
	  	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000e26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	483b      	ldr	r0, [pc, #236]	; (8000f1c <main+0x3b8>)
 8000e2e:	f004 ff23 	bl	8005c78 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc3);
 8000e32:	483a      	ldr	r0, [pc, #232]	; (8000f1c <main+0x3b8>)
 8000e34:	f004 fdba 	bl	80059ac <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000e38:	bf00      	nop
 8000e3a:	2164      	movs	r1, #100	; 0x64
 8000e3c:	4837      	ldr	r0, [pc, #220]	; (8000f1c <main+0x3b8>)
 8000e3e:	f004 fe83 	bl	8005b48 <HAL_ADC_PollForConversion>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f8      	bne.n	8000e3a <main+0x2d6>
	  	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e48:	4834      	ldr	r0, [pc, #208]	; (8000f1c <main+0x3b8>)
 8000e4a:	f004 ff08 	bl	8005c5e <HAL_ADC_GetValue>
 8000e4e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	  	  HAL_ADC_Start(&hadc1);
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <main+0x3bc>)
 8000e54:	f004 fdaa 	bl	80059ac <HAL_ADC_Start>
	  	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e58:	bf00      	nop
 8000e5a:	2164      	movs	r1, #100	; 0x64
 8000e5c:	4830      	ldr	r0, [pc, #192]	; (8000f20 <main+0x3bc>)
 8000e5e:	f004 fe73 	bl	8005b48 <HAL_ADC_PollForConversion>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f8      	bne.n	8000e5a <main+0x2f6>
	  	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e68:	482d      	ldr	r0, [pc, #180]	; (8000f20 <main+0x3bc>)
 8000e6a:	f004 fef8 	bl	8005c5e <HAL_ADC_GetValue>
 8000e6e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

	  	  HAL_UART_Receive(&huart1, textFromUart0, 50, 10);
 8000e72:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000e76:	230a      	movs	r3, #10
 8000e78:	2232      	movs	r2, #50	; 0x32
 8000e7a:	482a      	ldr	r0, [pc, #168]	; (8000f24 <main+0x3c0>)
 8000e7c:	f00a fa3b 	bl	800b2f6 <HAL_UART_Receive>
	  	  BSP_LCD_DisplayStringAtLine(15,(uint8_t*) textFromUart0);
 8000e80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e84:	4619      	mov	r1, r3
 8000e86:	200f      	movs	r0, #15
 8000e88:	f002 fc32 	bl	80036f0 <BSP_LCD_DisplayStringAtLine>

	  	  if ((potl > potlb + 50) || (potlb > potl + 50))
 8000e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e90:	3332      	adds	r3, #50	; 0x32
 8000e92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d806      	bhi.n	8000ea8 <main+0x344>
 8000e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e9e:	3332      	adds	r3, #50	; 0x32
 8000ea0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d94b      	bls.n	8000f40 <main+0x3dc>
	  	  {
	  		sprintf(text, "Potentio de Goche : %u\r\n", potl);
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eac:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000eb0:	491d      	ldr	r1, [pc, #116]	; (8000f28 <main+0x3c4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00e fb40 	bl	800f538 <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)text, strlen(text), 10);
 8000eb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f9a7 	bl	8000210 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	e031      	b.n	8000f2c <main+0x3c8>
 8000ec8:	20008ad4 	.word	0x20008ad4
 8000ecc:	2000880c 	.word	0x2000880c
 8000ed0:	200089bc 	.word	0x200089bc
 8000ed4:	20008535 	.word	0x20008535
 8000ed8:	ffffde00 	.word	0xffffde00
 8000edc:	20000034 	.word	0x20000034
 8000ee0:	20008670 	.word	0x20008670
 8000ee4:	08002e1d 	.word	0x08002e1d
 8000ee8:	20008530 	.word	0x20008530
 8000eec:	0800fd78 	.word	0x0800fd78
 8000ef0:	200084dc 	.word	0x200084dc
 8000ef4:	0800fd88 	.word	0x0800fd88
 8000ef8:	200086c4 	.word	0x200086c4
 8000efc:	0800fd98 	.word	0x0800fd98
 8000f00:	200089a8 	.word	0x200089a8
 8000f04:	0800fda8 	.word	0x0800fda8
 8000f08:	200084e0 	.word	0x200084e0
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40021c00 	.word	0x40021c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	0800fd0c 	.word	0x0800fd0c
 8000f1c:	2000885c 	.word	0x2000885c
 8000f20:	20008810 	.word	0x20008810
 8000f24:	200088a4 	.word	0x200088a4
 8000f28:	0800fd18 	.word	0x0800fd18
 8000f2c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000f30:	230a      	movs	r3, #10
 8000f32:	4847      	ldr	r0, [pc, #284]	; (8001050 <main+0x4ec>)
 8000f34:	f00a f94c 	bl	800b1d0 <HAL_UART_Transmit>
	  		potlb = potl;
 8000f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  	  }

	  	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000f40:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f54:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f58:	493e      	ldr	r1, [pc, #248]	; (8001054 <main+0x4f0>)
 8000f5a:	f00e faed 	bl	800f538 <siprintf>
	  	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000f5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f62:	4619      	mov	r1, r3
 8000f64:	2009      	movs	r0, #9
 8000f66:	f002 fbc3 	bl	80036f0 <BSP_LCD_DisplayStringAtLine>

	  	HAL_RTC_GetDate(&hrtc, sD, RTC_FORMAT_BCD);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000f70:	4839      	ldr	r0, [pc, #228]	; (8001058 <main+0x4f4>)
 8000f72:	f009 f88d 	bl	800a090 <HAL_RTC_GetDate>
	  	  HAL_RTC_GetTime(&hrtc, sT, RTC_FORMAT_BCD);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8000f7c:	4836      	ldr	r0, [pc, #216]	; (8001058 <main+0x4f4>)
 8000f7e:	f008 ff81 	bl	8009e84 <HAL_RTC_GetTime>


	  	sprintf(text,"il est %2u:%2u:%2u",sT->Hours,sT->Minutes,sT->Seconds);
 8000f82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	492e      	ldr	r1, [pc, #184]	; (800105c <main+0x4f8>)
 8000fa2:	f00e fac9 	bl	800f538 <siprintf>
	  	BSP_LCD_DisplayStringAtLine(11,(uint8_t*) text);
 8000fa6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000faa:	4619      	mov	r1, r3
 8000fac:	200b      	movs	r0, #11
 8000fae:	f002 fb9f 	bl	80036f0 <BSP_LCD_DisplayStringAtLine>

	  	if(decompte > 0)
 8000fb2:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <main+0x460>
	  	{
	  		decompte--;
 8000fba:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	  	}
	  	  BSP_TS_GetState(&TS_State);
 8000fc4:	4826      	ldr	r0, [pc, #152]	; (8001060 <main+0x4fc>)
 8000fc6:	f003 fb59 	bl	800467c <BSP_TS_GetState>
	  	  if(TS_State.touchDetected){
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <main+0x4fc>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f43f aecd 	beq.w	8000d6e <main+0x20a>
	  		  if(TS_State.touchX[0] < 110 && TS_State.touchY[0] < 110)
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <main+0x4fc>)
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	2b6d      	cmp	r3, #109	; 0x6d
 8000fda:	d82f      	bhi.n	800103c <main+0x4d8>
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <main+0x4fc>)
 8000fde:	899b      	ldrh	r3, [r3, #12]
 8000fe0:	2b6d      	cmp	r3, #109	; 0x6d
 8000fe2:	d82b      	bhi.n	800103c <main+0x4d8>
	  		  {
	  			  if (decompte == 0){
 8000fe4:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d12f      	bne.n	800104c <main+0x4e8>
					  light = (1-light);
 8000fec:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8000ff0:	f1c3 0301 	rsb	r3, r3, #1
 8000ff4:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
					  HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,light);
 8000ff8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	4818      	ldr	r0, [pc, #96]	; (8001064 <main+0x500>)
 8001004:	f006 fa74 	bl	80074f0 <HAL_GPIO_WritePin>
					  if (light)
 8001008:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <main+0x4b6>
					  {
						BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001014:	f002 f9d6 	bl	80033c4 <BSP_LCD_SetTextColor>
 8001018:	e002      	b.n	8001020 <main+0x4bc>
					  }
					  else{
						BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <main+0x504>)
 800101c:	f002 f9d2 	bl	80033c4 <BSP_LCD_SetTextColor>
					  }
					  BSP_LCD_FillRect(0,0,50,50);
 8001020:	2332      	movs	r3, #50	; 0x32
 8001022:	2232      	movs	r2, #50	; 0x32
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f002 fdbc 	bl	8003ba4 <BSP_LCD_FillRect>
					  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001030:	f002 f9c8 	bl	80033c4 <BSP_LCD_SetTextColor>
					  decompte = 300;
 8001034:	232c      	movs	r3, #44	; 0x2c
 8001036:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	  			  if (decompte == 0){
 800103a:	e007      	b.n	800104c <main+0x4e8>
	  			  }
	  		  } else {
	  			BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <main+0x4fc>)
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <main+0x4fc>)
 8001042:	8991      	ldrh	r1, [r2, #12]
 8001044:	2204      	movs	r2, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fe26 	bl	8003c98 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 800104c:	e68f      	b.n	8000d6e <main+0x20a>
 800104e:	bf00      	nop
 8001050:	200088a4 	.word	0x200088a4
 8001054:	0800fd34 	.word	0x0800fd34
 8001058:	2000893c 	.word	0x2000893c
 800105c:	0800fd64 	.word	0x0800fd64
 8001060:	20000840 	.word	0x20000840
 8001064:	40021c00 	.word	0x40021c00
 8001068:	ffff0000 	.word	0xffff0000

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f00e f980 	bl	800f380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001090:	f007 fc2c 	bl	80088ec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <SystemClock_Config+0xdc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <SystemClock_Config+0xdc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <SystemClock_Config+0xdc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xe0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <SystemClock_Config+0xe0>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <SystemClock_Config+0xe0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010c4:	2309      	movs	r3, #9
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010dc:	2319      	movs	r3, #25
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80010e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010ea:	2309      	movs	r3, #9
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f007 fc5a 	bl	80089ac <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010fe:	f001 feaf 	bl	8002e60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001102:	f007 fc03 	bl	800890c <HAL_PWREx_EnableOverDrive>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800110c:	f001 fea8 	bl	8002e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2106      	movs	r1, #6
 800112e:	4618      	mov	r0, r3
 8001130:	f007 fee0 	bl	8008ef4 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800113a:	f001 fe91 	bl	8002e60 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	; 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0a2      	sub	sp, #136	; 0x88
 8001154:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2284      	movs	r2, #132	; 0x84
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f00e f90f 	bl	800f380 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <PeriphCommonClock_Config+0x54>)
 8001164:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001166:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800116a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800116c:	2305      	movs	r3, #5
 800116e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001174:	2303      	movs	r3, #3
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800117c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f8b9 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8001198:	f001 fe62 	bl	8002e60 <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3788      	adds	r7, #136	; 0x88
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	00200008 	.word	0x00200008

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_ADC1_Init+0x98>)
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_ADC1_Init+0x98>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <MX_ADC1_Init+0xa0>)
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_ADC1_Init+0x98>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_ADC1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_ADC1_Init+0x98>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_ADC1_Init+0x98>)
 800120a:	f004 fb8b 	bl	8005924 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001214:	f001 fe24 	bl	8002e60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_ADC1_Init+0x98>)
 800122a:	f004 fd25 	bl	8005c78 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001234:	f001 fe14 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20008810 	.word	0x20008810
 8001244:	40012000 	.word	0x40012000
 8001248:	0f000001 	.word	0x0f000001

0800124c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_ADC3_Init+0x9c>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_ADC3_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_ADC3_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_ADC3_Init+0x98>)
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <MX_ADC3_Init+0xa0>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_ADC3_Init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012ae:	f004 fb39 	bl	8005924 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80012b8:	f001 fdd2 	bl	8002e60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012bc:	2306      	movs	r3, #6
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012ce:	f004 fcd3 	bl	8005c78 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012d8:	f001 fdc2 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000885c 	.word	0x2000885c
 80012e8:	40012200 	.word	0x40012200
 80012ec:	0f000001 	.word	0x0f000001

080012f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_DAC_Init+0x4c>)
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <MX_DAC_Init+0x50>)
 8001302:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_DAC_Init+0x4c>)
 8001306:	f004 ffe9 	bl	80062dc <HAL_DAC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001310:	f001 fda6 	bl	8002e60 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_DAC_Init+0x4c>)
 8001324:	f005 f860 	bl	80063e8 <HAL_DAC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800132e:	f001 fd97 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20008928 	.word	0x20008928
 8001340:	40007400 	.word	0x40007400

08001344 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <MX_DMA2D_Init+0x60>)
 800134c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800137a:	f005 fa4d 	bl	8006818 <HAL_DMA2D_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001384:	f001 fd6c 	bl	8002e60 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001388:	2101      	movs	r1, #1
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_DMA2D_Init+0x5c>)
 800138c:	f005 fcb2 	bl	8006cf4 <HAL_DMA2D_ConfigLayer>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001396:	f001 fd63 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20008a48 	.word	0x20008a48
 80013a4:	4002b000 	.word	0x4002b000

080013a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_I2C1_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_I2C1_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_I2C1_Init+0x74>)
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <MX_I2C1_Init+0x7c>)
 80013b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_I2C1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_I2C1_Init+0x74>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_I2C1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_I2C1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <MX_I2C1_Init+0x74>)
 80013e4:	f006 f8d0 	bl	8007588 <HAL_I2C_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ee:	f001 fd37 	bl	8002e60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <MX_I2C1_Init+0x74>)
 80013f6:	f006 fe69 	bl	80080cc <HAL_I2CEx_ConfigAnalogFilter>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001400:	f001 fd2e 	bl	8002e60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_I2C1_Init+0x74>)
 8001408:	f006 feab 	bl	8008162 <HAL_I2CEx_ConfigDigitalFilter>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001412:	f001 fd25 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20008674 	.word	0x20008674
 8001420:	40005400 	.word	0x40005400
 8001424:	00c0eaff 	.word	0x00c0eaff

08001428 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_I2C3_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <MX_I2C3_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_I2C3_Init+0x74>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <MX_I2C3_Init+0x7c>)
 8001436:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_I2C3_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_I2C3_Init+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_I2C3_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_I2C3_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_I2C3_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_I2C3_Init+0x74>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_I2C3_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_I2C3_Init+0x74>)
 8001464:	f006 f890 	bl	8007588 <HAL_I2C_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800146e:	f001 fcf7 	bl	8002e60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <MX_I2C3_Init+0x74>)
 8001476:	f006 fe29 	bl	80080cc <HAL_I2CEx_ConfigAnalogFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001480:	f001 fcee 	bl	8002e60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_I2C3_Init+0x74>)
 8001488:	f006 fe6b 	bl	8008162 <HAL_I2CEx_ConfigDigitalFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001492:	f001 fce5 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200084e4 	.word	0x200084e4
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	00c0eaff 	.word	0x00c0eaff

080014a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2234      	movs	r2, #52	; 0x34
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f00d ff63 	bl	800f380 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014bc:	4a3a      	ldr	r2, [pc, #232]	; (80015a8 <MX_LTDC_Init+0x100>)
 80014be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014e0:	2209      	movs	r2, #9
 80014e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014e6:	2235      	movs	r2, #53	; 0x35
 80014e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014ec:	220b      	movs	r2, #11
 80014ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014f2:	f240 2215 	movw	r2, #533	; 0x215
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_LTDC_Init+0xfc>)
 80014fa:	f240 121b 	movw	r2, #283	; 0x11b
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001502:	f240 2235 	movw	r2, #565	; 0x235
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800150a:	f240 121d 	movw	r2, #285	; 0x11d
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_LTDC_Init+0xfc>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800152a:	f006 fe67 	bl	80081fc <HAL_LTDC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001534:	f001 fc94 	bl	8002e60 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800153c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001540:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001546:	f44f 7388 	mov.w	r3, #272	; 0x110
 800154a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001558:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800155c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001562:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001568:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800156e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_LTDC_Init+0xfc>)
 800158e:	f006 ffc7 	bl	8008520 <HAL_LTDC_ConfigLayer>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001598:	f001 fc62 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20008764 	.word	0x20008764
 80015a8:	40016800 	.word	0x40016800

080015ac <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_RNG_Init+0x20>)
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <MX_RNG_Init+0x24>)
 80015b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_RNG_Init+0x20>)
 80015b8:	f008 fa94 	bl	8009ae4 <HAL_RNG_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015c2:	f001 fc4d 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200089ac 	.word	0x200089ac
 80015d0:	50060800 	.word	0x50060800

080015d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b092      	sub	sp, #72	; 0x48
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	222c      	movs	r2, #44	; 0x2c
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00d fec2 	bl	800f380 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015fc:	4b46      	ldr	r3, [pc, #280]	; (8001718 <MX_RTC_Init+0x144>)
 80015fe:	4a47      	ldr	r2, [pc, #284]	; (800171c <MX_RTC_Init+0x148>)
 8001600:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001602:	4b45      	ldr	r3, [pc, #276]	; (8001718 <MX_RTC_Init+0x144>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <MX_RTC_Init+0x144>)
 800160a:	227f      	movs	r2, #127	; 0x7f
 800160c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800160e:	4b42      	ldr	r3, [pc, #264]	; (8001718 <MX_RTC_Init+0x144>)
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <MX_RTC_Init+0x144>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <MX_RTC_Init+0x144>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <MX_RTC_Init+0x144>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001626:	483c      	ldr	r0, [pc, #240]	; (8001718 <MX_RTC_Init+0x144>)
 8001628:	f008 fadc 	bl	8009be4 <HAL_RTC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001632:	f001 fc15 	bl	8002e60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001654:	2201      	movs	r2, #1
 8001656:	4619      	mov	r1, r3
 8001658:	482f      	ldr	r0, [pc, #188]	; (8001718 <MX_RTC_Init+0x144>)
 800165a:	f008 fb55 	bl	8009d08 <HAL_RTC_SetTime>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001664:	f001 fbfc 	bl	8002e60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001684:	2201      	movs	r2, #1
 8001686:	4619      	mov	r1, r3
 8001688:	4823      	ldr	r0, [pc, #140]	; (8001718 <MX_RTC_Init+0x144>)
 800168a:	f008 fc59 	bl	8009f40 <HAL_RTC_SetDate>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001694:	f001 fbe4 	bl	8002e60 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001698:	2300      	movs	r3, #0
 800169a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800169c:	2300      	movs	r3, #0
 800169e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80016c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	2201      	movs	r2, #1
 80016cc:	4619      	mov	r1, r3
 80016ce:	4812      	ldr	r0, [pc, #72]	; (8001718 <MX_RTC_Init+0x144>)
 80016d0:	f008 fd2e 	bl	800a130 <HAL_RTC_SetAlarm>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80016da:	f001 fbc1 	bl	8002e60 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80016de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	480b      	ldr	r0, [pc, #44]	; (8001718 <MX_RTC_Init+0x144>)
 80016ec:	f008 fd20 	bl	800a130 <HAL_RTC_SetAlarm>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80016f6:	f001 fbb3 	bl	8002e60 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80016fa:	2202      	movs	r2, #2
 80016fc:	2100      	movs	r1, #0
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_RTC_Init+0x144>)
 8001700:	f008 febe 	bl	800a480 <HAL_RTCEx_SetTimeStamp>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800170a:	f001 fba9 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3748      	adds	r7, #72	; 0x48
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000893c 	.word	0x2000893c
 800171c:	40002800 	.word	0x40002800

08001720 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_SPI2_Init+0x74>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <MX_SPI2_Init+0x78>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_SPI2_Init+0x74>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_SPI2_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_SPI2_Init+0x74>)
 800173a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800173e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_SPI2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_SPI2_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_SPI2_Init+0x74>)
 800174e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001752:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_SPI2_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_SPI2_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_SPI2_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_SPI2_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_SPI2_Init+0x74>)
 800176e:	2207      	movs	r2, #7
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_SPI2_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_SPI2_Init+0x74>)
 800177a:	2208      	movs	r2, #8
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_SPI2_Init+0x74>)
 8001780:	f008 ff65 	bl	800a64e <HAL_SPI_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800178a:	f001 fb69 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20008538 	.word	0x20008538
 8001798:	40003800 	.word	0x40003800

0800179c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <MX_TIM1_Init+0xa0>)
 80017bc:	4a20      	ldr	r2, [pc, #128]	; (8001840 <MX_TIM1_Init+0xa4>)
 80017be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_TIM1_Init+0xa0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_TIM1_Init+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_TIM1_Init+0xa0>)
 80017ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_TIM1_Init+0xa0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_TIM1_Init+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_TIM1_Init+0xa0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <MX_TIM1_Init+0xa0>)
 80017e8:	f008 ffdc 	bl	800a7a4 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80017f2:	f001 fb35 	bl	8002e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_TIM1_Init+0xa0>)
 8001804:	f009 f9be 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800180e:	f001 fb27 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_TIM1_Init+0xa0>)
 8001824:	f009 fbda 	bl	800afdc <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800182e:	f001 fb17 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000895c 	.word	0x2000895c
 8001840:	40010000 	.word	0x40010000

08001844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MX_TIM2_Init+0x98>)
 8001864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM2_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM2_Init+0x98>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM2_Init+0x98>)
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_TIM2_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_TIM2_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_TIM2_Init+0x98>)
 800188c:	f008 ff8a 	bl	800a7a4 <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001896:	f001 fae3 	bl	8002e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM2_Init+0x98>)
 80018a8:	f009 f96c 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018b2:	f001 fad5 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_TIM2_Init+0x98>)
 80018c4:	f009 fb8a 	bl	800afdc <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018ce:	f001 fac7 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20008a88 	.word	0x20008a88

080018e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_TIM3_Init+0x94>)
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <MX_TIM3_Init+0x98>)
 8001902:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_TIM3_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_TIM3_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_TIM3_Init+0x94>)
 8001912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_TIM3_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM3_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001924:	4813      	ldr	r0, [pc, #76]	; (8001974 <MX_TIM3_Init+0x94>)
 8001926:	f008 ff3d 	bl	800a7a4 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001930:	f001 fa96 	bl	8002e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_TIM3_Init+0x94>)
 8001942:	f009 f91f 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800194c:	f001 fa88 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_TIM3_Init+0x94>)
 800195e:	f009 fb3d 	bl	800afdc <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001968:	f001 fa7a 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20008714 	.word	0x20008714
 8001978:	40000400 	.word	0x40000400

0800197c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_TIM5_Init+0x94>)
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <MX_TIM5_Init+0x98>)
 800199e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019c2:	f008 feef 	bl	800a7a4 <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80019cc:	f001 fa48 	bl	8002e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019de:	f009 f8d1 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80019e8:	f001 fa3a 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_TIM5_Init+0x94>)
 80019fa:	f009 faef 	bl	800afdc <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a04:	f001 fa2c 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200086c8 	.word	0x200086c8
 8001a14:	40000c00 	.word	0x40000c00

08001a18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <MX_TIM8_Init+0xa4>)
 8001a3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a62:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a64:	f008 fe9e 	bl	800a7a4 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001a6e:	f001 f9f7 	bl	8002e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001a80:	f009 f880 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001a8a:	f001 f9e9 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_TIM8_Init+0xa0>)
 8001aa0:	f009 fa9c 	bl	800afdc <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001aaa:	f001 f9d9 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20008620 	.word	0x20008620
 8001abc:	40010400 	.word	0x40010400

08001ac0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MX_UART7_Init+0x5c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_UART7_Init+0x58>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_UART7_Init+0x58>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_UART7_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_UART7_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_UART7_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_UART7_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_UART7_Init+0x58>)
 8001b04:	f009 fb16 	bl	800b134 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001b0e:	f001 f9a7 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000859c 	.word	0x2000859c
 8001b1c:	40007800 	.word	0x40007800

08001b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <MX_USART1_UART_Init+0x5c>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b64:	f009 fae6 	bl	800b134 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f001 f977 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200088a4 	.word	0x200088a4
 8001b7c:	40011000 	.word	0x40011000

08001b80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <MX_USART6_UART_Init+0x5c>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USART6_UART_Init+0x58>)
 8001bc4:	f009 fab6 	bl	800b134 <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001bce:	f001 f947 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200089c0 	.word	0x200089c0
 8001bdc:	40011400 	.word	0x40011400

08001be0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_FMC_Init+0x98>)
 8001bfa:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <MX_FMC_Init+0x9c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c12:	2210      	movs	r2, #16
 8001c14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c1e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001c22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001c44:	2307      	movs	r3, #7
 8001c46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001c50:	2303      	movs	r3, #3
 8001c52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_FMC_Init+0x98>)
 8001c62:	f008 fc63 	bl	800a52c <HAL_SDRAM_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001c6c:	f001 f8f8 	bl	8002e60 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20008ad8 	.word	0x20008ad8
 8001c7c:	a0000140 	.word	0xa0000140

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b090      	sub	sp, #64	; 0x40
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c96:	4baf      	ldr	r3, [pc, #700]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4aae      	ldr	r2, [pc, #696]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4bac      	ldr	r3, [pc, #688]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cae:	4ba9      	ldr	r3, [pc, #676]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4aa8      	ldr	r2, [pc, #672]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4ba6      	ldr	r3, [pc, #664]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4aa2      	ldr	r2, [pc, #648]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cde:	4b9d      	ldr	r3, [pc, #628]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a9c      	ldr	r2, [pc, #624]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b9a      	ldr	r3, [pc, #616]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a96      	ldr	r2, [pc, #600]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b94      	ldr	r3, [pc, #592]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b91      	ldr	r3, [pc, #580]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a90      	ldr	r2, [pc, #576]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b8e      	ldr	r3, [pc, #568]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d26:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a8a      	ldr	r2, [pc, #552]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d3e:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a84      	ldr	r2, [pc, #528]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d56:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a7e      	ldr	r2, [pc, #504]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6e:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d86:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a72      	ldr	r2, [pc, #456]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <MX_GPIO_Init+0x2d4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2160      	movs	r1, #96	; 0x60
 8001da2:	486d      	ldr	r0, [pc, #436]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001da4:	f005 fba4 	bl	80074f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2120      	movs	r1, #32
 8001dac:	486b      	ldr	r0, [pc, #428]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001dae:	f005 fb9f 	bl	80074f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2108      	movs	r1, #8
 8001db6:	4869      	ldr	r0, [pc, #420]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001db8:	f005 fb9a 	bl	80074f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	4867      	ldr	r0, [pc, #412]	; (8001f60 <MX_GPIO_Init+0x2e0>)
 8001dc2:	f005 fb95 	bl	80074f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	4865      	ldr	r0, [pc, #404]	; (8001f64 <MX_GPIO_Init+0x2e4>)
 8001dce:	f005 fb8f 	bl	80074f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001dd8:	4863      	ldr	r0, [pc, #396]	; (8001f68 <MX_GPIO_Init+0x2e8>)
 8001dda:	f005 fb89 	bl	80074f0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	21c8      	movs	r1, #200	; 0xc8
 8001de2:	4862      	ldr	r0, [pc, #392]	; (8001f6c <MX_GPIO_Init+0x2ec>)
 8001de4:	f005 fb84 	bl	80074f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001de8:	2308      	movs	r3, #8
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4857      	ldr	r0, [pc, #348]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001dfc:	f005 f8a8 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e00:	2304      	movs	r3, #4
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e10:	2309      	movs	r3, #9
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	484f      	ldr	r0, [pc, #316]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001e1c:	f005 f898 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e20:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e32:	230b      	movs	r3, #11
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	484b      	ldr	r0, [pc, #300]	; (8001f6c <MX_GPIO_Init+0x2ec>)
 8001e3e:	f005 f887 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001e42:	f643 0323 	movw	r3, #14371	; 0x3823
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e54:	230a      	movs	r3, #10
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4844      	ldr	r0, [pc, #272]	; (8001f70 <MX_GPIO_Init+0x2f0>)
 8001e60:	f005 f876 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001e74:	2308      	movs	r3, #8
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4837      	ldr	r0, [pc, #220]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001e80:	f005 f866 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e84:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e96:	230c      	movs	r3, #12
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4834      	ldr	r0, [pc, #208]	; (8001f74 <MX_GPIO_Init+0x2f4>)
 8001ea2:	f005 f855 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|GPIO_PIN_6;
 8001ea6:	f248 0340 	movw	r3, #32832	; 0x8040
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	482f      	ldr	r0, [pc, #188]	; (8001f78 <MX_GPIO_Init+0x2f8>)
 8001ebc:	f005 f848 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001ec0:	2360      	movs	r3, #96	; 0x60
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4820      	ldr	r0, [pc, #128]	; (8001f58 <MX_GPIO_Init+0x2d8>)
 8001ed8:	f005 f83a 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001eec:	230a      	movs	r3, #10
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <MX_GPIO_Init+0x2f0>)
 8001ef8:	f005 f82a 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481a      	ldr	r0, [pc, #104]	; (8001f7c <MX_GPIO_Init+0x2fc>)
 8001f12:	f005 f81d 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001f16:	2340      	movs	r3, #64	; 0x40
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f1a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480c      	ldr	r0, [pc, #48]	; (8001f5c <MX_GPIO_Init+0x2dc>)
 8001f2c:	f005 f810 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001f30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f42:	230a      	movs	r3, #10
 8001f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480a      	ldr	r0, [pc, #40]	; (8001f78 <MX_GPIO_Init+0x2f8>)
 8001f4e:	f004 ffff 	bl	8006f50 <HAL_GPIO_Init>
 8001f52:	e015      	b.n	8001f80 <MX_GPIO_Init+0x300>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40022800 	.word	0x40022800
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40021c00 	.word	0x40021c00
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001f80:	23f0      	movs	r3, #240	; 0xf0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f90:	230a      	movs	r3, #10
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	489c      	ldr	r0, [pc, #624]	; (800220c <MX_GPIO_Init+0x58c>)
 8001f9c:	f004 ffd8 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4894      	ldr	r0, [pc, #592]	; (8002210 <MX_GPIO_Init+0x590>)
 8001fbe:	f004 ffc7 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001fc2:	2328      	movs	r3, #40	; 0x28
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	488e      	ldr	r0, [pc, #568]	; (8002214 <MX_GPIO_Init+0x594>)
 8001fda:	f004 ffb9 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4889      	ldr	r0, [pc, #548]	; (8002218 <MX_GPIO_Init+0x598>)
 8001ff4:	f004 ffac 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200c:	4619      	mov	r1, r3
 800200e:	4883      	ldr	r0, [pc, #524]	; (800221c <MX_GPIO_Init+0x59c>)
 8002010:	f004 ff9e 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002014:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002026:	4619      	mov	r1, r3
 8002028:	4879      	ldr	r0, [pc, #484]	; (8002210 <MX_GPIO_Init+0x590>)
 800202a:	f004 ff91 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800202e:	2310      	movs	r3, #16
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203e:	4619      	mov	r1, r3
 8002040:	4874      	ldr	r0, [pc, #464]	; (8002214 <MX_GPIO_Init+0x594>)
 8002042:	f004 ff85 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002046:	2304      	movs	r3, #4
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002056:	230c      	movs	r3, #12
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	486c      	ldr	r0, [pc, #432]	; (8002214 <MX_GPIO_Init+0x594>)
 8002062:	f004 ff75 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002066:	f24a 0304 	movw	r3, #40964	; 0xa004
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002078:	4619      	mov	r1, r3
 800207a:	4869      	ldr	r0, [pc, #420]	; (8002220 <MX_GPIO_Init+0x5a0>)
 800207c:	f004 ff68 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	2301      	movs	r3, #1
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002096:	4619      	mov	r1, r3
 8002098:	485c      	ldr	r0, [pc, #368]	; (800220c <MX_GPIO_Init+0x58c>)
 800209a:	f004 ff59 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800209e:	f645 6340 	movw	r3, #24128	; 0x5e40
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	485a      	ldr	r0, [pc, #360]	; (8002220 <MX_GPIO_Init+0x5a0>)
 80020b8:	f004 ff4a 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_Pin */
  GPIO_InitStruct.Pin = BP1_Pin;
 80020bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BP1_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	4854      	ldr	r0, [pc, #336]	; (8002224 <MX_GPIO_Init+0x5a4>)
 80020d4:	f004 ff3c 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80020d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ec:	4619      	mov	r1, r3
 80020ee:	4847      	ldr	r0, [pc, #284]	; (800220c <MX_GPIO_Init+0x58c>)
 80020f0:	f004 ff2e 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80020f4:	2310      	movs	r3, #16
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002104:	230a      	movs	r3, #10
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210c:	4619      	mov	r1, r3
 800210e:	4844      	ldr	r0, [pc, #272]	; (8002220 <MX_GPIO_Init+0x5a0>)
 8002110:	f004 ff1e 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002114:	23c8      	movs	r3, #200	; 0xc8
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002128:	4619      	mov	r1, r3
 800212a:	4839      	ldr	r0, [pc, #228]	; (8002210 <MX_GPIO_Init+0x590>)
 800212c:	f004 ff10 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002130:	2305      	movs	r3, #5
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002140:	230a      	movs	r3, #10
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002148:	4619      	mov	r1, r3
 800214a:	4833      	ldr	r0, [pc, #204]	; (8002218 <MX_GPIO_Init+0x598>)
 800214c:	f004 ff00 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002150:	2332      	movs	r3, #50	; 0x32
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002160:	230b      	movs	r3, #11
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002168:	4619      	mov	r1, r3
 800216a:	482b      	ldr	r0, [pc, #172]	; (8002218 <MX_GPIO_Init+0x598>)
 800216c:	f004 fef0 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002170:	2304      	movs	r3, #4
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002180:	2309      	movs	r3, #9
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002188:	4619      	mov	r1, r3
 800218a:	4827      	ldr	r0, [pc, #156]	; (8002228 <MX_GPIO_Init+0x5a8>)
 800218c:	f004 fee0 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002190:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021a2:	2309      	movs	r3, #9
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021aa:	4619      	mov	r1, r3
 80021ac:	4819      	ldr	r0, [pc, #100]	; (8002214 <MX_GPIO_Init+0x594>)
 80021ae:	f004 fecf 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021b2:	2386      	movs	r3, #134	; 0x86
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c2:	230b      	movs	r3, #11
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ca:	4619      	mov	r1, r3
 80021cc:	4815      	ldr	r0, [pc, #84]	; (8002224 <MX_GPIO_Init+0x5a4>)
 80021ce:	f004 febf 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80021d2:	2328      	movs	r3, #40	; 0x28
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80021e2:	230a      	movs	r3, #10
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ea:	4619      	mov	r1, r3
 80021ec:	480d      	ldr	r0, [pc, #52]	; (8002224 <MX_GPIO_Init+0x5a4>)
 80021ee:	f004 feaf 	bl	8006f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2105      	movs	r1, #5
 80021f6:	2017      	movs	r0, #23
 80021f8:	f004 f846 	bl	8006288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021fc:	2017      	movs	r0, #23
 80021fe:	f004 f85f 	bl	80062c0 <HAL_NVIC_EnableIRQ>

}
 8002202:	bf00      	nop
 8002204:	3740      	adds	r7, #64	; 0x40
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000
 8002210:	40021800 	.word	0x40021800
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40020800 	.word	0x40020800
 800221c:	40022800 	.word	0x40022800
 8002220:	40021c00 	.word	0x40021c00
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400

0800222c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BP1_Pin)
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223c:	d122      	bne.n	8002284 <HAL_GPIO_EXTI_Callback+0x58>
	{
		switch (stateEtat)
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d01a      	beq.n	800227c <HAL_GPIO_EXTI_Callback+0x50>
 8002246:	2b03      	cmp	r3, #3
 8002248:	dc1f      	bgt.n	800228a <HAL_GPIO_EXTI_Callback+0x5e>
 800224a:	2b01      	cmp	r3, #1
 800224c:	d00f      	beq.n	800226e <HAL_GPIO_EXTI_Callback+0x42>
 800224e:	2b02      	cmp	r3, #2
 8002250:	d11b      	bne.n	800228a <HAL_GPIO_EXTI_Callback+0x5e>
		{
			case JEU_PARTIES:
				vitesse <<= 1;
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_GPIO_EXTI_Callback+0x70>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_GPIO_EXTI_Callback+0x70>)
 800225c:	701a      	strb	r2, [r3, #0]
				if (vitesse > 8)
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_GPIO_EXTI_Callback+0x70>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b08      	cmp	r3, #8
 8002264:	d910      	bls.n	8002288 <HAL_GPIO_EXTI_Callback+0x5c>
				{
					vitesse = 1;
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_GPIO_EXTI_Callback+0x70>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_EXTI_Callback+0x5c>
			case JEU_TIMERST:
				stateEtat = JEU_PARTIES;
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002270:	2202      	movs	r2, #2
 8002272:	701a      	strb	r2, [r3, #0]
				timed = 1;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
				break;
 800227a:	e006      	b.n	800228a <HAL_GPIO_EXTI_Callback+0x5e>
			case JEU_FINPART:
				stateEtat = JEU_ACCUEIL;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_GPIO_EXTI_Callback+0x6c>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
				break;
 8002282:	e002      	b.n	800228a <HAL_GPIO_EXTI_Callback+0x5e>
		}

	}
 8002284:	bf00      	nop
 8002286:	e000      	b.n	800228a <HAL_GPIO_EXTI_Callback+0x5e>
				break;
 8002288:	bf00      	nop
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20008ad4 	.word	0x20008ad4
 800229c:	200089bc 	.word	0x200089bc
 80022a0:	20008534 	.word	0x20008534

080022a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b0bc      	sub	sp, #240	; 0xf0
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t old_state = 99;
 80022ac:	2363      	movs	r3, #99	; 0x63
 80022ae:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t timers = 90;
 80022b2:	235a      	movs	r3, #90	; 0x5a
 80022b4:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	char text[50];
	static uint8_t ligne = 7;
	static TS_StateTypeDef  TS_State;
	uint32_t potlb,potl;
	ADC_ChannelConfTypeDef sConfig = {0};
 80022b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	potlb = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	osTimerDef(TimerAffichage, CallbackDisplay);
 80022d8:	4b8d      	ldr	r3, [pc, #564]	; (8002510 <StartDefaultTask+0x26c>)
 80022da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osThreadDef(AffichageJeu, displayGame, osPriorityNormal, 0, 1024);
 80022e4:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <StartDefaultTask+0x270>)
 80022e6:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80022ea:	461d      	mov	r5, r3
 80022ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(GameOver, waitGameOver, osPriorityHigh, 0, 1024);
 80022f8:	4b87      	ldr	r3, [pc, #540]	; (8002518 <StartDefaultTask+0x274>)
 80022fa:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80022fe:	461d      	mov	r5, r3
 8002300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002304:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(TacheMonocycle, obj_cycle, osPriorityNormal, 0, 1024);
 800230c:	4b83      	ldr	r3, [pc, #524]	; (800251c <StartDefaultTask+0x278>)
 800230e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8002312:	461d      	mov	r5, r3
 8002314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800231c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(AffichageHeure, displayTime, osPriorityNormal, 0, 1024);
 8002320:	4b7f      	ldr	r3, [pc, #508]	; (8002520 <StartDefaultTask+0x27c>)
 8002322:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002326:	461d      	mov	r5, r3
 8002328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 8002334:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <StartDefaultTask+0x280>)
 8002336:	f107 040c 	add.w	r4, r7, #12
 800233a:	461d      	mov	r5, r3
 800233c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002340:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* Infinite loop */
  for(;;)
  {
	  if (old_state != stateEtat)
 8002348:	4b77      	ldr	r3, [pc, #476]	; (8002528 <StartDefaultTask+0x284>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8002350:	429a      	cmp	r2, r3
 8002352:	f000 817c 	beq.w	800264e <StartDefaultTask+0x3aa>
	  {
		  switch (stateEtat)
 8002356:	4b74      	ldr	r3, [pc, #464]	; (8002528 <StartDefaultTask+0x284>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b03      	cmp	r3, #3
 800235c:	f200 8173 	bhi.w	8002646 <StartDefaultTask+0x3a2>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <StartDefaultTask+0xc4>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002379 	.word	0x08002379
 800236c:	080023bf 	.word	0x080023bf
 8002370:	08002443 	.word	0x08002443
 8002374:	08002579 	.word	0x08002579
		  {
		  	  case JEU_ACCUEIL:
		  		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <StartDefaultTask+0x288>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002380:	4618      	mov	r0, r3
 8002382:	f00a fc07 	bl	800cb94 <xQueueSemaphoreTake>
		  		  BSP_LCD_SelectLayer(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f001 f80c 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		  BSP_LCD_Clear(00);
 800238c:	2000      	movs	r0, #0
 800238e:	f001 f87b 	bl	8003488 <BSP_LCD_Clear>
		  		  BSP_LCD_SelectLayer(0);
 8002392:	2000      	movs	r0, #0
 8002394:	f001 f806 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		  BSP_LCD_Clear(00);
 8002398:	2000      	movs	r0, #0
 800239a:	f001 f875 	bl	8003488 <BSP_LCD_Clear>
		  		  BSP_LCD_DrawBitmap(0, 0,(uint8_t*)AmoBloc2_Main_bmp);
 800239e:	4a64      	ldr	r2, [pc, #400]	; (8002530 <StartDefaultTask+0x28c>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f001 fb4c 	bl	8003a40 <BSP_LCD_DrawBitmap>
		  		  BSP_LCD_SelectLayer(1);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f000 fffb 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		  xSemaphoreGive(mutexScreenHandle);
 80023ae:	4b5f      	ldr	r3, [pc, #380]	; (800252c <StartDefaultTask+0x288>)
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	f00a f960 	bl	800c67c <xQueueGenericSend>
		  		  break;
 80023bc:	e143      	b.n	8002646 <StartDefaultTask+0x3a2>
		  	  case JEU_TIMERST:
		  		xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <StartDefaultTask+0x288>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00a fbe4 	bl	800cb94 <xQueueSemaphoreTake>
		  		BSP_LCD_SelectLayer(1);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f000 ffe9 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f001 f858 	bl	8003488 <BSP_LCD_Clear>
		  		BSP_LCD_SelectLayer(0);
 80023d8:	2000      	movs	r0, #0
 80023da:	f000 ffe3 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f001 f852 	bl	8003488 <BSP_LCD_Clear>
		  		BSP_LCD_DrawBitmap(0, 0,(uint8_t*)AmoBloc2_Timer_bmp);
 80023e4:	4a53      	ldr	r2, [pc, #332]	; (8002534 <StartDefaultTask+0x290>)
 80023e6:	2100      	movs	r1, #0
 80023e8:	2000      	movs	r0, #0
 80023ea:	f001 fb29 	bl	8003a40 <BSP_LCD_DrawBitmap>
		  		BSP_LCD_SelectLayer(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 ffd8 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_SetFont(&Font24);
 80023f4:	4850      	ldr	r0, [pc, #320]	; (8002538 <StartDefaultTask+0x294>)
 80023f6:	f001 f817 	bl	8003428 <BSP_LCD_SetFont>
		  		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023fe:	f000 ffe1 	bl	80033c4 <BSP_LCD_SetTextColor>
		  		sprintf(text,"Temps : %u secondes", timers);
 8002402:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 8002406:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800240a:	494c      	ldr	r1, [pc, #304]	; (800253c <StartDefaultTask+0x298>)
 800240c:	4618      	mov	r0, r3
 800240e:	f00d f893 	bl	800f538 <siprintf>
		  		BSP_LCD_DisplayStringAt(10,ligne*24-10,(uint8_t*) text,CENTER_MODE);
 8002412:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <StartDefaultTask+0x29c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	0052      	lsls	r2, r2, #1
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b0a      	subs	r3, #10
 8002424:	b299      	uxth	r1, r3
 8002426:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800242a:	2301      	movs	r3, #1
 800242c:	200a      	movs	r0, #10
 800242e:	f001 f897 	bl	8003560 <BSP_LCD_DisplayStringAt>
		  		xSemaphoreGive(mutexScreenHandle);
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <StartDefaultTask+0x288>)
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	2300      	movs	r3, #0
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	f00a f91e 	bl	800c67c <xQueueGenericSend>
		  		break;
 8002440:	e101      	b.n	8002646 <StartDefaultTask+0x3a2>
		  	  case JEU_PARTIES:
		  		  vitesse = 1;
 8002442:	4b40      	ldr	r3, [pc, #256]	; (8002544 <StartDefaultTask+0x2a0>)
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
		  		  parties++;
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <StartDefaultTask+0x2a4>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <StartDefaultTask+0x2a4>)
 8002452:	701a      	strb	r2, [r3, #0]
		  		  score = 0;
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <StartDefaultTask+0x2a8>)
 8002456:	2200      	movs	r2, #0
 8002458:	801a      	strh	r2, [r3, #0]
		  		  if (timed) {
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <StartDefaultTask+0x2ac>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <StartDefaultTask+0x1ea>
		  			  	TimerAffichageHandle = osTimerCreate(osTimer(TimerAffichage), osTimerOnce, NULL);
 8002462:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f009 fda4 	bl	800bfb8 <osTimerCreate>
 8002470:	4603      	mov	r3, r0
 8002472:	4a38      	ldr	r2, [pc, #224]	; (8002554 <StartDefaultTask+0x2b0>)
 8002474:	6013      	str	r3, [r2, #0]
		  				osTimerStart(TimerAffichageHandle,1000*timers);
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <StartDefaultTask+0x2b0>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800247e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f009 fdc9 	bl	800c020 <osTimerStart>
		  		  }
		  		  xQueueReset(swordsPosHandle);
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <StartDefaultTask+0x2b4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f009 ff57 	bl	800c348 <xQueueGenericReset>
		  		  xQueueReset(collideFlagHandle);
 800249a:	4b30      	ldr	r3, [pc, #192]	; (800255c <StartDefaultTask+0x2b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f009 ff51 	bl	800c348 <xQueueGenericReset>
		  		  xQueueReset(scoreIncremHandle);
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <StartDefaultTask+0x2bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f009 ff4b 	bl	800c348 <xQueueGenericReset>
		  		  /* definition and creation of AffichageJeu */
		  		  AffichageJeuHandle = osThreadCreate(osThread(AffichageJeu), NULL);
 80024b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f009 fd1c 	bl	800bef6 <osThreadCreate>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a28      	ldr	r2, [pc, #160]	; (8002564 <StartDefaultTask+0x2c0>)
 80024c2:	6013      	str	r3, [r2, #0]
		  		  /* definition and creation of GameOver */
		  		  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f009 fd13 	bl	800bef6 <osThreadCreate>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a25      	ldr	r2, [pc, #148]	; (8002568 <StartDefaultTask+0x2c4>)
 80024d4:	6013      	str	r3, [r2, #0]
		  		  TacheMonocycleHandle = osThreadCreate(osThread(TacheMonocycle), NULL);
 80024d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f009 fd0a 	bl	800bef6 <osThreadCreate>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a21      	ldr	r2, [pc, #132]	; (800256c <StartDefaultTask+0x2c8>)
 80024e6:	6013      	str	r3, [r2, #0]
		  		  GameOverHandle = osThreadCreate(osThread(GameOver), NULL);
 80024e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f009 fd01 	bl	800bef6 <osThreadCreate>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <StartDefaultTask+0x2cc>)
 80024f8:	6013      	str	r3, [r2, #0]
		  		  /* definition and creation of TacheMonocycle */
		  		  AffichageHeureHandle = osThreadCreate(osThread(AffichageHeure), NULL);
 80024fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f009 fcf8 	bl	800bef6 <osThreadCreate>
 8002506:	4603      	mov	r3, r0
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <StartDefaultTask+0x2d0>)
 800250a:	6013      	str	r3, [r2, #0]
		  		  /* definition and creation of TacheEpee */
		  		  break;
 800250c:	e09b      	b.n	8002646 <StartDefaultTask+0x3a2>
 800250e:	bf00      	nop
 8002510:	08002de1 	.word	0x08002de1
 8002514:	0800fde4 	.word	0x0800fde4
 8002518:	0800fe00 	.word	0x0800fe00
 800251c:	0800fe1c 	.word	0x0800fe1c
 8002520:	0800fe38 	.word	0x0800fe38
 8002524:	0800fe54 	.word	0x0800fe54
 8002528:	20008ad4 	.word	0x20008ad4
 800252c:	20008670 	.word	0x20008670
 8002530:	0801063c 	.word	0x0801063c
 8002534:	0808fecc 	.word	0x0808fecc
 8002538:	2000002c 	.word	0x2000002c
 800253c:	0800fdc4 	.word	0x0800fdc4
 8002540:	20000028 	.word	0x20000028
 8002544:	200089bc 	.word	0x200089bc
 8002548:	20008535 	.word	0x20008535
 800254c:	2000880c 	.word	0x2000880c
 8002550:	20008534 	.word	0x20008534
 8002554:	20008858 	.word	0x20008858
 8002558:	200084dc 	.word	0x200084dc
 800255c:	200086c4 	.word	0x200086c4
 8002560:	200089a8 	.word	0x200089a8
 8002564:	200086c0 	.word	0x200086c0
 8002568:	20008b0c 	.word	0x20008b0c
 800256c:	2000866c 	.word	0x2000866c
 8002570:	20008a44 	.word	0x20008a44
 8002574:	20008760 	.word	0x20008760
		  	  case JEU_FINPART:
		  		if (timed) {
 8002578:	4bb1      	ldr	r3, [pc, #708]	; (8002840 <StartDefaultTask+0x59c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <StartDefaultTask+0x2fe>
		  			if (timed == 1) {
 8002580:	4baf      	ldr	r3, [pc, #700]	; (8002840 <StartDefaultTask+0x59c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d104      	bne.n	8002592 <StartDefaultTask+0x2ee>
		  				osTimerStop(TimerAffichageHandle);
 8002588:	4bae      	ldr	r3, [pc, #696]	; (8002844 <StartDefaultTask+0x5a0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f009 fd8b 	bl	800c0a8 <osTimerStop>
		  			}
		  			osTimerDelete(TimerAffichageHandle);
 8002592:	4bac      	ldr	r3, [pc, #688]	; (8002844 <StartDefaultTask+0x5a0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f009 fdc2 	bl	800c120 <osTimerDelete>
		  			timed = 0;
 800259c:	4ba8      	ldr	r3, [pc, #672]	; (8002840 <StartDefaultTask+0x59c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		  		}
		  		xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 80025a2:	4ba9      	ldr	r3, [pc, #676]	; (8002848 <StartDefaultTask+0x5a4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00a faf2 	bl	800cb94 <xQueueSemaphoreTake>
		  		BSP_LCD_SelectLayer(1);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f000 fef7 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f000 ff66 	bl	8003488 <BSP_LCD_Clear>
		  		BSP_LCD_SelectLayer(0);
 80025bc:	2000      	movs	r0, #0
 80025be:	f000 fef1 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_Clear(00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 ff60 	bl	8003488 <BSP_LCD_Clear>
		  		BSP_LCD_DrawBitmap(0, 0,(uint8_t*)AmoBloc2_Over_bmp);
 80025c8:	4aa0      	ldr	r2, [pc, #640]	; (800284c <StartDefaultTask+0x5a8>)
 80025ca:	2100      	movs	r1, #0
 80025cc:	2000      	movs	r0, #0
 80025ce:	f001 fa37 	bl	8003a40 <BSP_LCD_DrawBitmap>
		  		BSP_LCD_SelectLayer(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f000 fee6 	bl	80033a4 <BSP_LCD_SelectLayer>
		  		BSP_LCD_SetFont(&Font24);
 80025d8:	489d      	ldr	r0, [pc, #628]	; (8002850 <StartDefaultTask+0x5ac>)
 80025da:	f000 ff25 	bl	8003428 <BSP_LCD_SetFont>
		  		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80025de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e2:	f000 feef 	bl	80033c4 <BSP_LCD_SetTextColor>
		  		sprintf(text,"Score : %u", score);
 80025e6:	4b9b      	ldr	r3, [pc, #620]	; (8002854 <StartDefaultTask+0x5b0>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025f0:	4999      	ldr	r1, [pc, #612]	; (8002858 <StartDefaultTask+0x5b4>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00c ffa0 	bl	800f538 <siprintf>
		  		BSP_LCD_DisplayStringAt(0,ligne*24-10,(uint8_t*) text,CENTER_MODE);
 80025f8:	4b98      	ldr	r3, [pc, #608]	; (800285c <StartDefaultTask+0x5b8>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	0052      	lsls	r2, r2, #1
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b0a      	subs	r3, #10
 800260a:	b299      	uxth	r1, r3
 800260c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002610:	2301      	movs	r3, #1
 8002612:	2000      	movs	r0, #0
 8002614:	f000 ffa4 	bl	8003560 <BSP_LCD_DisplayStringAt>
		  		xSemaphoreGive(mutexScreenHandle);
 8002618:	4b8b      	ldr	r3, [pc, #556]	; (8002848 <StartDefaultTask+0x5a4>)
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	2300      	movs	r3, #0
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	f00a f82b 	bl	800c67c <xQueueGenericSend>
		  		vTaskDelete(AffichageJeuHandle);
 8002626:	4b8e      	ldr	r3, [pc, #568]	; (8002860 <StartDefaultTask+0x5bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f00a fefe 	bl	800d42c <vTaskDelete>
		  		vTaskDelete(AffichageHeureHandle);
 8002630:	4b8c      	ldr	r3, [pc, #560]	; (8002864 <StartDefaultTask+0x5c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f00a fef9 	bl	800d42c <vTaskDelete>
		  		vTaskDelete(TacheMonocycleHandle);
 800263a:	4b8b      	ldr	r3, [pc, #556]	; (8002868 <StartDefaultTask+0x5c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f00a fef4 	bl	800d42c <vTaskDelete>
		  		break;
 8002644:	bf00      	nop
		  }
		  old_state = stateEtat;
 8002646:	4b89      	ldr	r3, [pc, #548]	; (800286c <StartDefaultTask+0x5c8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  }
	  switch (stateEtat) {
 800264e:	4b87      	ldr	r3, [pc, #540]	; (800286c <StartDefaultTask+0x5c8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b03      	cmp	r3, #3
 8002654:	f200 80ef 	bhi.w	8002836 <StartDefaultTask+0x592>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <StartDefaultTask+0x3bc>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002671 	.word	0x08002671
 8002664:	080026d9 	.word	0x080026d9
 8002668:	08002837 	.word	0x08002837
 800266c:	080027f1 	.word	0x080027f1
	  	  case JEU_ACCUEIL:
	  		BSP_TS_GetState(&TS_State);
 8002670:	487f      	ldr	r0, [pc, #508]	; (8002870 <StartDefaultTask+0x5cc>)
 8002672:	f002 f803 	bl	800467c <BSP_TS_GetState>
	  		if (TS_State.touchDetected) {
 8002676:	4b7e      	ldr	r3, [pc, #504]	; (8002870 <StartDefaultTask+0x5cc>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80d6 	beq.w	800282c <StartDefaultTask+0x588>
	  			if(TS_State.touchX[0] > 20 && TS_State.touchY[0] > 125 && TS_State.touchX[0] < 230 && TS_State.touchY[0] < 210)
 8002680:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <StartDefaultTask+0x5cc>)
 8002682:	885b      	ldrh	r3, [r3, #2]
 8002684:	2b14      	cmp	r3, #20
 8002686:	d90e      	bls.n	80026a6 <StartDefaultTask+0x402>
 8002688:	4b79      	ldr	r3, [pc, #484]	; (8002870 <StartDefaultTask+0x5cc>)
 800268a:	899b      	ldrh	r3, [r3, #12]
 800268c:	2b7d      	cmp	r3, #125	; 0x7d
 800268e:	d90a      	bls.n	80026a6 <StartDefaultTask+0x402>
 8002690:	4b77      	ldr	r3, [pc, #476]	; (8002870 <StartDefaultTask+0x5cc>)
 8002692:	885b      	ldrh	r3, [r3, #2]
 8002694:	2be5      	cmp	r3, #229	; 0xe5
 8002696:	d806      	bhi.n	80026a6 <StartDefaultTask+0x402>
 8002698:	4b75      	ldr	r3, [pc, #468]	; (8002870 <StartDefaultTask+0x5cc>)
 800269a:	899b      	ldrh	r3, [r3, #12]
 800269c:	2bd1      	cmp	r3, #209	; 0xd1
 800269e:	d802      	bhi.n	80026a6 <StartDefaultTask+0x402>
	  			{
	  				stateEtat = JEU_PARTIES;
 80026a0:	4b72      	ldr	r3, [pc, #456]	; (800286c <StartDefaultTask+0x5c8>)
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
	  			}
	  			if(TS_State.touchX[0] > 250 && TS_State.touchY[0] > 125 && TS_State.touchX[0] < 460 && TS_State.touchY[0] < 210)
 80026a6:	4b72      	ldr	r3, [pc, #456]	; (8002870 <StartDefaultTask+0x5cc>)
 80026a8:	885b      	ldrh	r3, [r3, #2]
 80026aa:	2bfa      	cmp	r3, #250	; 0xfa
 80026ac:	f240 80be 	bls.w	800282c <StartDefaultTask+0x588>
 80026b0:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <StartDefaultTask+0x5cc>)
 80026b2:	899b      	ldrh	r3, [r3, #12]
 80026b4:	2b7d      	cmp	r3, #125	; 0x7d
 80026b6:	f240 80b9 	bls.w	800282c <StartDefaultTask+0x588>
 80026ba:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <StartDefaultTask+0x5cc>)
 80026bc:	885b      	ldrh	r3, [r3, #2]
 80026be:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80026c2:	f080 80b3 	bcs.w	800282c <StartDefaultTask+0x588>
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <StartDefaultTask+0x5cc>)
 80026c8:	899b      	ldrh	r3, [r3, #12]
 80026ca:	2bd1      	cmp	r3, #209	; 0xd1
 80026cc:	f200 80ae 	bhi.w	800282c <StartDefaultTask+0x588>
	  			{
	  				stateEtat = JEU_TIMERST;
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <StartDefaultTask+0x5c8>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		break;
 80026d6:	e0a9      	b.n	800282c <StartDefaultTask+0x588>
	  	  case JEU_TIMERST:
	  		sConfig.Channel = ADC_CHANNEL_7;
 80026d8:	2307      	movs	r3, #7
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80026de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026e2:	4619      	mov	r1, r3
 80026e4:	4863      	ldr	r0, [pc, #396]	; (8002874 <StartDefaultTask+0x5d0>)
 80026e6:	f003 fac7 	bl	8005c78 <HAL_ADC_ConfigChannel>
	  		HAL_ADC_Start(&hadc3);
 80026ea:	4862      	ldr	r0, [pc, #392]	; (8002874 <StartDefaultTask+0x5d0>)
 80026ec:	f003 f95e 	bl	80059ac <HAL_ADC_Start>
	  		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80026f0:	bf00      	nop
 80026f2:	2164      	movs	r1, #100	; 0x64
 80026f4:	485f      	ldr	r0, [pc, #380]	; (8002874 <StartDefaultTask+0x5d0>)
 80026f6:	f003 fa27 	bl	8005b48 <HAL_ADC_PollForConversion>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f8      	bne.n	80026f2 <StartDefaultTask+0x44e>
	  		potl = HAL_ADC_GetValue(&hadc3);
 8002700:	485c      	ldr	r0, [pc, #368]	; (8002874 <StartDefaultTask+0x5d0>)
 8002702:	f003 faac 	bl	8005c5e <HAL_ADC_GetValue>
 8002706:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	  		if ((potl > potlb + 50) || (potlb > potl + 50))
 800270a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800270e:	3332      	adds	r3, #50	; 0x32
 8002710:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002714:	429a      	cmp	r2, r3
 8002716:	d806      	bhi.n	8002726 <StartDefaultTask+0x482>
 8002718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002722:	429a      	cmp	r2, r3
 8002724:	d943      	bls.n	80027ae <StartDefaultTask+0x50a>
	  		{
	  			potlb = potl;
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	  			xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <StartDefaultTask+0x5a4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002736:	4618      	mov	r0, r3
 8002738:	f00a fa2c 	bl	800cb94 <xQueueSemaphoreTake>
	  			BSP_LCD_SelectLayer(1);
 800273c:	2001      	movs	r0, #1
 800273e:	f000 fe31 	bl	80033a4 <BSP_LCD_SelectLayer>
	  			BSP_LCD_Clear(00);
 8002742:	2000      	movs	r0, #0
 8002744:	f000 fea0 	bl	8003488 <BSP_LCD_Clear>
	  			BSP_LCD_SetFont(&Font24);
 8002748:	4841      	ldr	r0, [pc, #260]	; (8002850 <StartDefaultTask+0x5ac>)
 800274a:	f000 fe6d 	bl	8003428 <BSP_LCD_SetFont>
	  			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800274e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002752:	f000 fe37 	bl	80033c4 <BSP_LCD_SetTextColor>
	  			timers = (potl/27) + 30;
 8002756:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <StartDefaultTask+0x5d4>)
 800275c:	fba3 1302 	umull	r1, r3, r3, r2
 8002760:	1ad2      	subs	r2, r2, r3
 8002762:	0852      	lsrs	r2, r2, #1
 8002764:	4413      	add	r3, r2
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	b2db      	uxtb	r3, r3
 800276a:	331e      	adds	r3, #30
 800276c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	  			sprintf(text,"Temps : %u secondes", timers);
 8002770:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 8002774:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002778:	4940      	ldr	r1, [pc, #256]	; (800287c <StartDefaultTask+0x5d8>)
 800277a:	4618      	mov	r0, r3
 800277c:	f00c fedc 	bl	800f538 <siprintf>
	  			BSP_LCD_DisplayStringAt(10,ligne*24-10,(uint8_t*) text,CENTER_MODE);
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <StartDefaultTask+0x5b8>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	0052      	lsls	r2, r2, #1
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b0a      	subs	r3, #10
 8002792:	b299      	uxth	r1, r3
 8002794:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002798:	2301      	movs	r3, #1
 800279a:	200a      	movs	r0, #10
 800279c:	f000 fee0 	bl	8003560 <BSP_LCD_DisplayStringAt>
	  			xSemaphoreGive(mutexScreenHandle);
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <StartDefaultTask+0x5a4>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	f009 ff67 	bl	800c67c <xQueueGenericSend>
	  		}
	  		BSP_TS_GetState(&TS_State);
 80027ae:	4830      	ldr	r0, [pc, #192]	; (8002870 <StartDefaultTask+0x5cc>)
 80027b0:	f001 ff64 	bl	800467c <BSP_TS_GetState>
	  		if (TS_State.touchDetected) {
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <StartDefaultTask+0x5cc>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d039      	beq.n	8002830 <StartDefaultTask+0x58c>
	  			if(TS_State.touchX[0] > 410 && TS_State.touchY[0] > 205 && TS_State.touchX[0] < 470 && TS_State.touchY[0] < 260)
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <StartDefaultTask+0x5cc>)
 80027be:	885b      	ldrh	r3, [r3, #2]
 80027c0:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80027c4:	d934      	bls.n	8002830 <StartDefaultTask+0x58c>
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <StartDefaultTask+0x5cc>)
 80027c8:	899b      	ldrh	r3, [r3, #12]
 80027ca:	2bcd      	cmp	r3, #205	; 0xcd
 80027cc:	d930      	bls.n	8002830 <StartDefaultTask+0x58c>
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <StartDefaultTask+0x5cc>)
 80027d0:	885b      	ldrh	r3, [r3, #2]
 80027d2:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 80027d6:	d22b      	bcs.n	8002830 <StartDefaultTask+0x58c>
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <StartDefaultTask+0x5cc>)
 80027da:	899b      	ldrh	r3, [r3, #12]
 80027dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e0:	d226      	bcs.n	8002830 <StartDefaultTask+0x58c>
	  			{
	  			  	stateEtat = JEU_PARTIES;
 80027e2:	4b22      	ldr	r3, [pc, #136]	; (800286c <StartDefaultTask+0x5c8>)
 80027e4:	2202      	movs	r2, #2
 80027e6:	701a      	strb	r2, [r3, #0]
	  			  	timed = 1;
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <StartDefaultTask+0x59c>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		  break;
 80027ee:	e01f      	b.n	8002830 <StartDefaultTask+0x58c>
	  	  case JEU_PARTIES:
	  		break;
	  	  case JEU_FINPART:
	  		BSP_TS_GetState(&TS_State);
 80027f0:	481f      	ldr	r0, [pc, #124]	; (8002870 <StartDefaultTask+0x5cc>)
 80027f2:	f001 ff43 	bl	800467c <BSP_TS_GetState>
	  		if (TS_State.touchDetected) {
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <StartDefaultTask+0x5cc>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01a      	beq.n	8002834 <StartDefaultTask+0x590>
	  			if(TS_State.touchX[0] > 410 && TS_State.touchY[0] > 205 && TS_State.touchX[0] < 470 && TS_State.touchY[0] < 260)
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <StartDefaultTask+0x5cc>)
 8002800:	885b      	ldrh	r3, [r3, #2]
 8002802:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8002806:	d915      	bls.n	8002834 <StartDefaultTask+0x590>
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <StartDefaultTask+0x5cc>)
 800280a:	899b      	ldrh	r3, [r3, #12]
 800280c:	2bcd      	cmp	r3, #205	; 0xcd
 800280e:	d911      	bls.n	8002834 <StartDefaultTask+0x590>
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <StartDefaultTask+0x5cc>)
 8002812:	885b      	ldrh	r3, [r3, #2]
 8002814:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8002818:	d20c      	bcs.n	8002834 <StartDefaultTask+0x590>
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <StartDefaultTask+0x5cc>)
 800281c:	899b      	ldrh	r3, [r3, #12]
 800281e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002822:	d207      	bcs.n	8002834 <StartDefaultTask+0x590>
	  			{
	  			  stateEtat = JEU_ACCUEIL;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <StartDefaultTask+0x5c8>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		break;
 800282a:	e003      	b.n	8002834 <StartDefaultTask+0x590>
	  		break;
 800282c:	bf00      	nop
 800282e:	e002      	b.n	8002836 <StartDefaultTask+0x592>
	  		  break;
 8002830:	bf00      	nop
 8002832:	e000      	b.n	8002836 <StartDefaultTask+0x592>
	  		break;
 8002834:	bf00      	nop
	  }
    osDelay(1);
 8002836:	2001      	movs	r0, #1
 8002838:	f009 fba9 	bl	800bf8e <osDelay>
	  if (old_state != stateEtat)
 800283c:	e584      	b.n	8002348 <StartDefaultTask+0xa4>
 800283e:	bf00      	nop
 8002840:	20008534 	.word	0x20008534
 8002844:	20008858 	.word	0x20008858
 8002848:	20008670 	.word	0x20008670
 800284c:	08050284 	.word	0x08050284
 8002850:	2000002c 	.word	0x2000002c
 8002854:	2000880c 	.word	0x2000880c
 8002858:	0800fdd8 	.word	0x0800fdd8
 800285c:	20000028 	.word	0x20000028
 8002860:	200086c0 	.word	0x200086c0
 8002864:	20008760 	.word	0x20008760
 8002868:	2000866c 	.word	0x2000866c
 800286c:	20008ad4 	.word	0x20008ad4
 8002870:	2000086c 	.word	0x2000086c
 8002874:	2000885c 	.word	0x2000885c
 8002878:	2f684bdb 	.word	0x2f684bdb
 800287c:	0800fdc4 	.word	0x0800fdc4

08002880 <displayTime>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTime */
void displayTime(void const * argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b094      	sub	sp, #80	; 0x50
 8002884:	af02      	add	r7, sp, #8
 8002886:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <displayTime+0xa4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002890:	4618      	mov	r0, r3
 8002892:	f00a f97f 	bl	800cb94 <xQueueSemaphoreTake>
	  BSP_LCD_SetFont(&Font12);
 8002896:	4824      	ldr	r0, [pc, #144]	; (8002928 <displayTime+0xa8>)
 8002898:	f000 fdc6 	bl	8003428 <BSP_LCD_SetFont>
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	2200      	movs	r2, #0
 80028a2:	4619      	mov	r1, r3
 80028a4:	4821      	ldr	r0, [pc, #132]	; (800292c <displayTime+0xac>)
 80028a6:	f007 faed 	bl	8009e84 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	2200      	movs	r2, #0
 80028b0:	4619      	mov	r1, r3
 80028b2:	481e      	ldr	r0, [pc, #120]	; (800292c <displayTime+0xac>)
 80028b4:	f007 fbec 	bl	800a090 <HAL_RTC_GetDate>
	  sprintf(text, "%2u:%02u:%02u", time.Hours, time.Minutes, time.Seconds);
 80028b8:	7c3b      	ldrb	r3, [r7, #16]
 80028ba:	461a      	mov	r2, r3
 80028bc:	7c7b      	ldrb	r3, [r7, #17]
 80028be:	4619      	mov	r1, r3
 80028c0:	7cbb      	ldrb	r3, [r7, #18]
 80028c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	460b      	mov	r3, r1
 80028ca:	4919      	ldr	r1, [pc, #100]	; (8002930 <displayTime+0xb0>)
 80028cc:	f00c fe34 	bl	800f538 <siprintf>
	  BSP_LCD_SelectLayer(1);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f000 fd67 	bl	80033a4 <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayStringAtLine(0,(uint8_t*) text);
 80028d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028da:	4619      	mov	r1, r3
 80028dc:	2000      	movs	r0, #0
 80028de:	f000 ff07 	bl	80036f0 <BSP_LCD_DisplayStringAtLine>
	  sprintf(text, "Score : %4u", score);
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <displayTime+0xb4>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ec:	4912      	ldr	r1, [pc, #72]	; (8002938 <displayTime+0xb8>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f00c fe22 	bl	800f538 <siprintf>
	  BSP_LCD_SelectLayer(1);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f000 fd55 	bl	80033a4 <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayStringAtLine(1,(uint8_t*) text);
 80028fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028fe:	4619      	mov	r1, r3
 8002900:	2001      	movs	r0, #1
 8002902:	f000 fef5 	bl	80036f0 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SelectLayer(1);
 8002906:	2001      	movs	r0, #1
 8002908:	f000 fd4c 	bl	80033a4 <BSP_LCD_SelectLayer>
	  xSemaphoreGive(mutexScreenHandle);
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <displayTime+0xa4>)
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	2300      	movs	r3, #0
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	f009 feb1 	bl	800c67c <xQueueGenericSend>
	  vTaskDelay(100);
 800291a:	2064      	movs	r0, #100	; 0x64
 800291c:	f00a fe18 	bl	800d550 <vTaskDelay>
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002920:	e7b2      	b.n	8002888 <displayTime+0x8>
 8002922:	bf00      	nop
 8002924:	20008670 	.word	0x20008670
 8002928:	20000034 	.word	0x20000034
 800292c:	2000893c 	.word	0x2000893c
 8002930:	0800fe70 	.word	0x0800fe70
 8002934:	2000880c 	.word	0x2000880c
 8002938:	0800fe80 	.word	0x0800fe80

0800293c <displayGame>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayGame */
void displayGame(void const * argument)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b094      	sub	sp, #80	; 0x50
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayGame */
	char text[50]={};
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	222e      	movs	r2, #46	; 0x2e
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f00c fd15 	bl	800f380 <memset>
	uint16_t amongx = BSP_LCD_GetXSize()/2 - 15;
 8002956:	f000 fc9d 	bl	8003294 <BSP_LCD_GetXSize>
 800295a:	4603      	mov	r3, r0
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b0f      	subs	r3, #15
 8002962:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t amongy = BSP_LCD_GetYSize() - 30;
 8002966:	f000 fca9 	bl	80032bc <BSP_LCD_GetYSize>
 800296a:	4603      	mov	r3, r0
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b1e      	subs	r3, #30
 8002970:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t sword;
	uint16_t col;
  /* Infinite loop */
  for(;;)
  {
	  if (xQueueReceive(swordsPosHandle, &derive, 0)){
 8002974:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <displayGame+0x134>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f107 0117 	add.w	r1, r7, #23
 800297c:	2200      	movs	r2, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f00a f822 	bl	800c9c8 <xQueueReceive>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d04d      	beq.n	8002a26 <displayGame+0xea>
		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <displayGame+0x138>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002992:	4618      	mov	r0, r3
 8002994:	f00a f8fe 	bl	800cb94 <xQueueSemaphoreTake>
		  BSP_LCD_SelectLayer(1);
 8002998:	2001      	movs	r0, #1
 800299a:	f000 fd03 	bl	80033a4 <BSP_LCD_SelectLayer>
		  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 800299e:	4836      	ldr	r0, [pc, #216]	; (8002a78 <displayGame+0x13c>)
 80029a0:	f000 fd10 	bl	80033c4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect(amongx, amongy, 30,30);
 80029a4:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80029a8:	f8b7 004e 	ldrh.w	r0, [r7, #78]	; 0x4e
 80029ac:	231e      	movs	r3, #30
 80029ae:	221e      	movs	r2, #30
 80029b0:	f001 f8f8 	bl	8003ba4 <BSP_LCD_FillRect>
		  if (derive == 1 && amongx < 450)
 80029b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10d      	bne.n	80029d8 <displayGame+0x9c>
 80029bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029c0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80029c4:	d208      	bcs.n	80029d8 <displayGame+0x9c>
		  {
			  amongx = amongx + derive;
 80029c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d0:	4413      	add	r3, r2
 80029d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029d6:	e010      	b.n	80029fa <displayGame+0xbe>
		  } else if (derive == -1 && amongx > 0){
 80029d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e0:	d10b      	bne.n	80029fa <displayGame+0xbe>
 80029e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <displayGame+0xbe>
			  amongx = amongx + derive;
 80029ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f4:	4413      	add	r3, r2
 80029f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  	  }
		  BSP_LCD_DrawBitmap(amongx, amongy,(uint8_t*)Amongus_bmp);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8002a02:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <displayGame+0x140>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f81b 	bl	8003a40 <BSP_LCD_DrawBitmap>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a0e:	f000 fcd9 	bl	80033c4 <BSP_LCD_SetTextColor>
		  BSP_LCD_SelectLayer(1);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f000 fcc6 	bl	80033a4 <BSP_LCD_SelectLayer>
		  xSemaphoreGive(mutexScreenHandle);
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <displayGame+0x138>)
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	f009 fe2b 	bl	800c67c <xQueueGenericSend>
	  }
	  if(xQueueReceive(collideFlagHandle, &sword, 0))
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <displayGame+0x144>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f107 0110 	add.w	r1, r7, #16
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f009 ffc9 	bl	800c9c8 <xQueueReceive>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <displayGame+0x12c>
	  {
		  if ((sword-amongx) < 30 || (amongx-sword) < 32){
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b1d      	cmp	r3, #29
 8002a46:	d905      	bls.n	8002a54 <displayGame+0x118>
 8002a48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b1f      	cmp	r3, #31
 8002a52:	d809      	bhi.n	8002a68 <displayGame+0x12c>
			  col = 30;
 8002a54:	231e      	movs	r3, #30
 8002a56:	81fb      	strh	r3, [r7, #14]
			  xQueueSend(scoreIncremHandle, &col, 0);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <displayGame+0x148>)
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	f107 010e 	add.w	r1, r7, #14
 8002a60:	2300      	movs	r3, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	f009 fe0a 	bl	800c67c <xQueueGenericSend>
		  }
	  }
	  osDelay(5);
 8002a68:	2005      	movs	r0, #5
 8002a6a:	f009 fa90 	bl	800bf8e <osDelay>
	  if (xQueueReceive(swordsPosHandle, &derive, 0)){
 8002a6e:	e781      	b.n	8002974 <displayGame+0x38>
 8002a70:	200084dc 	.word	0x200084dc
 8002a74:	20008670 	.word	0x20008670
 8002a78:	ffffde00 	.word	0xffffde00
 8002a7c:	0800fea8 	.word	0x0800fea8
 8002a80:	200086c4 	.word	0x200086c4
 8002a84:	200089a8 	.word	0x200089a8

08002a88 <waitGameOver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_waitGameOver */
void waitGameOver(void const * argument)
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b098      	sub	sp, #96	; 0x60
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN waitGameOver */
	uint16_t temp;
	char text[30] = {};
 8002a90:	2300      	movs	r3, #0
 8002a92:	643b      	str	r3, [r7, #64]	; 0x40
 8002a94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	831a      	strh	r2, [r3, #24]
	uint16_t gameov;
	/* definition and creation of TacheEpee */
	  osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <waitGameOver+0x114>)
 8002aaa:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002aae:	461d      	mov	r5, r3
 8002ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f009 fa17 	bl	800bef6 <osThreadCreate>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a35      	ldr	r2, [pc, #212]	; (8002ba0 <waitGameOver+0x118>)
 8002acc:	6013      	str	r3, [r2, #0]
	//osTmutexScreenHandlehreadId TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(scoreIncremHandle, &temp, 0)){
 8002ace:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <waitGameOver+0x11c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f009 ff75 	bl	800c9c8 <xQueueReceive>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d052      	beq.n	8002b8a <waitGameOver+0x102>
	  		  if (temp==1){
 8002ae4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d13b      	bne.n	8002b64 <waitGameOver+0xdc>
	  			vTaskDelete(TacheEpeeHandle);
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <waitGameOver+0x118>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00a fc9b 	bl	800d42c <vTaskDelete>
	  			xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002af6:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <waitGameOver+0x120>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002afe:	4618      	mov	r0, r3
 8002b00:	f00a f848 	bl	800cb94 <xQueueSemaphoreTake>
	  			BSP_LCD_SelectLayer(0);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f000 fc4d 	bl	80033a4 <BSP_LCD_SelectLayer>
	  			BSP_LCD_Clear(LCD_COLOR_AMONGUS);
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <waitGameOver+0x124>)
 8002b0c:	f000 fcbc 	bl	8003488 <BSP_LCD_Clear>
	  			BSP_LCD_SelectLayer(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f000 fc47 	bl	80033a4 <BSP_LCD_SelectLayer>
	  			xSemaphoreGive(mutexScreenHandle);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <waitGameOver+0x120>)
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f009 fdac 	bl	800c67c <xQueueGenericSend>
	  			 score += vitesse;
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <waitGameOver+0x128>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <waitGameOver+0x12c>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <waitGameOver+0x12c>)
 8002b34:	801a      	strh	r2, [r3, #0]
	  			/* definition and creation of TacheEpee */
	  			  osThreadDef(TacheEpee, obj_sword, osPriorityNormal, 0, 1024);
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <waitGameOver+0x114>)
 8002b38:	f107 0408 	add.w	r4, r7, #8
 8002b3c:	461d      	mov	r5, r3
 8002b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  			  TacheEpeeHandle = osThreadCreate(osThread(TacheEpee), NULL);
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f009 f9d0 	bl	800bef6 <osThreadCreate>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <waitGameOver+0x118>)
 8002b5a:	6013      	str	r3, [r2, #0]
	  			 temp = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002b62:	e012      	b.n	8002b8a <waitGameOver+0x102>
	  		  } else if (temp == 30) {
 8002b64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002b68:	2b1e      	cmp	r3, #30
 8002b6a:	d10e      	bne.n	8002b8a <waitGameOver+0x102>
	  			  stateEtat = JEU_FINPART;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <waitGameOver+0x130>)
 8002b6e:	2203      	movs	r2, #3
 8002b70:	701a      	strb	r2, [r3, #0]
	  			vTaskDelete(NULL);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f00a fc5a 	bl	800d42c <vTaskDelete>
	  			vTaskDelete(TacheEpeeHandle);
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <waitGameOver+0x118>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00a fc55 	bl	800d42c <vTaskDelete>
	  			temp = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  			  break;
 8002b88:	e003      	b.n	8002b92 <waitGameOver+0x10a>
	  		  }
	  	  }
    osDelay(10);
 8002b8a:	200a      	movs	r0, #10
 8002b8c:	f009 f9ff 	bl	800bf8e <osDelay>
	  if(xQueueReceive(scoreIncremHandle, &temp, 0)){
 8002b90:	e79d      	b.n	8002ace <waitGameOver+0x46>
  }
  /* USER CODE END waitGameOver */
}
 8002b92:	bf00      	nop
 8002b94:	3760      	adds	r7, #96	; 0x60
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	0800fe54 	.word	0x0800fe54
 8002ba0:	20008b0c 	.word	0x20008b0c
 8002ba4:	200089a8 	.word	0x200089a8
 8002ba8:	20008670 	.word	0x20008670
 8002bac:	ffffde00 	.word	0xffffde00
 8002bb0:	200089bc 	.word	0x200089bc
 8002bb4:	2000880c 	.word	0x2000880c
 8002bb8:	20008ad4 	.word	0x20008ad4

08002bbc <obj_cycle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_obj_cycle */
void obj_cycle(void const * argument)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN obj_cycle */
	uint32_t joystick_h, joystick_v;
	int8_t derive;
	ADC_ChannelConfTypeDef sConfig = {0};
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  sConfig.Channel = ADC_CHANNEL_8;
 8002bda:	2308      	movs	r3, #8
 8002bdc:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	4619      	mov	r1, r3
 8002be4:	4820      	ldr	r0, [pc, #128]	; (8002c68 <obj_cycle+0xac>)
 8002be6:	f003 f847 	bl	8005c78 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8002bea:	481f      	ldr	r0, [pc, #124]	; (8002c68 <obj_cycle+0xac>)
 8002bec:	f002 fede 	bl	80059ac <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002bf0:	bf00      	nop
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	481c      	ldr	r0, [pc, #112]	; (8002c68 <obj_cycle+0xac>)
 8002bf6:	f002 ffa7 	bl	8005b48 <HAL_ADC_PollForConversion>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f8      	bne.n	8002bf2 <obj_cycle+0x36>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8002c00:	4819      	ldr	r0, [pc, #100]	; (8002c68 <obj_cycle+0xac>)
 8002c02:	f003 f82c 	bl	8005c5e <HAL_ADC_GetValue>
 8002c06:	6278      	str	r0, [r7, #36]	; 0x24

	  HAL_ADC_Start(&hadc1);
 8002c08:	4818      	ldr	r0, [pc, #96]	; (8002c6c <obj_cycle+0xb0>)
 8002c0a:	f002 fecf 	bl	80059ac <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8002c0e:	bf00      	nop
 8002c10:	2164      	movs	r1, #100	; 0x64
 8002c12:	4816      	ldr	r0, [pc, #88]	; (8002c6c <obj_cycle+0xb0>)
 8002c14:	f002 ff98 	bl	8005b48 <HAL_ADC_PollForConversion>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f8      	bne.n	8002c10 <obj_cycle+0x54>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8002c1e:	4813      	ldr	r0, [pc, #76]	; (8002c6c <obj_cycle+0xb0>)
 8002c20:	f003 f81d 	bl	8005c5e <HAL_ADC_GetValue>
 8002c24:	6238      	str	r0, [r7, #32]

	  if (joystick_h < 1024) {
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2c:	d20a      	bcs.n	8002c44 <obj_cycle+0x88>
		  derive = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	77fb      	strb	r3, [r7, #31]
		  xQueueSend(swordsPosHandle, &derive, 0);
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <obj_cycle+0xb4>)
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	f107 011f 	add.w	r1, r7, #31
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f009 fd1d 	bl	800c67c <xQueueGenericSend>
 8002c42:	e00d      	b.n	8002c60 <obj_cycle+0xa4>
	  } else if (joystick_h > 3072) {
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c4a:	d909      	bls.n	8002c60 <obj_cycle+0xa4>
		  derive = -1;
 8002c4c:	23ff      	movs	r3, #255	; 0xff
 8002c4e:	77fb      	strb	r3, [r7, #31]
		  xQueueSend(swordsPosHandle, &derive, 0);
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <obj_cycle+0xb4>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	f107 011f 	add.w	r1, r7, #31
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f009 fd0e 	bl	800c67c <xQueueGenericSend>
	  amongx -= 1;
	  BSP_LCD_DrawBitmap(amongx, amongy,(uint8_t*)Amongus_bmp);
	  BSP_LCD_SelectLayer(1);
	  xSemaphoreGive(mutexScreenHandle);
	*/
	  vTaskDelay(10);
 8002c60:	200a      	movs	r0, #10
 8002c62:	f00a fc75 	bl	800d550 <vTaskDelay>
	  sConfig.Channel = ADC_CHANNEL_8;
 8002c66:	e7b8      	b.n	8002bda <obj_cycle+0x1e>
 8002c68:	2000885c 	.word	0x2000885c
 8002c6c:	20008810 	.word	0x20008810
 8002c70:	200084dc 	.word	0x200084dc

08002c74 <obj_sword>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_obj_sword */
void obj_sword(void const * argument)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b08f      	sub	sp, #60	; 0x3c
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN obj_sword */
	char text[30] = {};
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
 8002c90:	615a      	str	r2, [r3, #20]
 8002c92:	831a      	strh	r2, [r3, #24]
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4849      	ldr	r0, [pc, #292]	; (8002dc0 <obj_sword+0x14c>)
 8002c9c:	f006 ff4c 	bl	8009b38 <HAL_RNG_GenerateRandomNumber>
	uint32_t posx = (30 + (randomNumber% (BSP_LCD_GetXSize() - 60)));
 8002ca0:	697c      	ldr	r4, [r7, #20]
 8002ca2:	f000 faf7 	bl	8003294 <BSP_LCD_GetXSize>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	3b3c      	subs	r3, #60	; 0x3c
 8002caa:	fbb4 f2f3 	udiv	r2, r4, r3
 8002cae:	fb03 f302 	mul.w	r3, r3, r2
 8002cb2:	1ae3      	subs	r3, r4, r3
 8002cb4:	331e      	adds	r3, #30
 8002cb6:	613b      	str	r3, [r7, #16]
	uint16_t posy = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* Infinite loop */
  for(;;)
  {
	  if (stateEtat != JEU_PARTIES)
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <obj_sword+0x150>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d002      	beq.n	8002cca <obj_sword+0x56>
	  {
		  vTaskDelete(NULL);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f00a fbb1 	bl	800d42c <vTaskDelete>
	  }
	  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <obj_sword+0x154>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f009 ff5e 	bl	800cb94 <xQueueSemaphoreTake>
	  BSP_LCD_SelectLayer(0);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f000 fb63 	bl	80033a4 <BSP_LCD_SelectLayer>
	  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 8002cde:	483b      	ldr	r0, [pc, #236]	; (8002dcc <obj_sword+0x158>)
 8002ce0:	f000 fb70 	bl	80033c4 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(posx, posy, 30,30);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	b298      	uxth	r0, r3
 8002ce8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002cea:	231e      	movs	r3, #30
 8002cec:	221e      	movs	r2, #30
 8002cee:	f000 ff59 	bl	8003ba4 <BSP_LCD_FillRect>
	  posy += vitesse;
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <obj_sword+0x15c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cfa:	4413      	add	r3, r2
 8002cfc:	86fb      	strh	r3, [r7, #54]	; 0x36
	  BSP_LCD_DrawBitmap(posx, posy,(uint8_t*)Block_bmp);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002d02:	4a34      	ldr	r2, [pc, #208]	; (8002dd4 <obj_sword+0x160>)
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fe9b 	bl	8003a40 <BSP_LCD_DrawBitmap>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d0e:	f000 fb59 	bl	80033c4 <BSP_LCD_SetTextColor>
	  BSP_LCD_SelectLayer(1);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f000 fb46 	bl	80033a4 <BSP_LCD_SelectLayer>
	  xSemaphoreGive(mutexScreenHandle);
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <obj_sword+0x154>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	f009 fcab 	bl	800c67c <xQueueGenericSend>
	  if (posy > BSP_LCD_GetYSize()-59) {
 8002d26:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8002d28:	f000 fac8 	bl	80032bc <BSP_LCD_GetYSize>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	3b3b      	subs	r3, #59	; 0x3b
 8002d30:	429c      	cmp	r4, r3
 8002d32:	d907      	bls.n	8002d44 <obj_sword+0xd0>
		  xQueueSend(collideFlagHandle, &posx, 0);
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <obj_sword+0x164>)
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	f107 0110 	add.w	r1, r7, #16
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f009 fc9c 	bl	800c67c <xQueueGenericSend>
	  }
	  if (posy > BSP_LCD_GetYSize()-29)
 8002d44:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8002d46:	f000 fab9 	bl	80032bc <BSP_LCD_GetYSize>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	3b1d      	subs	r3, #29
 8002d4e:	429c      	cmp	r4, r3
 8002d50:	d931      	bls.n	8002db6 <obj_sword+0x142>
	  {

  		  xSemaphoreTake(mutexScreenHandle,portMAX_DELAY);
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <obj_sword+0x154>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f009 ff1a 	bl	800cb94 <xQueueSemaphoreTake>
  		  BSP_LCD_SelectLayer(0);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 fb1f 	bl	80033a4 <BSP_LCD_SelectLayer>
  		  BSP_LCD_SetTextColor(LCD_COLOR_AMONGUS);
 8002d66:	4819      	ldr	r0, [pc, #100]	; (8002dcc <obj_sword+0x158>)
 8002d68:	f000 fb2c 	bl	80033c4 <BSP_LCD_SetTextColor>
  		  BSP_LCD_FillRect(posx, posy, 30,30);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	b298      	uxth	r0, r3
 8002d70:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002d72:	231e      	movs	r3, #30
 8002d74:	221e      	movs	r2, #30
 8002d76:	f000 ff15 	bl	8003ba4 <BSP_LCD_FillRect>
  		  /*posy = 0;
  		  posx = (30 + (rand()% (BSP_LCD_GetXSize() - 60)));
  		  BSP_LCD_DrawBitmap(posx, posy,(uint8_t*)Block_bmp);*/
  		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d7e:	f000 fb21 	bl	80033c4 <BSP_LCD_SetTextColor>
  		  BSP_LCD_SelectLayer(1);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f000 fb0e 	bl	80033a4 <BSP_LCD_SelectLayer>
  		  xSemaphoreGive(mutexScreenHandle);
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <obj_sword+0x154>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	f009 fc73 	bl	800c67c <xQueueGenericSend>
  		  uint16_t incr = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	81fb      	strh	r3, [r7, #14]
  		  xQueueSend(scoreIncremHandle, &incr, 0);
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <obj_sword+0x168>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f107 010e 	add.w	r1, r7, #14
 8002da2:	2300      	movs	r3, #0
 8002da4:	2200      	movs	r2, #0
 8002da6:	f009 fc69 	bl	800c67c <xQueueGenericSend>
  		  vTaskDelay(10);
 8002daa:	200a      	movs	r0, #10
 8002dac:	f00a fbd0 	bl	800d550 <vTaskDelay>
  		  vTaskDelete(NULL);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f00a fb3b 	bl	800d42c <vTaskDelete>
	  }
	  vTaskDelay(3);
 8002db6:	2003      	movs	r0, #3
 8002db8:	f00a fbca 	bl	800d550 <vTaskDelay>
	  if (stateEtat != JEU_PARTIES)
 8002dbc:	e77e      	b.n	8002cbc <obj_sword+0x48>
 8002dbe:	bf00      	nop
 8002dc0:	200089ac 	.word	0x200089ac
 8002dc4:	20008ad4 	.word	0x20008ad4
 8002dc8:	20008670 	.word	0x20008670
 8002dcc:	ffffde00 	.word	0xffffde00
 8002dd0:	200089bc 	.word	0x200089bc
 8002dd4:	080cfb14 	.word	0x080cfb14
 8002dd8:	200086c4 	.word	0x200086c4
 8002ddc:	200089a8 	.word	0x200089a8

08002de0 <CallbackDisplay>:
  /* USER CODE END obj_sword */
}

/* CallbackDisplay function */
void CallbackDisplay(void const * argument)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackDisplay */
	uint16_t incr = 30;
 8002de8:	231e      	movs	r3, #30
 8002dea:	81fb      	strh	r3, [r7, #14]
	xQueueSend(scoreIncremHandle, &incr, 0);
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <CallbackDisplay+0x30>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	f107 010e 	add.w	r1, r7, #14
 8002df4:	2300      	movs	r3, #0
 8002df6:	2200      	movs	r2, #0
 8002df8:	f009 fc40 	bl	800c67c <xQueueGenericSend>
	stateEtat = JEU_FINPART;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <CallbackDisplay+0x34>)
 8002dfe:	2203      	movs	r2, #3
 8002e00:	701a      	strb	r2, [r3, #0]
	timed = 2;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <CallbackDisplay+0x38>)
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
	//char text[50];
	//static uint8_t ligne = 10;
	//sprintf(text,"CONGRATS !");
	//BSP_LCD_DisplayStringAt(0,ligne*12,(uint8_t*) text,RIGHT_MODE);
  /* USER CODE END CallbackDisplay */
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200089a8 	.word	0x200089a8
 8002e14:	20008ad4 	.word	0x20008ad4
 8002e18:	20008534 	.word	0x20008534

08002e1c <CallbackLED>:

/* CallbackLED function */
void CallbackLED(void const * argument)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackLED */
	HAL_GPIO_TogglePin(LED12_GPIO_Port,LED12_Pin);
 8002e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e28:	4803      	ldr	r0, [pc, #12]	; (8002e38 <CallbackLED+0x1c>)
 8002e2a:	f004 fb7a 	bl	8007522 <HAL_GPIO_TogglePin>
  /* USER CODE END CallbackLED */
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40021c00 	.word	0x40021c00

08002e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e4e:	f002 fd25 	bl	800589c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40001000 	.word	0x40001000

08002e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e64:	b672      	cpsid	i
}
 8002e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <Error_Handler+0x8>
	...

08002e6c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a51      	ldr	r2, [pc, #324]	; (8002fbc <I2Cx_MspInit+0x150>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d14d      	bne.n	8002f18 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e86:	6313      	str	r3, [r2, #48]	; 0x30
 8002e88:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002e98:	2312      	movs	r3, #18
 8002e9a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	4619      	mov	r1, r3
 8002eae:	4845      	ldr	r0, [pc, #276]	; (8002fc4 <I2Cx_MspInit+0x158>)
 8002eb0:	f004 f84e 	bl	8006f50 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002eba:	f107 031c 	add.w	r3, r7, #28
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4840      	ldr	r0, [pc, #256]	; (8002fc4 <I2Cx_MspInit+0x158>)
 8002ec2:	f004 f845 	bl	8006f50 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a3d      	ldr	r2, [pc, #244]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a37      	ldr	r2, [pc, #220]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ee8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002eea:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002ef0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	210f      	movs	r1, #15
 8002efa:	2048      	movs	r0, #72	; 0x48
 8002efc:	f003 f9c4 	bl	8006288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002f00:	2048      	movs	r0, #72	; 0x48
 8002f02:	f003 f9dd 	bl	80062c0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	210f      	movs	r1, #15
 8002f0a:	2049      	movs	r0, #73	; 0x49
 8002f0c:	f003 f9bc 	bl	8006288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002f10:	2049      	movs	r0, #73	; 0x49
 8002f12:	f003 f9d5 	bl	80062c0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002f16:	e04d      	b.n	8002fb4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f18:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	6313      	str	r3, [r2, #48]	; 0x30
 8002f24:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f34:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f36:	2312      	movs	r3, #18
 8002f38:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002f42:	2304      	movs	r3, #4
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	481e      	ldr	r0, [pc, #120]	; (8002fc8 <I2Cx_MspInit+0x15c>)
 8002f4e:	f003 ffff 	bl	8006f50 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f58:	f107 031c 	add.w	r3, r7, #28
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	481a      	ldr	r0, [pc, #104]	; (8002fc8 <I2Cx_MspInit+0x15c>)
 8002f60:	f003 fff6 	bl	8006f50 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f86:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <I2Cx_MspInit+0x154>)
 8002f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f92:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002f94:	2200      	movs	r2, #0
 8002f96:	210f      	movs	r1, #15
 8002f98:	201f      	movs	r0, #31
 8002f9a:	f003 f975 	bl	8006288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002f9e:	201f      	movs	r0, #31
 8002fa0:	f003 f98e 	bl	80062c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	2020      	movs	r0, #32
 8002faa:	f003 f96d 	bl	8006288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002fae:	2020      	movs	r0, #32
 8002fb0:	f003 f986 	bl	80062c0 <HAL_NVIC_EnableIRQ>
}
 8002fb4:	bf00      	nop
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000898 	.word	0x20000898
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021c00 	.word	0x40021c00
 8002fc8:	40020400 	.word	0x40020400

08002fcc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f004 fdc5 	bl	8007b64 <HAL_I2C_GetState>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d125      	bne.n	800302c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <I2Cx_Init+0x68>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d103      	bne.n	8002ff0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <I2Cx_Init+0x6c>)
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e002      	b.n	8002ff6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <I2Cx_Init+0x70>)
 8002ff4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <I2Cx_Init+0x74>)
 8002ffa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff23 	bl	8002e6c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f004 faae 	bl	8007588 <HAL_I2C_Init>
  }
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000898 	.word	0x20000898
 8003038:	40005c00 	.word	0x40005c00
 800303c:	40005400 	.word	0x40005400
 8003040:	40912732 	.word	0x40912732

08003044 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af04      	add	r7, sp, #16
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	72fb      	strb	r3, [r7, #11]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	b299      	uxth	r1, r3
 8003066:	88f8      	ldrh	r0, [r7, #6]
 8003068:	893a      	ldrh	r2, [r7, #8]
 800306a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	4603      	mov	r3, r0
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f004 fc58 	bl	8007930 <HAL_I2C_Mem_Read>
 8003080:	4603      	mov	r3, r0
 8003082:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d004      	beq.n	8003094 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800308a:	7afb      	ldrb	r3, [r7, #11]
 800308c:	4619      	mov	r1, r3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f832 	bl	80030f8 <I2Cx_Error>
  }
  return status;    
 8003094:	7dfb      	ldrb	r3, [r7, #23]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b08a      	sub	sp, #40	; 0x28
 80030a2:	af04      	add	r7, sp, #16
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	4608      	mov	r0, r1
 80030a8:	4611      	mov	r1, r2
 80030aa:	461a      	mov	r2, r3
 80030ac:	4603      	mov	r3, r0
 80030ae:	72fb      	strb	r3, [r7, #11]
 80030b0:	460b      	mov	r3, r1
 80030b2:	813b      	strh	r3, [r7, #8]
 80030b4:	4613      	mov	r3, r2
 80030b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	b299      	uxth	r1, r3
 80030c0:	88f8      	ldrh	r0, [r7, #6]
 80030c2:	893a      	ldrh	r2, [r7, #8]
 80030c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	4603      	mov	r3, r0
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f004 fb17 	bl	8007708 <HAL_I2C_Mem_Write>
 80030da:	4603      	mov	r3, r0
 80030dc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80030e4:	7afb      	ldrb	r3, [r7, #11]
 80030e6:	4619      	mov	r1, r3
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f805 	bl	80030f8 <I2Cx_Error>
  }
  return status;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f004 facf 	bl	80076a8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ff5e 	bl	8002fcc <I2Cx_Init>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <TS_IO_Init+0x10>)
 800311e:	f7ff ff55 	bl	8002fcc <I2Cx_Init>
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000898 	.word	0x20000898

0800312c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af02      	add	r7, sp, #8
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	460b      	mov	r3, r1
 8003138:	71bb      	strb	r3, [r7, #6]
 800313a:	4613      	mov	r3, r2
 800313c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800313e:	79bb      	ldrb	r3, [r7, #6]
 8003140:	b29a      	uxth	r2, r3
 8003142:	79f9      	ldrb	r1, [r7, #7]
 8003144:	2301      	movs	r3, #1
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	1d7b      	adds	r3, r7, #5
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2301      	movs	r3, #1
 800314e:	4803      	ldr	r0, [pc, #12]	; (800315c <TS_IO_Write+0x30>)
 8003150:	f7ff ffa5 	bl	800309e <I2Cx_WriteMultiple>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000898 	.word	0x20000898

08003160 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af02      	add	r7, sp, #8
 8003166:	4603      	mov	r3, r0
 8003168:	460a      	mov	r2, r1
 800316a:	71fb      	strb	r3, [r7, #7]
 800316c:	4613      	mov	r3, r2
 800316e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003174:	79bb      	ldrb	r3, [r7, #6]
 8003176:	b29a      	uxth	r2, r3
 8003178:	79f9      	ldrb	r1, [r7, #7]
 800317a:	2301      	movs	r3, #1
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	f107 030f 	add.w	r3, r7, #15
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2301      	movs	r3, #1
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <TS_IO_Read+0x38>)
 8003188:	f7ff ff5c 	bl	8003044 <I2Cx_ReadMultiple>

  return read_value;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000898 	.word	0x20000898

0800319c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f002 fb99 	bl	80058dc <HAL_Delay>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031ba:	2228      	movs	r2, #40	; 0x28
 80031bc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031c0:	2209      	movs	r2, #9
 80031c2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031c6:	2235      	movs	r2, #53	; 0x35
 80031c8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031cc:	220b      	movs	r2, #11
 80031ce:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031d2:	f240 121b 	movw	r2, #283	; 0x11b
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80031d8:	4b29      	ldr	r3, [pc, #164]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031da:	f240 2215 	movw	r2, #533	; 0x215
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031e2:	f240 121d 	movw	r2, #285	; 0x11d
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031ea:	f240 2235 	movw	r2, #565	; 0x235
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80031f0:	2100      	movs	r1, #0
 80031f2:	4823      	ldr	r0, [pc, #140]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031f4:	f000 fee8 	bl	8003fc8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <BSP_LCD_Init+0xcc>)
 80031fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003200:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <BSP_LCD_Init+0xcc>)
 8003202:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003206:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <BSP_LCD_Init+0xcc>)
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <BSP_LCD_Init+0xcc>)
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <BSP_LCD_Init+0xcc>)
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <BSP_LCD_Init+0xcc>)
 8003222:	2200      	movs	r2, #0
 8003224:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <BSP_LCD_Init+0xcc>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <BSP_LCD_Init+0xcc>)
 800322e:	2200      	movs	r2, #0
 8003230:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <BSP_LCD_Init+0xcc>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <BSP_LCD_Init+0xcc>)
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <BSP_LCD_Init+0xd0>)
 800323c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800323e:	4810      	ldr	r0, [pc, #64]	; (8003280 <BSP_LCD_Init+0xcc>)
 8003240:	f005 f9ac 	bl	800859c <HAL_LTDC_GetState>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800324a:	2100      	movs	r1, #0
 800324c:	480c      	ldr	r0, [pc, #48]	; (8003280 <BSP_LCD_Init+0xcc>)
 800324e:	f000 fde1 	bl	8003e14 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003252:	480b      	ldr	r0, [pc, #44]	; (8003280 <BSP_LCD_Init+0xcc>)
 8003254:	f004 ffd2 	bl	80081fc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003258:	2201      	movs	r2, #1
 800325a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800325e:	480a      	ldr	r0, [pc, #40]	; (8003288 <BSP_LCD_Init+0xd4>)
 8003260:	f004 f946 	bl	80074f0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003264:	2201      	movs	r2, #1
 8003266:	2108      	movs	r1, #8
 8003268:	4808      	ldr	r0, [pc, #32]	; (800328c <BSP_LCD_Init+0xd8>)
 800326a:	f004 f941 	bl	80074f0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800326e:	f001 f80f 	bl	8004290 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003272:	4807      	ldr	r0, [pc, #28]	; (8003290 <BSP_LCD_Init+0xdc>)
 8003274:	f000 f8d8 	bl	8003428 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20008b10 	.word	0x20008b10
 8003284:	40016800 	.word	0x40016800
 8003288:	40022000 	.word	0x40022000
 800328c:	40022800 	.word	0x40022800
 8003290:	2000002c 	.word	0x2000002c

08003294 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <BSP_LCD_GetXSize+0x20>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <BSP_LCD_GetXSize+0x24>)
 800329e:	2134      	movs	r1, #52	; 0x34
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3360      	adds	r3, #96	; 0x60
 80032a8:	681b      	ldr	r3, [r3, #0]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	20000924 	.word	0x20000924
 80032b8:	20008b10 	.word	0x20008b10

080032bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <BSP_LCD_GetYSize+0x20>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <BSP_LCD_GetYSize+0x24>)
 80032c6:	2134      	movs	r1, #52	; 0x34
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3364      	adds	r3, #100	; 0x64
 80032d0:	681b      	ldr	r3, [r3, #0]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	20000924 	.word	0x20000924
 80032e0:	20008b10 	.word	0x20008b10

080032e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b090      	sub	sp, #64	; 0x40
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80032f4:	f7ff ffce 	bl	8003294 <BSP_LCD_GetXSize>
 80032f8:	4603      	mov	r3, r0
 80032fa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003300:	f7ff ffdc 	bl	80032bc <BSP_LCD_GetYSize>
 8003304:	4603      	mov	r3, r0
 8003306:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003310:	23ff      	movs	r3, #255	; 0xff
 8003312:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800332a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003330:	2307      	movs	r3, #7
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003334:	f7ff ffae 	bl	8003294 <BSP_LCD_GetXSize>
 8003338:	4603      	mov	r3, r0
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800333c:	f7ff ffbe 	bl	80032bc <BSP_LCD_GetYSize>
 8003340:	4603      	mov	r3, r0
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	4619      	mov	r1, r3
 800334c:	4812      	ldr	r0, [pc, #72]	; (8003398 <BSP_LCD_LayerDefaultInit+0xb4>)
 800334e:	f005 f8e7 	bl	8008520 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	4911      	ldr	r1, [pc, #68]	; (800339c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3304      	adds	r3, #4
 8003362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003366:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	490c      	ldr	r1, [pc, #48]	; (800339c <BSP_LCD_LayerDefaultInit+0xb8>)
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3308      	adds	r3, #8
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800337a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	4907      	ldr	r1, [pc, #28]	; (800339c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800338e:	601a      	str	r2, [r3, #0]
}
 8003390:	bf00      	nop
 8003392:	3740      	adds	r7, #64	; 0x40
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20008b10 	.word	0x20008b10
 800339c:	20000928 	.word	0x20000928
 80033a0:	2000002c 	.word	0x2000002c

080033a4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <BSP_LCD_SelectLayer+0x1c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6013      	str	r3, [r2, #0]
} 
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000924 	.word	0x20000924

080033c4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <BSP_LCD_SetTextColor+0x28>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <BSP_LCD_SetTextColor+0x2c>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	601a      	str	r2, [r3, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000924 	.word	0x20000924
 80033f0:	20000928 	.word	0x20000928

080033f4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <BSP_LCD_SetBackColor+0x2c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4908      	ldr	r1, [pc, #32]	; (8003424 <BSP_LCD_SetBackColor+0x30>)
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3304      	adds	r3, #4
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000924 	.word	0x20000924
 8003424:	20000928 	.word	0x20000928

08003428 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <BSP_LCD_SetFont+0x2c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4908      	ldr	r1, [pc, #32]	; (8003458 <BSP_LCD_SetFont+0x30>)
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3308      	adds	r3, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000924 	.word	0x20000924
 8003458:	20000928 	.word	0x20000928

0800345c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <BSP_LCD_GetFont+0x24>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <BSP_LCD_GetFont+0x28>)
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	3308      	adds	r3, #8
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000924 	.word	0x20000924
 8003484:	20000928 	.word	0x20000928

08003488 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af02      	add	r7, sp, #8
 800348e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <BSP_LCD_Clear+0x48>)
 8003492:	681c      	ldr	r4, [r3, #0]
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <BSP_LCD_Clear+0x48>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <BSP_LCD_Clear+0x4c>)
 800349a:	2134      	movs	r1, #52	; 0x34
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	335c      	adds	r3, #92	; 0x5c
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461e      	mov	r6, r3
 80034a8:	f7ff fef4 	bl	8003294 <BSP_LCD_GetXSize>
 80034ac:	4605      	mov	r5, r0
 80034ae:	f7ff ff05 	bl	80032bc <BSP_LCD_GetYSize>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	2300      	movs	r3, #0
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	462a      	mov	r2, r5
 80034c0:	4631      	mov	r1, r6
 80034c2:	4620      	mov	r0, r4
 80034c4:	f000 fe54 	bl	8004170 <LL_FillBuffer>
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d0:	20000924 	.word	0x20000924
 80034d4:	20008b10 	.word	0x20008b10

080034d8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
 80034e2:	460b      	mov	r3, r1
 80034e4:	80bb      	strh	r3, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <BSP_LCD_DisplayChar+0x80>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	491b      	ldr	r1, [pc, #108]	; (800355c <BSP_LCD_DisplayChar+0x84>)
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3308      	adds	r3, #8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <BSP_LCD_DisplayChar+0x80>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4c14      	ldr	r4, [pc, #80]	; (800355c <BSP_LCD_DisplayChar+0x84>)
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4423      	add	r3, r4
 8003516:	3308      	adds	r3, #8
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800351c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <BSP_LCD_DisplayChar+0x80>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4c0d      	ldr	r4, [pc, #52]	; (800355c <BSP_LCD_DisplayChar+0x84>)
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4423      	add	r3, r4
 8003530:	3308      	adds	r3, #8
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	889b      	ldrh	r3, [r3, #4]
 8003536:	3307      	adds	r3, #7
 8003538:	2b00      	cmp	r3, #0
 800353a:	da00      	bge.n	800353e <BSP_LCD_DisplayChar+0x66>
 800353c:	3307      	adds	r3, #7
 800353e:	10db      	asrs	r3, r3, #3
 8003540:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003544:	18ca      	adds	r2, r1, r3
 8003546:	88b9      	ldrh	r1, [r7, #4]
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fd58 	bl	8004000 <DrawChar>
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	20000924 	.word	0x20000924
 800355c:	20000928 	.word	0x20000928

08003560 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	60ba      	str	r2, [r7, #8]
 8003568:	461a      	mov	r2, r3
 800356a:	4603      	mov	r3, r0
 800356c:	81fb      	strh	r3, [r7, #14]
 800356e:	460b      	mov	r3, r1
 8003570:	81bb      	strh	r3, [r7, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003576:	2301      	movs	r3, #1
 8003578:	83fb      	strh	r3, [r7, #30]
 800357a:	2300      	movs	r3, #0
 800357c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800358a:	e002      	b.n	8003592 <BSP_LCD_DisplayStringAt+0x32>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	3301      	adds	r3, #1
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	617a      	str	r2, [r7, #20]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f6      	bne.n	800358c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800359e:	f7ff fe79 	bl	8003294 <BSP_LCD_GetXSize>
 80035a2:	4601      	mov	r1, r0
 80035a4:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <BSP_LCD_DisplayStringAt+0x188>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4850      	ldr	r0, [pc, #320]	; (80036ec <BSP_LCD_DisplayStringAt+0x18c>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4403      	add	r3, r0
 80035b4:	3308      	adds	r3, #8
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	889b      	ldrh	r3, [r3, #4]
 80035ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80035be:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d01c      	beq.n	8003600 <BSP_LCD_DisplayStringAt+0xa0>
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	dc33      	bgt.n	8003632 <BSP_LCD_DisplayStringAt+0xd2>
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d002      	beq.n	80035d4 <BSP_LCD_DisplayStringAt+0x74>
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d019      	beq.n	8003606 <BSP_LCD_DisplayStringAt+0xa6>
 80035d2:	e02e      	b.n	8003632 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1ad1      	subs	r1, r2, r3
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <BSP_LCD_DisplayStringAt+0x188>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4843      	ldr	r0, [pc, #268]	; (80036ec <BSP_LCD_DisplayStringAt+0x18c>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4403      	add	r3, r0
 80035ea:	3308      	adds	r3, #8
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	889b      	ldrh	r3, [r3, #4]
 80035f0:	fb03 f301 	mul.w	r3, r3, r1
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	4413      	add	r3, r2
 80035fc:	83fb      	strh	r3, [r7, #30]
      break;
 80035fe:	e01b      	b.n	8003638 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003600:	89fb      	ldrh	r3, [r7, #14]
 8003602:	83fb      	strh	r3, [r7, #30]
      break;
 8003604:	e018      	b.n	8003638 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	b299      	uxth	r1, r3
 800360e:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <BSP_LCD_DisplayStringAt+0x188>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4836      	ldr	r0, [pc, #216]	; (80036ec <BSP_LCD_DisplayStringAt+0x18c>)
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4403      	add	r3, r0
 800361e:	3308      	adds	r3, #8
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	889b      	ldrh	r3, [r3, #4]
 8003624:	fb11 f303 	smulbb	r3, r1, r3
 8003628:	b29a      	uxth	r2, r3
 800362a:	89fb      	ldrh	r3, [r7, #14]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	83fb      	strh	r3, [r7, #30]
      break;
 8003630:	e002      	b.n	8003638 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	83fb      	strh	r3, [r7, #30]
      break;
 8003636:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003638:	8bfb      	ldrh	r3, [r7, #30]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <BSP_LCD_DisplayStringAt+0xe6>
 800363e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003642:	2b00      	cmp	r3, #0
 8003644:	da1d      	bge.n	8003682 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800364a:	e01a      	b.n	8003682 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	89b9      	ldrh	r1, [r7, #12]
 8003652:	8bfb      	ldrh	r3, [r7, #30]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff3f 	bl	80034d8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <BSP_LCD_DisplayStringAt+0x188>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4923      	ldr	r1, [pc, #140]	; (80036ec <BSP_LCD_DisplayStringAt+0x18c>)
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3308      	adds	r3, #8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	889a      	ldrh	r2, [r3, #4]
 8003670:	8bfb      	ldrh	r3, [r7, #30]
 8003672:	4413      	add	r3, r2
 8003674:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
    i++;
 800367c:	8bbb      	ldrh	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2dc      	uxtb	r4, r3
 8003690:	f7ff fe00 	bl	8003294 <BSP_LCD_GetXSize>
 8003694:	8bb9      	ldrh	r1, [r7, #28]
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <BSP_LCD_DisplayStringAt+0x188>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4d14      	ldr	r5, [pc, #80]	; (80036ec <BSP_LCD_DisplayStringAt+0x18c>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	442b      	add	r3, r5
 80036a6:	3308      	adds	r3, #8
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	889b      	ldrh	r3, [r3, #4]
 80036ac:	fb03 f301 	mul.w	r3, r3, r1
 80036b0:	1ac3      	subs	r3, r0, r3
 80036b2:	b299      	uxth	r1, r3
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <BSP_LCD_DisplayStringAt+0x188>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	480c      	ldr	r0, [pc, #48]	; (80036ec <BSP_LCD_DisplayStringAt+0x18c>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4403      	add	r3, r0
 80036c4:	3308      	adds	r3, #8
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	889b      	ldrh	r3, [r3, #4]
 80036ca:	4299      	cmp	r1, r3
 80036cc:	bf2c      	ite	cs
 80036ce:	2301      	movcs	r3, #1
 80036d0:	2300      	movcc	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	4023      	ands	r3, r4
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1b7      	bne.n	800364c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bdb0      	pop	{r4, r5, r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000924 	.word	0x20000924
 80036ec:	20000928 	.word	0x20000928

080036f0 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80036fc:	f7ff feae 	bl	800345c <BSP_LCD_GetFont>
 8003700:	4603      	mov	r3, r0
 8003702:	88db      	ldrh	r3, [r3, #6]
 8003704:	88fa      	ldrh	r2, [r7, #6]
 8003706:	fb12 f303 	smulbb	r3, r2, r3
 800370a:	b299      	uxth	r1, r3
 800370c:	2303      	movs	r3, #3
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	2000      	movs	r0, #0
 8003712:	f7ff ff25 	bl	8003560 <BSP_LCD_DisplayStringAt>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af02      	add	r7, sp, #8
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]
 800372a:	460b      	mov	r3, r1
 800372c:	80bb      	strh	r3, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <BSP_LCD_DrawHLine+0xb0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <BSP_LCD_DrawHLine+0xb4>)
 800373c:	2134      	movs	r1, #52	; 0x34
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3348      	adds	r3, #72	; 0x48
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d114      	bne.n	8003776 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <BSP_LCD_DrawHLine+0xb0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <BSP_LCD_DrawHLine+0xb4>)
 8003752:	2134      	movs	r1, #52	; 0x34
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	335c      	adds	r3, #92	; 0x5c
 800375c:	681c      	ldr	r4, [r3, #0]
 800375e:	f7ff fd99 	bl	8003294 <BSP_LCD_GetXSize>
 8003762:	4602      	mov	r2, r0
 8003764:	88bb      	ldrh	r3, [r7, #4]
 8003766:	fb03 f202 	mul.w	r2, r3, r2
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	4413      	add	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4423      	add	r3, r4
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e013      	b.n	800379e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <BSP_LCD_DrawHLine+0xb0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <BSP_LCD_DrawHLine+0xb4>)
 800377c:	2134      	movs	r1, #52	; 0x34
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	335c      	adds	r3, #92	; 0x5c
 8003786:	681c      	ldr	r4, [r3, #0]
 8003788:	f7ff fd84 	bl	8003294 <BSP_LCD_GetXSize>
 800378c:	4602      	mov	r2, r0
 800378e:	88bb      	ldrh	r3, [r7, #4]
 8003790:	fb03 f202 	mul.w	r2, r3, r2
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4423      	add	r3, r4
 800379c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <BSP_LCD_DrawHLine+0xb0>)
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	887c      	ldrh	r4, [r7, #2]
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <BSP_LCD_DrawHLine+0xb0>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4d0b      	ldr	r5, [pc, #44]	; (80037d8 <BSP_LCD_DrawHLine+0xb8>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	442b      	add	r3, r5
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	2300      	movs	r3, #0
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2301      	movs	r3, #1
 80037c0:	4622      	mov	r2, r4
 80037c2:	f000 fcd5 	bl	8004170 <LL_FillBuffer>
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bdb0      	pop	{r4, r5, r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000924 	.word	0x20000924
 80037d4:	20008b10 	.word	0x20008b10
 80037d8:	20000928 	.word	0x20000928

080037dc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	80fb      	strh	r3, [r7, #6]
 80037e6:	460b      	mov	r3, r1
 80037e8:	80bb      	strh	r3, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80037ee:	887b      	ldrh	r3, [r7, #2]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	f1c3 0303 	rsb	r3, r3, #3
 80037f6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003800:	e0c7      	b.n	8003992 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	b29a      	uxth	r2, r3
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	4413      	add	r3, r2
 800380a:	b298      	uxth	r0, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	b29b      	uxth	r3, r3
 8003810:	88ba      	ldrh	r2, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	b299      	uxth	r1, r3
 8003816:	4b64      	ldr	r3, [pc, #400]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4c64      	ldr	r4, [pc, #400]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4423      	add	r3, r4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	f000 f8c1 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	b29b      	uxth	r3, r3
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	b298      	uxth	r0, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	b29b      	uxth	r3, r3
 800383c:	88ba      	ldrh	r2, [r7, #4]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	b299      	uxth	r1, r3
 8003842:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4c59      	ldr	r4, [pc, #356]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4423      	add	r3, r4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f000 f8ab 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	b29a      	uxth	r2, r3
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	4413      	add	r3, r2
 8003862:	b298      	uxth	r0, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	b29b      	uxth	r3, r3
 8003868:	88ba      	ldrh	r2, [r7, #4]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	b299      	uxth	r1, r3
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4c4e      	ldr	r4, [pc, #312]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4423      	add	r3, r4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	f000 f895 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	b29b      	uxth	r3, r3
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	b298      	uxth	r0, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	b29b      	uxth	r3, r3
 8003894:	88ba      	ldrh	r2, [r7, #4]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	b299      	uxth	r1, r3
 800389a:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4c43      	ldr	r4, [pc, #268]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4423      	add	r3, r4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	f000 f87f 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	4413      	add	r3, r2
 80038ba:	b298      	uxth	r0, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	88bb      	ldrh	r3, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	b299      	uxth	r1, r3
 80038c6:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4c38      	ldr	r4, [pc, #224]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4423      	add	r3, r4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	f000 f869 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	b298      	uxth	r0, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	88bb      	ldrh	r3, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	b299      	uxth	r1, r3
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4c2d      	ldr	r4, [pc, #180]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4423      	add	r3, r4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	f000 f853 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	b29a      	uxth	r2, r3
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	4413      	add	r3, r2
 8003912:	b298      	uxth	r0, r3
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	b29a      	uxth	r2, r3
 8003918:	88bb      	ldrh	r3, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	b299      	uxth	r1, r3
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4c22      	ldr	r4, [pc, #136]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4423      	add	r3, r4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	f000 f83d 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	b29b      	uxth	r3, r3
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	b298      	uxth	r0, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	b29a      	uxth	r2, r3
 8003944:	88bb      	ldrh	r3, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	b299      	uxth	r1, r3
 800394a:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <BSP_LCD_DrawCircle+0x1cc>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4c17      	ldr	r4, [pc, #92]	; (80039ac <BSP_LCD_DrawCircle+0x1d0>)
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4423      	add	r3, r4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	f000 f827 	bl	80039b0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	da06      	bge.n	8003976 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	009a      	lsls	r2, r3, #2
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4413      	add	r3, r2
 8003970:	3306      	adds	r3, #6
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e00a      	b.n	800398c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	009a      	lsls	r2, r3, #2
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4413      	add	r3, r2
 8003982:	330a      	adds	r3, #10
 8003984:	617b      	str	r3, [r7, #20]
      current_y--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3b01      	subs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	3301      	adds	r3, #1
 8003990:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	429a      	cmp	r2, r3
 8003998:	f67f af33 	bls.w	8003802 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000924 	.word	0x20000924
 80039ac:	20000928 	.word	0x20000928

080039b0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	603a      	str	r2, [r7, #0]
 80039ba:	80fb      	strh	r3, [r7, #6]
 80039bc:	460b      	mov	r3, r1
 80039be:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <BSP_LCD_DrawPixel+0x88>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <BSP_LCD_DrawPixel+0x8c>)
 80039c6:	2134      	movs	r1, #52	; 0x34
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3348      	adds	r3, #72	; 0x48
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d116      	bne.n	8003a04 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <BSP_LCD_DrawPixel+0x88>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <BSP_LCD_DrawPixel+0x8c>)
 80039dc:	2134      	movs	r1, #52	; 0x34
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	335c      	adds	r3, #92	; 0x5c
 80039e6:	681c      	ldr	r4, [r3, #0]
 80039e8:	88bd      	ldrh	r5, [r7, #4]
 80039ea:	f7ff fc53 	bl	8003294 <BSP_LCD_GetXSize>
 80039ee:	4603      	mov	r3, r0
 80039f0:	fb03 f205 	mul.w	r2, r3, r5
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	4413      	add	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4423      	add	r3, r4
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	b292      	uxth	r2, r2
 8003a00:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003a02:	e015      	b.n	8003a30 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <BSP_LCD_DrawPixel+0x88>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <BSP_LCD_DrawPixel+0x8c>)
 8003a0a:	2134      	movs	r1, #52	; 0x34
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	335c      	adds	r3, #92	; 0x5c
 8003a14:	681c      	ldr	r4, [r3, #0]
 8003a16:	88bd      	ldrh	r5, [r7, #4]
 8003a18:	f7ff fc3c 	bl	8003294 <BSP_LCD_GetXSize>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	fb03 f205 	mul.w	r2, r3, r5
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4423      	add	r3, r4
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bdb0      	pop	{r4, r5, r7, pc}
 8003a38:	20000924 	.word	0x20000924
 8003a3c:	20008b10 	.word	0x20008b10

08003a40 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b08b      	sub	sp, #44	; 0x2c
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	330a      	adds	r3, #10
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	330b      	adds	r3, #11
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	441a      	add	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	330c      	adds	r3, #12
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	441a      	add	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	330d      	adds	r3, #13
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	061b      	lsls	r3, r3, #24
 8003a84:	4413      	add	r3, r2
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3312      	adds	r3, #18
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3313      	adds	r3, #19
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	441a      	add	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3315      	adds	r3, #21
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	4413      	add	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3316      	adds	r3, #22
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3317      	adds	r3, #23
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	441a      	add	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3319      	adds	r3, #25
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	061b      	lsls	r3, r3, #24
 8003ad4:	4413      	add	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	331c      	adds	r3, #28
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	331d      	adds	r3, #29
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	4413      	add	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <BSP_LCD_DrawBitmap+0x15c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <BSP_LCD_DrawBitmap+0x160>)
 8003af2:	2134      	movs	r1, #52	; 0x34
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	335c      	adds	r3, #92	; 0x5c
 8003afc:	681c      	ldr	r4, [r3, #0]
 8003afe:	f7ff fbc9 	bl	8003294 <BSP_LCD_GetXSize>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	fb03 f202 	mul.w	r2, r3, r2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4423      	add	r3, r4
 8003b12:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	3b20      	subs	r3, #32
 8003b18:	2b07      	cmp	r3, #7
 8003b1a:	d802      	bhi.n	8003b22 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e008      	b.n	8003b34 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3b10      	subs	r3, #16
 8003b26:	2b07      	cmp	r3, #7
 8003b28:	d802      	bhi.n	8003b30 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	e001      	b.n	8003b34 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003b30:	2301      	movs	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	08d2      	lsrs	r2, r2, #3
 8003b42:	fb02 f203 	mul.w	r2, r2, r3
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	4413      	add	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	e018      	b.n	8003b88 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fb53 	bl	8004208 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003b62:	f7ff fb97 	bl	8003294 <BSP_LCD_GetXSize>
 8003b66:	4603      	mov	r3, r0
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	6a3a      	ldr	r2, [r7, #32]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	08db      	lsrs	r3, r3, #3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	425b      	negs	r3, r3
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	3301      	adds	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3e2      	bcc.n	8003b56 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	372c      	adds	r7, #44	; 0x2c
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd90      	pop	{r4, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000924 	.word	0x20000924
 8003ba0:	20008b10 	.word	0x20008b10

08003ba4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	4604      	mov	r4, r0
 8003bae:	4608      	mov	r0, r1
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	80fb      	strh	r3, [r7, #6]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	80bb      	strh	r3, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <BSP_LCD_FillRect+0xe8>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4930      	ldr	r1, [pc, #192]	; (8003c90 <BSP_LCD_FillRect+0xec>)
 8003bce:	4613      	mov	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fbf2 	bl	80033c4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003be0:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <BSP_LCD_FillRect+0xe8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <BSP_LCD_FillRect+0xf0>)
 8003be6:	2134      	movs	r1, #52	; 0x34
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3348      	adds	r3, #72	; 0x48
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d114      	bne.n	8003c20 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bf6:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <BSP_LCD_FillRect+0xe8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <BSP_LCD_FillRect+0xf0>)
 8003bfc:	2134      	movs	r1, #52	; 0x34
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	335c      	adds	r3, #92	; 0x5c
 8003c06:	681c      	ldr	r4, [r3, #0]
 8003c08:	f7ff fb44 	bl	8003294 <BSP_LCD_GetXSize>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	88bb      	ldrh	r3, [r7, #4]
 8003c10:	fb03 f202 	mul.w	r2, r3, r2
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	4413      	add	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4423      	add	r3, r4
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e013      	b.n	8003c48 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <BSP_LCD_FillRect+0xe8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <BSP_LCD_FillRect+0xf0>)
 8003c26:	2134      	movs	r1, #52	; 0x34
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	335c      	adds	r3, #92	; 0x5c
 8003c30:	681c      	ldr	r4, [r3, #0]
 8003c32:	f7ff fb2f 	bl	8003294 <BSP_LCD_GetXSize>
 8003c36:	4602      	mov	r2, r0
 8003c38:	88bb      	ldrh	r3, [r7, #4]
 8003c3a:	fb03 f202 	mul.w	r2, r3, r2
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4423      	add	r3, r4
 8003c46:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003c48:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <BSP_LCD_FillRect+0xe8>)
 8003c4a:	681c      	ldr	r4, [r3, #0]
 8003c4c:	68fd      	ldr	r5, [r7, #12]
 8003c4e:	887e      	ldrh	r6, [r7, #2]
 8003c50:	f8b7 8000 	ldrh.w	r8, [r7]
 8003c54:	f7ff fb1e 	bl	8003294 <BSP_LCD_GetXSize>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	887b      	ldrh	r3, [r7, #2]
 8003c5c:	1ad1      	subs	r1, r2, r3
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <BSP_LCD_FillRect+0xe8>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	480b      	ldr	r0, [pc, #44]	; (8003c90 <BSP_LCD_FillRect+0xec>)
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4403      	add	r3, r0
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	9100      	str	r1, [sp, #0]
 8003c74:	4643      	mov	r3, r8
 8003c76:	4632      	mov	r2, r6
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f000 fa78 	bl	8004170 <LL_FillBuffer>
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000924 	.word	0x20000924
 8003c90:	20000928 	.word	0x20000928
 8003c94:	20008b10 	.word	0x20008b10

08003c98 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	80fb      	strh	r3, [r7, #6]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	80bb      	strh	r3, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	f1c3 0303 	rsb	r3, r3, #3
 8003cb2:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003cb8:	887b      	ldrh	r3, [r7, #2]
 8003cba:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003cbc:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <BSP_LCD_FillCircle+0x138>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4944      	ldr	r1, [pc, #272]	; (8003dd4 <BSP_LCD_FillCircle+0x13c>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fb78 	bl	80033c4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003cd4:	e061      	b.n	8003d9a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d021      	beq.n	8003d20 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	b298      	uxth	r0, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	88bb      	ldrh	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	b299      	uxth	r1, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f7ff fd11 	bl	8003720 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b298      	uxth	r0, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	88ba      	ldrh	r2, [r7, #4]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	b299      	uxth	r1, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f7ff fd00 	bl	8003720 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d021      	beq.n	8003d6a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	b298      	uxth	r0, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	88ba      	ldrh	r2, [r7, #4]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	b299      	uxth	r1, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7ff fcec 	bl	8003720 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	b298      	uxth	r0, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	88bb      	ldrh	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	b299      	uxth	r1, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	f7ff fcdb 	bl	8003720 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	da06      	bge.n	8003d7e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	009a      	lsls	r2, r3, #2
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4413      	add	r3, r2
 8003d78:	3306      	adds	r3, #6
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e00a      	b.n	8003d94 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	009a      	lsls	r2, r3, #2
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4413      	add	r3, r2
 8003d8a:	330a      	adds	r3, #10
 8003d8c:	617b      	str	r3, [r7, #20]
      current_y--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	3301      	adds	r3, #1
 8003d98:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d999      	bls.n	8003cd6 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <BSP_LCD_FillCircle+0x138>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	490b      	ldr	r1, [pc, #44]	; (8003dd4 <BSP_LCD_FillCircle+0x13c>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fb05 	bl	80033c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003dba:	887a      	ldrh	r2, [r7, #2]
 8003dbc:	88b9      	ldrh	r1, [r7, #4]
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fd0b 	bl	80037dc <BSP_LCD_DrawCircle>
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000924 	.word	0x20000924
 8003dd4:	20000928 	.word	0x20000928

08003dd8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <BSP_LCD_DisplayOn+0x30>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <BSP_LCD_DisplayOn+0x30>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003dec:	2201      	movs	r2, #1
 8003dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003df2:	4806      	ldr	r0, [pc, #24]	; (8003e0c <BSP_LCD_DisplayOn+0x34>)
 8003df4:	f003 fb7c 	bl	80074f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2108      	movs	r1, #8
 8003dfc:	4804      	ldr	r0, [pc, #16]	; (8003e10 <BSP_LCD_DisplayOn+0x38>)
 8003dfe:	f003 fb77 	bl	80074f0 <HAL_GPIO_WritePin>
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20008b10 	.word	0x20008b10
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40022800 	.word	0x40022800

08003e14 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b090      	sub	sp, #64	; 0x40
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003e1e:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	4a63      	ldr	r2, [pc, #396]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e28:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2a:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e36:	4b5e      	ldr	r3, [pc, #376]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a5d      	ldr	r2, [pc, #372]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b5b      	ldr	r3, [pc, #364]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e4e:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e54:	f043 0310 	orr.w	r3, r3, #16
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e66:	4b52      	ldr	r3, [pc, #328]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a4b      	ldr	r2, [pc, #300]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003e96:	4b46      	ldr	r3, [pc, #280]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a45      	ldr	r2, [pc, #276]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003eae:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a3f      	ldr	r2, [pc, #252]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003eb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a39      	ldr	r2, [pc, #228]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003ede:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a33      	ldr	r2, [pc, #204]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003ee4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <BSP_LCD_MspInit+0x19c>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003efa:	2302      	movs	r3, #2
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003f02:	2302      	movs	r3, #2
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003f06:	230e      	movs	r3, #14
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4828      	ldr	r0, [pc, #160]	; (8003fb4 <BSP_LCD_MspInit+0x1a0>)
 8003f12:	f003 f81d 	bl	8006f50 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003f20:	2309      	movs	r3, #9
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4823      	ldr	r0, [pc, #140]	; (8003fb8 <BSP_LCD_MspInit+0x1a4>)
 8003f2c:	f003 f810 	bl	8006f50 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003f30:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f36:	2302      	movs	r3, #2
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003f3a:	230e      	movs	r3, #14
 8003f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f42:	4619      	mov	r1, r3
 8003f44:	481d      	ldr	r0, [pc, #116]	; (8003fbc <BSP_LCD_MspInit+0x1a8>)
 8003f46:	f003 f803 	bl	8006f50 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003f4a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f50:	2302      	movs	r3, #2
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003f54:	230e      	movs	r3, #14
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4818      	ldr	r0, [pc, #96]	; (8003fc0 <BSP_LCD_MspInit+0x1ac>)
 8003f60:	f002 fff6 	bl	8006f50 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003f64:	23f7      	movs	r3, #247	; 0xf7
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003f6c:	230e      	movs	r3, #14
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f74:	4619      	mov	r1, r3
 8003f76:	4813      	ldr	r0, [pc, #76]	; (8003fc4 <BSP_LCD_MspInit+0x1b0>)
 8003f78:	f002 ffea 	bl	8006f50 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003f82:	2301      	movs	r3, #1
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480b      	ldr	r0, [pc, #44]	; (8003fbc <BSP_LCD_MspInit+0x1a8>)
 8003f8e:	f002 ffdf 	bl	8006f50 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003f92:	2308      	movs	r3, #8
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003f96:	2301      	movs	r3, #1
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4808      	ldr	r0, [pc, #32]	; (8003fc4 <BSP_LCD_MspInit+0x1b0>)
 8003fa2:	f002 ffd5 	bl	8006f50 <HAL_GPIO_Init>
}
 8003fa6:	bf00      	nop
 8003fa8:	3740      	adds	r7, #64	; 0x40
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40021800 	.word	0x40021800
 8003fbc:	40022000 	.word	0x40022000
 8003fc0:	40022400 	.word	0x40022400
 8003fc4:	40022800 	.word	0x40022800

08003fc8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <BSP_LCD_ClockConfig+0x34>)
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <BSP_LCD_ClockConfig+0x34>)
 8003fda:	22c0      	movs	r2, #192	; 0xc0
 8003fdc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <BSP_LCD_ClockConfig+0x34>)
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <BSP_LCD_ClockConfig+0x34>)
 8003fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003fec:	4803      	ldr	r0, [pc, #12]	; (8003ffc <BSP_LCD_ClockConfig+0x34>)
 8003fee:	f005 f989 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000940 	.word	0x20000940

08004000 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	603a      	str	r2, [r7, #0]
 800400a:	80fb      	strh	r3, [r7, #6]
 800400c:	460b      	mov	r3, r1
 800400e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <DrawChar+0x168>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4953      	ldr	r1, [pc, #332]	; (800416c <DrawChar+0x16c>)
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	3308      	adds	r3, #8
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	88db      	ldrh	r3, [r3, #6]
 800402e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004030:	4b4d      	ldr	r3, [pc, #308]	; (8004168 <DrawChar+0x168>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	494d      	ldr	r1, [pc, #308]	; (800416c <DrawChar+0x16c>)
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3308      	adds	r3, #8
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	889b      	ldrh	r3, [r3, #4]
 8004046:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004048:	8a3b      	ldrh	r3, [r7, #16]
 800404a:	3307      	adds	r3, #7
 800404c:	2b00      	cmp	r3, #0
 800404e:	da00      	bge.n	8004052 <DrawChar+0x52>
 8004050:	3307      	adds	r3, #7
 8004052:	10db      	asrs	r3, r3, #3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	b2da      	uxtb	r2, r3
 800405a:	8a3b      	ldrh	r3, [r7, #16]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	e076      	b.n	8004156 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004068:	8a3b      	ldrh	r3, [r7, #16]
 800406a:	3307      	adds	r3, #7
 800406c:	2b00      	cmp	r3, #0
 800406e:	da00      	bge.n	8004072 <DrawChar+0x72>
 8004070:	3307      	adds	r3, #7
 8004072:	10db      	asrs	r3, r3, #3
 8004074:	461a      	mov	r2, r3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fb03 f302 	mul.w	r3, r3, r2
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	4413      	add	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004082:	8a3b      	ldrh	r3, [r7, #16]
 8004084:	3307      	adds	r3, #7
 8004086:	2b00      	cmp	r3, #0
 8004088:	da00      	bge.n	800408c <DrawChar+0x8c>
 800408a:	3307      	adds	r3, #7
 800408c:	10db      	asrs	r3, r3, #3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d002      	beq.n	8004098 <DrawChar+0x98>
 8004092:	2b02      	cmp	r3, #2
 8004094:	d004      	beq.n	80040a0 <DrawChar+0xa0>
 8004096:	e00c      	b.n	80040b2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	e016      	b.n	80040ce <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	3201      	adds	r2, #1
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
      break;
 80040b0:	e00d      	b.n	80040ce <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	041a      	lsls	r2, r3, #16
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3301      	adds	r3, #1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	4313      	orrs	r3, r2
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	3202      	adds	r2, #2
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
      break;
 80040cc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e036      	b.n	8004142 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80040d4:	8a3a      	ldrh	r2, [r7, #16]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	4413      	add	r3, r2
 80040de:	3b01      	subs	r3, #1
 80040e0:	2201      	movs	r2, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	4413      	add	r3, r2
 80040f8:	b298      	uxth	r0, r3
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <DrawChar+0x168>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	491b      	ldr	r1, [pc, #108]	; (800416c <DrawChar+0x16c>)
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	88bb      	ldrh	r3, [r7, #4]
 800410e:	4619      	mov	r1, r3
 8004110:	f7ff fc4e 	bl	80039b0 <BSP_LCD_DrawPixel>
 8004114:	e012      	b.n	800413c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	b29a      	uxth	r2, r3
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	4413      	add	r3, r2
 800411e:	b298      	uxth	r0, r3
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <DrawChar+0x168>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4911      	ldr	r1, [pc, #68]	; (800416c <DrawChar+0x16c>)
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	3304      	adds	r3, #4
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	88bb      	ldrh	r3, [r7, #4]
 8004136:	4619      	mov	r1, r3
 8004138:	f7ff fc3a 	bl	80039b0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3301      	adds	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	8a3b      	ldrh	r3, [r7, #16]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	d3c4      	bcc.n	80040d4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800414a:	88bb      	ldrh	r3, [r7, #4]
 800414c:	3301      	adds	r3, #1
 800414e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	8a7b      	ldrh	r3, [r7, #18]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	429a      	cmp	r2, r3
 800415c:	d384      	bcc.n	8004068 <DrawChar+0x68>
  }
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000924 	.word	0x20000924
 800416c:	20000928 	.word	0x20000928

08004170 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <LL_FillBuffer+0x88>)
 8004180:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004184:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <LL_FillBuffer+0x8c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <LL_FillBuffer+0x90>)
 800418c:	2134      	movs	r1, #52	; 0x34
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3348      	adds	r3, #72	; 0x48
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d103      	bne.n	80041a4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <LL_FillBuffer+0x88>)
 800419e:	2202      	movs	r2, #2
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	e002      	b.n	80041aa <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <LL_FillBuffer+0x88>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80041aa:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <LL_FillBuffer+0x88>)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <LL_FillBuffer+0x88>)
 80041b2:	4a14      	ldr	r2, [pc, #80]	; (8004204 <LL_FillBuffer+0x94>)
 80041b4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80041b6:	4810      	ldr	r0, [pc, #64]	; (80041f8 <LL_FillBuffer+0x88>)
 80041b8:	f002 fb2e 	bl	8006818 <HAL_DMA2D_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d115      	bne.n	80041ee <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	480c      	ldr	r0, [pc, #48]	; (80041f8 <LL_FillBuffer+0x88>)
 80041c6:	f002 fd95 	bl	8006cf4 <HAL_DMA2D_ConfigLayer>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10e      	bne.n	80041ee <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69f9      	ldr	r1, [r7, #28]
 80041da:	4807      	ldr	r0, [pc, #28]	; (80041f8 <LL_FillBuffer+0x88>)
 80041dc:	f002 fb66 	bl	80068ac <HAL_DMA2D_Start>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80041e6:	210a      	movs	r1, #10
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <LL_FillBuffer+0x88>)
 80041ea:	f002 fb8a 	bl	8006902 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200008e4 	.word	0x200008e4
 80041fc:	20000924 	.word	0x20000924
 8004200:	20008b10 	.word	0x20008b10
 8004204:	4002b000 	.word	0x4002b000

08004208 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 8004218:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800421c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800421e:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 8004226:	2200      	movs	r2, #0
 8004228:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <LL_ConvertLineToARGB8888+0x84>)
 8004246:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004248:	480f      	ldr	r0, [pc, #60]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 800424a:	f002 fae5 	bl	8006818 <HAL_DMA2D_Init>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d115      	bne.n	8004280 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004254:	2101      	movs	r1, #1
 8004256:	480c      	ldr	r0, [pc, #48]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 8004258:	f002 fd4c 	bl	8006cf4 <HAL_DMA2D_ConfigLayer>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	2301      	movs	r3, #1
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4806      	ldr	r0, [pc, #24]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 800426e:	f002 fb1d 	bl	80068ac <HAL_DMA2D_Start>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004278:	210a      	movs	r1, #10
 800427a:	4803      	ldr	r0, [pc, #12]	; (8004288 <LL_ConvertLineToARGB8888+0x80>)
 800427c:	f002 fb41 	bl	8006902 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	200008e4 	.word	0x200008e4
 800428c:	4002b000 	.word	0x4002b000

08004290 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004294:	4b29      	ldr	r3, [pc, #164]	; (800433c <BSP_SDRAM_Init+0xac>)
 8004296:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <BSP_SDRAM_Init+0xb0>)
 8004298:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800429a:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 800429c:	2202      	movs	r2, #2
 800429e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80042a0:	4b28      	ldr	r3, [pc, #160]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 80042a2:	2207      	movs	r2, #7
 80042a4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80042a6:	4b27      	ldr	r3, [pc, #156]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 80042a8:	2204      	movs	r2, #4
 80042aa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 80042ae:	2207      	movs	r2, #7
 80042b0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 80042b4:	2202      	movs	r2, #2
 80042b6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80042b8:	4b22      	ldr	r3, [pc, #136]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 80042ba:	2202      	movs	r2, #2
 80042bc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 80042c0:	2202      	movs	r2, #2
 80042c2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80042c4:	4b1d      	ldr	r3, [pc, #116]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80042ca:	4b1c      	ldr	r3, [pc, #112]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80042d0:	4b1a      	ldr	r3, [pc, #104]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042d2:	2204      	movs	r2, #4
 80042d4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80042d6:	4b19      	ldr	r3, [pc, #100]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042d8:	2210      	movs	r2, #16
 80042da:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042dc:	4b17      	ldr	r3, [pc, #92]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042de:	2240      	movs	r2, #64	; 0x40
 80042e0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80042f8:	4b10      	ldr	r3, [pc, #64]	; (800433c <BSP_SDRAM_Init+0xac>)
 80042fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <BSP_SDRAM_Init+0xac>)
 8004302:	2200      	movs	r2, #0
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004306:	2100      	movs	r1, #0
 8004308:	480c      	ldr	r0, [pc, #48]	; (800433c <BSP_SDRAM_Init+0xac>)
 800430a:	f000 f87f 	bl	800440c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800430e:	490d      	ldr	r1, [pc, #52]	; (8004344 <BSP_SDRAM_Init+0xb4>)
 8004310:	480a      	ldr	r0, [pc, #40]	; (800433c <BSP_SDRAM_Init+0xac>)
 8004312:	f006 f90b 	bl	800a52c <HAL_SDRAM_Init>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <BSP_SDRAM_Init+0xb8>)
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e002      	b.n	800432a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004324:	4b08      	ldr	r3, [pc, #32]	; (8004348 <BSP_SDRAM_Init+0xb8>)
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800432a:	f240 6003 	movw	r0, #1539	; 0x603
 800432e:	f000 f80d 	bl	800434c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <BSP_SDRAM_Init+0xb8>)
 8004334:	781b      	ldrb	r3, [r3, #0]
}
 8004336:	4618      	mov	r0, r3
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20008bb8 	.word	0x20008bb8
 8004340:	a0000140 	.word	0xa0000140
 8004344:	200009c4 	.word	0x200009c4
 8004348:	2000003c 	.word	0x2000003c

0800434c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004360:	2210      	movs	r2, #16
 8004362:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004366:	2201      	movs	r2, #1
 8004368:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800436c:	2200      	movs	r2, #0
 800436e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004374:	4923      	ldr	r1, [pc, #140]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004376:	4824      	ldr	r0, [pc, #144]	; (8004408 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004378:	f006 f90c 	bl	800a594 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800437c:	2001      	movs	r0, #1
 800437e:	f001 faad 	bl	80058dc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004384:	2202      	movs	r2, #2
 8004386:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800438a:	2210      	movs	r2, #16
 800438c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800438e:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004390:	2201      	movs	r2, #1
 8004392:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800439a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439e:	4919      	ldr	r1, [pc, #100]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043a0:	4819      	ldr	r0, [pc, #100]	; (8004408 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043a2:	f006 f8f7 	bl	800a594 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80043a6:	4b17      	ldr	r3, [pc, #92]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043a8:	2203      	movs	r2, #3
 80043aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ae:	2210      	movs	r2, #16
 80043b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80043b2:	4b14      	ldr	r3, [pc, #80]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043b4:	2208      	movs	r2, #8
 80043b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c2:	4910      	ldr	r1, [pc, #64]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043c4:	4810      	ldr	r0, [pc, #64]	; (8004408 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043c6:	f006 f8e5 	bl	800a594 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80043ca:	f44f 7308 	mov.w	r3, #544	; 0x220
 80043ce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043d2:	2204      	movs	r2, #4
 80043d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043d8:	2210      	movs	r2, #16
 80043da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043de:	2201      	movs	r2, #1
 80043e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a07      	ldr	r2, [pc, #28]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043e6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ec:	4905      	ldr	r1, [pc, #20]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ee:	4806      	ldr	r0, [pc, #24]	; (8004408 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043f0:	f006 f8d0 	bl	800a594 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4804      	ldr	r0, [pc, #16]	; (8004408 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043f8:	f006 f901 	bl	800a5fe <HAL_SDRAM_ProgramRefreshRate>
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200009e0 	.word	0x200009e0
 8004408:	20008bb8 	.word	0x20008bb8

0800440c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800440c:	b580      	push	{r7, lr}
 800440e:	b090      	sub	sp, #64	; 0x40
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004416:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	4a6f      	ldr	r2, [pc, #444]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6393      	str	r3, [r2, #56]	; 0x38
 8004422:	4b6d      	ldr	r3, [pc, #436]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800442e:	4b6a      	ldr	r3, [pc, #424]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	4a69      	ldr	r2, [pc, #420]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004438:	6313      	str	r3, [r2, #48]	; 0x30
 800443a:	4b67      	ldr	r3, [pc, #412]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004446:	4b64      	ldr	r3, [pc, #400]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	4a63      	ldr	r2, [pc, #396]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 800444c:	f043 0304 	orr.w	r3, r3, #4
 8004450:	6313      	str	r3, [r2, #48]	; 0x30
 8004452:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	623b      	str	r3, [r7, #32]
 800445c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800445e:	4b5e      	ldr	r3, [pc, #376]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a5d      	ldr	r2, [pc, #372]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004476:	4b58      	ldr	r3, [pc, #352]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	4a57      	ldr	r2, [pc, #348]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 800447c:	f043 0310 	orr.w	r3, r3, #16
 8004480:	6313      	str	r3, [r2, #48]	; 0x30
 8004482:	4b55      	ldr	r3, [pc, #340]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800448e:	4b52      	ldr	r3, [pc, #328]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	6313      	str	r3, [r2, #48]	; 0x30
 800449a:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80044a6:	4b4c      	ldr	r3, [pc, #304]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	4a4b      	ldr	r2, [pc, #300]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 80044ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30
 80044b2:	4b49      	ldr	r3, [pc, #292]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044be:	4b46      	ldr	r3, [pc, #280]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a45      	ldr	r2, [pc, #276]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 80044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <BSP_SDRAM_MspInit+0x1cc>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80044d6:	2302      	movs	r3, #2
 80044d8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80044da:	2301      	movs	r3, #1
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80044de:	2302      	movs	r3, #2
 80044e0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80044e2:	230c      	movs	r3, #12
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80044e6:	2308      	movs	r3, #8
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80044ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ee:	4619      	mov	r1, r3
 80044f0:	483a      	ldr	r0, [pc, #232]	; (80045dc <BSP_SDRAM_MspInit+0x1d0>)
 80044f2:	f002 fd2d 	bl	8006f50 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80044f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80044fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004500:	4619      	mov	r1, r3
 8004502:	4837      	ldr	r0, [pc, #220]	; (80045e0 <BSP_SDRAM_MspInit+0x1d4>)
 8004504:	f002 fd24 	bl	8006f50 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004508:	f64f 7383 	movw	r3, #65411	; 0xff83
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800450e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004512:	4619      	mov	r1, r3
 8004514:	4833      	ldr	r0, [pc, #204]	; (80045e4 <BSP_SDRAM_MspInit+0x1d8>)
 8004516:	f002 fd1b 	bl	8006f50 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800451a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004524:	4619      	mov	r1, r3
 8004526:	4830      	ldr	r0, [pc, #192]	; (80045e8 <BSP_SDRAM_MspInit+0x1dc>)
 8004528:	f002 fd12 	bl	8006f50 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800452c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004536:	4619      	mov	r1, r3
 8004538:	482c      	ldr	r0, [pc, #176]	; (80045ec <BSP_SDRAM_MspInit+0x1e0>)
 800453a:	f002 fd09 	bl	8006f50 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800453e:	2328      	movs	r3, #40	; 0x28
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004546:	4619      	mov	r1, r3
 8004548:	4829      	ldr	r0, [pc, #164]	; (80045f0 <BSP_SDRAM_MspInit+0x1e4>)
 800454a:	f002 fd01 	bl	8006f50 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800454e:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 800455c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004560:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 8004564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004568:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 800456c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004570:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 8004574:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004578:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 800457c:	2200      	movs	r2, #0
 800457e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 8004582:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004586:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 800458a:	2200      	movs	r2, #0
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 8004590:	2203      	movs	r2, #3
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 8004596:	2200      	movs	r2, #0
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800459a:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80045a0:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 80045a2:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <BSP_SDRAM_MspInit+0x1ec>)
 80045a4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
 80045ac:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80045b2:	4810      	ldr	r0, [pc, #64]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 80045b4:	f002 f820 	bl	80065f8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80045b8:	480e      	ldr	r0, [pc, #56]	; (80045f4 <BSP_SDRAM_MspInit+0x1e8>)
 80045ba:	f001 ff6f 	bl	800649c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80045be:	2200      	movs	r2, #0
 80045c0:	210f      	movs	r1, #15
 80045c2:	2038      	movs	r0, #56	; 0x38
 80045c4:	f001 fe60 	bl	8006288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80045c8:	2038      	movs	r0, #56	; 0x38
 80045ca:	f001 fe79 	bl	80062c0 <HAL_NVIC_EnableIRQ>
}
 80045ce:	bf00      	nop
 80045d0:	3740      	adds	r7, #64	; 0x40
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40020800 	.word	0x40020800
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40021400 	.word	0x40021400
 80045ec:	40021800 	.word	0x40021800
 80045f0:	40021c00 	.word	0x40021c00
 80045f4:	200009f0 	.word	0x200009f0
 80045f8:	40026410 	.word	0x40026410

080045fc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	460a      	mov	r2, r1
 8004606:	80fb      	strh	r3, [r7, #6]
 8004608:	4613      	mov	r3, r2
 800460a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004610:	4a14      	ldr	r2, [pc, #80]	; (8004664 <BSP_TS_Init+0x68>)
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004616:	4a14      	ldr	r2, [pc, #80]	; (8004668 <BSP_TS_Init+0x6c>)
 8004618:	88bb      	ldrh	r3, [r7, #4]
 800461a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800461c:	4b13      	ldr	r3, [pc, #76]	; (800466c <BSP_TS_Init+0x70>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2070      	movs	r0, #112	; 0x70
 8004622:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <BSP_TS_Init+0x70>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2070      	movs	r0, #112	; 0x70
 800462a:	4798      	blx	r3
 800462c:	4603      	mov	r3, r0
 800462e:	2b51      	cmp	r3, #81	; 0x51
 8004630:	d111      	bne.n	8004656 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <BSP_TS_Init+0x74>)
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <BSP_TS_Init+0x70>)
 8004636:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004638:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <BSP_TS_Init+0x78>)
 800463a:	2270      	movs	r2, #112	; 0x70
 800463c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <BSP_TS_Init+0x7c>)
 8004640:	2208      	movs	r2, #8
 8004642:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <BSP_TS_Init+0x74>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <BSP_TS_Init+0x78>)
 800464c:	7812      	ldrb	r2, [r2, #0]
 800464e:	b292      	uxth	r2, r2
 8004650:	4610      	mov	r0, r2
 8004652:	4798      	blx	r3
 8004654:	e001      	b.n	800465a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000a54 	.word	0x20000a54
 8004668:	20000a56 	.word	0x20000a56
 800466c:	20000000 	.word	0x20000000
 8004670:	20000a50 	.word	0x20000a50
 8004674:	20000a59 	.word	0x20000a59
 8004678:	20000a58 	.word	0x20000a58

0800467c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b097      	sub	sp, #92	; 0x5c
 8004680:	af02      	add	r7, sp, #8
 8004682:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004696:	4b97      	ldr	r3, [pc, #604]	; (80048f4 <BSP_TS_GetState+0x278>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	4a96      	ldr	r2, [pc, #600]	; (80048f8 <BSP_TS_GetState+0x27c>)
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	b292      	uxth	r2, r2
 80046a2:	4610      	mov	r0, r2
 80046a4:	4798      	blx	r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 81a8 	beq.w	8004a08 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80046b8:	2300      	movs	r3, #0
 80046ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80046bc:	e197      	b.n	80049ee <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80046be:	4b8d      	ldr	r3, [pc, #564]	; (80048f4 <BSP_TS_GetState+0x278>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	4a8c      	ldr	r2, [pc, #560]	; (80048f8 <BSP_TS_GetState+0x27c>)
 80046c6:	7812      	ldrb	r2, [r2, #0]
 80046c8:	b290      	uxth	r0, r2
 80046ca:	f107 0120 	add.w	r1, r7, #32
 80046ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d0:	0052      	lsls	r2, r2, #1
 80046d2:	188c      	adds	r4, r1, r2
 80046d4:	f107 0114 	add.w	r1, r7, #20
 80046d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046da:	0052      	lsls	r2, r2, #1
 80046dc:	440a      	add	r2, r1
 80046de:	4621      	mov	r1, r4
 80046e0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80046e2:	4b86      	ldr	r3, [pc, #536]	; (80048fc <BSP_TS_GetState+0x280>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d11b      	bne.n	8004722 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80046ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046f2:	4413      	add	r3, r2
 80046f4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80046f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004700:	440b      	add	r3, r1
 8004702:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800470e:	4413      	add	r3, r2
 8004710:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800471c:	440b      	add	r3, r1
 800471e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004722:	4b76      	ldr	r3, [pc, #472]	; (80048fc <BSP_TS_GetState+0x280>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d010      	beq.n	8004750 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800472e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004736:	4413      	add	r3, r2
 8004738:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800473c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004740:	b29a      	uxth	r2, r3
 8004742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800474a:	440b      	add	r3, r1
 800474c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004750:	4b6a      	ldr	r3, [pc, #424]	; (80048fc <BSP_TS_GetState+0x280>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d010      	beq.n	800477e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004764:	4413      	add	r3, r2
 8004766:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800476a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800476e:	b29a      	uxth	r2, r3
 8004770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004778:	440b      	add	r3, r1
 800477a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800477e:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <BSP_TS_GetState+0x280>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01b      	beq.n	80047c2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004792:	4413      	add	r3, r2
 8004794:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80047a0:	440b      	add	r3, r1
 80047a2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047ae:	4413      	add	r3, r2
 80047b0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80047b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80047bc:	440b      	add	r3, r1
 80047be:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047ca:	4413      	add	r3, r2
 80047cc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80047d0:	4619      	mov	r1, r3
 80047d2:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <BSP_TS_GetState+0x284>)
 80047d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	4299      	cmp	r1, r3
 80047dc:	d90e      	bls.n	80047fc <BSP_TS_GetState+0x180>
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047e6:	4413      	add	r3, r2
 80047e8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80047ec:	4944      	ldr	r1, [pc, #272]	; (8004900 <BSP_TS_GetState+0x284>)
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	e00d      	b.n	8004818 <BSP_TS_GetState+0x19c>
 80047fc:	4a40      	ldr	r2, [pc, #256]	; (8004900 <BSP_TS_GetState+0x284>)
 80047fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004804:	b29a      	uxth	r2, r3
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800480e:	440b      	add	r3, r1
 8004810:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004824:	4413      	add	r3, r2
 8004826:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800482a:	4619      	mov	r1, r3
 800482c:	4a35      	ldr	r2, [pc, #212]	; (8004904 <BSP_TS_GetState+0x288>)
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	4299      	cmp	r1, r3
 8004836:	d90e      	bls.n	8004856 <BSP_TS_GetState+0x1da>
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004840:	4413      	add	r3, r2
 8004842:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004846:	492f      	ldr	r1, [pc, #188]	; (8004904 <BSP_TS_GetState+0x288>)
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800484e:	b29b      	uxth	r3, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	e00d      	b.n	8004872 <BSP_TS_GetState+0x1f6>
 8004856:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <BSP_TS_GetState+0x288>)
 8004858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485e:	b29a      	uxth	r2, r3
 8004860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004868:	440b      	add	r3, r1
 800486a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004876:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800487a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800487e:	4413      	add	r3, r2
 8004880:	2b05      	cmp	r3, #5
 8004882:	dd17      	ble.n	80048b4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8004884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800488c:	4413      	add	r3, r2
 800488e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004892:	4619      	mov	r1, r3
 8004894:	4a1a      	ldr	r2, [pc, #104]	; (8004900 <BSP_TS_GetState+0x284>)
 8004896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800489c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80048a4:	4413      	add	r3, r2
 80048a6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80048aa:	4619      	mov	r1, r3
 80048ac:	4a15      	ldr	r2, [pc, #84]	; (8004904 <BSP_TS_GetState+0x288>)
 80048ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <BSP_TS_GetState+0x27c>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b70      	cmp	r3, #112	; 0x70
 80048ba:	d125      	bne.n	8004908 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80048bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80048c4:	4413      	add	r3, r2
 80048c6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	460a      	mov	r2, r1
 80048d4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80048d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80048de:	4413      	add	r3, r2
 80048e0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	3304      	adds	r3, #4
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	460a      	mov	r2, r1
 80048f0:	809a      	strh	r2, [r3, #4]
 80048f2:	e02c      	b.n	800494e <BSP_TS_GetState+0x2d2>
 80048f4:	20000a50 	.word	0x20000a50
 80048f8:	20000a59 	.word	0x20000a59
 80048fc:	20000a58 	.word	0x20000a58
 8004900:	20000a5c 	.word	0x20000a5c
 8004904:	20000a70 	.word	0x20000a70
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <BSP_TS_GetState+0x398>)
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	4619      	mov	r1, r3
 800490e:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <BSP_TS_GetState+0x39c>)
 8004910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004916:	fb03 f301 	mul.w	r3, r3, r1
 800491a:	0b1b      	lsrs	r3, r3, #12
 800491c:	b299      	uxth	r1, r3
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	460a      	mov	r2, r1
 8004928:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800492a:	4b3c      	ldr	r3, [pc, #240]	; (8004a1c <BSP_TS_GetState+0x3a0>)
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	4a3b      	ldr	r2, [pc, #236]	; (8004a20 <BSP_TS_GetState+0x3a4>)
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004938:	fb03 f301 	mul.w	r3, r3, r1
 800493c:	0b1b      	lsrs	r3, r3, #12
 800493e:	b299      	uxth	r1, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	3304      	adds	r3, #4
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	460a      	mov	r2, r1
 800494c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800494e:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <BSP_TS_GetState+0x3a8>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b298      	uxth	r0, r3
 8004954:	f107 010c 	add.w	r1, r7, #12
 8004958:	f107 0210 	add.w	r2, r7, #16
 800495c:	f107 0308 	add.w	r3, r7, #8
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	460b      	mov	r3, r1
 8004964:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004966:	f7fc f825 	bl	80009b4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	b2d9      	uxtb	r1, r3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004972:	4413      	add	r3, r2
 8004974:	3316      	adds	r3, #22
 8004976:	460a      	mov	r2, r1
 8004978:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	b2d9      	uxtb	r1, r3
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	4413      	add	r3, r2
 8004984:	3320      	adds	r3, #32
 8004986:	460a      	mov	r2, r1
 8004988:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d827      	bhi.n	80049e0 <BSP_TS_GetState+0x364>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <BSP_TS_GetState+0x31c>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049b7 	.word	0x080049b7
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049d3 	.word	0x080049d3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ac:	4413      	add	r3, r2
 80049ae:	331b      	adds	r3, #27
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
          break;
 80049b4:	e018      	b.n	80049e8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	4413      	add	r3, r2
 80049bc:	331b      	adds	r3, #27
 80049be:	2202      	movs	r2, #2
 80049c0:	701a      	strb	r2, [r3, #0]
          break;
 80049c2:	e011      	b.n	80049e8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c8:	4413      	add	r3, r2
 80049ca:	331b      	adds	r3, #27
 80049cc:	2203      	movs	r2, #3
 80049ce:	701a      	strb	r2, [r3, #0]
          break;
 80049d0:	e00a      	b.n	80049e8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d6:	4413      	add	r3, r2
 80049d8:	331b      	adds	r3, #27
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
          break;
 80049de:	e003      	b.n	80049e8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80049e6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80049e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ea:	3301      	adds	r3, #1
 80049ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f6:	4293      	cmp	r3, r2
 80049f8:	f4ff ae61 	bcc.w	80046be <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f813 	bl	8004a28 <BSP_TS_Get_GestureId>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004a08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3754      	adds	r7, #84	; 0x54
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	20000a54 	.word	0x20000a54
 8004a18:	20000a5c 	.word	0x20000a5c
 8004a1c:	20000a56 	.word	0x20000a56
 8004a20:	20000a70 	.word	0x20000a70
 8004a24:	20000a59 	.word	0x20000a59

08004a28 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <BSP_TS_Get_GestureId+0x100>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f107 0208 	add.w	r2, r7, #8
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb ff9c 	bl	8000982 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b49      	cmp	r3, #73	; 0x49
 8004a4e:	d05e      	beq.n	8004b0e <BSP_TS_Get_GestureId+0xe6>
 8004a50:	2b49      	cmp	r3, #73	; 0x49
 8004a52:	d860      	bhi.n	8004b16 <BSP_TS_Get_GestureId+0xee>
 8004a54:	2b1c      	cmp	r3, #28
 8004a56:	d83f      	bhi.n	8004ad8 <BSP_TS_Get_GestureId+0xb0>
 8004a58:	2b1c      	cmp	r3, #28
 8004a5a:	d85c      	bhi.n	8004b16 <BSP_TS_Get_GestureId+0xee>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <BSP_TS_Get_GestureId+0x3c>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004adf 	.word	0x08004adf
 8004a68:	08004b17 	.word	0x08004b17
 8004a6c:	08004b17 	.word	0x08004b17
 8004a70:	08004b17 	.word	0x08004b17
 8004a74:	08004b17 	.word	0x08004b17
 8004a78:	08004b17 	.word	0x08004b17
 8004a7c:	08004b17 	.word	0x08004b17
 8004a80:	08004b17 	.word	0x08004b17
 8004a84:	08004b17 	.word	0x08004b17
 8004a88:	08004b17 	.word	0x08004b17
 8004a8c:	08004b17 	.word	0x08004b17
 8004a90:	08004b17 	.word	0x08004b17
 8004a94:	08004b17 	.word	0x08004b17
 8004a98:	08004b17 	.word	0x08004b17
 8004a9c:	08004b17 	.word	0x08004b17
 8004aa0:	08004b17 	.word	0x08004b17
 8004aa4:	08004ae7 	.word	0x08004ae7
 8004aa8:	08004b17 	.word	0x08004b17
 8004aac:	08004b17 	.word	0x08004b17
 8004ab0:	08004b17 	.word	0x08004b17
 8004ab4:	08004aef 	.word	0x08004aef
 8004ab8:	08004b17 	.word	0x08004b17
 8004abc:	08004b17 	.word	0x08004b17
 8004ac0:	08004b17 	.word	0x08004b17
 8004ac4:	08004af7 	.word	0x08004af7
 8004ac8:	08004b17 	.word	0x08004b17
 8004acc:	08004b17 	.word	0x08004b17
 8004ad0:	08004b17 	.word	0x08004b17
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d014      	beq.n	8004b06 <BSP_TS_Get_GestureId+0xde>
 8004adc:	e01b      	b.n	8004b16 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004ae4:	e01a      	b.n	8004b1c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004aec:	e016      	b.n	8004b1c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004af4:	e012      	b.n	8004b1c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2203      	movs	r2, #3
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004afc:	e00e      	b.n	8004b1c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2204      	movs	r2, #4
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b04:	e00a      	b.n	8004b1c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2205      	movs	r2, #5
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b0c:	e006      	b.n	8004b1c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2206      	movs	r2, #6
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004b14:	e002      	b.n	8004b1c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000a59 	.word	0x20000a59

08004b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b54:	6453      	str	r3, [r2, #68]	; 0x44
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b62:	2200      	movs	r2, #0
 8004b64:	210f      	movs	r1, #15
 8004b66:	f06f 0001 	mvn.w	r0, #1
 8004b6a:	f001 fb8d 	bl	8006288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800

08004b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	; 0x30
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b84:	f107 031c 	add.w	r3, r7, #28
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <HAL_ADC_MspInit+0xc8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d124      	bne.n	8004be8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	4619      	mov	r1, r3
 8004be0:	481a      	ldr	r0, [pc, #104]	; (8004c4c <HAL_ADC_MspInit+0xd0>)
 8004be2:	f002 f9b5 	bl	8006f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004be6:	e029      	b.n	8004c3c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_ADC_MspInit+0xd4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d124      	bne.n	8004c3c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004c10:	f043 0320 	orr.w	r3, r3, #32
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_ADC_MspInit+0xcc>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8004c22:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c30:	f107 031c 	add.w	r3, r7, #28
 8004c34:	4619      	mov	r1, r3
 8004c36:	4807      	ldr	r0, [pc, #28]	; (8004c54 <HAL_ADC_MspInit+0xd8>)
 8004c38:	f002 f98a 	bl	8006f50 <HAL_GPIO_Init>
}
 8004c3c:	bf00      	nop
 8004c3e:	3730      	adds	r7, #48	; 0x30
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40012000 	.word	0x40012000
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	40012200 	.word	0x40012200
 8004c54:	40021400 	.word	0x40021400

08004c58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	; 0x28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_DAC_MspInit+0x84>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d12b      	bne.n	8004cd2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004c7a:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_DAC_MspInit+0x88>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_DAC_MspInit+0x88>)
 8004c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c84:	6413      	str	r3, [r2, #64]	; 0x40
 8004c86:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <HAL_DAC_MspInit+0x88>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c92:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_DAC_MspInit+0x88>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <HAL_DAC_MspInit+0x88>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_DAC_MspInit+0x88>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004caa:	2310      	movs	r3, #16
 8004cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4809      	ldr	r0, [pc, #36]	; (8004ce4 <HAL_DAC_MspInit+0x8c>)
 8004cbe:	f002 f947 	bl	8006f50 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	210f      	movs	r1, #15
 8004cc6:	2036      	movs	r0, #54	; 0x36
 8004cc8:	f001 fade 	bl	8006288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ccc:	2036      	movs	r0, #54	; 0x36
 8004cce:	f001 faf7 	bl	80062c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004cd2:	bf00      	nop
 8004cd4:	3728      	adds	r7, #40	; 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40007400 	.word	0x40007400
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40020000 	.word	0x40020000

08004ce8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <HAL_DMA2D_MspInit+0x44>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004cfa:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <HAL_DMA2D_MspInit+0x48>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <HAL_DMA2D_MspInit+0x48>)
 8004d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d04:	6313      	str	r3, [r2, #48]	; 0x30
 8004d06:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <HAL_DMA2D_MspInit+0x48>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004d12:	2200      	movs	r2, #0
 8004d14:	2105      	movs	r1, #5
 8004d16:	205a      	movs	r0, #90	; 0x5a
 8004d18:	f001 fab6 	bl	8006288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004d1c:	205a      	movs	r0, #90	; 0x5a
 8004d1e:	f001 facf 	bl	80062c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	4002b000 	.word	0x4002b000
 8004d30:	40023800 	.word	0x40023800

08004d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b0ac      	sub	sp, #176	; 0xb0
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d4c:	f107 0318 	add.w	r3, r7, #24
 8004d50:	2284      	movs	r2, #132	; 0x84
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f00a fb13 	bl	800f380 <memset>
  if(hi2c->Instance==I2C1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a44      	ldr	r2, [pc, #272]	; (8004e70 <HAL_I2C_MspInit+0x13c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d13d      	bne.n	8004de0 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d6e:	f107 0318 	add.w	r3, r7, #24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f004 fac6 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004d7e:	f7fe f86f 	bl	8002e60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d82:	4b3c      	ldr	r3, [pc, #240]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	4a3b      	ldr	r2, [pc, #236]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004d88:	f043 0302 	orr.w	r3, r3, #2
 8004d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8e:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004da2:	2312      	movs	r3, #18
 8004da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dae:	2303      	movs	r3, #3
 8004db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004db4:	2304      	movs	r3, #4
 8004db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	482d      	ldr	r0, [pc, #180]	; (8004e78 <HAL_I2C_MspInit+0x144>)
 8004dc2:	f002 f8c5 	bl	8006f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd2:	4b28      	ldr	r3, [pc, #160]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004dde:	e042      	b.n	8004e66 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <HAL_I2C_MspInit+0x148>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d13d      	bne.n	8004e66 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004df6:	f107 0318 	add.w	r3, r7, #24
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f004 fa82 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004e06:	f7fe f82b 	bl	8002e60 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004e22:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e2a:	2312      	movs	r3, #18
 8004e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e36:	2303      	movs	r3, #3
 8004e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e46:	4619      	mov	r1, r3
 8004e48:	480d      	ldr	r0, [pc, #52]	; (8004e80 <HAL_I2C_MspInit+0x14c>)
 8004e4a:	f002 f881 	bl	8006f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e58:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_I2C_MspInit+0x140>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
}
 8004e66:	bf00      	nop
 8004e68:	37b0      	adds	r7, #176	; 0xb0
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40005400 	.word	0x40005400
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40020400 	.word	0x40020400
 8004e7c:	40005c00 	.word	0x40005c00
 8004e80:	40021c00 	.word	0x40021c00

08004e84 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <HAL_I2C_MspDeInit+0x64>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d110      	bne.n	8004eb8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_I2C_MspDeInit+0x68>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	4a14      	ldr	r2, [pc, #80]	; (8004eec <HAL_I2C_MspDeInit+0x68>)
 8004e9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004ea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ea6:	4812      	ldr	r0, [pc, #72]	; (8004ef0 <HAL_I2C_MspDeInit+0x6c>)
 8004ea8:	f002 f9fe 	bl	80072a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004eac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004eb0:	480f      	ldr	r0, [pc, #60]	; (8004ef0 <HAL_I2C_MspDeInit+0x6c>)
 8004eb2:	f002 f9f9 	bl	80072a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004eb6:	e013      	b.n	8004ee0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a0d      	ldr	r2, [pc, #52]	; (8004ef4 <HAL_I2C_MspDeInit+0x70>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_I2C_MspDeInit+0x68>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <HAL_I2C_MspDeInit+0x68>)
 8004ec8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	4809      	ldr	r0, [pc, #36]	; (8004ef8 <HAL_I2C_MspDeInit+0x74>)
 8004ed2:	f002 f9e9 	bl	80072a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8004ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eda:	4807      	ldr	r0, [pc, #28]	; (8004ef8 <HAL_I2C_MspDeInit+0x74>)
 8004edc:	f002 f9e4 	bl	80072a8 <HAL_GPIO_DeInit>
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40005400 	.word	0x40005400
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40020400 	.word	0x40020400
 8004ef4:	40005c00 	.word	0x40005c00
 8004ef8:	40021c00 	.word	0x40021c00

08004efc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a55      	ldr	r2, [pc, #340]	; (8005070 <HAL_LTDC_MspInit+0x174>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f040 80a3 	bne.w	8005066 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004f20:	4b54      	ldr	r3, [pc, #336]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	4a53      	ldr	r2, [pc, #332]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2c:	4b51      	ldr	r3, [pc, #324]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f38:	4b4e      	ldr	r3, [pc, #312]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f3e:	f043 0310 	orr.w	r3, r3, #16
 8004f42:	6313      	str	r3, [r2, #48]	; 0x30
 8004f44:	4b4b      	ldr	r3, [pc, #300]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004f50:	4b48      	ldr	r3, [pc, #288]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	4a47      	ldr	r2, [pc, #284]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5c:	4b45      	ldr	r3, [pc, #276]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004f68:	4b42      	ldr	r3, [pc, #264]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4a41      	ldr	r2, [pc, #260]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f72:	6313      	str	r3, [r2, #48]	; 0x30
 8004f74:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f80:	4b3c      	ldr	r3, [pc, #240]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8c:	4b39      	ldr	r3, [pc, #228]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f98:	4b36      	ldr	r3, [pc, #216]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	4a35      	ldr	r2, [pc, #212]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa4:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_LTDC_MspInit+0x178>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004fc0:	230e      	movs	r3, #14
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fc8:	4619      	mov	r1, r3
 8004fca:	482b      	ldr	r0, [pc, #172]	; (8005078 <HAL_LTDC_MspInit+0x17c>)
 8004fcc:	f001 ffc0 	bl	8006f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004fd0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004fe2:	230e      	movs	r3, #14
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fea:	4619      	mov	r1, r3
 8004fec:	4823      	ldr	r0, [pc, #140]	; (800507c <HAL_LTDC_MspInit+0x180>)
 8004fee:	f001 ffaf 	bl	8006f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004ff2:	23f7      	movs	r3, #247	; 0xf7
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffe:	2300      	movs	r3, #0
 8005000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005002:	230e      	movs	r3, #14
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500a:	4619      	mov	r1, r3
 800500c:	481c      	ldr	r0, [pc, #112]	; (8005080 <HAL_LTDC_MspInit+0x184>)
 800500e:	f001 ff9f 	bl	8006f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005018:	2302      	movs	r3, #2
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501c:	2300      	movs	r3, #0
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005020:	2300      	movs	r3, #0
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005024:	2309      	movs	r3, #9
 8005026:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800502c:	4619      	mov	r1, r3
 800502e:	4815      	ldr	r0, [pc, #84]	; (8005084 <HAL_LTDC_MspInit+0x188>)
 8005030:	f001 ff8e 	bl	8006f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005034:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503a:	2302      	movs	r3, #2
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	2300      	movs	r3, #0
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005042:	2300      	movs	r3, #0
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005046:	230e      	movs	r3, #14
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800504a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800504e:	4619      	mov	r1, r3
 8005050:	480d      	ldr	r0, [pc, #52]	; (8005088 <HAL_LTDC_MspInit+0x18c>)
 8005052:	f001 ff7d 	bl	8006f50 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8005056:	2200      	movs	r2, #0
 8005058:	2105      	movs	r1, #5
 800505a:	2058      	movs	r0, #88	; 0x58
 800505c:	f001 f914 	bl	8006288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005060:	2058      	movs	r0, #88	; 0x58
 8005062:	f001 f92d 	bl	80062c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005066:	bf00      	nop
 8005068:	3738      	adds	r7, #56	; 0x38
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40016800 	.word	0x40016800
 8005074:	40023800 	.word	0x40023800
 8005078:	40021000 	.word	0x40021000
 800507c:	40022400 	.word	0x40022400
 8005080:	40022800 	.word	0x40022800
 8005084:	40021800 	.word	0x40021800
 8005088:	40022000 	.word	0x40022000

0800508c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <HAL_RNG_MspInit+0x38>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10b      	bne.n	80050b6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <HAL_RNG_MspInit+0x3c>)
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <HAL_RNG_MspInit+0x3c>)
 80050a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a8:	6353      	str	r3, [r2, #52]	; 0x34
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <HAL_RNG_MspInit+0x3c>)
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	50060800 	.word	0x50060800
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b0a4      	sub	sp, #144	; 0x90
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	2284      	movs	r2, #132	; 0x84
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f00a f94f 	bl	800f380 <memset>
  if(hrtc->Instance==RTC)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <HAL_RTC_MspInit+0x54>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d114      	bne.n	8005116 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80050ec:	2320      	movs	r3, #32
 80050ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80050f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 f902 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005106:	f7fd feab 	bl	8002e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RTC_MspInit+0x58>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <HAL_RTC_MspInit+0x58>)
 8005110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005116:	bf00      	nop
 8005118:	3790      	adds	r7, #144	; 0x90
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40002800 	.word	0x40002800
 8005124:	40023800 	.word	0x40023800

08005128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a25      	ldr	r2, [pc, #148]	; (80051dc <HAL_SPI_MspInit+0xb4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d144      	bne.n	80051d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800514a:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	4a24      	ldr	r2, [pc, #144]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005154:	6413      	str	r3, [r2, #64]	; 0x40
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517a:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	6313      	str	r3, [r2, #48]	; 0x30
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <HAL_SPI_MspInit+0xb8>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005192:	2303      	movs	r3, #3
 8005194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051a2:	2305      	movs	r3, #5
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80051a6:	f107 0314 	add.w	r3, r7, #20
 80051aa:	4619      	mov	r1, r3
 80051ac:	480d      	ldr	r0, [pc, #52]	; (80051e4 <HAL_SPI_MspInit+0xbc>)
 80051ae:	f001 fecf 	bl	8006f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80051b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80051b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051c4:	2305      	movs	r3, #5
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	4619      	mov	r1, r3
 80051ce:	4806      	ldr	r0, [pc, #24]	; (80051e8 <HAL_SPI_MspInit+0xc0>)
 80051d0:	f001 febe 	bl	8006f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80051d4:	bf00      	nop
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40003800 	.word	0x40003800
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40020400 	.word	0x40020400

080051ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08e      	sub	sp, #56	; 0x38
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <HAL_TIM_Base_MspInit+0x10c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10c      	bne.n	8005228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800520e:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6453      	str	r3, [r2, #68]	; 0x44
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005226:	e062      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d10c      	bne.n	800524c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005232:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a31      	ldr	r2, [pc, #196]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	69fb      	ldr	r3, [r7, #28]
}
 800524a:	e050      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <HAL_TIM_Base_MspInit+0x114>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	4a28      	ldr	r2, [pc, #160]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	6413      	str	r3, [r2, #64]	; 0x40
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	69bb      	ldr	r3, [r7, #24]
}
 800526e:	e03e      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a23      	ldr	r2, [pc, #140]	; (8005304 <HAL_TIM_Base_MspInit+0x118>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10c      	bne.n	8005294 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005280:	f043 0308 	orr.w	r3, r3, #8
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	e02c      	b.n	80052ee <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_TIM_Base_MspInit+0x11c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d127      	bne.n	80052ee <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800529e:	4b17      	ldr	r3, [pc, #92]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	4a16      	ldr	r2, [pc, #88]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	6453      	str	r3, [r2, #68]	; 0x44
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c0:	6313      	str	r3, [r2, #48]	; 0x30
 80052c2:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <HAL_TIM_Base_MspInit+0x110>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052ce:	2304      	movs	r3, #4
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d2:	2302      	movs	r3, #2
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80052de:	2303      	movs	r3, #3
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80052e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e6:	4619      	mov	r1, r3
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <HAL_TIM_Base_MspInit+0x120>)
 80052ea:	f001 fe31 	bl	8006f50 <HAL_GPIO_Init>
}
 80052ee:	bf00      	nop
 80052f0:	3738      	adds	r7, #56	; 0x38
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40023800 	.word	0x40023800
 8005300:	40000400 	.word	0x40000400
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40010400 	.word	0x40010400
 800530c:	40022000 	.word	0x40022000

08005310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b0b0      	sub	sp, #192	; 0xc0
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005318:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800532c:	2284      	movs	r2, #132	; 0x84
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f00a f825 	bl	800f380 <memset>
  if(huart->Instance==UART7)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a75      	ldr	r2, [pc, #468]	; (8005510 <HAL_UART_MspInit+0x200>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d13d      	bne.n	80053bc <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800534c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005350:	4618      	mov	r0, r3
 8005352:	f003 ffd7 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800535c:	f7fd fd80 	bl	8002e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005360:	4b6c      	ldr	r3, [pc, #432]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	4a6b      	ldr	r2, [pc, #428]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005366:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800536a:	6413      	str	r3, [r2, #64]	; 0x40
 800536c:	4b69      	ldr	r3, [pc, #420]	; (8005514 <HAL_UART_MspInit+0x204>)
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005378:	4b66      	ldr	r3, [pc, #408]	; (8005514 <HAL_UART_MspInit+0x204>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a65      	ldr	r2, [pc, #404]	; (8005514 <HAL_UART_MspInit+0x204>)
 800537e:	f043 0320 	orr.w	r3, r3, #32
 8005382:	6313      	str	r3, [r2, #48]	; 0x30
 8005384:	4b63      	ldr	r3, [pc, #396]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	623b      	str	r3, [r7, #32]
 800538e:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005390:	23c0      	movs	r3, #192	; 0xc0
 8005392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005396:	2302      	movs	r3, #2
 8005398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a2:	2303      	movs	r3, #3
 80053a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80053a8:	2308      	movs	r3, #8
 80053aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80053b2:	4619      	mov	r1, r3
 80053b4:	4858      	ldr	r0, [pc, #352]	; (8005518 <HAL_UART_MspInit+0x208>)
 80053b6:	f001 fdcb 	bl	8006f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80053ba:	e0a4      	b.n	8005506 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a56      	ldr	r2, [pc, #344]	; (800551c <HAL_UART_MspInit+0x20c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d15d      	bne.n	8005482 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80053c6:	2340      	movs	r3, #64	; 0x40
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80053ca:	2300      	movs	r3, #0
 80053cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d2:	4618      	mov	r0, r3
 80053d4:	f003 ff96 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80053de:	f7fd fd3f 	bl	8002e60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <HAL_UART_MspInit+0x204>)
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	4a4b      	ldr	r2, [pc, #300]	; (8005514 <HAL_UART_MspInit+0x204>)
 80053e8:	f043 0310 	orr.w	r3, r3, #16
 80053ec:	6453      	str	r3, [r2, #68]	; 0x44
 80053ee:	4b49      	ldr	r3, [pc, #292]	; (8005514 <HAL_UART_MspInit+0x204>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fa:	4b46      	ldr	r3, [pc, #280]	; (8005514 <HAL_UART_MspInit+0x204>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4a45      	ldr	r2, [pc, #276]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005400:	f043 0302 	orr.w	r3, r3, #2
 8005404:	6313      	str	r3, [r2, #48]	; 0x30
 8005406:	4b43      	ldr	r3, [pc, #268]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005412:	4b40      	ldr	r3, [pc, #256]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4a3f      	ldr	r2, [pc, #252]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	6313      	str	r3, [r2, #48]	; 0x30
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <HAL_UART_MspInit+0x204>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005430:	2302      	movs	r3, #2
 8005432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005436:	2300      	movs	r3, #0
 8005438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005442:	2307      	movs	r3, #7
 8005444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005448:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800544c:	4619      	mov	r1, r3
 800544e:	4834      	ldr	r0, [pc, #208]	; (8005520 <HAL_UART_MspInit+0x210>)
 8005450:	f001 fd7e 	bl	8006f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545c:	2302      	movs	r3, #2
 800545e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800546e:	2307      	movs	r3, #7
 8005470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005474:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005478:	4619      	mov	r1, r3
 800547a:	482a      	ldr	r0, [pc, #168]	; (8005524 <HAL_UART_MspInit+0x214>)
 800547c:	f001 fd68 	bl	8006f50 <HAL_GPIO_Init>
}
 8005480:	e041      	b.n	8005506 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_UART_MspInit+0x218>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d13c      	bne.n	8005506 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800548c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005492:	2300      	movs	r3, #0
 8005494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800549c:	4618      	mov	r0, r3
 800549e:	f003 ff31 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80054a8:	f7fd fcda 	bl	8002e60 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_UART_MspInit+0x204>)
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <HAL_UART_MspInit+0x204>)
 80054b2:	f043 0320 	orr.w	r3, r3, #32
 80054b6:	6453      	str	r3, [r2, #68]	; 0x44
 80054b8:	4b16      	ldr	r3, [pc, #88]	; (8005514 <HAL_UART_MspInit+0x204>)
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <HAL_UART_MspInit+0x204>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4a12      	ldr	r2, [pc, #72]	; (8005514 <HAL_UART_MspInit+0x204>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6313      	str	r3, [r2, #48]	; 0x30
 80054d0:	4b10      	ldr	r3, [pc, #64]	; (8005514 <HAL_UART_MspInit+0x204>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80054dc:	23c0      	movs	r3, #192	; 0xc0
 80054de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e2:	2302      	movs	r3, #2
 80054e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ee:	2303      	movs	r3, #3
 80054f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80054f4:	2308      	movs	r3, #8
 80054f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80054fe:	4619      	mov	r1, r3
 8005500:	480a      	ldr	r0, [pc, #40]	; (800552c <HAL_UART_MspInit+0x21c>)
 8005502:	f001 fd25 	bl	8006f50 <HAL_GPIO_Init>
}
 8005506:	bf00      	nop
 8005508:	37c0      	adds	r7, #192	; 0xc0
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40007800 	.word	0x40007800
 8005514:	40023800 	.word	0x40023800
 8005518:	40021400 	.word	0x40021400
 800551c:	40011000 	.word	0x40011000
 8005520:	40020400 	.word	0x40020400
 8005524:	40020000 	.word	0x40020000
 8005528:	40011400 	.word	0x40011400
 800552c:	40020800 	.word	0x40020800

08005530 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005544:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_FMC_MspInit+0x100>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d16d      	bne.n	8005628 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800554c:	4b38      	ldr	r3, [pc, #224]	; (8005630 <HAL_FMC_MspInit+0x100>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005552:	4b38      	ldr	r3, [pc, #224]	; (8005634 <HAL_FMC_MspInit+0x104>)
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	4a37      	ldr	r2, [pc, #220]	; (8005634 <HAL_FMC_MspInit+0x104>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6393      	str	r3, [r2, #56]	; 0x38
 800555e:	4b35      	ldr	r3, [pc, #212]	; (8005634 <HAL_FMC_MspInit+0x104>)
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800556a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800556e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005570:	2302      	movs	r3, #2
 8005572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005578:	2303      	movs	r3, #3
 800557a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800557c:	230c      	movs	r3, #12
 800557e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	4619      	mov	r1, r3
 8005584:	482c      	ldr	r0, [pc, #176]	; (8005638 <HAL_FMC_MspInit+0x108>)
 8005586:	f001 fce3 	bl	8006f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800558a:	f248 1333 	movw	r3, #33075	; 0x8133
 800558e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005590:	2302      	movs	r3, #2
 8005592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005598:	2303      	movs	r3, #3
 800559a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800559c:	230c      	movs	r3, #12
 800559e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4825      	ldr	r0, [pc, #148]	; (800563c <HAL_FMC_MspInit+0x10c>)
 80055a6:	f001 fcd3 	bl	8006f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80055aa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80055ae:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b0:	2302      	movs	r3, #2
 80055b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b8:	2303      	movs	r3, #3
 80055ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055bc:	230c      	movs	r3, #12
 80055be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	481e      	ldr	r0, [pc, #120]	; (8005640 <HAL_FMC_MspInit+0x110>)
 80055c6:	f001 fcc3 	bl	8006f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80055ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80055ce:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d8:	2303      	movs	r3, #3
 80055da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055dc:	230c      	movs	r3, #12
 80055de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	4817      	ldr	r0, [pc, #92]	; (8005644 <HAL_FMC_MspInit+0x114>)
 80055e6:	f001 fcb3 	bl	8006f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80055ea:	2328      	movs	r3, #40	; 0x28
 80055ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ee:	2302      	movs	r3, #2
 80055f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80055fa:	230c      	movs	r3, #12
 80055fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4811      	ldr	r0, [pc, #68]	; (8005648 <HAL_FMC_MspInit+0x118>)
 8005604:	f001 fca4 	bl	8006f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005608:	2308      	movs	r3, #8
 800560a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560c:	2302      	movs	r3, #2
 800560e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005614:	2303      	movs	r3, #3
 8005616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005618:	230c      	movs	r3, #12
 800561a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800561c:	1d3b      	adds	r3, r7, #4
 800561e:	4619      	mov	r1, r3
 8005620:	480a      	ldr	r0, [pc, #40]	; (800564c <HAL_FMC_MspInit+0x11c>)
 8005622:	f001 fc95 	bl	8006f50 <HAL_GPIO_Init>
 8005626:	e000      	b.n	800562a <HAL_FMC_MspInit+0xfa>
    return;
 8005628:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000a84 	.word	0x20000a84
 8005634:	40023800 	.word	0x40023800
 8005638:	40021000 	.word	0x40021000
 800563c:	40021800 	.word	0x40021800
 8005640:	40020c00 	.word	0x40020c00
 8005644:	40021400 	.word	0x40021400
 8005648:	40021c00 	.word	0x40021c00
 800564c:	40020800 	.word	0x40020800

08005650 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005658:	f7ff ff6a 	bl	8005530 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08c      	sub	sp, #48	; 0x30
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005674:	2200      	movs	r2, #0
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	2036      	movs	r0, #54	; 0x36
 800567a:	f000 fe05 	bl	8006288 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800567e:	2036      	movs	r0, #54	; 0x36
 8005680:	f000 fe1e 	bl	80062c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005684:	4b1f      	ldr	r3, [pc, #124]	; (8005704 <HAL_InitTick+0xa0>)
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <HAL_InitTick+0xa0>)
 800568a:	f043 0310 	orr.w	r3, r3, #16
 800568e:	6413      	str	r3, [r2, #64]	; 0x40
 8005690:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <HAL_InitTick+0xa0>)
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800569c:	f107 0210 	add.w	r2, r7, #16
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f003 fdfa 	bl	80092a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80056ac:	f003 fdd0 	bl	8009250 <HAL_RCC_GetPCLK1Freq>
 80056b0:	4603      	mov	r3, r0
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	4a13      	ldr	r2, [pc, #76]	; (8005708 <HAL_InitTick+0xa4>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	0c9b      	lsrs	r3, r3, #18
 80056c0:	3b01      	subs	r3, #1
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_InitTick+0xa8>)
 80056c6:	4a12      	ldr	r2, [pc, #72]	; (8005710 <HAL_InitTick+0xac>)
 80056c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <HAL_InitTick+0xa8>)
 80056cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80056d2:	4a0e      	ldr	r2, [pc, #56]	; (800570c <HAL_InitTick+0xa8>)
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <HAL_InitTick+0xa8>)
 80056da:	2200      	movs	r2, #0
 80056dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <HAL_InitTick+0xa8>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80056e4:	4809      	ldr	r0, [pc, #36]	; (800570c <HAL_InitTick+0xa8>)
 80056e6:	f005 f85d 	bl	800a7a4 <HAL_TIM_Base_Init>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80056f0:	4806      	ldr	r0, [pc, #24]	; (800570c <HAL_InitTick+0xa8>)
 80056f2:	f005 f8af 	bl	800a854 <HAL_TIM_Base_Start_IT>
 80056f6:	4603      	mov	r3, r0
 80056f8:	e000      	b.n	80056fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3730      	adds	r7, #48	; 0x30
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40023800 	.word	0x40023800
 8005708:	431bde83 	.word	0x431bde83
 800570c:	20008bec 	.word	0x20008bec
 8005710:	40001000 	.word	0x40001000

08005714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005718:	e7fe      	b.n	8005718 <NMI_Handler+0x4>

0800571a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800571a:	b480      	push	{r7}
 800571c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800571e:	e7fe      	b.n	800571e <HardFault_Handler+0x4>

08005720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005724:	e7fe      	b.n	8005724 <MemManage_Handler+0x4>

08005726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005726:	b480      	push	{r7}
 8005728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800572a:	e7fe      	b.n	800572a <BusFault_Handler+0x4>

0800572c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005730:	e7fe      	b.n	8005730 <UsageFault_Handler+0x4>

08005732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NC1_Pin);
 8005744:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005748:	f001 ff06 	bl	8007558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800574c:	bf00      	nop
 800574e:	bd80      	pop	{r7, pc}

08005750 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <TIM6_DAC_IRQHandler+0x20>)
 8005756:	791b      	ldrb	r3, [r3, #4]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800575e:	4804      	ldr	r0, [pc, #16]	; (8005770 <TIM6_DAC_IRQHandler+0x20>)
 8005760:	f000 fdde 	bl	8006320 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005764:	4803      	ldr	r0, [pc, #12]	; (8005774 <TIM6_DAC_IRQHandler+0x24>)
 8005766:	f005 f8ed 	bl	800a944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20008928 	.word	0x20008928
 8005774:	20008bec 	.word	0x20008bec

08005778 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800577c:	4802      	ldr	r0, [pc, #8]	; (8005788 <LTDC_IRQHandler+0x10>)
 800577e:	f002 fe0d 	bl	800839c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20008764 	.word	0x20008764

0800578c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005790:	4802      	ldr	r0, [pc, #8]	; (800579c <DMA2D_IRQHandler+0x10>)
 8005792:	f001 f99f 	bl	8006ad4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20008a48 	.word	0x20008a48

080057a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <_sbrk+0x5c>)
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <_sbrk+0x60>)
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <_sbrk+0x64>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <_sbrk+0x64>)
 80057be:	4a12      	ldr	r2, [pc, #72]	; (8005808 <_sbrk+0x68>)
 80057c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <_sbrk+0x64>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d207      	bcs.n	80057e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057d0:	f009 fd9c 	bl	800f30c <__errno>
 80057d4:	4603      	mov	r3, r0
 80057d6:	220c      	movs	r2, #12
 80057d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057de:	e009      	b.n	80057f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <_sbrk+0x64>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <_sbrk+0x64>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	4a05      	ldr	r2, [pc, #20]	; (8005804 <_sbrk+0x64>)
 80057f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057f2:	68fb      	ldr	r3, [r7, #12]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20050000 	.word	0x20050000
 8005800:	00000400 	.word	0x00000400
 8005804:	20000a88 	.word	0x20000a88
 8005808:	20008c90 	.word	0x20008c90

0800580c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <SystemInit+0x20>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005816:	4a05      	ldr	r2, [pc, #20]	; (800582c <SystemInit+0x20>)
 8005818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800581c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	e000ed00 	.word	0xe000ed00

08005830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005834:	480d      	ldr	r0, [pc, #52]	; (800586c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005836:	490e      	ldr	r1, [pc, #56]	; (8005870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005838:	4a0e      	ldr	r2, [pc, #56]	; (8005874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800583a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800583c:	e002      	b.n	8005844 <LoopCopyDataInit>

0800583e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800583e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005842:	3304      	adds	r3, #4

08005844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005848:	d3f9      	bcc.n	800583e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800584a:	4a0b      	ldr	r2, [pc, #44]	; (8005878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800584c:	4c0b      	ldr	r4, [pc, #44]	; (800587c <LoopFillZerobss+0x26>)
  movs r3, #0
 800584e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005850:	e001      	b.n	8005856 <LoopFillZerobss>

08005852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005854:	3204      	adds	r2, #4

08005856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005858:	d3fb      	bcc.n	8005852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800585a:	f7ff ffd7 	bl	800580c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800585e:	f009 fd5b 	bl	800f318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005862:	f7fb f97f 	bl	8000b64 <main>
  bx  lr    
 8005866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005868:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800586c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005870:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005874:	080d2298 	.word	0x080d2298
  ldr r2, =_sbss
 8005878:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800587c:	20008c8c 	.word	0x20008c8c

08005880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005880:	e7fe      	b.n	8005880 <ADC_IRQHandler>

08005882 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005886:	2003      	movs	r0, #3
 8005888:	f000 fcf3 	bl	8006272 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800588c:	200f      	movs	r0, #15
 800588e:	f7ff fee9 	bl	8005664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005892:	f7ff f94b 	bl	8004b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_IncTick+0x20>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_IncTick+0x24>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4413      	add	r3, r2
 80058ac:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <HAL_IncTick+0x24>)
 80058ae:	6013      	str	r3, [r2, #0]
}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000048 	.word	0x20000048
 80058c0:	20008c38 	.word	0x20008c38

080058c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return uwTick;
 80058c8:	4b03      	ldr	r3, [pc, #12]	; (80058d8 <HAL_GetTick+0x14>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20008c38 	.word	0x20008c38

080058dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058e4:	f7ff ffee 	bl	80058c4 <HAL_GetTick>
 80058e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f4:	d005      	beq.n	8005902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <HAL_Delay+0x44>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005902:	bf00      	nop
 8005904:	f7ff ffde 	bl	80058c4 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d8f7      	bhi.n	8005904 <HAL_Delay+0x28>
  {
  }
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000048 	.word	0x20000048

08005924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e031      	b.n	800599e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff f91a 	bl	8004b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d116      	bne.n	8005990 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <HAL_ADC_Init+0x84>)
 8005968:	4013      	ands	r3, r2
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fad6 	bl	8005f24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	f043 0201 	orr.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
 800598e:	e001      	b.n	8005994 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	ffffeefd 	.word	0xffffeefd

080059ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_ADC_Start+0x1a>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ad      	b.n	8005b22 <HAL_ADC_Start+0x176>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d018      	beq.n	8005a0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80059ec:	4b50      	ldr	r3, [pc, #320]	; (8005b30 <HAL_ADC_Start+0x184>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a50      	ldr	r2, [pc, #320]	; (8005b34 <HAL_ADC_Start+0x188>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	0c9a      	lsrs	r2, r3, #18
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a00:	e002      	b.n	8005a08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f9      	bne.n	8005a02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d175      	bne.n	8005b08 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a20:	4b45      	ldr	r3, [pc, #276]	; (8005b38 <HAL_ADC_Start+0x18c>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a56:	d106      	bne.n	8005a66 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	f023 0206 	bic.w	r2, r3, #6
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44
 8005a64:	e002      	b.n	8005a6c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005a7e:	4b2f      	ldr	r3, [pc, #188]	; (8005b3c <HAL_ADC_Start+0x190>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d143      	bne.n	8005b20 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	e03a      	b.n	8005b20 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_ADC_Start+0x194>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10e      	bne.n	8005ad2 <HAL_ADC_Start+0x126>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d107      	bne.n	8005ad2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ad0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <HAL_ADC_Start+0x190>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d120      	bne.n	8005b20 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <HAL_ADC_Start+0x198>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d11b      	bne.n	8005b20 <HAL_ADC_Start+0x174>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d114      	bne.n	8005b20 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	e00b      	b.n	8005b20 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	f043 0210 	orr.w	r2, r3, #16
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	f043 0201 	orr.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000040 	.word	0x20000040
 8005b34:	431bde83 	.word	0x431bde83
 8005b38:	fffff8fe 	.word	0xfffff8fe
 8005b3c:	40012300 	.word	0x40012300
 8005b40:	40012000 	.word	0x40012000
 8005b44:	40012200 	.word	0x40012200

08005b48 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d113      	bne.n	8005b8e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b74:	d10b      	bne.n	8005b8e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e063      	b.n	8005c56 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005b8e:	f7ff fe99 	bl	80058c4 <HAL_GetTick>
 8005b92:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b94:	e021      	b.n	8005bda <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9c:	d01d      	beq.n	8005bda <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <HAL_ADC_PollForConversion+0x6c>
 8005ba4:	f7ff fe8e 	bl	80058c4 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d212      	bcs.n	8005bda <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d00b      	beq.n	8005bda <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0204 	orr.w	r2, r3, #4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e03d      	b.n	8005c56 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d1d6      	bne.n	8005b96 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0212 	mvn.w	r2, #18
 8005bf0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d123      	bne.n	8005c54 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11f      	bne.n	8005c54 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d111      	bne.n	8005c54 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f043 0201 	orr.w	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x1c>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e136      	b.n	8005f02 <HAL_ADC_ConfigChannel+0x28a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b09      	cmp	r3, #9
 8005ca2:	d93a      	bls.n	8005d1a <HAL_ADC_ConfigChannel+0xa2>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d035      	beq.n	8005d1a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68d9      	ldr	r1, [r3, #12]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3b1e      	subs	r3, #30
 8005cc4:	2207      	movs	r2, #7
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	43da      	mvns	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	400a      	ands	r2, r1
 8005cd2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a8d      	ldr	r2, [pc, #564]	; (8005f10 <HAL_ADC_ConfigChannel+0x298>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68d9      	ldr	r1, [r3, #12]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	061a      	lsls	r2, r3, #24
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cf2:	e035      	b.n	8005d60 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68d9      	ldr	r1, [r3, #12]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4618      	mov	r0, r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4403      	add	r3, r0
 8005d0c:	3b1e      	subs	r3, #30
 8005d0e:	409a      	lsls	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d18:	e022      	b.n	8005d60 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6919      	ldr	r1, [r3, #16]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	2207      	movs	r2, #7
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43da      	mvns	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	400a      	ands	r2, r1
 8005d3c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6919      	ldr	r1, [r3, #16]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4618      	mov	r0, r3
 8005d50:	4603      	mov	r3, r0
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4403      	add	r3, r0
 8005d56:	409a      	lsls	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b06      	cmp	r3, #6
 8005d66:	d824      	bhi.n	8005db2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	3b05      	subs	r3, #5
 8005d7a:	221f      	movs	r2, #31
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43da      	mvns	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	400a      	ands	r2, r1
 8005d88:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	4618      	mov	r0, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	3b05      	subs	r3, #5
 8005da4:	fa00 f203 	lsl.w	r2, r0, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	635a      	str	r2, [r3, #52]	; 0x34
 8005db0:	e04c      	b.n	8005e4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d824      	bhi.n	8005e04 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	3b23      	subs	r3, #35	; 0x23
 8005dcc:	221f      	movs	r2, #31
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43da      	mvns	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	400a      	ands	r2, r1
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4618      	mov	r0, r3
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	3b23      	subs	r3, #35	; 0x23
 8005df6:	fa00 f203 	lsl.w	r2, r0, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
 8005e02:	e023      	b.n	8005e4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	3b41      	subs	r3, #65	; 0x41
 8005e16:	221f      	movs	r2, #31
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	43da      	mvns	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	400a      	ands	r2, r1
 8005e24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4618      	mov	r0, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3b41      	subs	r3, #65	; 0x41
 8005e40:	fa00 f203 	lsl.w	r2, r0, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a30      	ldr	r2, [pc, #192]	; (8005f14 <HAL_ADC_ConfigChannel+0x29c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10a      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x1f4>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e5e:	d105      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005e60:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005e6a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <HAL_ADC_ConfigChannel+0x29c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d10f      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x21e>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b12      	cmp	r3, #18
 8005e7c:	d10b      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005e7e:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4a25      	ldr	r2, [pc, #148]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e88:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e8a:	4b23      	ldr	r3, [pc, #140]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <HAL_ADC_ConfigChannel+0x29c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d12b      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x280>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1a      	ldr	r2, [pc, #104]	; (8005f10 <HAL_ADC_ConfigChannel+0x298>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <HAL_ADC_ConfigChannel+0x23a>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b11      	cmp	r3, #17
 8005eb0:	d122      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005eb2:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005eb8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005ebc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ec8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <HAL_ADC_ConfigChannel+0x298>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d111      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ed4:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <HAL_ADC_ConfigChannel+0x2a4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a11      	ldr	r2, [pc, #68]	; (8005f20 <HAL_ADC_ConfigChannel+0x2a8>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	0c9a      	lsrs	r2, r3, #18
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005eea:	e002      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f9      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	10000012 	.word	0x10000012
 8005f14:	40012000 	.word	0x40012000
 8005f18:	40012300 	.word	0x40012300
 8005f1c:	20000040 	.word	0x20000040
 8005f20:	431bde83 	.word	0x431bde83

08005f24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f2c:	4b78      	ldr	r3, [pc, #480]	; (8006110 <ADC_Init+0x1ec>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4a77      	ldr	r2, [pc, #476]	; (8006110 <ADC_Init+0x1ec>)
 8005f32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005f36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f38:	4b75      	ldr	r3, [pc, #468]	; (8006110 <ADC_Init+0x1ec>)
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4973      	ldr	r1, [pc, #460]	; (8006110 <ADC_Init+0x1ec>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	021a      	lsls	r2, r3, #8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6899      	ldr	r1, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	4a58      	ldr	r2, [pc, #352]	; (8006114 <ADC_Init+0x1f0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6899      	ldr	r1, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6899      	ldr	r1, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
 8005ffc:	e00f      	b.n	800601e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800600c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800601c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0202 	bic.w	r2, r2, #2
 800602c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6899      	ldr	r1, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	005a      	lsls	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01b      	beq.n	8006084 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800606a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	3b01      	subs	r3, #1
 8006078:	035a      	lsls	r2, r3, #13
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	e007      	b.n	8006094 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006092:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	051a      	lsls	r2, r3, #20
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6899      	ldr	r1, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060d6:	025a      	lsls	r2, r3, #9
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	029a      	lsls	r2, r3, #10
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40012300 	.word	0x40012300
 8006114:	0f000001 	.word	0x0f000001

08006118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <__NVIC_SetPriorityGrouping+0x40>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006134:	4013      	ands	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <__NVIC_SetPriorityGrouping+0x44>)
 8006142:	4313      	orrs	r3, r2
 8006144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <__NVIC_SetPriorityGrouping+0x40>)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	60d3      	str	r3, [r2, #12]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	e000ed00 	.word	0xe000ed00
 800615c:	05fa0000 	.word	0x05fa0000

08006160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <__NVIC_GetPriorityGrouping+0x18>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	0a1b      	lsrs	r3, r3, #8
 800616a:	f003 0307 	and.w	r3, r3, #7
}
 800616e:	4618      	mov	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000ed00 	.word	0xe000ed00

0800617c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	db0b      	blt.n	80061a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	f003 021f 	and.w	r2, r3, #31
 8006194:	4907      	ldr	r1, [pc, #28]	; (80061b4 <__NVIC_EnableIRQ+0x38>)
 8006196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	2001      	movs	r0, #1
 800619e:	fa00 f202 	lsl.w	r2, r0, r2
 80061a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	e000e100 	.word	0xe000e100

080061b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	6039      	str	r1, [r7, #0]
 80061c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	db0a      	blt.n	80061e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	490c      	ldr	r1, [pc, #48]	; (8006204 <__NVIC_SetPriority+0x4c>)
 80061d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d6:	0112      	lsls	r2, r2, #4
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	440b      	add	r3, r1
 80061dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061e0:	e00a      	b.n	80061f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	4908      	ldr	r1, [pc, #32]	; (8006208 <__NVIC_SetPriority+0x50>)
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	3b04      	subs	r3, #4
 80061f0:	0112      	lsls	r2, r2, #4
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	440b      	add	r3, r1
 80061f6:	761a      	strb	r2, [r3, #24]
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	e000e100 	.word	0xe000e100
 8006208:	e000ed00 	.word	0xe000ed00

0800620c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800620c:	b480      	push	{r7}
 800620e:	b089      	sub	sp, #36	; 0x24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f1c3 0307 	rsb	r3, r3, #7
 8006226:	2b04      	cmp	r3, #4
 8006228:	bf28      	it	cs
 800622a:	2304      	movcs	r3, #4
 800622c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3304      	adds	r3, #4
 8006232:	2b06      	cmp	r3, #6
 8006234:	d902      	bls.n	800623c <NVIC_EncodePriority+0x30>
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3b03      	subs	r3, #3
 800623a:	e000      	b.n	800623e <NVIC_EncodePriority+0x32>
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43da      	mvns	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	401a      	ands	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	43d9      	mvns	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006264:	4313      	orrs	r3, r2
         );
}
 8006266:	4618      	mov	r0, r3
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff ff4c 	bl	8006118 <__NVIC_SetPriorityGrouping>
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800629a:	f7ff ff61 	bl	8006160 <__NVIC_GetPriorityGrouping>
 800629e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	6978      	ldr	r0, [r7, #20]
 80062a6:	f7ff ffb1 	bl	800620c <NVIC_EncodePriority>
 80062aa:	4602      	mov	r2, r0
 80062ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff ff80 	bl	80061b8 <__NVIC_SetPriority>
}
 80062b8:	bf00      	nop
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff54 	bl	800617c <__NVIC_EnableIRQ>
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e014      	b.n	8006318 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fe fcaa 	bl	8004c58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006336:	d120      	bne.n	800637a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006346:	d118      	bne.n	800637a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2204      	movs	r2, #4
 800634c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f043 0201 	orr.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006362:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006372:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f82d 	bl	80063d4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006388:	d120      	bne.n	80063cc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006398:	d118      	bne.n	80063cc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2204      	movs	r2, #4
 800639e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f043 0202 	orr.w	r2, r3, #2
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063c4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f85d 	bl	8006486 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	795b      	ldrb	r3, [r3, #5]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_DAC_ConfigChannel+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e03c      	b.n	800647a <HAL_DAC_ConfigChannel+0x92>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2202      	movs	r2, #2
 800640a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43db      	mvns	r3, r3
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4013      	ands	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6819      	ldr	r1, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	22c0      	movs	r2, #192	; 0xc0
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	400a      	ands	r2, r1
 800646a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
	...

0800649c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80064a8:	f7ff fa0c 	bl	80058c4 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e099      	b.n	80065ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064d8:	e00f      	b.n	80064fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064da:	f7ff f9f3 	bl	80058c4 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d908      	bls.n	80064fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2203      	movs	r2, #3
 80064f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e078      	b.n	80065ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e8      	bne.n	80064da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4b38      	ldr	r3, [pc, #224]	; (80065f4 <HAL_DMA_Init+0x158>)
 8006514:	4013      	ands	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b04      	cmp	r3, #4
 8006552:	d107      	bne.n	8006564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	4313      	orrs	r3, r2
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2b04      	cmp	r3, #4
 800658c:	d117      	bne.n	80065be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00e      	beq.n	80065be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f8bd 	bl	8006720 <DMA_CheckFifoParam>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2240      	movs	r2, #64	; 0x40
 80065b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80065ba:	2301      	movs	r3, #1
 80065bc:	e016      	b.n	80065ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f874 	bl	80066b4 <DMA_CalcBaseAndBitshift>
 80065cc:	4603      	mov	r3, r0
 80065ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d4:	223f      	movs	r2, #63	; 0x3f
 80065d6:	409a      	lsls	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	f010803f 	.word	0xf010803f

080065f8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e050      	b.n	80066ac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d101      	bne.n	800661a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006616:	2302      	movs	r3, #2
 8006618:	e048      	b.n	80066ac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2200      	movs	r2, #0
 8006650:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2221      	movs	r2, #33	; 0x21
 8006658:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f82a 	bl	80066b4 <DMA_CalcBaseAndBitshift>
 8006660:	4603      	mov	r3, r0
 8006662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006668:	223f      	movs	r2, #63	; 0x3f
 800666a:	409a      	lsls	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	3b10      	subs	r3, #16
 80066c4:	4a13      	ldr	r2, [pc, #76]	; (8006714 <DMA_CalcBaseAndBitshift+0x60>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <DMA_CalcBaseAndBitshift+0x64>)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d908      	bls.n	80066f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <DMA_CalcBaseAndBitshift+0x68>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	659a      	str	r2, [r3, #88]	; 0x58
 80066f2:	e006      	b.n	8006702 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <DMA_CalcBaseAndBitshift+0x68>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	aaaaaaab 	.word	0xaaaaaaab
 8006718:	080d21ec 	.word	0x080d21ec
 800671c:	fffffc00 	.word	0xfffffc00

08006720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11f      	bne.n	800677a <DMA_CheckFifoParam+0x5a>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b03      	cmp	r3, #3
 800673e:	d856      	bhi.n	80067ee <DMA_CheckFifoParam+0xce>
 8006740:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <DMA_CheckFifoParam+0x28>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	08006759 	.word	0x08006759
 800674c:	0800676b 	.word	0x0800676b
 8006750:	08006759 	.word	0x08006759
 8006754:	080067ef 	.word	0x080067ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d046      	beq.n	80067f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006768:	e043      	b.n	80067f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006772:	d140      	bne.n	80067f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006778:	e03d      	b.n	80067f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006782:	d121      	bne.n	80067c8 <DMA_CheckFifoParam+0xa8>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b03      	cmp	r3, #3
 8006788:	d837      	bhi.n	80067fa <DMA_CheckFifoParam+0xda>
 800678a:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <DMA_CheckFifoParam+0x70>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067a7 	.word	0x080067a7
 8006798:	080067a1 	.word	0x080067a1
 800679c:	080067b9 	.word	0x080067b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	73fb      	strb	r3, [r7, #15]
      break;
 80067a4:	e030      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d025      	beq.n	80067fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067b6:	e022      	b.n	80067fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067c0:	d11f      	bne.n	8006802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80067c6:	e01c      	b.n	8006802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d903      	bls.n	80067d6 <DMA_CheckFifoParam+0xb6>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d003      	beq.n	80067dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80067d4:	e018      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
      break;
 80067da:	e015      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00e      	beq.n	8006806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
      break;
 80067ec:	e00b      	b.n	8006806 <DMA_CheckFifoParam+0xe6>
      break;
 80067ee:	bf00      	nop
 80067f0:	e00a      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      break;
 80067f2:	bf00      	nop
 80067f4:	e008      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      break;
 80067f6:	bf00      	nop
 80067f8:	e006      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      break;
 80067fa:	bf00      	nop
 80067fc:	e004      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      break;
 80067fe:	bf00      	nop
 8006800:	e002      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      break;   
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <DMA_CheckFifoParam+0xe8>
      break;
 8006806:	bf00      	nop
    }
  } 
  
  return status; 
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e039      	b.n	800689e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fe fa52 	bl	8004ce8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006868:	f023 0107 	bic.w	r1, r3, #7
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <HAL_DMA2D_Init+0x90>)
 8006880:	4013      	ands	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	68d1      	ldr	r1, [r2, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	430b      	orrs	r3, r1
 800688c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	ffffc000 	.word	0xffffc000

080068ac <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_DMA2D_Start+0x1c>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e018      	b.n	80068fa <HAL_DMA2D_Start+0x4e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fa98 	bl	8006e18 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d056      	beq.n	80069cc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800691e:	f7fe ffd1 	bl	80058c4 <HAL_GetTick>
 8006922:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006924:	e04b      	b.n	80069be <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006934:	2b00      	cmp	r3, #0
 8006936:	d023      	beq.n	8006980 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	f043 0202 	orr.w	r2, r3, #2
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	f043 0201 	orr.w	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2221      	movs	r2, #33	; 0x21
 800696a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2204      	movs	r2, #4
 8006970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0a5      	b.n	8006acc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006986:	d01a      	beq.n	80069be <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006988:	f7fe ff9c 	bl	80058c4 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d302      	bcc.n	800699e <HAL_DMA2D_PollForTransfer+0x9c>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	f043 0220 	orr.w	r2, r3, #32
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2203      	movs	r2, #3
 80069ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e086      	b.n	8006acc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0ac      	beq.n	8006926 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d061      	beq.n	8006ab2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80069ee:	f7fe ff69 	bl	80058c4 <HAL_GetTick>
 80069f2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80069f4:	e056      	b.n	8006aa4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d02e      	beq.n	8006a66 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2c:	f043 0202 	orr.w	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2229      	movs	r2, #41	; 0x29
 8006a50:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2204      	movs	r2, #4
 8006a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e032      	b.n	8006acc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a6c:	d01a      	beq.n	8006aa4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a6e:	f7fe ff29 	bl	80058c4 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d302      	bcc.n	8006a84 <HAL_DMA2D_PollForTransfer+0x182>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10f      	bne.n	8006aa4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a88:	f043 0220 	orr.w	r2, r3, #32
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2203      	movs	r2, #3
 8006a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e013      	b.n	8006acc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0a1      	beq.n	80069f6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2212      	movs	r2, #18
 8006ab8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d026      	beq.n	8006b44 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d021      	beq.n	8006b44 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b0e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	f043 0201 	orr.w	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2201      	movs	r2, #1
 8006b22:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2204      	movs	r2, #4
 8006b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d026      	beq.n	8006b9c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d021      	beq.n	8006b9c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b66:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	f043 0202 	orr.w	r2, r3, #2
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d026      	beq.n	8006bf4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d021      	beq.n	8006bf4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bbe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	f043 0204 	orr.w	r2, r3, #4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d013      	beq.n	8006c26 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f853 	bl	8006ccc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d024      	beq.n	8006c7a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01f      	beq.n	8006c7a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c48:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01f      	beq.n	8006cc4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01a      	beq.n	8006cc4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c9c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f80e 	bl	8006ce0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_DMA2D_ConfigLayer+0x20>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e079      	b.n	8006e08 <HAL_DMA2D_ConfigLayer+0x114>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	3318      	adds	r3, #24
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	041b      	lsls	r3, r3, #16
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006d3e:	4b35      	ldr	r3, [pc, #212]	; (8006e14 <HAL_DMA2D_ConfigLayer+0x120>)
 8006d40:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b0a      	cmp	r3, #10
 8006d48:	d003      	beq.n	8006d52 <HAL_DMA2D_ConfigLayer+0x5e>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b09      	cmp	r3, #9
 8006d50:	d107      	bne.n	8006d62 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e005      	b.n	8006d6e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d120      	bne.n	8006db6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	ea02 0103 	and.w	r1, r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	6812      	ldr	r2, [r2, #0]
 8006d94:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b0a      	cmp	r3, #10
 8006d9c:	d003      	beq.n	8006da6 <HAL_DMA2D_ConfigLayer+0xb2>
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b09      	cmp	r3, #9
 8006da4:	d127      	bne.n	8006df6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28
 8006db4:	e01f      	b.n	8006df6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	ea02 0103 	and.w	r1, r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b0a      	cmp	r3, #10
 8006dde:	d003      	beq.n	8006de8 <HAL_DMA2D_ConfigLayer+0xf4>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b09      	cmp	r3, #9
 8006de6:	d106      	bne.n	8006df6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006df4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	ff03000f 	.word	0xff03000f

08006e18 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b08b      	sub	sp, #44	; 0x2c
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	041a      	lsls	r2, r3, #16
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	431a      	orrs	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e50:	d174      	bne.n	8006f3c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e58:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e60:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e68:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d108      	bne.n	8006e8a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
 8006e88:	e053      	b.n	8006f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d106      	bne.n	8006ea0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9e:	e048      	b.n	8006f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d111      	bne.n	8006ecc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	0cdb      	lsrs	r3, r3, #19
 8006eac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	0a9b      	lsrs	r3, r3, #10
 8006eb2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	02db      	lsls	r3, r3, #11
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eca:	e032      	b.n	8006f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d117      	bne.n	8006f04 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	0fdb      	lsrs	r3, r3, #31
 8006ed8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	0cdb      	lsrs	r3, r3, #19
 8006ede:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	0adb      	lsrs	r3, r3, #11
 8006ee4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	029b      	lsls	r3, r3, #10
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	03db      	lsls	r3, r3, #15
 8006efa:	4313      	orrs	r3, r2
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	e016      	b.n	8006f32 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	0f1b      	lsrs	r3, r3, #28
 8006f08:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	0d1b      	lsrs	r3, r3, #20
 8006f0e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	0b1b      	lsrs	r3, r3, #12
 8006f14:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	011a      	lsls	r2, r3, #4
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	431a      	orrs	r2, r3
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	031b      	lsls	r3, r3, #12
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006f3a:	e003      	b.n	8006f44 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	60da      	str	r2, [r3, #12]
}
 8006f44:	bf00      	nop
 8006f46:	372c      	adds	r7, #44	; 0x2c
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	; 0x24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	e175      	b.n	800725c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006f70:	2201      	movs	r2, #1
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4013      	ands	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	f040 8164 	bne.w	8007256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d005      	beq.n	8006fa6 <HAL_GPIO_Init+0x56>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d130      	bne.n	8007008 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006fdc:	2201      	movs	r2, #1
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 0201 	and.w	r2, r3, #1
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	2b03      	cmp	r3, #3
 8007012:	d017      	beq.n	8007044 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	2203      	movs	r2, #3
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	43db      	mvns	r3, r3
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4013      	ands	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4313      	orrs	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d123      	bne.n	8007098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	08da      	lsrs	r2, r3, #3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3208      	adds	r2, #8
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	220f      	movs	r2, #15
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4313      	orrs	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	08da      	lsrs	r2, r3, #3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3208      	adds	r2, #8
 8007092:	69b9      	ldr	r1, [r7, #24]
 8007094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	2203      	movs	r2, #3
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	43db      	mvns	r3, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4013      	ands	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f003 0203 	and.w	r2, r3, #3
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80be 	beq.w	8007256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070da:	4b66      	ldr	r3, [pc, #408]	; (8007274 <HAL_GPIO_Init+0x324>)
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	4a65      	ldr	r2, [pc, #404]	; (8007274 <HAL_GPIO_Init+0x324>)
 80070e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070e4:	6453      	str	r3, [r2, #68]	; 0x44
 80070e6:	4b63      	ldr	r3, [pc, #396]	; (8007274 <HAL_GPIO_Init+0x324>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80070f2:	4a61      	ldr	r2, [pc, #388]	; (8007278 <HAL_GPIO_Init+0x328>)
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	089b      	lsrs	r3, r3, #2
 80070f8:	3302      	adds	r3, #2
 80070fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	220f      	movs	r2, #15
 800710a:	fa02 f303 	lsl.w	r3, r2, r3
 800710e:	43db      	mvns	r3, r3
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	4013      	ands	r3, r2
 8007114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a58      	ldr	r2, [pc, #352]	; (800727c <HAL_GPIO_Init+0x32c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d037      	beq.n	800718e <HAL_GPIO_Init+0x23e>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a57      	ldr	r2, [pc, #348]	; (8007280 <HAL_GPIO_Init+0x330>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d031      	beq.n	800718a <HAL_GPIO_Init+0x23a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a56      	ldr	r2, [pc, #344]	; (8007284 <HAL_GPIO_Init+0x334>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d02b      	beq.n	8007186 <HAL_GPIO_Init+0x236>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a55      	ldr	r2, [pc, #340]	; (8007288 <HAL_GPIO_Init+0x338>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d025      	beq.n	8007182 <HAL_GPIO_Init+0x232>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a54      	ldr	r2, [pc, #336]	; (800728c <HAL_GPIO_Init+0x33c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01f      	beq.n	800717e <HAL_GPIO_Init+0x22e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a53      	ldr	r2, [pc, #332]	; (8007290 <HAL_GPIO_Init+0x340>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d019      	beq.n	800717a <HAL_GPIO_Init+0x22a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a52      	ldr	r2, [pc, #328]	; (8007294 <HAL_GPIO_Init+0x344>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_GPIO_Init+0x226>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a51      	ldr	r2, [pc, #324]	; (8007298 <HAL_GPIO_Init+0x348>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00d      	beq.n	8007172 <HAL_GPIO_Init+0x222>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a50      	ldr	r2, [pc, #320]	; (800729c <HAL_GPIO_Init+0x34c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <HAL_GPIO_Init+0x21e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a4f      	ldr	r2, [pc, #316]	; (80072a0 <HAL_GPIO_Init+0x350>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d101      	bne.n	800716a <HAL_GPIO_Init+0x21a>
 8007166:	2309      	movs	r3, #9
 8007168:	e012      	b.n	8007190 <HAL_GPIO_Init+0x240>
 800716a:	230a      	movs	r3, #10
 800716c:	e010      	b.n	8007190 <HAL_GPIO_Init+0x240>
 800716e:	2308      	movs	r3, #8
 8007170:	e00e      	b.n	8007190 <HAL_GPIO_Init+0x240>
 8007172:	2307      	movs	r3, #7
 8007174:	e00c      	b.n	8007190 <HAL_GPIO_Init+0x240>
 8007176:	2306      	movs	r3, #6
 8007178:	e00a      	b.n	8007190 <HAL_GPIO_Init+0x240>
 800717a:	2305      	movs	r3, #5
 800717c:	e008      	b.n	8007190 <HAL_GPIO_Init+0x240>
 800717e:	2304      	movs	r3, #4
 8007180:	e006      	b.n	8007190 <HAL_GPIO_Init+0x240>
 8007182:	2303      	movs	r3, #3
 8007184:	e004      	b.n	8007190 <HAL_GPIO_Init+0x240>
 8007186:	2302      	movs	r3, #2
 8007188:	e002      	b.n	8007190 <HAL_GPIO_Init+0x240>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <HAL_GPIO_Init+0x240>
 800718e:	2300      	movs	r3, #0
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	f002 0203 	and.w	r2, r2, #3
 8007196:	0092      	lsls	r2, r2, #2
 8007198:	4093      	lsls	r3, r2
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	4313      	orrs	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80071a0:	4935      	ldr	r1, [pc, #212]	; (8007278 <HAL_GPIO_Init+0x328>)
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	089b      	lsrs	r3, r3, #2
 80071a6:	3302      	adds	r3, #2
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80071ae:	4b3d      	ldr	r3, [pc, #244]	; (80072a4 <HAL_GPIO_Init+0x354>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	43db      	mvns	r3, r3
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	4013      	ands	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80071d2:	4a34      	ldr	r2, [pc, #208]	; (80072a4 <HAL_GPIO_Init+0x354>)
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80071d8:	4b32      	ldr	r3, [pc, #200]	; (80072a4 <HAL_GPIO_Init+0x354>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	43db      	mvns	r3, r3
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4013      	ands	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80071fc:	4a29      	ldr	r2, [pc, #164]	; (80072a4 <HAL_GPIO_Init+0x354>)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007202:	4b28      	ldr	r3, [pc, #160]	; (80072a4 <HAL_GPIO_Init+0x354>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	43db      	mvns	r3, r3
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	4013      	ands	r3, r2
 8007210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007226:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <HAL_GPIO_Init+0x354>)
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800722c:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <HAL_GPIO_Init+0x354>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	43db      	mvns	r3, r3
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	4013      	ands	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007250:	4a14      	ldr	r2, [pc, #80]	; (80072a4 <HAL_GPIO_Init+0x354>)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3301      	adds	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2b0f      	cmp	r3, #15
 8007260:	f67f ae86 	bls.w	8006f70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop
 8007268:	3724      	adds	r7, #36	; 0x24
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800
 8007278:	40013800 	.word	0x40013800
 800727c:	40020000 	.word	0x40020000
 8007280:	40020400 	.word	0x40020400
 8007284:	40020800 	.word	0x40020800
 8007288:	40020c00 	.word	0x40020c00
 800728c:	40021000 	.word	0x40021000
 8007290:	40021400 	.word	0x40021400
 8007294:	40021800 	.word	0x40021800
 8007298:	40021c00 	.word	0x40021c00
 800729c:	40022000 	.word	0x40022000
 80072a0:	40022400 	.word	0x40022400
 80072a4:	40013c00 	.word	0x40013c00

080072a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e0d9      	b.n	8007478 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80072c4:	2201      	movs	r2, #1
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	4013      	ands	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	429a      	cmp	r2, r3
 80072dc:	f040 80c9 	bne.w	8007472 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80072e0:	4a6b      	ldr	r2, [pc, #428]	; (8007490 <HAL_GPIO_DeInit+0x1e8>)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	089b      	lsrs	r3, r3, #2
 80072e6:	3302      	adds	r3, #2
 80072e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ec:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	220f      	movs	r2, #15
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	4013      	ands	r3, r2
 8007300:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a63      	ldr	r2, [pc, #396]	; (8007494 <HAL_GPIO_DeInit+0x1ec>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d037      	beq.n	800737a <HAL_GPIO_DeInit+0xd2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a62      	ldr	r2, [pc, #392]	; (8007498 <HAL_GPIO_DeInit+0x1f0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d031      	beq.n	8007376 <HAL_GPIO_DeInit+0xce>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a61      	ldr	r2, [pc, #388]	; (800749c <HAL_GPIO_DeInit+0x1f4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d02b      	beq.n	8007372 <HAL_GPIO_DeInit+0xca>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a60      	ldr	r2, [pc, #384]	; (80074a0 <HAL_GPIO_DeInit+0x1f8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d025      	beq.n	800736e <HAL_GPIO_DeInit+0xc6>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a5f      	ldr	r2, [pc, #380]	; (80074a4 <HAL_GPIO_DeInit+0x1fc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d01f      	beq.n	800736a <HAL_GPIO_DeInit+0xc2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a5e      	ldr	r2, [pc, #376]	; (80074a8 <HAL_GPIO_DeInit+0x200>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d019      	beq.n	8007366 <HAL_GPIO_DeInit+0xbe>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a5d      	ldr	r2, [pc, #372]	; (80074ac <HAL_GPIO_DeInit+0x204>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d013      	beq.n	8007362 <HAL_GPIO_DeInit+0xba>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a5c      	ldr	r2, [pc, #368]	; (80074b0 <HAL_GPIO_DeInit+0x208>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00d      	beq.n	800735e <HAL_GPIO_DeInit+0xb6>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a5b      	ldr	r2, [pc, #364]	; (80074b4 <HAL_GPIO_DeInit+0x20c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d007      	beq.n	800735a <HAL_GPIO_DeInit+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a5a      	ldr	r2, [pc, #360]	; (80074b8 <HAL_GPIO_DeInit+0x210>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d101      	bne.n	8007356 <HAL_GPIO_DeInit+0xae>
 8007352:	2309      	movs	r3, #9
 8007354:	e012      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 8007356:	230a      	movs	r3, #10
 8007358:	e010      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 800735a:	2308      	movs	r3, #8
 800735c:	e00e      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 800735e:	2307      	movs	r3, #7
 8007360:	e00c      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 8007362:	2306      	movs	r3, #6
 8007364:	e00a      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 8007366:	2305      	movs	r3, #5
 8007368:	e008      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 800736a:	2304      	movs	r3, #4
 800736c:	e006      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 800736e:	2303      	movs	r3, #3
 8007370:	e004      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 8007372:	2302      	movs	r3, #2
 8007374:	e002      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <HAL_GPIO_DeInit+0xd4>
 800737a:	2300      	movs	r3, #0
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	f002 0203 	and.w	r2, r2, #3
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	4093      	lsls	r3, r2
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	d132      	bne.n	80073f2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800738c:	4b4b      	ldr	r3, [pc, #300]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	43db      	mvns	r3, r3
 8007394:	4949      	ldr	r1, [pc, #292]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 8007396:	4013      	ands	r3, r2
 8007398:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800739a:	4b48      	ldr	r3, [pc, #288]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	4946      	ldr	r1, [pc, #280]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80073a8:	4b44      	ldr	r3, [pc, #272]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	43db      	mvns	r3, r3
 80073b0:	4942      	ldr	r1, [pc, #264]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80073b6:	4b41      	ldr	r3, [pc, #260]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	43db      	mvns	r3, r3
 80073be:	493f      	ldr	r1, [pc, #252]	; (80074bc <HAL_GPIO_DeInit+0x214>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	220f      	movs	r2, #15
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80073d4:	4a2e      	ldr	r2, [pc, #184]	; (8007490 <HAL_GPIO_DeInit+0x1e8>)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	089b      	lsrs	r3, r3, #2
 80073da:	3302      	adds	r3, #2
 80073dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	43da      	mvns	r2, r3
 80073e4:	482a      	ldr	r0, [pc, #168]	; (8007490 <HAL_GPIO_DeInit+0x1e8>)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	089b      	lsrs	r3, r3, #2
 80073ea:	400a      	ands	r2, r1
 80073ec:	3302      	adds	r3, #2
 80073ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	2103      	movs	r1, #3
 80073fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	08da      	lsrs	r2, r3, #3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3208      	adds	r2, #8
 8007410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	220f      	movs	r2, #15
 800741e:	fa02 f303 	lsl.w	r3, r2, r3
 8007422:	43db      	mvns	r3, r3
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	08d2      	lsrs	r2, r2, #3
 8007428:	4019      	ands	r1, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3208      	adds	r2, #8
 800742e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	2103      	movs	r1, #3
 800743c:	fa01 f303 	lsl.w	r3, r1, r3
 8007440:	43db      	mvns	r3, r3
 8007442:	401a      	ands	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	2101      	movs	r1, #1
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	fa01 f303 	lsl.w	r3, r1, r3
 8007454:	43db      	mvns	r3, r3
 8007456:	401a      	ands	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	2103      	movs	r1, #3
 8007466:	fa01 f303 	lsl.w	r3, r1, r3
 800746a:	43db      	mvns	r3, r3
 800746c:	401a      	ands	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	3301      	adds	r3, #1
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b0f      	cmp	r3, #15
 800747c:	f67f af22 	bls.w	80072c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40013800 	.word	0x40013800
 8007494:	40020000 	.word	0x40020000
 8007498:	40020400 	.word	0x40020400
 800749c:	40020800 	.word	0x40020800
 80074a0:	40020c00 	.word	0x40020c00
 80074a4:	40021000 	.word	0x40021000
 80074a8:	40021400 	.word	0x40021400
 80074ac:	40021800 	.word	0x40021800
 80074b0:	40021c00 	.word	0x40021c00
 80074b4:	40022000 	.word	0x40022000
 80074b8:	40022400 	.word	0x40022400
 80074bc:	40013c00 	.word	0x40013c00

080074c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	887b      	ldrh	r3, [r7, #2]
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	e001      	b.n	80074e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	807b      	strh	r3, [r7, #2]
 80074fc:	4613      	mov	r3, r2
 80074fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007500:	787b      	ldrb	r3, [r7, #1]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007506:	887a      	ldrh	r2, [r7, #2]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800750c:	e003      	b.n	8007516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800750e:	887b      	ldrh	r3, [r7, #2]
 8007510:	041a      	lsls	r2, r3, #16
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	619a      	str	r2, [r3, #24]
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007534:	887a      	ldrh	r2, [r7, #2]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4013      	ands	r3, r2
 800753a:	041a      	lsls	r2, r3, #16
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	43d9      	mvns	r1, r3
 8007540:	887b      	ldrh	r3, [r7, #2]
 8007542:	400b      	ands	r3, r1
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	619a      	str	r2, [r3, #24]
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007562:	4b08      	ldr	r3, [pc, #32]	; (8007584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007564:	695a      	ldr	r2, [r3, #20]
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	4013      	ands	r3, r2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800756e:	4a05      	ldr	r2, [pc, #20]	; (8007584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	4618      	mov	r0, r3
 8007578:	f7fa fe58 	bl	800222c <HAL_GPIO_EXTI_Callback>
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40013c00 	.word	0x40013c00

08007588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e07f      	b.n	800769a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fd fbc0 	bl	8004d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2224      	movs	r2, #36	; 0x24
 80075b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0201 	bic.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d107      	bne.n	8007602 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	e006      	b.n	8007610 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800760e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d104      	bne.n	8007622 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6859      	ldr	r1, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <HAL_I2C_Init+0x11c>)
 800762e:	430b      	orrs	r3, r1
 8007630:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007640:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69d9      	ldr	r1, [r3, #28]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1a      	ldr	r2, [r3, #32]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0201 	orr.w	r2, r2, #1
 800767a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	02008000 	.word	0x02008000

080076a8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e021      	b.n	80076fe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2224      	movs	r2, #36	; 0x24
 80076be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fd fbd6 	bl	8004e84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af02      	add	r7, sp, #8
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	4608      	mov	r0, r1
 8007712:	4611      	mov	r1, r2
 8007714:	461a      	mov	r2, r3
 8007716:	4603      	mov	r3, r0
 8007718:	817b      	strh	r3, [r7, #10]
 800771a:	460b      	mov	r3, r1
 800771c:	813b      	strh	r3, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b20      	cmp	r3, #32
 800772c:	f040 80f9 	bne.w	8007922 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <HAL_I2C_Mem_Write+0x34>
 8007736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d105      	bne.n	8007748 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007742:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0ed      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_I2C_Mem_Write+0x4e>
 8007752:	2302      	movs	r3, #2
 8007754:	e0e6      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800775e:	f7fe f8b1 	bl	80058c4 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	2319      	movs	r3, #25
 800776a:	2201      	movs	r2, #1
 800776c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fad1 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e0d1      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2221      	movs	r2, #33	; 0x21
 8007784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2240      	movs	r2, #64	; 0x40
 800778c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a3a      	ldr	r2, [r7, #32]
 800779a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077a8:	88f8      	ldrh	r0, [r7, #6]
 80077aa:	893a      	ldrh	r2, [r7, #8]
 80077ac:	8979      	ldrh	r1, [r7, #10]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4603      	mov	r3, r0
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f9e1 	bl	8007b80 <I2C_RequestMemoryWrite>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e0a9      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2bff      	cmp	r3, #255	; 0xff
 80077d8:	d90e      	bls.n	80077f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	22ff      	movs	r2, #255	; 0xff
 80077de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	8979      	ldrh	r1, [r7, #10]
 80077e8:	2300      	movs	r3, #0
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fc39 	bl	8008068 <I2C_TransferConfig>
 80077f6:	e00f      	b.n	8007818 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007806:	b2da      	uxtb	r2, r3
 8007808:	8979      	ldrh	r1, [r7, #10]
 800780a:	2300      	movs	r3, #0
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fc28 	bl	8008068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fabb 	bl	8007d98 <I2C_WaitOnTXISFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e07b      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d034      	beq.n	80078d0 <HAL_I2C_Mem_Write+0x1c8>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	d130      	bne.n	80078d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	2200      	movs	r2, #0
 8007876:	2180      	movs	r1, #128	; 0x80
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 fa4d 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e04d      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2bff      	cmp	r3, #255	; 0xff
 8007890:	d90e      	bls.n	80078b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	22ff      	movs	r2, #255	; 0xff
 8007896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789c:	b2da      	uxtb	r2, r3
 800789e:	8979      	ldrh	r1, [r7, #10]
 80078a0:	2300      	movs	r3, #0
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fbdd 	bl	8008068 <I2C_TransferConfig>
 80078ae:	e00f      	b.n	80078d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	8979      	ldrh	r1, [r7, #10]
 80078c2:	2300      	movs	r3, #0
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fbcc 	bl	8008068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d19e      	bne.n	8007818 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 fa9a 	bl	8007e18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e01a      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2220      	movs	r2, #32
 80078f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6859      	ldr	r1, [r3, #4]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <HAL_I2C_Mem_Write+0x224>)
 8007902:	400b      	ands	r3, r1
 8007904:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	e000      	b.n	8007924 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	fe00e800 	.word	0xfe00e800

08007930 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	4608      	mov	r0, r1
 800793a:	4611      	mov	r1, r2
 800793c:	461a      	mov	r2, r3
 800793e:	4603      	mov	r3, r0
 8007940:	817b      	strh	r3, [r7, #10]
 8007942:	460b      	mov	r3, r1
 8007944:	813b      	strh	r3, [r7, #8]
 8007946:	4613      	mov	r3, r2
 8007948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b20      	cmp	r3, #32
 8007954:	f040 80fd 	bne.w	8007b52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_I2C_Mem_Read+0x34>
 800795e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d105      	bne.n	8007970 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800796a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0f1      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_I2C_Mem_Read+0x4e>
 800797a:	2302      	movs	r3, #2
 800797c:	e0ea      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007986:	f7fd ff9d 	bl	80058c4 <HAL_GetTick>
 800798a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	2319      	movs	r3, #25
 8007992:	2201      	movs	r2, #1
 8007994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f9bd 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e0d5      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2222      	movs	r2, #34	; 0x22
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2240      	movs	r2, #64	; 0x40
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079d0:	88f8      	ldrh	r0, [r7, #6]
 80079d2:	893a      	ldrh	r2, [r7, #8]
 80079d4:	8979      	ldrh	r1, [r7, #10]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4603      	mov	r3, r0
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f921 	bl	8007c28 <I2C_RequestMemoryRead>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0ad      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2bff      	cmp	r3, #255	; 0xff
 8007a00:	d90e      	bls.n	8007a20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	8979      	ldrh	r1, [r7, #10]
 8007a10:	4b52      	ldr	r3, [pc, #328]	; (8007b5c <HAL_I2C_Mem_Read+0x22c>)
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fb25 	bl	8008068 <I2C_TransferConfig>
 8007a1e:	e00f      	b.n	8007a40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	8979      	ldrh	r1, [r7, #10]
 8007a32:	4b4a      	ldr	r3, [pc, #296]	; (8007b5c <HAL_I2C_Mem_Read+0x22c>)
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fb14 	bl	8008068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	2200      	movs	r2, #0
 8007a48:	2104      	movs	r1, #4
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f964 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e07c      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d034      	beq.n	8007b00 <HAL_I2C_Mem_Read+0x1d0>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d130      	bne.n	8007b00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2180      	movs	r1, #128	; 0x80
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f935 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e04d      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2bff      	cmp	r3, #255	; 0xff
 8007ac0:	d90e      	bls.n	8007ae0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	8979      	ldrh	r1, [r7, #10]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fac5 	bl	8008068 <I2C_TransferConfig>
 8007ade:	e00f      	b.n	8007b00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	8979      	ldrh	r1, [r7, #10]
 8007af2:	2300      	movs	r3, #0
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fab4 	bl	8008068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d19a      	bne.n	8007a40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f982 	bl	8007e18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e01a      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2220      	movs	r2, #32
 8007b24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6859      	ldr	r1, [r3, #4]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <HAL_I2C_Mem_Read+0x230>)
 8007b32:	400b      	ands	r3, r1
 8007b34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e000      	b.n	8007b54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b52:	2302      	movs	r3, #2
  }
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	80002400 	.word	0x80002400
 8007b60:	fe00e800 	.word	0xfe00e800

08007b64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b72:	b2db      	uxtb	r3, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	817b      	strh	r3, [r7, #10]
 8007b92:	460b      	mov	r3, r1
 8007b94:	813b      	strh	r3, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	8979      	ldrh	r1, [r7, #10]
 8007ba0:	4b20      	ldr	r3, [pc, #128]	; (8007c24 <I2C_RequestMemoryWrite+0xa4>)
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fa5d 	bl	8008068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	69b9      	ldr	r1, [r7, #24]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f8f0 	bl	8007d98 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e02c      	b.n	8007c1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d105      	bne.n	8007bd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bc8:	893b      	ldrh	r3, [r7, #8]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	629a      	str	r2, [r3, #40]	; 0x28
 8007bd2:	e015      	b.n	8007c00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bd4:	893b      	ldrh	r3, [r7, #8]
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	69b9      	ldr	r1, [r7, #24]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f8d6 	bl	8007d98 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e012      	b.n	8007c1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf6:	893b      	ldrh	r3, [r7, #8]
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2200      	movs	r2, #0
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f884 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	80002000 	.word	0x80002000

08007c28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	4608      	mov	r0, r1
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	817b      	strh	r3, [r7, #10]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	813b      	strh	r3, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	8979      	ldrh	r1, [r7, #10]
 8007c48:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <I2C_RequestMemoryRead+0xa4>)
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 fa0a 	bl	8008068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	69b9      	ldr	r1, [r7, #24]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f89d 	bl	8007d98 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e02c      	b.n	8007cc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d105      	bne.n	8007c7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c6e:	893b      	ldrh	r3, [r7, #8]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
 8007c78:	e015      	b.n	8007ca6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c7a:	893b      	ldrh	r3, [r7, #8]
 8007c7c:	0a1b      	lsrs	r3, r3, #8
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	69b9      	ldr	r1, [r7, #24]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f883 	bl	8007d98 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e012      	b.n	8007cc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c9c:	893b      	ldrh	r3, [r7, #8]
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2200      	movs	r2, #0
 8007cae:	2140      	movs	r1, #64	; 0x40
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f831 	bl	8007d18 <I2C_WaitOnFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	80002000 	.word	0x80002000

08007cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d103      	bne.n	8007cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d007      	beq.n	8007d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0201 	orr.w	r2, r2, #1
 8007d0a:	619a      	str	r2, [r3, #24]
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d28:	e022      	b.n	8007d70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d30:	d01e      	beq.n	8007d70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7fd fdc7 	bl	80058c4 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d113      	bne.n	8007d70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4c:	f043 0220 	orr.w	r2, r3, #32
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e00f      	b.n	8007d90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	bf0c      	ite	eq
 8007d80:	2301      	moveq	r3, #1
 8007d82:	2300      	movne	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d0cd      	beq.n	8007d2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007da4:	e02c      	b.n	8007e00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f870 	bl	8007e90 <I2C_IsErrorOccurred>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e02a      	b.n	8007e10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc0:	d01e      	beq.n	8007e00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc2:	f7fd fd7f 	bl	80058c4 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d302      	bcc.n	8007dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d113      	bne.n	8007e00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ddc:	f043 0220 	orr.w	r2, r3, #32
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e007      	b.n	8007e10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d1cb      	bne.n	8007da6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e24:	e028      	b.n	8007e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f830 	bl	8007e90 <I2C_IsErrorOccurred>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e026      	b.n	8007e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3a:	f7fd fd43 	bl	80058c4 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d302      	bcc.n	8007e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d113      	bne.n	8007e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e54:	f043 0220 	orr.w	r2, r3, #32
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e007      	b.n	8007e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d1cf      	bne.n	8007e26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d075      	beq.n	8007fa8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ec4:	e056      	b.n	8007f74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ecc:	d052      	beq.n	8007f74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ece:	f7fd fcf9 	bl	80058c4 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d302      	bcc.n	8007ee4 <I2C_IsErrorOccurred+0x54>
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d147      	bne.n	8007f74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ef6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f06:	d12e      	bne.n	8007f66 <I2C_IsErrorOccurred+0xd6>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f0e:	d02a      	beq.n	8007f66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007f10:	7cfb      	ldrb	r3, [r7, #19]
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d027      	beq.n	8007f66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f24:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f26:	f7fd fccd 	bl	80058c4 <HAL_GetTick>
 8007f2a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f2c:	e01b      	b.n	8007f66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f2e:	f7fd fcc9 	bl	80058c4 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b19      	cmp	r3, #25
 8007f3a:	d914      	bls.n	8007f66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f40:	f043 0220 	orr.w	r2, r3, #32
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d1dc      	bne.n	8007f2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d003      	beq.n	8007f8a <I2C_IsErrorOccurred+0xfa>
 8007f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d09d      	beq.n	8007ec6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2220      	movs	r2, #32
 8007f98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	f043 0304 	orr.w	r3, r3, #4
 8007fa0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00b      	beq.n	8007fd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00b      	beq.n	8007ff4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	f043 0308 	orr.w	r3, r3, #8
 8007fe2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	f043 0302 	orr.w	r3, r3, #2
 8008004:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800800e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800801a:	2b00      	cmp	r3, #0
 800801c:	d01c      	beq.n	8008058 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff fe56 	bl	8007cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6859      	ldr	r1, [r3, #4]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <I2C_IsErrorOccurred+0x1d4>)
 8008030:	400b      	ands	r3, r1
 8008032:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	431a      	orrs	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800805c:	4618      	mov	r0, r3
 800805e:	3728      	adds	r7, #40	; 0x28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	fe00e800 	.word	0xfe00e800

08008068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	817b      	strh	r3, [r7, #10]
 8008076:	4613      	mov	r3, r2
 8008078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800807a:	897b      	ldrh	r3, [r7, #10]
 800807c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008080:	7a7b      	ldrb	r3, [r7, #9]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008088:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	4313      	orrs	r3, r2
 8008092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008096:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	0d5b      	lsrs	r3, r3, #21
 80080a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80080a6:	4b08      	ldr	r3, [pc, #32]	; (80080c8 <I2C_TransferConfig+0x60>)
 80080a8:	430b      	orrs	r3, r1
 80080aa:	43db      	mvns	r3, r3
 80080ac:	ea02 0103 	and.w	r1, r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	03ff63ff 	.word	0x03ff63ff

080080cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d138      	bne.n	8008154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e032      	b.n	8008156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2224      	movs	r2, #36	; 0x24
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800811e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6819      	ldr	r1, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	e000      	b.n	8008156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008154:	2302      	movs	r3, #2
  }
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b20      	cmp	r3, #32
 8008176:	d139      	bne.n	80081ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008182:	2302      	movs	r3, #2
 8008184:	e033      	b.n	80081ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2224      	movs	r2, #36	; 0x24
 8008192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0201 	bic.w	r2, r2, #1
 80081a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80081b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e000      	b.n	80081ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081ec:	2302      	movs	r3, #2
  }
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e0bf      	b.n	800838e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fc fe6a 	bl	8004efc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800823e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6999      	ldr	r1, [r3, #24]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008254:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6899      	ldr	r1, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b4a      	ldr	r3, [pc, #296]	; (8008398 <HAL_LTDC_Init+0x19c>)
 8008270:	400b      	ands	r3, r1
 8008272:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	041b      	lsls	r3, r3, #16
 800827a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6899      	ldr	r1, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	431a      	orrs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68d9      	ldr	r1, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	4b3e      	ldr	r3, [pc, #248]	; (8008398 <HAL_LTDC_Init+0x19c>)
 800829e:	400b      	ands	r3, r1
 80082a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68d9      	ldr	r1, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1a      	ldr	r2, [r3, #32]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6919      	ldr	r1, [r3, #16]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b33      	ldr	r3, [pc, #204]	; (8008398 <HAL_LTDC_Init+0x19c>)
 80082cc:	400b      	ands	r3, r1
 80082ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6919      	ldr	r1, [r3, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6959      	ldr	r1, [r3, #20]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4b27      	ldr	r3, [pc, #156]	; (8008398 <HAL_LTDC_Init+0x19c>)
 80082fa:	400b      	ands	r3, r1
 80082fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	041b      	lsls	r3, r3, #16
 8008304:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6959      	ldr	r1, [r3, #20]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008322:	021b      	lsls	r3, r3, #8
 8008324:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800832c:	041b      	lsls	r3, r3, #16
 800832e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800833e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0206 	orr.w	r2, r2, #6
 800836a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	f000f800 	.word	0xf000f800

0800839c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d023      	beq.n	8008406 <HAL_LTDC_IRQHandler+0x6a>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01e      	beq.n	8008406 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0204 	bic.w	r2, r2, #4
 80083d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2204      	movs	r2, #4
 80083de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083e6:	f043 0201 	orr.w	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2204      	movs	r2, #4
 80083f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f86f 	bl	80084e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d023      	beq.n	8008458 <HAL_LTDC_IRQHandler+0xbc>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01e      	beq.n	8008458 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0202 	bic.w	r2, r2, #2
 8008428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2202      	movs	r2, #2
 8008430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008438:	f043 0202 	orr.w	r2, r3, #2
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f846 	bl	80084e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01b      	beq.n	800849a <HAL_LTDC_IRQHandler+0xfe>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d016      	beq.n	800849a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0201 	bic.w	r2, r2, #1
 800847a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2201      	movs	r2, #1
 8008482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f82f 	bl	80084f8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01b      	beq.n	80084dc <HAL_LTDC_IRQHandler+0x140>
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f003 0308 	and.w	r3, r3, #8
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d016      	beq.n	80084dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0208 	bic.w	r2, r2, #8
 80084bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2208      	movs	r2, #8
 80084c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f818 	bl	800850c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008520:	b5b0      	push	{r4, r5, r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_LTDC_ConfigLayer+0x1a>
 8008536:	2302      	movs	r3, #2
 8008538:	e02c      	b.n	8008594 <HAL_LTDC_ConfigLayer+0x74>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2202      	movs	r2, #2
 8008546:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2134      	movs	r1, #52	; 0x34
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	4413      	add	r3, r2
 8008556:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800856a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f81f 	bl	80085b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2201      	movs	r2, #1
 8008580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bdb0      	pop	{r4, r5, r7, pc}

0800859c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80085aa:	b2db      	uxtb	r3, r3
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b089      	sub	sp, #36	; 0x24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	0c1b      	lsrs	r3, r3, #16
 80085d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085d4:	4413      	add	r3, r2
 80085d6:	041b      	lsls	r3, r3, #16
 80085d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	01db      	lsls	r3, r3, #7
 80085e4:	4413      	add	r3, r2
 80085e6:	3384      	adds	r3, #132	; 0x84
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	6812      	ldr	r2, [r2, #0]
 80085ee:	4611      	mov	r1, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	01d2      	lsls	r2, r2, #7
 80085f4:	440a      	add	r2, r1
 80085f6:	3284      	adds	r2, #132	; 0x84
 80085f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80085fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	0c1b      	lsrs	r3, r3, #16
 800860a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800860e:	4413      	add	r3, r2
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4619      	mov	r1, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	01db      	lsls	r3, r3, #7
 800861c:	440b      	add	r3, r1
 800861e:	3384      	adds	r3, #132	; 0x84
 8008620:	4619      	mov	r1, r3
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4313      	orrs	r3, r2
 8008626:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008636:	4413      	add	r3, r2
 8008638:	041b      	lsls	r3, r3, #16
 800863a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	01db      	lsls	r3, r3, #7
 8008646:	4413      	add	r3, r2
 8008648:	3384      	adds	r3, #132	; 0x84
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	6812      	ldr	r2, [r2, #0]
 8008650:	4611      	mov	r1, r2
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	01d2      	lsls	r2, r2, #7
 8008656:	440a      	add	r2, r1
 8008658:	3284      	adds	r2, #132	; 0x84
 800865a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800865e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800866e:	4413      	add	r3, r2
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4619      	mov	r1, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	01db      	lsls	r3, r3, #7
 800867c:	440b      	add	r3, r1
 800867e:	3384      	adds	r3, #132	; 0x84
 8008680:	4619      	mov	r1, r3
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	4313      	orrs	r3, r2
 8008686:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	01db      	lsls	r3, r3, #7
 8008692:	4413      	add	r3, r2
 8008694:	3384      	adds	r3, #132	; 0x84
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	4611      	mov	r1, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	01d2      	lsls	r2, r2, #7
 80086a2:	440a      	add	r2, r1
 80086a4:	3284      	adds	r2, #132	; 0x84
 80086a6:	f023 0307 	bic.w	r3, r3, #7
 80086aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	01db      	lsls	r3, r3, #7
 80086b6:	4413      	add	r3, r2
 80086b8:	3384      	adds	r3, #132	; 0x84
 80086ba:	461a      	mov	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	061b      	lsls	r3, r3, #24
 80086dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	01db      	lsls	r3, r3, #7
 80086e8:	4413      	add	r3, r2
 80086ea:	3384      	adds	r3, #132	; 0x84
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	01db      	lsls	r3, r3, #7
 80086f8:	4413      	add	r3, r2
 80086fa:	3384      	adds	r3, #132	; 0x84
 80086fc:	461a      	mov	r2, r3
 80086fe:	2300      	movs	r3, #0
 8008700:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008708:	461a      	mov	r2, r3
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	431a      	orrs	r2, r3
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	01db      	lsls	r3, r3, #7
 800871c:	440b      	add	r3, r1
 800871e:	3384      	adds	r3, #132	; 0x84
 8008720:	4619      	mov	r1, r3
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	01db      	lsls	r3, r3, #7
 8008732:	4413      	add	r3, r2
 8008734:	3384      	adds	r3, #132	; 0x84
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	6812      	ldr	r2, [r2, #0]
 800873c:	4611      	mov	r1, r2
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	01d2      	lsls	r2, r2, #7
 8008742:	440a      	add	r2, r1
 8008744:	3284      	adds	r2, #132	; 0x84
 8008746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800874a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	01db      	lsls	r3, r3, #7
 8008756:	4413      	add	r3, r2
 8008758:	3384      	adds	r3, #132	; 0x84
 800875a:	461a      	mov	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	01db      	lsls	r3, r3, #7
 800876c:	4413      	add	r3, r2
 800876e:	3384      	adds	r3, #132	; 0x84
 8008770:	69da      	ldr	r2, [r3, #28]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4619      	mov	r1, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	01db      	lsls	r3, r3, #7
 800877c:	440b      	add	r3, r1
 800877e:	3384      	adds	r3, #132	; 0x84
 8008780:	4619      	mov	r1, r3
 8008782:	4b58      	ldr	r3, [pc, #352]	; (80088e4 <LTDC_SetConfig+0x32c>)
 8008784:	4013      	ands	r3, r2
 8008786:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	69da      	ldr	r2, [r3, #28]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	68f9      	ldr	r1, [r7, #12]
 8008792:	6809      	ldr	r1, [r1, #0]
 8008794:	4608      	mov	r0, r1
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	01c9      	lsls	r1, r1, #7
 800879a:	4401      	add	r1, r0
 800879c:	3184      	adds	r1, #132	; 0x84
 800879e:	4313      	orrs	r3, r2
 80087a0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	01db      	lsls	r3, r3, #7
 80087ac:	4413      	add	r3, r2
 80087ae:	3384      	adds	r3, #132	; 0x84
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	01db      	lsls	r3, r3, #7
 80087bc:	4413      	add	r3, r2
 80087be:	3384      	adds	r3, #132	; 0x84
 80087c0:	461a      	mov	r2, r3
 80087c2:	2300      	movs	r3, #0
 80087c4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	01db      	lsls	r3, r3, #7
 80087d0:	4413      	add	r3, r2
 80087d2:	3384      	adds	r3, #132	; 0x84
 80087d4:	461a      	mov	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80087e4:	2304      	movs	r3, #4
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e01b      	b.n	8008822 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d102      	bne.n	80087f8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80087f2:	2303      	movs	r3, #3
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	e014      	b.n	8008822 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d00b      	beq.n	8008818 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008804:	2b02      	cmp	r3, #2
 8008806:	d007      	beq.n	8008818 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800880c:	2b03      	cmp	r3, #3
 800880e:	d003      	beq.n	8008818 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008814:	2b07      	cmp	r3, #7
 8008816:	d102      	bne.n	800881e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008818:	2302      	movs	r3, #2
 800881a:	61fb      	str	r3, [r7, #28]
 800881c:	e001      	b.n	8008822 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800881e:	2301      	movs	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	01db      	lsls	r3, r3, #7
 800882c:	4413      	add	r3, r2
 800882e:	3384      	adds	r3, #132	; 0x84
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	4611      	mov	r1, r2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	01d2      	lsls	r2, r2, #7
 800883c:	440a      	add	r2, r1
 800883e:	3284      	adds	r2, #132	; 0x84
 8008840:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008844:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	fb02 f303 	mul.w	r3, r2, r3
 8008850:	041a      	lsls	r2, r3, #16
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	6859      	ldr	r1, [r3, #4]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	1acb      	subs	r3, r1, r3
 800885c:	69f9      	ldr	r1, [r7, #28]
 800885e:	fb01 f303 	mul.w	r3, r1, r3
 8008862:	3303      	adds	r3, #3
 8008864:	68f9      	ldr	r1, [r7, #12]
 8008866:	6809      	ldr	r1, [r1, #0]
 8008868:	4608      	mov	r0, r1
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	01c9      	lsls	r1, r1, #7
 800886e:	4401      	add	r1, r0
 8008870:	3184      	adds	r1, #132	; 0x84
 8008872:	4313      	orrs	r3, r2
 8008874:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	01db      	lsls	r3, r3, #7
 8008880:	4413      	add	r3, r2
 8008882:	3384      	adds	r3, #132	; 0x84
 8008884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	01db      	lsls	r3, r3, #7
 8008890:	440b      	add	r3, r1
 8008892:	3384      	adds	r3, #132	; 0x84
 8008894:	4619      	mov	r1, r3
 8008896:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <LTDC_SetConfig+0x330>)
 8008898:	4013      	ands	r3, r2
 800889a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	01db      	lsls	r3, r3, #7
 80088a6:	4413      	add	r3, r2
 80088a8:	3384      	adds	r3, #132	; 0x84
 80088aa:	461a      	mov	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	01db      	lsls	r3, r3, #7
 80088bc:	4413      	add	r3, r2
 80088be:	3384      	adds	r3, #132	; 0x84
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	6812      	ldr	r2, [r2, #0]
 80088c6:	4611      	mov	r1, r2
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	01d2      	lsls	r2, r2, #7
 80088cc:	440a      	add	r2, r1
 80088ce:	3284      	adds	r2, #132	; 0x84
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	6013      	str	r3, [r2, #0]
}
 80088d6:	bf00      	nop
 80088d8:	3724      	adds	r7, #36	; 0x24
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	fffff8f8 	.word	0xfffff8f8
 80088e8:	fffff800 	.word	0xfffff800

080088ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a04      	ldr	r2, [pc, #16]	; (8008908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80088f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	bf00      	nop
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	40007000 	.word	0x40007000

0800890c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	4a22      	ldr	r2, [pc, #136]	; (80089a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800891c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008920:	6413      	str	r3, [r2, #64]	; 0x40
 8008922:	4b20      	ldr	r3, [pc, #128]	; (80089a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800892e:	4b1e      	ldr	r3, [pc, #120]	; (80089a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1d      	ldr	r2, [pc, #116]	; (80089a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008938:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800893a:	f7fc ffc3 	bl	80058c4 <HAL_GetTick>
 800893e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008940:	e009      	b.n	8008956 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008942:	f7fc ffbf 	bl	80058c4 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008950:	d901      	bls.n	8008956 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e022      	b.n	800899c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800895e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008962:	d1ee      	bne.n	8008942 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008964:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a0f      	ldr	r2, [pc, #60]	; (80089a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800896a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800896e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008970:	f7fc ffa8 	bl	80058c4 <HAL_GetTick>
 8008974:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008976:	e009      	b.n	800898c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008978:	f7fc ffa4 	bl	80058c4 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008986:	d901      	bls.n	800898c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e007      	b.n	800899c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800898c:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008998:	d1ee      	bne.n	8008978 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	40023800 	.word	0x40023800
 80089a8:	40007000 	.word	0x40007000

080089ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80089b4:	2300      	movs	r3, #0
 80089b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e291      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 8087 	beq.w	8008ade <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80089d0:	4b96      	ldr	r3, [pc, #600]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 030c 	and.w	r3, r3, #12
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d00c      	beq.n	80089f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089dc:	4b93      	ldr	r3, [pc, #588]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f003 030c 	and.w	r3, r3, #12
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d112      	bne.n	8008a0e <HAL_RCC_OscConfig+0x62>
 80089e8:	4b90      	ldr	r3, [pc, #576]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089f4:	d10b      	bne.n	8008a0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089f6:	4b8d      	ldr	r3, [pc, #564]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d06c      	beq.n	8008adc <HAL_RCC_OscConfig+0x130>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d168      	bne.n	8008adc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e26b      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a16:	d106      	bne.n	8008a26 <HAL_RCC_OscConfig+0x7a>
 8008a18:	4b84      	ldr	r3, [pc, #528]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a83      	ldr	r2, [pc, #524]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	e02e      	b.n	8008a84 <HAL_RCC_OscConfig+0xd8>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10c      	bne.n	8008a48 <HAL_RCC_OscConfig+0x9c>
 8008a2e:	4b7f      	ldr	r3, [pc, #508]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a7e      	ldr	r2, [pc, #504]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	4b7c      	ldr	r3, [pc, #496]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a7b      	ldr	r2, [pc, #492]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	e01d      	b.n	8008a84 <HAL_RCC_OscConfig+0xd8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a50:	d10c      	bne.n	8008a6c <HAL_RCC_OscConfig+0xc0>
 8008a52:	4b76      	ldr	r3, [pc, #472]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a75      	ldr	r2, [pc, #468]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4b73      	ldr	r3, [pc, #460]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a72      	ldr	r2, [pc, #456]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	e00b      	b.n	8008a84 <HAL_RCC_OscConfig+0xd8>
 8008a6c:	4b6f      	ldr	r3, [pc, #444]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a6e      	ldr	r2, [pc, #440]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	4b6c      	ldr	r3, [pc, #432]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a6b      	ldr	r2, [pc, #428]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d013      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8c:	f7fc ff1a 	bl	80058c4 <HAL_GetTick>
 8008a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a94:	f7fc ff16 	bl	80058c4 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b64      	cmp	r3, #100	; 0x64
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e21f      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aa6:	4b61      	ldr	r3, [pc, #388]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f0      	beq.n	8008a94 <HAL_RCC_OscConfig+0xe8>
 8008ab2:	e014      	b.n	8008ade <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab4:	f7fc ff06 	bl	80058c4 <HAL_GetTick>
 8008ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008abc:	f7fc ff02 	bl	80058c4 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b64      	cmp	r3, #100	; 0x64
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e20b      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ace:	4b57      	ldr	r3, [pc, #348]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f0      	bne.n	8008abc <HAL_RCC_OscConfig+0x110>
 8008ada:	e000      	b.n	8008ade <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d069      	beq.n	8008bbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008aea:	4b50      	ldr	r3, [pc, #320]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f003 030c 	and.w	r3, r3, #12
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008af6:	4b4d      	ldr	r3, [pc, #308]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 030c 	and.w	r3, r3, #12
 8008afe:	2b08      	cmp	r3, #8
 8008b00:	d11c      	bne.n	8008b3c <HAL_RCC_OscConfig+0x190>
 8008b02:	4b4a      	ldr	r3, [pc, #296]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d116      	bne.n	8008b3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b0e:	4b47      	ldr	r3, [pc, #284]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <HAL_RCC_OscConfig+0x17a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d001      	beq.n	8008b26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e1df      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b26:	4b41      	ldr	r3, [pc, #260]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	493d      	ldr	r1, [pc, #244]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b3a:	e040      	b.n	8008bbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d023      	beq.n	8008b8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b44:	4b39      	ldr	r3, [pc, #228]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a38      	ldr	r2, [pc, #224]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b4a:	f043 0301 	orr.w	r3, r3, #1
 8008b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7fc feb8 	bl	80058c4 <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b58:	f7fc feb4 	bl	80058c4 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e1bd      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b6a:	4b30      	ldr	r3, [pc, #192]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0f0      	beq.n	8008b58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b76:	4b2d      	ldr	r3, [pc, #180]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	4929      	ldr	r1, [pc, #164]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	600b      	str	r3, [r1, #0]
 8008b8a:	e018      	b.n	8008bbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b8c:	4b27      	ldr	r3, [pc, #156]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a26      	ldr	r2, [pc, #152]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008b92:	f023 0301 	bic.w	r3, r3, #1
 8008b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b98:	f7fc fe94 	bl	80058c4 <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ba0:	f7fc fe90 	bl	80058c4 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e199      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bb2:	4b1e      	ldr	r3, [pc, #120]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1f0      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d038      	beq.n	8008c3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d019      	beq.n	8008c06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bd2:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd6:	4a15      	ldr	r2, [pc, #84]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bde:	f7fc fe71 	bl	80058c4 <HAL_GetTick>
 8008be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008be6:	f7fc fe6d 	bl	80058c4 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e176      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bf8:	4b0c      	ldr	r3, [pc, #48]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0f0      	beq.n	8008be6 <HAL_RCC_OscConfig+0x23a>
 8008c04:	e01a      	b.n	8008c3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c06:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c0a:	4a08      	ldr	r2, [pc, #32]	; (8008c2c <HAL_RCC_OscConfig+0x280>)
 8008c0c:	f023 0301 	bic.w	r3, r3, #1
 8008c10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c12:	f7fc fe57 	bl	80058c4 <HAL_GetTick>
 8008c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c18:	e00a      	b.n	8008c30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c1a:	f7fc fe53 	bl	80058c4 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d903      	bls.n	8008c30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e15c      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
 8008c2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c30:	4b91      	ldr	r3, [pc, #580]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1ee      	bne.n	8008c1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 80a4 	beq.w	8008d92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c4a:	4b8b      	ldr	r3, [pc, #556]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c56:	4b88      	ldr	r3, [pc, #544]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	4a87      	ldr	r2, [pc, #540]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c60:	6413      	str	r3, [r2, #64]	; 0x40
 8008c62:	4b85      	ldr	r3, [pc, #532]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	60bb      	str	r3, [r7, #8]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c72:	4b82      	ldr	r3, [pc, #520]	; (8008e7c <HAL_RCC_OscConfig+0x4d0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d118      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008c7e:	4b7f      	ldr	r3, [pc, #508]	; (8008e7c <HAL_RCC_OscConfig+0x4d0>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a7e      	ldr	r2, [pc, #504]	; (8008e7c <HAL_RCC_OscConfig+0x4d0>)
 8008c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c8a:	f7fc fe1b 	bl	80058c4 <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c92:	f7fc fe17 	bl	80058c4 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b64      	cmp	r3, #100	; 0x64
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e120      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ca4:	4b75      	ldr	r3, [pc, #468]	; (8008e7c <HAL_RCC_OscConfig+0x4d0>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d106      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x31a>
 8008cb8:	4b6f      	ldr	r3, [pc, #444]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbc:	4a6e      	ldr	r2, [pc, #440]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc4:	e02d      	b.n	8008d22 <HAL_RCC_OscConfig+0x376>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10c      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x33c>
 8008cce:	4b6a      	ldr	r3, [pc, #424]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	4a69      	ldr	r2, [pc, #420]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cda:	4b67      	ldr	r3, [pc, #412]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	4a66      	ldr	r2, [pc, #408]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008ce0:	f023 0304 	bic.w	r3, r3, #4
 8008ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce6:	e01c      	b.n	8008d22 <HAL_RCC_OscConfig+0x376>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	d10c      	bne.n	8008d0a <HAL_RCC_OscConfig+0x35e>
 8008cf0:	4b61      	ldr	r3, [pc, #388]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf4:	4a60      	ldr	r2, [pc, #384]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cf6:	f043 0304 	orr.w	r3, r3, #4
 8008cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8008cfc:	4b5e      	ldr	r3, [pc, #376]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d00:	4a5d      	ldr	r2, [pc, #372]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d02:	f043 0301 	orr.w	r3, r3, #1
 8008d06:	6713      	str	r3, [r2, #112]	; 0x70
 8008d08:	e00b      	b.n	8008d22 <HAL_RCC_OscConfig+0x376>
 8008d0a:	4b5b      	ldr	r3, [pc, #364]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	4a5a      	ldr	r2, [pc, #360]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d10:	f023 0301 	bic.w	r3, r3, #1
 8008d14:	6713      	str	r3, [r2, #112]	; 0x70
 8008d16:	4b58      	ldr	r3, [pc, #352]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1a:	4a57      	ldr	r2, [pc, #348]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d1c:	f023 0304 	bic.w	r3, r3, #4
 8008d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d015      	beq.n	8008d56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d2a:	f7fc fdcb 	bl	80058c4 <HAL_GetTick>
 8008d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d30:	e00a      	b.n	8008d48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d32:	f7fc fdc7 	bl	80058c4 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d901      	bls.n	8008d48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e0ce      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d48:	4b4b      	ldr	r3, [pc, #300]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0ee      	beq.n	8008d32 <HAL_RCC_OscConfig+0x386>
 8008d54:	e014      	b.n	8008d80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d56:	f7fc fdb5 	bl	80058c4 <HAL_GetTick>
 8008d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d5c:	e00a      	b.n	8008d74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5e:	f7fc fdb1 	bl	80058c4 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d901      	bls.n	8008d74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e0b8      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d74:	4b40      	ldr	r3, [pc, #256]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1ee      	bne.n	8008d5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d105      	bne.n	8008d92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d86:	4b3c      	ldr	r3, [pc, #240]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	4a3b      	ldr	r2, [pc, #236]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 80a4 	beq.w	8008ee4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d9c:	4b36      	ldr	r3, [pc, #216]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 030c 	and.w	r3, r3, #12
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d06b      	beq.n	8008e80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d149      	bne.n	8008e44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008db0:	4b31      	ldr	r3, [pc, #196]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a30      	ldr	r2, [pc, #192]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dbc:	f7fc fd82 	bl	80058c4 <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc4:	f7fc fd7e 	bl	80058c4 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e087      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dd6:	4b28      	ldr	r3, [pc, #160]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f0      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69da      	ldr	r2, [r3, #28]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	019b      	lsls	r3, r3, #6
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	085b      	lsrs	r3, r3, #1
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	041b      	lsls	r3, r3, #16
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	061b      	lsls	r3, r3, #24
 8008e06:	4313      	orrs	r3, r2
 8008e08:	4a1b      	ldr	r2, [pc, #108]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008e0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e10:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a18      	ldr	r2, [pc, #96]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1c:	f7fc fd52 	bl	80058c4 <HAL_GetTick>
 8008e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e22:	e008      	b.n	8008e36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e24:	f7fc fd4e 	bl	80058c4 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d901      	bls.n	8008e36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e057      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0f0      	beq.n	8008e24 <HAL_RCC_OscConfig+0x478>
 8008e42:	e04f      	b.n	8008ee4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e44:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a0b      	ldr	r2, [pc, #44]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e50:	f7fc fd38 	bl	80058c4 <HAL_GetTick>
 8008e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e56:	e008      	b.n	8008e6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e58:	f7fc fd34 	bl	80058c4 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d901      	bls.n	8008e6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e03d      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <HAL_RCC_OscConfig+0x4cc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1f0      	bne.n	8008e58 <HAL_RCC_OscConfig+0x4ac>
 8008e76:	e035      	b.n	8008ee4 <HAL_RCC_OscConfig+0x538>
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008e80:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <HAL_RCC_OscConfig+0x544>)
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d028      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d121      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d11a      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008eb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d111      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d107      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d001      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e000      	b.n	8008ee6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40023800 	.word	0x40023800

08008ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e0d0      	b.n	80090ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f0c:	4b6a      	ldr	r3, [pc, #424]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d910      	bls.n	8008f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f1a:	4b67      	ldr	r3, [pc, #412]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f023 020f 	bic.w	r2, r3, #15
 8008f22:	4965      	ldr	r1, [pc, #404]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f2a:	4b63      	ldr	r3, [pc, #396]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 030f 	and.w	r3, r3, #15
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d001      	beq.n	8008f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e0b8      	b.n	80090ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d020      	beq.n	8008f8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f54:	4b59      	ldr	r3, [pc, #356]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	4a58      	ldr	r2, [pc, #352]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008f5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f6c:	4b53      	ldr	r3, [pc, #332]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	4a52      	ldr	r2, [pc, #328]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f78:	4b50      	ldr	r3, [pc, #320]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	494d      	ldr	r1, [pc, #308]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d040      	beq.n	8009018 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d107      	bne.n	8008fae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f9e:	4b47      	ldr	r3, [pc, #284]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d115      	bne.n	8008fd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e07f      	b.n	80090ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d107      	bne.n	8008fc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fb6:	4b41      	ldr	r3, [pc, #260]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e073      	b.n	80090ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fc6:	4b3d      	ldr	r3, [pc, #244]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e06b      	b.n	80090ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fd6:	4b39      	ldr	r3, [pc, #228]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f023 0203 	bic.w	r2, r3, #3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	4936      	ldr	r1, [pc, #216]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fe8:	f7fc fc6c 	bl	80058c4 <HAL_GetTick>
 8008fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fee:	e00a      	b.n	8009006 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ff0:	f7fc fc68 	bl	80058c4 <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e053      	b.n	80090ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009006:	4b2d      	ldr	r3, [pc, #180]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f003 020c 	and.w	r2, r3, #12
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	429a      	cmp	r2, r3
 8009016:	d1eb      	bne.n	8008ff0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009018:	4b27      	ldr	r3, [pc, #156]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d210      	bcs.n	8009048 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009026:	4b24      	ldr	r3, [pc, #144]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f023 020f 	bic.w	r2, r3, #15
 800902e:	4922      	ldr	r1, [pc, #136]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	4313      	orrs	r3, r2
 8009034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009036:	4b20      	ldr	r3, [pc, #128]	; (80090b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	429a      	cmp	r2, r3
 8009042:	d001      	beq.n	8009048 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e032      	b.n	80090ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d008      	beq.n	8009066 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009054:	4b19      	ldr	r3, [pc, #100]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	4916      	ldr	r1, [pc, #88]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8009062:	4313      	orrs	r3, r2
 8009064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009072:	4b12      	ldr	r3, [pc, #72]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	490e      	ldr	r1, [pc, #56]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 8009082:	4313      	orrs	r3, r2
 8009084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009086:	f000 f821 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 800908a:	4602      	mov	r2, r0
 800908c:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <HAL_RCC_ClockConfig+0x1c8>)
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	091b      	lsrs	r3, r3, #4
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	490a      	ldr	r1, [pc, #40]	; (80090c0 <HAL_RCC_ClockConfig+0x1cc>)
 8009098:	5ccb      	ldrb	r3, [r1, r3]
 800909a:	fa22 f303 	lsr.w	r3, r2, r3
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <HAL_RCC_ClockConfig+0x1d0>)
 80090a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <HAL_RCC_ClockConfig+0x1d4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fc fadc 	bl	8005664 <HAL_InitTick>

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	40023c00 	.word	0x40023c00
 80090bc:	40023800 	.word	0x40023800
 80090c0:	080d21d4 	.word	0x080d21d4
 80090c4:	20000040 	.word	0x20000040
 80090c8:	20000044 	.word	0x20000044

080090cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090cc:	b5b0      	push	{r4, r5, r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80090d2:	2100      	movs	r1, #0
 80090d4:	6079      	str	r1, [r7, #4]
 80090d6:	2100      	movs	r1, #0
 80090d8:	60f9      	str	r1, [r7, #12]
 80090da:	2100      	movs	r1, #0
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80090de:	2100      	movs	r1, #0
 80090e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090e2:	4952      	ldr	r1, [pc, #328]	; (800922c <HAL_RCC_GetSysClockFreq+0x160>)
 80090e4:	6889      	ldr	r1, [r1, #8]
 80090e6:	f001 010c 	and.w	r1, r1, #12
 80090ea:	2908      	cmp	r1, #8
 80090ec:	d00d      	beq.n	800910a <HAL_RCC_GetSysClockFreq+0x3e>
 80090ee:	2908      	cmp	r1, #8
 80090f0:	f200 8094 	bhi.w	800921c <HAL_RCC_GetSysClockFreq+0x150>
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d002      	beq.n	80090fe <HAL_RCC_GetSysClockFreq+0x32>
 80090f8:	2904      	cmp	r1, #4
 80090fa:	d003      	beq.n	8009104 <HAL_RCC_GetSysClockFreq+0x38>
 80090fc:	e08e      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80090fe:	4b4c      	ldr	r3, [pc, #304]	; (8009230 <HAL_RCC_GetSysClockFreq+0x164>)
 8009100:	60bb      	str	r3, [r7, #8]
      break;
 8009102:	e08e      	b.n	8009222 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009104:	4b4b      	ldr	r3, [pc, #300]	; (8009234 <HAL_RCC_GetSysClockFreq+0x168>)
 8009106:	60bb      	str	r3, [r7, #8]
      break;
 8009108:	e08b      	b.n	8009222 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800910a:	4948      	ldr	r1, [pc, #288]	; (800922c <HAL_RCC_GetSysClockFreq+0x160>)
 800910c:	6849      	ldr	r1, [r1, #4]
 800910e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009112:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009114:	4945      	ldr	r1, [pc, #276]	; (800922c <HAL_RCC_GetSysClockFreq+0x160>)
 8009116:	6849      	ldr	r1, [r1, #4]
 8009118:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800911c:	2900      	cmp	r1, #0
 800911e:	d024      	beq.n	800916a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009120:	4942      	ldr	r1, [pc, #264]	; (800922c <HAL_RCC_GetSysClockFreq+0x160>)
 8009122:	6849      	ldr	r1, [r1, #4]
 8009124:	0989      	lsrs	r1, r1, #6
 8009126:	4608      	mov	r0, r1
 8009128:	f04f 0100 	mov.w	r1, #0
 800912c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009130:	f04f 0500 	mov.w	r5, #0
 8009134:	ea00 0204 	and.w	r2, r0, r4
 8009138:	ea01 0305 	and.w	r3, r1, r5
 800913c:	493d      	ldr	r1, [pc, #244]	; (8009234 <HAL_RCC_GetSysClockFreq+0x168>)
 800913e:	fb01 f003 	mul.w	r0, r1, r3
 8009142:	2100      	movs	r1, #0
 8009144:	fb01 f102 	mul.w	r1, r1, r2
 8009148:	1844      	adds	r4, r0, r1
 800914a:	493a      	ldr	r1, [pc, #232]	; (8009234 <HAL_RCC_GetSysClockFreq+0x168>)
 800914c:	fba2 0101 	umull	r0, r1, r2, r1
 8009150:	1863      	adds	r3, r4, r1
 8009152:	4619      	mov	r1, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	461a      	mov	r2, r3
 8009158:	f04f 0300 	mov.w	r3, #0
 800915c:	f7f7 f8b0 	bl	80002c0 <__aeabi_uldivmod>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4613      	mov	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	e04a      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800916a:	4b30      	ldr	r3, [pc, #192]	; (800922c <HAL_RCC_GetSysClockFreq+0x160>)
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	099b      	lsrs	r3, r3, #6
 8009170:	461a      	mov	r2, r3
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800917a:	f04f 0100 	mov.w	r1, #0
 800917e:	ea02 0400 	and.w	r4, r2, r0
 8009182:	ea03 0501 	and.w	r5, r3, r1
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f04f 0200 	mov.w	r2, #0
 800918e:	f04f 0300 	mov.w	r3, #0
 8009192:	014b      	lsls	r3, r1, #5
 8009194:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009198:	0142      	lsls	r2, r0, #5
 800919a:	4610      	mov	r0, r2
 800919c:	4619      	mov	r1, r3
 800919e:	1b00      	subs	r0, r0, r4
 80091a0:	eb61 0105 	sbc.w	r1, r1, r5
 80091a4:	f04f 0200 	mov.w	r2, #0
 80091a8:	f04f 0300 	mov.w	r3, #0
 80091ac:	018b      	lsls	r3, r1, #6
 80091ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80091b2:	0182      	lsls	r2, r0, #6
 80091b4:	1a12      	subs	r2, r2, r0
 80091b6:	eb63 0301 	sbc.w	r3, r3, r1
 80091ba:	f04f 0000 	mov.w	r0, #0
 80091be:	f04f 0100 	mov.w	r1, #0
 80091c2:	00d9      	lsls	r1, r3, #3
 80091c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091c8:	00d0      	lsls	r0, r2, #3
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	1912      	adds	r2, r2, r4
 80091d0:	eb45 0303 	adc.w	r3, r5, r3
 80091d4:	f04f 0000 	mov.w	r0, #0
 80091d8:	f04f 0100 	mov.w	r1, #0
 80091dc:	0299      	lsls	r1, r3, #10
 80091de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80091e2:	0290      	lsls	r0, r2, #10
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4610      	mov	r0, r2
 80091ea:	4619      	mov	r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f04f 0300 	mov.w	r3, #0
 80091f4:	f7f7 f864 	bl	80002c0 <__aeabi_uldivmod>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4613      	mov	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009200:	4b0a      	ldr	r3, [pc, #40]	; (800922c <HAL_RCC_GetSysClockFreq+0x160>)
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	3301      	adds	r3, #1
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	fbb2 f3f3 	udiv	r3, r2, r3
 8009218:	60bb      	str	r3, [r7, #8]
      break;
 800921a:	e002      	b.n	8009222 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <HAL_RCC_GetSysClockFreq+0x164>)
 800921e:	60bb      	str	r3, [r7, #8]
      break;
 8009220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009222:	68bb      	ldr	r3, [r7, #8]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bdb0      	pop	{r4, r5, r7, pc}
 800922c:	40023800 	.word	0x40023800
 8009230:	00f42400 	.word	0x00f42400
 8009234:	017d7840 	.word	0x017d7840

08009238 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009238:	b480      	push	{r7}
 800923a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800923c:	4b03      	ldr	r3, [pc, #12]	; (800924c <HAL_RCC_GetHCLKFreq+0x14>)
 800923e:	681b      	ldr	r3, [r3, #0]
}
 8009240:	4618      	mov	r0, r3
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	20000040 	.word	0x20000040

08009250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009254:	f7ff fff0 	bl	8009238 <HAL_RCC_GetHCLKFreq>
 8009258:	4602      	mov	r2, r0
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	0a9b      	lsrs	r3, r3, #10
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	4903      	ldr	r1, [pc, #12]	; (8009274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009266:	5ccb      	ldrb	r3, [r1, r3]
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800926c:	4618      	mov	r0, r3
 800926e:	bd80      	pop	{r7, pc}
 8009270:	40023800 	.word	0x40023800
 8009274:	080d21e4 	.word	0x080d21e4

08009278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800927c:	f7ff ffdc 	bl	8009238 <HAL_RCC_GetHCLKFreq>
 8009280:	4602      	mov	r2, r0
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	0b5b      	lsrs	r3, r3, #13
 8009288:	f003 0307 	and.w	r3, r3, #7
 800928c:	4903      	ldr	r1, [pc, #12]	; (800929c <HAL_RCC_GetPCLK2Freq+0x24>)
 800928e:	5ccb      	ldrb	r3, [r1, r3]
 8009290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009294:	4618      	mov	r0, r3
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40023800 	.word	0x40023800
 800929c:	080d21e4 	.word	0x080d21e4

080092a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	220f      	movs	r2, #15
 80092ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80092b0:	4b12      	ldr	r3, [pc, #72]	; (80092fc <HAL_RCC_GetClockConfig+0x5c>)
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 0203 	and.w	r2, r3, #3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80092bc:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <HAL_RCC_GetClockConfig+0x5c>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <HAL_RCC_GetClockConfig+0x5c>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80092d4:	4b09      	ldr	r3, [pc, #36]	; (80092fc <HAL_RCC_GetClockConfig+0x5c>)
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	08db      	lsrs	r3, r3, #3
 80092da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80092e2:	4b07      	ldr	r3, [pc, #28]	; (8009300 <HAL_RCC_GetClockConfig+0x60>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 020f 	and.w	r2, r3, #15
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	601a      	str	r2, [r3, #0]
}
 80092ee:	bf00      	nop
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40023800 	.word	0x40023800
 8009300:	40023c00 	.word	0x40023c00

08009304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d012      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800932c:	4b69      	ldr	r3, [pc, #420]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	4a68      	ldr	r2, [pc, #416]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009332:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009336:	6093      	str	r3, [r2, #8]
 8009338:	4b66      	ldr	r3, [pc, #408]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009340:	4964      	ldr	r1, [pc, #400]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009342:	4313      	orrs	r3, r2
 8009344:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800934e:	2301      	movs	r3, #1
 8009350:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d017      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800935e:	4b5d      	ldr	r3, [pc, #372]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936c:	4959      	ldr	r1, [pc, #356]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936e:	4313      	orrs	r3, r2
 8009370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800937c:	d101      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800937e:	2301      	movs	r3, #1
 8009380:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800938a:	2301      	movs	r3, #1
 800938c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d017      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800939a:	4b4e      	ldr	r3, [pc, #312]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800939c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	494a      	ldr	r1, [pc, #296]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093b8:	d101      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80093ba:	2301      	movs	r3, #1
 80093bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80093c6:	2301      	movs	r3, #1
 80093c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80093d6:	2301      	movs	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 808b 	beq.w	80094fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80093e8:	4b3a      	ldr	r3, [pc, #232]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ec:	4a39      	ldr	r2, [pc, #228]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f2:	6413      	str	r3, [r2, #64]	; 0x40
 80093f4:	4b37      	ldr	r3, [pc, #220]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093fc:	60bb      	str	r3, [r7, #8]
 80093fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009400:	4b35      	ldr	r3, [pc, #212]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a34      	ldr	r2, [pc, #208]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800940a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940c:	f7fc fa5a 	bl	80058c4 <HAL_GetTick>
 8009410:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009412:	e008      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009414:	f7fc fa56 	bl	80058c4 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b64      	cmp	r3, #100	; 0x64
 8009420:	d901      	bls.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e357      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009426:	4b2c      	ldr	r3, [pc, #176]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f0      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009432:	4b28      	ldr	r3, [pc, #160]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800943a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d035      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	429a      	cmp	r2, r3
 800944e:	d02e      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009450:	4b20      	ldr	r3, [pc, #128]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009458:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800945a:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800945c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945e:	4a1d      	ldr	r2, [pc, #116]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009464:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009466:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946a:	4a1a      	ldr	r2, [pc, #104]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800946c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009470:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009472:	4a18      	ldr	r2, [pc, #96]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009478:	4b16      	ldr	r3, [pc, #88]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b01      	cmp	r3, #1
 8009482:	d114      	bne.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009484:	f7fc fa1e 	bl	80058c4 <HAL_GetTick>
 8009488:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800948a:	e00a      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800948c:	f7fc fa1a 	bl	80058c4 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	f241 3288 	movw	r2, #5000	; 0x1388
 800949a:	4293      	cmp	r3, r2
 800949c:	d901      	bls.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e319      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094a2:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0ee      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ba:	d111      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80094bc:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80094ca:	400b      	ands	r3, r1
 80094cc:	4901      	ldr	r1, [pc, #4]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	608b      	str	r3, [r1, #8]
 80094d2:	e00b      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80094d4:	40023800 	.word	0x40023800
 80094d8:	40007000 	.word	0x40007000
 80094dc:	0ffffcff 	.word	0x0ffffcff
 80094e0:	4bb1      	ldr	r3, [pc, #708]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	4ab0      	ldr	r2, [pc, #704]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80094ea:	6093      	str	r3, [r2, #8]
 80094ec:	4bae      	ldr	r3, [pc, #696]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f8:	49ab      	ldr	r1, [pc, #684]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b00      	cmp	r3, #0
 8009508:	d010      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800950a:	4ba7      	ldr	r3, [pc, #668]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800950c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009510:	4aa5      	ldr	r2, [pc, #660]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009516:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800951a:	4ba3      	ldr	r3, [pc, #652]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800951c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	49a0      	ldr	r1, [pc, #640]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009526:	4313      	orrs	r3, r2
 8009528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00a      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009538:	4b9b      	ldr	r3, [pc, #620]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800953a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009546:	4998      	ldr	r1, [pc, #608]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009548:	4313      	orrs	r3, r2
 800954a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800955a:	4b93      	ldr	r3, [pc, #588]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800955c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009568:	498f      	ldr	r1, [pc, #572]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800956a:	4313      	orrs	r3, r2
 800956c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800957c:	4b8a      	ldr	r3, [pc, #552]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800957e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800958a:	4987      	ldr	r1, [pc, #540]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800959e:	4b82      	ldr	r3, [pc, #520]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ac:	497e      	ldr	r1, [pc, #504]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095c0:	4b79      	ldr	r3, [pc, #484]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c6:	f023 0203 	bic.w	r2, r3, #3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ce:	4976      	ldr	r1, [pc, #472]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80095e2:	4b71      	ldr	r3, [pc, #452]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e8:	f023 020c 	bic.w	r2, r3, #12
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f0:	496d      	ldr	r1, [pc, #436]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00a      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009604:	4b68      	ldr	r3, [pc, #416]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009612:	4965      	ldr	r1, [pc, #404]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009614:	4313      	orrs	r3, r2
 8009616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009626:	4b60      	ldr	r3, [pc, #384]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009634:	495c      	ldr	r1, [pc, #368]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009636:	4313      	orrs	r3, r2
 8009638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00a      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009648:	4b57      	ldr	r3, [pc, #348]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800964a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800964e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009656:	4954      	ldr	r1, [pc, #336]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009658:	4313      	orrs	r3, r2
 800965a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800966a:	4b4f      	ldr	r3, [pc, #316]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800966c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009670:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009678:	494b      	ldr	r1, [pc, #300]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800967a:	4313      	orrs	r3, r2
 800967c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800968c:	4b46      	ldr	r3, [pc, #280]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800968e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009692:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800969a:	4943      	ldr	r1, [pc, #268]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800969c:	4313      	orrs	r3, r2
 800969e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80096ae:	4b3e      	ldr	r3, [pc, #248]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096bc:	493a      	ldr	r1, [pc, #232]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80096d0:	4b35      	ldr	r3, [pc, #212]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096de:	4932      	ldr	r1, [pc, #200]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d011      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80096f2:	4b2d      	ldr	r3, [pc, #180]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009700:	4929      	ldr	r1, [pc, #164]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009702:	4313      	orrs	r3, r2
 8009704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009710:	d101      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009712:	2301      	movs	r3, #1
 8009714:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0308 	and.w	r3, r3, #8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009722:	2301      	movs	r3, #1
 8009724:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009732:	4b1d      	ldr	r3, [pc, #116]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009738:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009740:	4919      	ldr	r1, [pc, #100]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009754:	4b14      	ldr	r3, [pc, #80]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800975a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009764:	4910      	ldr	r1, [pc, #64]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009766:	4313      	orrs	r3, r2
 8009768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d006      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 80d9 	beq.w	8009932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009780:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a08      	ldr	r2, [pc, #32]	; (80097a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009786:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800978a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800978c:	f7fc f89a 	bl	80058c4 <HAL_GetTick>
 8009790:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009792:	e00b      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009794:	f7fc f896 	bl	80058c4 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b64      	cmp	r3, #100	; 0x64
 80097a0:	d904      	bls.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e197      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80097a6:	bf00      	nop
 80097a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80097ac:	4b6c      	ldr	r3, [pc, #432]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1ed      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d021      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d11d      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80097cc:	4b64      	ldr	r3, [pc, #400]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097d2:	0c1b      	lsrs	r3, r3, #16
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80097da:	4b61      	ldr	r3, [pc, #388]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e0:	0e1b      	lsrs	r3, r3, #24
 80097e2:	f003 030f 	and.w	r3, r3, #15
 80097e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	019a      	lsls	r2, r3, #6
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	041b      	lsls	r3, r3, #16
 80097f2:	431a      	orrs	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	061b      	lsls	r3, r3, #24
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	071b      	lsls	r3, r3, #28
 8009800:	4957      	ldr	r1, [pc, #348]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009802:	4313      	orrs	r3, r2
 8009804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800981c:	d00a      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009826:	2b00      	cmp	r3, #0
 8009828:	d02e      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009832:	d129      	bne.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009834:	4b4a      	ldr	r3, [pc, #296]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800983a:	0c1b      	lsrs	r3, r3, #16
 800983c:	f003 0303 	and.w	r3, r3, #3
 8009840:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009842:	4b47      	ldr	r3, [pc, #284]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009848:	0f1b      	lsrs	r3, r3, #28
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	019a      	lsls	r2, r3, #6
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	041b      	lsls	r3, r3, #16
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	061b      	lsls	r3, r3, #24
 8009862:	431a      	orrs	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	071b      	lsls	r3, r3, #28
 8009868:	493d      	ldr	r1, [pc, #244]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800986a:	4313      	orrs	r3, r2
 800986c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009870:	4b3b      	ldr	r3, [pc, #236]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009876:	f023 021f 	bic.w	r2, r3, #31
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	3b01      	subs	r3, #1
 8009880:	4937      	ldr	r1, [pc, #220]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009882:	4313      	orrs	r3, r2
 8009884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d01d      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009894:	4b32      	ldr	r3, [pc, #200]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800989a:	0e1b      	lsrs	r3, r3, #24
 800989c:	f003 030f 	and.w	r3, r3, #15
 80098a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80098a2:	4b2f      	ldr	r3, [pc, #188]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098a8:	0f1b      	lsrs	r3, r3, #28
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	019a      	lsls	r2, r3, #6
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	041b      	lsls	r3, r3, #16
 80098bc:	431a      	orrs	r2, r3
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	061b      	lsls	r3, r3, #24
 80098c2:	431a      	orrs	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	071b      	lsls	r3, r3, #28
 80098c8:	4925      	ldr	r1, [pc, #148]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d011      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	019a      	lsls	r2, r3, #6
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	041b      	lsls	r3, r3, #16
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	061b      	lsls	r3, r3, #24
 80098f0:	431a      	orrs	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	071b      	lsls	r3, r3, #28
 80098f8:	4919      	ldr	r1, [pc, #100]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009900:	4b17      	ldr	r3, [pc, #92]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a16      	ldr	r2, [pc, #88]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800990a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800990c:	f7fb ffda 	bl	80058c4 <HAL_GetTick>
 8009910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009912:	e008      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009914:	f7fb ffd6 	bl	80058c4 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b64      	cmp	r3, #100	; 0x64
 8009920:	d901      	bls.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e0d7      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009926:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0f0      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b01      	cmp	r3, #1
 8009936:	f040 80cd 	bne.w	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800993a:	4b09      	ldr	r3, [pc, #36]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a08      	ldr	r2, [pc, #32]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009946:	f7fb ffbd 	bl	80058c4 <HAL_GetTick>
 800994a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800994c:	e00a      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800994e:	f7fb ffb9 	bl	80058c4 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b64      	cmp	r3, #100	; 0x64
 800995a:	d903      	bls.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e0ba      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009960:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009964:	4b5e      	ldr	r3, [pc, #376]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800996c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009970:	d0ed      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d009      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800998e:	2b00      	cmp	r3, #0
 8009990:	d02e      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d12a      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800999a:	4b51      	ldr	r3, [pc, #324]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800999c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a0:	0c1b      	lsrs	r3, r3, #16
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80099a8:	4b4d      	ldr	r3, [pc, #308]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ae:	0f1b      	lsrs	r3, r3, #28
 80099b0:	f003 0307 	and.w	r3, r3, #7
 80099b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	019a      	lsls	r2, r3, #6
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	061b      	lsls	r3, r3, #24
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	071b      	lsls	r3, r3, #28
 80099ce:	4944      	ldr	r1, [pc, #272]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80099d6:	4b42      	ldr	r3, [pc, #264]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e4:	3b01      	subs	r3, #1
 80099e6:	021b      	lsls	r3, r3, #8
 80099e8:	493d      	ldr	r1, [pc, #244]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d022      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a04:	d11d      	bne.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a06:	4b36      	ldr	r3, [pc, #216]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0c:	0e1b      	lsrs	r3, r3, #24
 8009a0e:	f003 030f 	and.w	r3, r3, #15
 8009a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009a14:	4b32      	ldr	r3, [pc, #200]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1a:	0f1b      	lsrs	r3, r3, #28
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	019a      	lsls	r2, r3, #6
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	041b      	lsls	r3, r3, #16
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	061b      	lsls	r3, r3, #24
 8009a34:	431a      	orrs	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	071b      	lsls	r3, r3, #28
 8009a3a:	4929      	ldr	r1, [pc, #164]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d028      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a4e:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a54:	0e1b      	lsrs	r3, r3, #24
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009a5c:	4b20      	ldr	r3, [pc, #128]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	019a      	lsls	r2, r3, #6
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	041b      	lsls	r3, r3, #16
 8009a74:	431a      	orrs	r2, r3
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	061b      	lsls	r3, r3, #24
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	071b      	lsls	r3, r3, #28
 8009a82:	4917      	ldr	r1, [pc, #92]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009a8a:	4b15      	ldr	r3, [pc, #84]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	4911      	ldr	r1, [pc, #68]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009aa0:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a0e      	ldr	r2, [pc, #56]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aac:	f7fb ff0a 	bl	80058c4 <HAL_GetTick>
 8009ab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ab2:	e008      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ab4:	f7fb ff06 	bl	80058c4 <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	2b64      	cmp	r3, #100	; 0x64
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e007      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ac6:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ad2:	d1ef      	bne.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	40023800 	.word	0x40023800

08009ae4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e01c      	b.n	8009b30 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	795b      	ldrb	r3, [r3, #5]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d105      	bne.n	8009b0c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7fb fac0 	bl	800508c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f042 0204 	orr.w	r2, r2, #4
 8009b20:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	791b      	ldrb	r3, [r3, #4]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d101      	bne.n	8009b52 <HAL_RNG_GenerateRandomNumber+0x1a>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e044      	b.n	8009bdc <HAL_RNG_GenerateRandomNumber+0xa4>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	795b      	ldrb	r3, [r3, #5]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d133      	bne.n	8009bca <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2202      	movs	r2, #2
 8009b66:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b68:	f7fb feac 	bl	80058c4 <HAL_GetTick>
 8009b6c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009b6e:	e018      	b.n	8009ba2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009b70:	f7fb fea8 	bl	80058c4 <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d911      	bls.n	8009ba2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d00a      	beq.n	8009ba2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e01c      	b.n	8009bdc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d1df      	bne.n	8009b70 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	715a      	strb	r2, [r3, #5]
 8009bc8:	e004      	b.n	8009bd4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2204      	movs	r2, #4
 8009bce:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	711a      	strb	r2, [r3, #4]

  return status;
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e081      	b.n	8009cfa <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	7f5b      	ldrb	r3, [r3, #29]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d105      	bne.n	8009c0c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fb fa60 	bl	80050cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	22ca      	movs	r2, #202	; 0xca
 8009c18:	625a      	str	r2, [r3, #36]	; 0x24
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2253      	movs	r2, #83	; 0x53
 8009c20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fbc4 	bl	800a3b0 <RTC_EnterInitMode>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	22ff      	movs	r2, #255	; 0xff
 8009c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2204      	movs	r2, #4
 8009c3a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e05c      	b.n	8009cfa <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6899      	ldr	r1, [r3, #8]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	4b2e      	ldr	r3, [pc, #184]	; (8009d04 <HAL_RTC_Init+0x120>)
 8009c4c:	400b      	ands	r3, r1
 8009c4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6899      	ldr	r1, [r3, #8]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	431a      	orrs	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	68d2      	ldr	r2, [r2, #12]
 8009c76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6919      	ldr	r1, [r3, #16]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	041a      	lsls	r2, r3, #16
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c9a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fb58 	bl	800a360 <HAL_RTC_WaitForSynchro>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d008      	beq.n	8009cc8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	22ff      	movs	r2, #255	; 0xff
 8009cbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2204      	movs	r2, #4
 8009cc2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e018      	b.n	8009cfa <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f022 0208 	bic.w	r2, r2, #8
 8009cd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	22ff      	movs	r2, #255	; 0xff
 8009cf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
  }
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	ff8fffbf 	.word	0xff8fffbf

08009d08 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d08:	b590      	push	{r4, r7, lr}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	7f1b      	ldrb	r3, [r3, #28]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_RTC_SetTime+0x1c>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e0a8      	b.n	8009e76 <HAL_RTC_SetTime+0x16e>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2201      	movs	r2, #1
 8009d28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d126      	bne.n	8009d84 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2200      	movs	r2, #0
 8009d48:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fb5a 	bl	800a408 <RTC_ByteToBcd2>
 8009d54:	4603      	mov	r3, r0
 8009d56:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	785b      	ldrb	r3, [r3, #1]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fb53 	bl	800a408 <RTC_ByteToBcd2>
 8009d62:	4603      	mov	r3, r0
 8009d64:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009d66:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	789b      	ldrb	r3, [r3, #2]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fb4b 	bl	800a408 <RTC_ByteToBcd2>
 8009d72:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009d74:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	7b1b      	ldrb	r3, [r3, #12]
 8009d7c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e018      	b.n	8009db6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2200      	movs	r2, #0
 8009d96:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009da4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009daa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	7b1b      	ldrb	r3, [r3, #12]
 8009db0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009db2:	4313      	orrs	r3, r2
 8009db4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	22ca      	movs	r2, #202	; 0xca
 8009dbc:	625a      	str	r2, [r3, #36]	; 0x24
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2253      	movs	r2, #83	; 0x53
 8009dc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 faf2 	bl	800a3b0 <RTC_EnterInitMode>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00b      	beq.n	8009dea <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	22ff      	movs	r2, #255	; 0xff
 8009dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2204      	movs	r2, #4
 8009dde:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e045      	b.n	8009e76 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	6979      	ldr	r1, [r7, #20]
 8009df0:	4b23      	ldr	r3, [pc, #140]	; (8009e80 <HAL_RTC_SetTime+0x178>)
 8009df2:	400b      	ands	r3, r1
 8009df4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e04:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6899      	ldr	r1, [r3, #8]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	431a      	orrs	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e2c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d111      	bne.n	8009e60 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 fa8f 	bl	800a360 <HAL_RTC_WaitForSynchro>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00b      	beq.n	8009e60 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	22ff      	movs	r2, #255	; 0xff
 8009e4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2204      	movs	r2, #4
 8009e54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e00a      	b.n	8009e76 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	22ff      	movs	r2, #255	; 0xff
 8009e66:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009e74:	2300      	movs	r3, #0
  }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	371c      	adds	r7, #28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd90      	pop	{r4, r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	007f7f7f 	.word	0x007f7f7f

08009e84 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4b22      	ldr	r3, [pc, #136]	; (8009f3c <HAL_RTC_GetTime+0xb8>)
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	0c1b      	lsrs	r3, r3, #16
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	0c1b      	lsrs	r3, r3, #16
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d11a      	bne.n	8009f32 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 fa9f 	bl	800a444 <RTC_Bcd2ToByte>
 8009f06:	4603      	mov	r3, r0
 8009f08:	461a      	mov	r2, r3
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fa96 	bl	800a444 <RTC_Bcd2ToByte>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	789b      	ldrb	r3, [r3, #2]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fa8d 	bl	800a444 <RTC_Bcd2ToByte>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	007f7f7f 	.word	0x007f7f7f

08009f40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f40:	b590      	push	{r4, r7, lr}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	7f1b      	ldrb	r3, [r3, #28]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d101      	bne.n	8009f5c <HAL_RTC_SetDate+0x1c>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	e092      	b.n	800a082 <HAL_RTC_SetDate+0x142>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2202      	movs	r2, #2
 8009f66:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10e      	bne.n	8009f8c <HAL_RTC_SetDate+0x4c>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	f003 0310 	and.w	r3, r3, #16
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d008      	beq.n	8009f8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	f023 0310 	bic.w	r3, r3, #16
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	330a      	adds	r3, #10
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d11c      	bne.n	8009fcc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	78db      	ldrb	r3, [r3, #3]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 fa36 	bl	800a408 <RTC_ByteToBcd2>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	785b      	ldrb	r3, [r3, #1]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 fa2f 	bl	800a408 <RTC_ByteToBcd2>
 8009faa:	4603      	mov	r3, r0
 8009fac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009fae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	789b      	ldrb	r3, [r3, #2]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fa27 	bl	800a408 <RTC_ByteToBcd2>
 8009fba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009fbc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	e00e      	b.n	8009fea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	78db      	ldrb	r3, [r3, #3]
 8009fd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009fd8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009fde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	22ca      	movs	r2, #202	; 0xca
 8009ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2253      	movs	r2, #83	; 0x53
 8009ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 f9d8 	bl	800a3b0 <RTC_EnterInitMode>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00b      	beq.n	800a01e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	22ff      	movs	r2, #255	; 0xff
 800a00c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2204      	movs	r2, #4
 800a012:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e031      	b.n	800a082 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	6979      	ldr	r1, [r7, #20]
 800a024:	4b19      	ldr	r3, [pc, #100]	; (800a08c <HAL_RTC_SetDate+0x14c>)
 800a026:	400b      	ands	r3, r1
 800a028:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a038:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b00      	cmp	r3, #0
 800a046:	d111      	bne.n	800a06c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f989 	bl	800a360 <HAL_RTC_WaitForSynchro>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	22ff      	movs	r2, #255	; 0xff
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2204      	movs	r2, #4
 800a060:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e00a      	b.n	800a082 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	22ff      	movs	r2, #255	; 0xff
 800a072:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2201      	movs	r2, #1
 800a078:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a080:	2300      	movs	r3, #0
  }
}
 800a082:	4618      	mov	r0, r3
 800a084:	371c      	adds	r7, #28
 800a086:	46bd      	mov	sp, r7
 800a088:	bd90      	pop	{r4, r7, pc}
 800a08a:	bf00      	nop
 800a08c:	00ffff3f 	.word	0x00ffff3f

0800a090 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	4b21      	ldr	r3, [pc, #132]	; (800a12c <HAL_RTC_GetDate+0x9c>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	0c1b      	lsrs	r3, r3, #16
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	0a1b      	lsrs	r3, r3, #8
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 031f 	and.w	r3, r3, #31
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	0b5b      	lsrs	r3, r3, #13
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d11a      	bne.n	800a120 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	78db      	ldrb	r3, [r3, #3]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f9a8 	bl	800a444 <RTC_Bcd2ToByte>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f99f 	bl	800a444 <RTC_Bcd2ToByte>
 800a106:	4603      	mov	r3, r0
 800a108:	461a      	mov	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	789b      	ldrb	r3, [r3, #2]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f996 	bl	800a444 <RTC_Bcd2ToByte>
 800a118:	4603      	mov	r3, r0
 800a11a:	461a      	mov	r2, r3
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	00ffff3f 	.word	0x00ffff3f

0800a130 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a130:	b590      	push	{r4, r7, lr}
 800a132:	b089      	sub	sp, #36	; 0x24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	61fb      	str	r3, [r7, #28]
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	7f1b      	ldrb	r3, [r3, #28]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d101      	bne.n	800a154 <HAL_RTC_SetAlarm+0x24>
 800a150:	2302      	movs	r3, #2
 800a152:	e101      	b.n	800a358 <HAL_RTC_SetAlarm+0x228>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2201      	movs	r2, #1
 800a158:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2202      	movs	r2, #2
 800a15e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d137      	bne.n	800a1d6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a170:	2b00      	cmp	r3, #0
 800a172:	d102      	bne.n	800a17a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2200      	movs	r2, #0
 800a178:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f942 	bl	800a408 <RTC_ByteToBcd2>
 800a184:	4603      	mov	r3, r0
 800a186:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f93b 	bl	800a408 <RTC_ByteToBcd2>
 800a192:	4603      	mov	r3, r0
 800a194:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a196:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	789b      	ldrb	r3, [r3, #2]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 f933 	bl	800a408 <RTC_ByteToBcd2>
 800a1a2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a1a4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	7b1b      	ldrb	r3, [r3, #12]
 800a1ac:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a1ae:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f925 	bl	800a408 <RTC_ByteToBcd2>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a1c2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a1ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	61fb      	str	r3, [r7, #28]
 800a1d4:	e023      	b.n	800a21e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d102      	bne.n	800a1ea <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a1f6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a1fc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	7b1b      	ldrb	r3, [r3, #12]
 800a202:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a204:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a20c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a20e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a214:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a21a:	4313      	orrs	r3, r2
 800a21c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	4313      	orrs	r3, r2
 800a228:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	22ca      	movs	r2, #202	; 0xca
 800a230:	625a      	str	r2, [r3, #36]	; 0x24
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2253      	movs	r2, #83	; 0x53
 800a238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a242:	d13f      	bne.n	800a2c4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a252:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a262:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a264:	f7fb fb2e 	bl	80058c4 <HAL_GetTick>
 800a268:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a26a:	e013      	b.n	800a294 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a26c:	f7fb fb2a 	bl	80058c4 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a27a:	d90b      	bls.n	800a294 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	22ff      	movs	r2, #255	; 0xff
 800a282:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2203      	movs	r2, #3
 800a288:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e061      	b.n	800a358 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0e4      	beq.n	800a26c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2c0:	609a      	str	r2, [r3, #8]
 800a2c2:	e03e      	b.n	800a342 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a2d2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2e2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a2e4:	f7fb faee 	bl	80058c4 <HAL_GetTick>
 800a2e8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a2ea:	e013      	b.n	800a314 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a2ec:	f7fb faea 	bl	80058c4 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2fa:	d90b      	bls.n	800a314 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	22ff      	movs	r2, #255	; 0xff
 800a302:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2203      	movs	r2, #3
 800a308:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e021      	b.n	800a358 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0e4      	beq.n	800a2ec <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69fa      	ldr	r2, [r7, #28]
 800a328:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a340:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	22ff      	movs	r2, #255	; 0xff
 800a348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3724      	adds	r7, #36	; 0x24
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd90      	pop	{r4, r7, pc}

0800a360 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68da      	ldr	r2, [r3, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a37a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a37c:	f7fb faa2 	bl	80058c4 <HAL_GetTick>
 800a380:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a382:	e009      	b.n	800a398 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a384:	f7fb fa9e 	bl	80058c4 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a392:	d901      	bls.n	800a398 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e007      	b.n	800a3a8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0ee      	beq.n	800a384 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d119      	bne.n	800a3fe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3d4:	f7fb fa76 	bl	80058c4 <HAL_GetTick>
 800a3d8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a3da:	e009      	b.n	800a3f0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a3dc:	f7fb fa72 	bl	80058c4 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3ea:	d901      	bls.n	800a3f0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e007      	b.n	800a400 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0ee      	beq.n	800a3dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a416:	e005      	b.n	800a424 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	3b0a      	subs	r3, #10
 800a422:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	2b09      	cmp	r3, #9
 800a428:	d8f6      	bhi.n	800a418 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	b2da      	uxtb	r2, r3
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	4313      	orrs	r3, r2
 800a436:	b2db      	uxtb	r3, r3
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800a44e:	2300      	movs	r3, #0
 800a450:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	091b      	lsrs	r3, r3, #4
 800a456:	b2db      	uxtb	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	f003 030f 	and.w	r3, r3, #15
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	4413      	add	r3, r2
 800a472:	b2db      	uxtb	r3, r3
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	7f1b      	ldrb	r3, [r3, #28]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d101      	bne.n	800a49c <HAL_RTCEx_SetTimeStamp+0x1c>
 800a498:	2302      	movs	r3, #2
 800a49a:	e03e      	b.n	800a51a <HAL_RTCEx_SetTimeStamp+0x9a>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689a      	ldr	r2, [r3, #8]
 800a4ae:	4b1e      	ldr	r3, [pc, #120]	; (800a528 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	22ca      	movs	r2, #202	; 0xca
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2253      	movs	r2, #83	; 0x53
 800a4ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0206 	bic.w	r2, r2, #6
 800a4da:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	689a      	ldr	r2, [r3, #8]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a502:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	22ff      	movs	r2, #255	; 0xff
 800a50a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	fffff7f7 	.word	0xfffff7f7

0800a52c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e025      	b.n	800a58c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7fb f87b 	bl	8005650 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2202      	movs	r2, #2
 800a55e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3304      	adds	r3, #4
 800a56a:	4619      	mov	r1, r3
 800a56c:	4610      	mov	r0, r2
 800a56e:	f001 fb8f 	bl	800bc90 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	461a      	mov	r2, r3
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	f001 fbe3 	bl	800bd48 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a5a6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d101      	bne.n	800a5b2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e021      	b.n	800a5f6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a5b2:	7dfb      	ldrb	r3, [r7, #23]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d002      	beq.n	800a5be <HAL_SDRAM_SendCommand+0x2a>
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ba:	2b05      	cmp	r3, #5
 800a5bc:	d118      	bne.n	800a5f0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f001 fc24 	bl	800be1c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d104      	bne.n	800a5e6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2205      	movs	r2, #5
 800a5e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a5e4:	e006      	b.n	800a5f4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a5ee:	e001      	b.n	800a5f4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b02      	cmp	r3, #2
 800a612:	d101      	bne.n	800a618 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a614:	2302      	movs	r3, #2
 800a616:	e016      	b.n	800a646 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	d10f      	bne.n	800a644 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	4618      	mov	r0, r3
 800a634:	f001 fc16 	bl	800be64 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	e000      	b.n	800a646 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e09d      	b.n	800a79c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	2b00      	cmp	r3, #0
 800a666:	d108      	bne.n	800a67a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a670:	d009      	beq.n	800a686 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	61da      	str	r2, [r3, #28]
 800a678:	e005      	b.n	800a686 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d106      	bne.n	800a6a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7fa fd41 	bl	8005128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6bc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6c6:	d902      	bls.n	800a6ce <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e002      	b.n	800a6d4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a6ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a6dc:	d007      	beq.n	800a6ee <HAL_SPI_Init+0xa0>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6e6:	d002      	beq.n	800a6ee <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6fe:	431a      	orrs	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	431a      	orrs	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a71c:	431a      	orrs	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a726:	431a      	orrs	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a730:	ea42 0103 	orr.w	r1, r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	430a      	orrs	r2, r1
 800a742:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	0c1b      	lsrs	r3, r3, #16
 800a74a:	f003 0204 	and.w	r2, r3, #4
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	f003 0310 	and.w	r3, r3, #16
 800a756:	431a      	orrs	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75c:	f003 0308 	and.w	r3, r3, #8
 800a760:	431a      	orrs	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a76a:	ea42 0103 	orr.w	r1, r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	69da      	ldr	r2, [r3, #28]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a78a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e049      	b.n	800a84a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7fa fd0e 	bl	80051ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f000 fac0 	bl	800ad68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b01      	cmp	r3, #1
 800a866:	d001      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e054      	b.n	800a916 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2202      	movs	r2, #2
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a26      	ldr	r2, [pc, #152]	; (800a924 <HAL_TIM_Base_Start_IT+0xd0>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d022      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x80>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a896:	d01d      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x80>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a22      	ldr	r2, [pc, #136]	; (800a928 <HAL_TIM_Base_Start_IT+0xd4>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d018      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x80>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a21      	ldr	r2, [pc, #132]	; (800a92c <HAL_TIM_Base_Start_IT+0xd8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d013      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x80>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a1f      	ldr	r2, [pc, #124]	; (800a930 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d00e      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x80>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a1e      	ldr	r2, [pc, #120]	; (800a934 <HAL_TIM_Base_Start_IT+0xe0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d009      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x80>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a1c      	ldr	r2, [pc, #112]	; (800a938 <HAL_TIM_Base_Start_IT+0xe4>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d004      	beq.n	800a8d4 <HAL_TIM_Base_Start_IT+0x80>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a1b      	ldr	r2, [pc, #108]	; (800a93c <HAL_TIM_Base_Start_IT+0xe8>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d115      	bne.n	800a900 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689a      	ldr	r2, [r3, #8]
 800a8da:	4b19      	ldr	r3, [pc, #100]	; (800a940 <HAL_TIM_Base_Start_IT+0xec>)
 800a8dc:	4013      	ands	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b06      	cmp	r3, #6
 800a8e4:	d015      	beq.n	800a912 <HAL_TIM_Base_Start_IT+0xbe>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ec:	d011      	beq.n	800a912 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f042 0201 	orr.w	r2, r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8fe:	e008      	b.n	800a912 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0201 	orr.w	r2, r2, #1
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	e000      	b.n	800a914 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a912:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	40010000 	.word	0x40010000
 800a928:	40000400 	.word	0x40000400
 800a92c:	40000800 	.word	0x40000800
 800a930:	40000c00 	.word	0x40000c00
 800a934:	40010400 	.word	0x40010400
 800a938:	40014000 	.word	0x40014000
 800a93c:	40001800 	.word	0x40001800
 800a940:	00010007 	.word	0x00010007

0800a944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b02      	cmp	r3, #2
 800a958:	d122      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	2b02      	cmp	r3, #2
 800a966:	d11b      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f06f 0202 	mvn.w	r2, #2
 800a970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f9d0 	bl	800ad2c <HAL_TIM_IC_CaptureCallback>
 800a98c:	e005      	b.n	800a99a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f9c2 	bl	800ad18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f9d3 	bl	800ad40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	d122      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	d11b      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f06f 0204 	mvn.w	r2, #4
 800a9c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f9a6 	bl	800ad2c <HAL_TIM_IC_CaptureCallback>
 800a9e0:	e005      	b.n	800a9ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f998 	bl	800ad18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f9a9 	bl	800ad40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	2b08      	cmp	r3, #8
 800aa00:	d122      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0308 	and.w	r3, r3, #8
 800aa0c:	2b08      	cmp	r3, #8
 800aa0e:	d11b      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f06f 0208 	mvn.w	r2, #8
 800aa18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	f003 0303 	and.w	r3, r3, #3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f97c 	bl	800ad2c <HAL_TIM_IC_CaptureCallback>
 800aa34:	e005      	b.n	800aa42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f96e 	bl	800ad18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f97f 	bl	800ad40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	f003 0310 	and.w	r3, r3, #16
 800aa52:	2b10      	cmp	r3, #16
 800aa54:	d122      	bne.n	800aa9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b10      	cmp	r3, #16
 800aa62:	d11b      	bne.n	800aa9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0210 	mvn.w	r2, #16
 800aa6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2208      	movs	r2, #8
 800aa72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f952 	bl	800ad2c <HAL_TIM_IC_CaptureCallback>
 800aa88:	e005      	b.n	800aa96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f944 	bl	800ad18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f955 	bl	800ad40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d10e      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d107      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f06f 0201 	mvn.w	r2, #1
 800aac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7f8 f9ba 	bl	8002e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad2:	2b80      	cmp	r3, #128	; 0x80
 800aad4:	d10e      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aae0:	2b80      	cmp	r3, #128	; 0x80
 800aae2:	d107      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aaec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fb0c 	bl	800b10c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab02:	d10e      	bne.n	800ab22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0e:	2b80      	cmp	r3, #128	; 0x80
 800ab10:	d107      	bne.n	800ab22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 faff 	bl	800b120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2c:	2b40      	cmp	r3, #64	; 0x40
 800ab2e:	d10e      	bne.n	800ab4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab3a:	2b40      	cmp	r3, #64	; 0x40
 800ab3c:	d107      	bne.n	800ab4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f903 	bl	800ad54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f003 0320 	and.w	r3, r3, #32
 800ab58:	2b20      	cmp	r3, #32
 800ab5a:	d10e      	bne.n	800ab7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	d107      	bne.n	800ab7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f06f 0220 	mvn.w	r2, #32
 800ab72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fabf 	bl	800b0f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e0b4      	b.n	800ad0a <HAL_TIM_ConfigClockSource+0x186>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	4b56      	ldr	r3, [pc, #344]	; (800ad14 <HAL_TIM_ConfigClockSource+0x190>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd8:	d03e      	beq.n	800ac58 <HAL_TIM_ConfigClockSource+0xd4>
 800abda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abde:	f200 8087 	bhi.w	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800abe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe6:	f000 8086 	beq.w	800acf6 <HAL_TIM_ConfigClockSource+0x172>
 800abea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abee:	d87f      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800abf0:	2b70      	cmp	r3, #112	; 0x70
 800abf2:	d01a      	beq.n	800ac2a <HAL_TIM_ConfigClockSource+0xa6>
 800abf4:	2b70      	cmp	r3, #112	; 0x70
 800abf6:	d87b      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800abf8:	2b60      	cmp	r3, #96	; 0x60
 800abfa:	d050      	beq.n	800ac9e <HAL_TIM_ConfigClockSource+0x11a>
 800abfc:	2b60      	cmp	r3, #96	; 0x60
 800abfe:	d877      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac00:	2b50      	cmp	r3, #80	; 0x50
 800ac02:	d03c      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0xfa>
 800ac04:	2b50      	cmp	r3, #80	; 0x50
 800ac06:	d873      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac08:	2b40      	cmp	r3, #64	; 0x40
 800ac0a:	d058      	beq.n	800acbe <HAL_TIM_ConfigClockSource+0x13a>
 800ac0c:	2b40      	cmp	r3, #64	; 0x40
 800ac0e:	d86f      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac10:	2b30      	cmp	r3, #48	; 0x30
 800ac12:	d064      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac14:	2b30      	cmp	r3, #48	; 0x30
 800ac16:	d86b      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac18:	2b20      	cmp	r3, #32
 800ac1a:	d060      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d867      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d05c      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d05a      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac28:	e062      	b.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6818      	ldr	r0, [r3, #0]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	6899      	ldr	r1, [r3, #8]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f000 f9af 	bl	800af9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	609a      	str	r2, [r3, #8]
      break;
 800ac56:	e04f      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	6899      	ldr	r1, [r3, #8]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f000 f998 	bl	800af9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac7a:	609a      	str	r2, [r3, #8]
      break;
 800ac7c:	e03c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	6859      	ldr	r1, [r3, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f000 f90c 	bl	800aea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2150      	movs	r1, #80	; 0x50
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f965 	bl	800af66 <TIM_ITRx_SetConfig>
      break;
 800ac9c:	e02c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6818      	ldr	r0, [r3, #0]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	6859      	ldr	r1, [r3, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	461a      	mov	r2, r3
 800acac:	f000 f92b 	bl	800af06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2160      	movs	r1, #96	; 0x60
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 f955 	bl	800af66 <TIM_ITRx_SetConfig>
      break;
 800acbc:	e01c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6859      	ldr	r1, [r3, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	461a      	mov	r2, r3
 800accc:	f000 f8ec 	bl	800aea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2140      	movs	r1, #64	; 0x40
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f945 	bl	800af66 <TIM_ITRx_SetConfig>
      break;
 800acdc:	e00c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f000 f93c 	bl	800af66 <TIM_ITRx_SetConfig>
      break;
 800acee:	e003      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
      break;
 800acf4:	e000      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800acf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	fffeff88 	.word	0xfffeff88

0800ad18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a40      	ldr	r2, [pc, #256]	; (800ae7c <TIM_Base_SetConfig+0x114>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d013      	beq.n	800ada8 <TIM_Base_SetConfig+0x40>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad86:	d00f      	beq.n	800ada8 <TIM_Base_SetConfig+0x40>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a3d      	ldr	r2, [pc, #244]	; (800ae80 <TIM_Base_SetConfig+0x118>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d00b      	beq.n	800ada8 <TIM_Base_SetConfig+0x40>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a3c      	ldr	r2, [pc, #240]	; (800ae84 <TIM_Base_SetConfig+0x11c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d007      	beq.n	800ada8 <TIM_Base_SetConfig+0x40>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a3b      	ldr	r2, [pc, #236]	; (800ae88 <TIM_Base_SetConfig+0x120>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d003      	beq.n	800ada8 <TIM_Base_SetConfig+0x40>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a3a      	ldr	r2, [pc, #232]	; (800ae8c <TIM_Base_SetConfig+0x124>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d108      	bne.n	800adba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a2f      	ldr	r2, [pc, #188]	; (800ae7c <TIM_Base_SetConfig+0x114>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d02b      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc8:	d027      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a2c      	ldr	r2, [pc, #176]	; (800ae80 <TIM_Base_SetConfig+0x118>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d023      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a2b      	ldr	r2, [pc, #172]	; (800ae84 <TIM_Base_SetConfig+0x11c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d01f      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a2a      	ldr	r2, [pc, #168]	; (800ae88 <TIM_Base_SetConfig+0x120>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d01b      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a29      	ldr	r2, [pc, #164]	; (800ae8c <TIM_Base_SetConfig+0x124>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d017      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a28      	ldr	r2, [pc, #160]	; (800ae90 <TIM_Base_SetConfig+0x128>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d013      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4a27      	ldr	r2, [pc, #156]	; (800ae94 <TIM_Base_SetConfig+0x12c>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d00f      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a26      	ldr	r2, [pc, #152]	; (800ae98 <TIM_Base_SetConfig+0x130>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00b      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a25      	ldr	r2, [pc, #148]	; (800ae9c <TIM_Base_SetConfig+0x134>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d007      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a24      	ldr	r2, [pc, #144]	; (800aea0 <TIM_Base_SetConfig+0x138>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d003      	beq.n	800ae1a <TIM_Base_SetConfig+0xb2>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a23      	ldr	r2, [pc, #140]	; (800aea4 <TIM_Base_SetConfig+0x13c>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d108      	bne.n	800ae2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <TIM_Base_SetConfig+0x114>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d003      	beq.n	800ae60 <TIM_Base_SetConfig+0xf8>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a0c      	ldr	r2, [pc, #48]	; (800ae8c <TIM_Base_SetConfig+0x124>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d103      	bne.n	800ae68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	615a      	str	r2, [r3, #20]
}
 800ae6e:	bf00      	nop
 800ae70:	3714      	adds	r7, #20
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	40010000 	.word	0x40010000
 800ae80:	40000400 	.word	0x40000400
 800ae84:	40000800 	.word	0x40000800
 800ae88:	40000c00 	.word	0x40000c00
 800ae8c:	40010400 	.word	0x40010400
 800ae90:	40014000 	.word	0x40014000
 800ae94:	40014400 	.word	0x40014400
 800ae98:	40014800 	.word	0x40014800
 800ae9c:	40001800 	.word	0x40001800
 800aea0:	40001c00 	.word	0x40001c00
 800aea4:	40002000 	.word	0x40002000

0800aea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	f023 0201 	bic.w	r2, r3, #1
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	011b      	lsls	r3, r3, #4
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f023 030a 	bic.w	r3, r3, #10
 800aee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	621a      	str	r2, [r3, #32]
}
 800aefa:	bf00      	nop
 800aefc:	371c      	adds	r7, #28
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af06:	b480      	push	{r7}
 800af08:	b087      	sub	sp, #28
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f023 0210 	bic.w	r2, r3, #16
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	031b      	lsls	r3, r3, #12
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4313      	orrs	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	621a      	str	r2, [r3, #32]
}
 800af5a:	bf00      	nop
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	f043 0307 	orr.w	r3, r3, #7
 800af88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	609a      	str	r2, [r3, #8]
}
 800af90:	bf00      	nop
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	021a      	lsls	r2, r3, #8
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	431a      	orrs	r2, r3
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	609a      	str	r2, [r3, #8]
}
 800afd0:	bf00      	nop
 800afd2:	371c      	adds	r7, #28
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aff0:	2302      	movs	r3, #2
 800aff2:	e06d      	b.n	800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a30      	ldr	r2, [pc, #192]	; (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d004      	beq.n	800b028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a2f      	ldr	r2, [pc, #188]	; (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d108      	bne.n	800b03a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b02e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	4313      	orrs	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d022      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b066:	d01d      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d018      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a1c      	ldr	r2, [pc, #112]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d013      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a1a      	ldr	r2, [pc, #104]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00e      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a15      	ldr	r2, [pc, #84]	; (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d009      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a16      	ldr	r2, [pc, #88]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d004      	beq.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d10c      	bne.n	800b0be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	40010000 	.word	0x40010000
 800b0e0:	40010400 	.word	0x40010400
 800b0e4:	40000400 	.word	0x40000400
 800b0e8:	40000800 	.word	0x40000800
 800b0ec:	40000c00 	.word	0x40000c00
 800b0f0:	40014000 	.word	0x40014000
 800b0f4:	40001800 	.word	0x40001800

0800b0f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e040      	b.n	800b1c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7fa f8da 	bl	8005310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2224      	movs	r2, #36	; 0x24
 800b160:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f022 0201 	bic.w	r2, r2, #1
 800b170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f990 	bl	800b498 <UART_SetConfig>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d101      	bne.n	800b182 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e022      	b.n	800b1c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fbe6 	bl	800b95c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b19e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689a      	ldr	r2, [r3, #8]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0201 	orr.w	r2, r2, #1
 800b1be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fc6d 	bl	800baa0 <UART_CheckIdleState>
 800b1c6:	4603      	mov	r3, r0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08a      	sub	sp, #40	; 0x28
 800b1d4:	af02      	add	r7, sp, #8
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1e4:	2b20      	cmp	r3, #32
 800b1e6:	f040 8081 	bne.w	800b2ec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <HAL_UART_Transmit+0x26>
 800b1f0:	88fb      	ldrh	r3, [r7, #6]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e079      	b.n	800b2ee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b200:	2b01      	cmp	r3, #1
 800b202:	d101      	bne.n	800b208 <HAL_UART_Transmit+0x38>
 800b204:	2302      	movs	r3, #2
 800b206:	e072      	b.n	800b2ee <HAL_UART_Transmit+0x11e>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2221      	movs	r2, #33	; 0x21
 800b21c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b21e:	f7fa fb51 	bl	80058c4 <HAL_GetTick>
 800b222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	88fa      	ldrh	r2, [r7, #6]
 800b228:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	88fa      	ldrh	r2, [r7, #6]
 800b230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b23c:	d108      	bne.n	800b250 <HAL_UART_Transmit+0x80>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d104      	bne.n	800b250 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	e003      	b.n	800b258 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b254:	2300      	movs	r3, #0
 800b256:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b260:	e02c      	b.n	800b2bc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2200      	movs	r2, #0
 800b26a:	2180      	movs	r1, #128	; 0x80
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 fc4a 	bl	800bb06 <UART_WaitOnFlagUntilTimeout>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b278:	2303      	movs	r3, #3
 800b27a:	e038      	b.n	800b2ee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	881b      	ldrh	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b290:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	3302      	adds	r3, #2
 800b296:	61bb      	str	r3, [r7, #24]
 800b298:	e007      	b.n	800b2aa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	781a      	ldrb	r2, [r3, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1cc      	bne.n	800b262 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2140      	movs	r1, #64	; 0x40
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 fc17 	bl	800bb06 <UART_WaitOnFlagUntilTimeout>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e005      	b.n	800b2ee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	e000      	b.n	800b2ee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b2ec:	2302      	movs	r3, #2
  }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b08a      	sub	sp, #40	; 0x28
 800b2fa:	af02      	add	r7, sp, #8
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	60b9      	str	r1, [r7, #8]
 800b300:	603b      	str	r3, [r7, #0]
 800b302:	4613      	mov	r3, r2
 800b304:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	f040 80be 	bne.w	800b48c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <HAL_UART_Receive+0x26>
 800b316:	88fb      	ldrh	r3, [r7, #6]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e0b6      	b.n	800b48e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b326:	2b01      	cmp	r3, #1
 800b328:	d101      	bne.n	800b32e <HAL_UART_Receive+0x38>
 800b32a:	2302      	movs	r3, #2
 800b32c:	e0af      	b.n	800b48e <HAL_UART_Receive+0x198>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2222      	movs	r2, #34	; 0x22
 800b342:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b34a:	f7fa fabb 	bl	80058c4 <HAL_GetTick>
 800b34e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	88fa      	ldrh	r2, [r7, #6]
 800b354:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	88fa      	ldrh	r2, [r7, #6]
 800b35c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b368:	d10e      	bne.n	800b388 <HAL_UART_Receive+0x92>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d105      	bne.n	800b37e <HAL_UART_Receive+0x88>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b37c:	e02d      	b.n	800b3da <HAL_UART_Receive+0xe4>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	22ff      	movs	r2, #255	; 0xff
 800b382:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b386:	e028      	b.n	800b3da <HAL_UART_Receive+0xe4>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10d      	bne.n	800b3ac <HAL_UART_Receive+0xb6>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d104      	bne.n	800b3a2 <HAL_UART_Receive+0xac>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	22ff      	movs	r2, #255	; 0xff
 800b39c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3a0:	e01b      	b.n	800b3da <HAL_UART_Receive+0xe4>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	227f      	movs	r2, #127	; 0x7f
 800b3a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3aa:	e016      	b.n	800b3da <HAL_UART_Receive+0xe4>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3b4:	d10d      	bne.n	800b3d2 <HAL_UART_Receive+0xdc>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d104      	bne.n	800b3c8 <HAL_UART_Receive+0xd2>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	227f      	movs	r2, #127	; 0x7f
 800b3c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3c6:	e008      	b.n	800b3da <HAL_UART_Receive+0xe4>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	223f      	movs	r2, #63	; 0x3f
 800b3cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3d0:	e003      	b.n	800b3da <HAL_UART_Receive+0xe4>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ea:	d108      	bne.n	800b3fe <HAL_UART_Receive+0x108>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d104      	bne.n	800b3fe <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	61bb      	str	r3, [r7, #24]
 800b3fc:	e003      	b.n	800b406 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b402:	2300      	movs	r3, #0
 800b404:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b40e:	e032      	b.n	800b476 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2200      	movs	r2, #0
 800b418:	2120      	movs	r1, #32
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 fb73 	bl	800bb06 <UART_WaitOnFlagUntilTimeout>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b426:	2303      	movs	r3, #3
 800b428:	e031      	b.n	800b48e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10c      	bne.n	800b44a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b436:	b29a      	uxth	r2, r3
 800b438:	8a7b      	ldrh	r3, [r7, #18]
 800b43a:	4013      	ands	r3, r2
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	3302      	adds	r3, #2
 800b446:	61bb      	str	r3, [r7, #24]
 800b448:	e00c      	b.n	800b464 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b450:	b2da      	uxtb	r2, r3
 800b452:	8a7b      	ldrh	r3, [r7, #18]
 800b454:	b2db      	uxtb	r3, r3
 800b456:	4013      	ands	r3, r2
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	3301      	adds	r3, #1
 800b462:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1c6      	bne.n	800b410 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2220      	movs	r2, #32
 800b486:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	e000      	b.n	800b48e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800b48c:	2302      	movs	r3, #2
  }
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3720      	adds	r7, #32
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	69db      	ldr	r3, [r3, #28]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	4ba7      	ldr	r3, [pc, #668]	; (800b760 <UART_SetConfig+0x2c8>)
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	6812      	ldr	r2, [r2, #0]
 800b4ca:	6979      	ldr	r1, [r7, #20]
 800b4cc:	430b      	orrs	r3, r1
 800b4ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68da      	ldr	r2, [r3, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	430a      	orrs	r2, r1
 800b508:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a95      	ldr	r2, [pc, #596]	; (800b764 <UART_SetConfig+0x2cc>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d120      	bne.n	800b556 <UART_SetConfig+0xbe>
 800b514:	4b94      	ldr	r3, [pc, #592]	; (800b768 <UART_SetConfig+0x2d0>)
 800b516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d816      	bhi.n	800b550 <UART_SetConfig+0xb8>
 800b522:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <UART_SetConfig+0x90>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b539 	.word	0x0800b539
 800b52c:	0800b545 	.word	0x0800b545
 800b530:	0800b53f 	.word	0x0800b53f
 800b534:	0800b54b 	.word	0x0800b54b
 800b538:	2301      	movs	r3, #1
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e14f      	b.n	800b7de <UART_SetConfig+0x346>
 800b53e:	2302      	movs	r3, #2
 800b540:	77fb      	strb	r3, [r7, #31]
 800b542:	e14c      	b.n	800b7de <UART_SetConfig+0x346>
 800b544:	2304      	movs	r3, #4
 800b546:	77fb      	strb	r3, [r7, #31]
 800b548:	e149      	b.n	800b7de <UART_SetConfig+0x346>
 800b54a:	2308      	movs	r3, #8
 800b54c:	77fb      	strb	r3, [r7, #31]
 800b54e:	e146      	b.n	800b7de <UART_SetConfig+0x346>
 800b550:	2310      	movs	r3, #16
 800b552:	77fb      	strb	r3, [r7, #31]
 800b554:	e143      	b.n	800b7de <UART_SetConfig+0x346>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a84      	ldr	r2, [pc, #528]	; (800b76c <UART_SetConfig+0x2d4>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d132      	bne.n	800b5c6 <UART_SetConfig+0x12e>
 800b560:	4b81      	ldr	r3, [pc, #516]	; (800b768 <UART_SetConfig+0x2d0>)
 800b562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b566:	f003 030c 	and.w	r3, r3, #12
 800b56a:	2b0c      	cmp	r3, #12
 800b56c:	d828      	bhi.n	800b5c0 <UART_SetConfig+0x128>
 800b56e:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <UART_SetConfig+0xdc>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b5a9 	.word	0x0800b5a9
 800b578:	0800b5c1 	.word	0x0800b5c1
 800b57c:	0800b5c1 	.word	0x0800b5c1
 800b580:	0800b5c1 	.word	0x0800b5c1
 800b584:	0800b5b5 	.word	0x0800b5b5
 800b588:	0800b5c1 	.word	0x0800b5c1
 800b58c:	0800b5c1 	.word	0x0800b5c1
 800b590:	0800b5c1 	.word	0x0800b5c1
 800b594:	0800b5af 	.word	0x0800b5af
 800b598:	0800b5c1 	.word	0x0800b5c1
 800b59c:	0800b5c1 	.word	0x0800b5c1
 800b5a0:	0800b5c1 	.word	0x0800b5c1
 800b5a4:	0800b5bb 	.word	0x0800b5bb
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	77fb      	strb	r3, [r7, #31]
 800b5ac:	e117      	b.n	800b7de <UART_SetConfig+0x346>
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	77fb      	strb	r3, [r7, #31]
 800b5b2:	e114      	b.n	800b7de <UART_SetConfig+0x346>
 800b5b4:	2304      	movs	r3, #4
 800b5b6:	77fb      	strb	r3, [r7, #31]
 800b5b8:	e111      	b.n	800b7de <UART_SetConfig+0x346>
 800b5ba:	2308      	movs	r3, #8
 800b5bc:	77fb      	strb	r3, [r7, #31]
 800b5be:	e10e      	b.n	800b7de <UART_SetConfig+0x346>
 800b5c0:	2310      	movs	r3, #16
 800b5c2:	77fb      	strb	r3, [r7, #31]
 800b5c4:	e10b      	b.n	800b7de <UART_SetConfig+0x346>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a69      	ldr	r2, [pc, #420]	; (800b770 <UART_SetConfig+0x2d8>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d120      	bne.n	800b612 <UART_SetConfig+0x17a>
 800b5d0:	4b65      	ldr	r3, [pc, #404]	; (800b768 <UART_SetConfig+0x2d0>)
 800b5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b5da:	2b30      	cmp	r3, #48	; 0x30
 800b5dc:	d013      	beq.n	800b606 <UART_SetConfig+0x16e>
 800b5de:	2b30      	cmp	r3, #48	; 0x30
 800b5e0:	d814      	bhi.n	800b60c <UART_SetConfig+0x174>
 800b5e2:	2b20      	cmp	r3, #32
 800b5e4:	d009      	beq.n	800b5fa <UART_SetConfig+0x162>
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	d810      	bhi.n	800b60c <UART_SetConfig+0x174>
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <UART_SetConfig+0x15c>
 800b5ee:	2b10      	cmp	r3, #16
 800b5f0:	d006      	beq.n	800b600 <UART_SetConfig+0x168>
 800b5f2:	e00b      	b.n	800b60c <UART_SetConfig+0x174>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e0f1      	b.n	800b7de <UART_SetConfig+0x346>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	77fb      	strb	r3, [r7, #31]
 800b5fe:	e0ee      	b.n	800b7de <UART_SetConfig+0x346>
 800b600:	2304      	movs	r3, #4
 800b602:	77fb      	strb	r3, [r7, #31]
 800b604:	e0eb      	b.n	800b7de <UART_SetConfig+0x346>
 800b606:	2308      	movs	r3, #8
 800b608:	77fb      	strb	r3, [r7, #31]
 800b60a:	e0e8      	b.n	800b7de <UART_SetConfig+0x346>
 800b60c:	2310      	movs	r3, #16
 800b60e:	77fb      	strb	r3, [r7, #31]
 800b610:	e0e5      	b.n	800b7de <UART_SetConfig+0x346>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a57      	ldr	r2, [pc, #348]	; (800b774 <UART_SetConfig+0x2dc>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d120      	bne.n	800b65e <UART_SetConfig+0x1c6>
 800b61c:	4b52      	ldr	r3, [pc, #328]	; (800b768 <UART_SetConfig+0x2d0>)
 800b61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b626:	2bc0      	cmp	r3, #192	; 0xc0
 800b628:	d013      	beq.n	800b652 <UART_SetConfig+0x1ba>
 800b62a:	2bc0      	cmp	r3, #192	; 0xc0
 800b62c:	d814      	bhi.n	800b658 <UART_SetConfig+0x1c0>
 800b62e:	2b80      	cmp	r3, #128	; 0x80
 800b630:	d009      	beq.n	800b646 <UART_SetConfig+0x1ae>
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d810      	bhi.n	800b658 <UART_SetConfig+0x1c0>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d002      	beq.n	800b640 <UART_SetConfig+0x1a8>
 800b63a:	2b40      	cmp	r3, #64	; 0x40
 800b63c:	d006      	beq.n	800b64c <UART_SetConfig+0x1b4>
 800b63e:	e00b      	b.n	800b658 <UART_SetConfig+0x1c0>
 800b640:	2300      	movs	r3, #0
 800b642:	77fb      	strb	r3, [r7, #31]
 800b644:	e0cb      	b.n	800b7de <UART_SetConfig+0x346>
 800b646:	2302      	movs	r3, #2
 800b648:	77fb      	strb	r3, [r7, #31]
 800b64a:	e0c8      	b.n	800b7de <UART_SetConfig+0x346>
 800b64c:	2304      	movs	r3, #4
 800b64e:	77fb      	strb	r3, [r7, #31]
 800b650:	e0c5      	b.n	800b7de <UART_SetConfig+0x346>
 800b652:	2308      	movs	r3, #8
 800b654:	77fb      	strb	r3, [r7, #31]
 800b656:	e0c2      	b.n	800b7de <UART_SetConfig+0x346>
 800b658:	2310      	movs	r3, #16
 800b65a:	77fb      	strb	r3, [r7, #31]
 800b65c:	e0bf      	b.n	800b7de <UART_SetConfig+0x346>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a45      	ldr	r2, [pc, #276]	; (800b778 <UART_SetConfig+0x2e0>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d125      	bne.n	800b6b4 <UART_SetConfig+0x21c>
 800b668:	4b3f      	ldr	r3, [pc, #252]	; (800b768 <UART_SetConfig+0x2d0>)
 800b66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b66e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b676:	d017      	beq.n	800b6a8 <UART_SetConfig+0x210>
 800b678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b67c:	d817      	bhi.n	800b6ae <UART_SetConfig+0x216>
 800b67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b682:	d00b      	beq.n	800b69c <UART_SetConfig+0x204>
 800b684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b688:	d811      	bhi.n	800b6ae <UART_SetConfig+0x216>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <UART_SetConfig+0x1fe>
 800b68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b692:	d006      	beq.n	800b6a2 <UART_SetConfig+0x20a>
 800b694:	e00b      	b.n	800b6ae <UART_SetConfig+0x216>
 800b696:	2300      	movs	r3, #0
 800b698:	77fb      	strb	r3, [r7, #31]
 800b69a:	e0a0      	b.n	800b7de <UART_SetConfig+0x346>
 800b69c:	2302      	movs	r3, #2
 800b69e:	77fb      	strb	r3, [r7, #31]
 800b6a0:	e09d      	b.n	800b7de <UART_SetConfig+0x346>
 800b6a2:	2304      	movs	r3, #4
 800b6a4:	77fb      	strb	r3, [r7, #31]
 800b6a6:	e09a      	b.n	800b7de <UART_SetConfig+0x346>
 800b6a8:	2308      	movs	r3, #8
 800b6aa:	77fb      	strb	r3, [r7, #31]
 800b6ac:	e097      	b.n	800b7de <UART_SetConfig+0x346>
 800b6ae:	2310      	movs	r3, #16
 800b6b0:	77fb      	strb	r3, [r7, #31]
 800b6b2:	e094      	b.n	800b7de <UART_SetConfig+0x346>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a30      	ldr	r2, [pc, #192]	; (800b77c <UART_SetConfig+0x2e4>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d125      	bne.n	800b70a <UART_SetConfig+0x272>
 800b6be:	4b2a      	ldr	r3, [pc, #168]	; (800b768 <UART_SetConfig+0x2d0>)
 800b6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b6c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6cc:	d017      	beq.n	800b6fe <UART_SetConfig+0x266>
 800b6ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6d2:	d817      	bhi.n	800b704 <UART_SetConfig+0x26c>
 800b6d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d8:	d00b      	beq.n	800b6f2 <UART_SetConfig+0x25a>
 800b6da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6de:	d811      	bhi.n	800b704 <UART_SetConfig+0x26c>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <UART_SetConfig+0x254>
 800b6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e8:	d006      	beq.n	800b6f8 <UART_SetConfig+0x260>
 800b6ea:	e00b      	b.n	800b704 <UART_SetConfig+0x26c>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	77fb      	strb	r3, [r7, #31]
 800b6f0:	e075      	b.n	800b7de <UART_SetConfig+0x346>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	77fb      	strb	r3, [r7, #31]
 800b6f6:	e072      	b.n	800b7de <UART_SetConfig+0x346>
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	77fb      	strb	r3, [r7, #31]
 800b6fc:	e06f      	b.n	800b7de <UART_SetConfig+0x346>
 800b6fe:	2308      	movs	r3, #8
 800b700:	77fb      	strb	r3, [r7, #31]
 800b702:	e06c      	b.n	800b7de <UART_SetConfig+0x346>
 800b704:	2310      	movs	r3, #16
 800b706:	77fb      	strb	r3, [r7, #31]
 800b708:	e069      	b.n	800b7de <UART_SetConfig+0x346>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a1c      	ldr	r2, [pc, #112]	; (800b780 <UART_SetConfig+0x2e8>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d137      	bne.n	800b784 <UART_SetConfig+0x2ec>
 800b714:	4b14      	ldr	r3, [pc, #80]	; (800b768 <UART_SetConfig+0x2d0>)
 800b716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b71a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b71e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b722:	d017      	beq.n	800b754 <UART_SetConfig+0x2bc>
 800b724:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b728:	d817      	bhi.n	800b75a <UART_SetConfig+0x2c2>
 800b72a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b72e:	d00b      	beq.n	800b748 <UART_SetConfig+0x2b0>
 800b730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b734:	d811      	bhi.n	800b75a <UART_SetConfig+0x2c2>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <UART_SetConfig+0x2aa>
 800b73a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b73e:	d006      	beq.n	800b74e <UART_SetConfig+0x2b6>
 800b740:	e00b      	b.n	800b75a <UART_SetConfig+0x2c2>
 800b742:	2300      	movs	r3, #0
 800b744:	77fb      	strb	r3, [r7, #31]
 800b746:	e04a      	b.n	800b7de <UART_SetConfig+0x346>
 800b748:	2302      	movs	r3, #2
 800b74a:	77fb      	strb	r3, [r7, #31]
 800b74c:	e047      	b.n	800b7de <UART_SetConfig+0x346>
 800b74e:	2304      	movs	r3, #4
 800b750:	77fb      	strb	r3, [r7, #31]
 800b752:	e044      	b.n	800b7de <UART_SetConfig+0x346>
 800b754:	2308      	movs	r3, #8
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e041      	b.n	800b7de <UART_SetConfig+0x346>
 800b75a:	2310      	movs	r3, #16
 800b75c:	77fb      	strb	r3, [r7, #31]
 800b75e:	e03e      	b.n	800b7de <UART_SetConfig+0x346>
 800b760:	efff69f3 	.word	0xefff69f3
 800b764:	40011000 	.word	0x40011000
 800b768:	40023800 	.word	0x40023800
 800b76c:	40004400 	.word	0x40004400
 800b770:	40004800 	.word	0x40004800
 800b774:	40004c00 	.word	0x40004c00
 800b778:	40005000 	.word	0x40005000
 800b77c:	40011400 	.word	0x40011400
 800b780:	40007800 	.word	0x40007800
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a71      	ldr	r2, [pc, #452]	; (800b950 <UART_SetConfig+0x4b8>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d125      	bne.n	800b7da <UART_SetConfig+0x342>
 800b78e:	4b71      	ldr	r3, [pc, #452]	; (800b954 <UART_SetConfig+0x4bc>)
 800b790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b798:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b79c:	d017      	beq.n	800b7ce <UART_SetConfig+0x336>
 800b79e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b7a2:	d817      	bhi.n	800b7d4 <UART_SetConfig+0x33c>
 800b7a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7a8:	d00b      	beq.n	800b7c2 <UART_SetConfig+0x32a>
 800b7aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7ae:	d811      	bhi.n	800b7d4 <UART_SetConfig+0x33c>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <UART_SetConfig+0x324>
 800b7b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b8:	d006      	beq.n	800b7c8 <UART_SetConfig+0x330>
 800b7ba:	e00b      	b.n	800b7d4 <UART_SetConfig+0x33c>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	77fb      	strb	r3, [r7, #31]
 800b7c0:	e00d      	b.n	800b7de <UART_SetConfig+0x346>
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	77fb      	strb	r3, [r7, #31]
 800b7c6:	e00a      	b.n	800b7de <UART_SetConfig+0x346>
 800b7c8:	2304      	movs	r3, #4
 800b7ca:	77fb      	strb	r3, [r7, #31]
 800b7cc:	e007      	b.n	800b7de <UART_SetConfig+0x346>
 800b7ce:	2308      	movs	r3, #8
 800b7d0:	77fb      	strb	r3, [r7, #31]
 800b7d2:	e004      	b.n	800b7de <UART_SetConfig+0x346>
 800b7d4:	2310      	movs	r3, #16
 800b7d6:	77fb      	strb	r3, [r7, #31]
 800b7d8:	e001      	b.n	800b7de <UART_SetConfig+0x346>
 800b7da:	2310      	movs	r3, #16
 800b7dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e6:	d15a      	bne.n	800b89e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b7e8:	7ffb      	ldrb	r3, [r7, #31]
 800b7ea:	2b08      	cmp	r3, #8
 800b7ec:	d827      	bhi.n	800b83e <UART_SetConfig+0x3a6>
 800b7ee:	a201      	add	r2, pc, #4	; (adr r2, 800b7f4 <UART_SetConfig+0x35c>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b819 	.word	0x0800b819
 800b7f8:	0800b821 	.word	0x0800b821
 800b7fc:	0800b829 	.word	0x0800b829
 800b800:	0800b83f 	.word	0x0800b83f
 800b804:	0800b82f 	.word	0x0800b82f
 800b808:	0800b83f 	.word	0x0800b83f
 800b80c:	0800b83f 	.word	0x0800b83f
 800b810:	0800b83f 	.word	0x0800b83f
 800b814:	0800b837 	.word	0x0800b837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b818:	f7fd fd1a 	bl	8009250 <HAL_RCC_GetPCLK1Freq>
 800b81c:	61b8      	str	r0, [r7, #24]
        break;
 800b81e:	e013      	b.n	800b848 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b820:	f7fd fd2a 	bl	8009278 <HAL_RCC_GetPCLK2Freq>
 800b824:	61b8      	str	r0, [r7, #24]
        break;
 800b826:	e00f      	b.n	800b848 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b828:	4b4b      	ldr	r3, [pc, #300]	; (800b958 <UART_SetConfig+0x4c0>)
 800b82a:	61bb      	str	r3, [r7, #24]
        break;
 800b82c:	e00c      	b.n	800b848 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b82e:	f7fd fc4d 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 800b832:	61b8      	str	r0, [r7, #24]
        break;
 800b834:	e008      	b.n	800b848 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b83a:	61bb      	str	r3, [r7, #24]
        break;
 800b83c:	e004      	b.n	800b848 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	77bb      	strb	r3, [r7, #30]
        break;
 800b846:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d074      	beq.n	800b938 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	005a      	lsls	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	085b      	lsrs	r3, r3, #1
 800b858:	441a      	add	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	2b0f      	cmp	r3, #15
 800b868:	d916      	bls.n	800b898 <UART_SetConfig+0x400>
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b870:	d212      	bcs.n	800b898 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	b29b      	uxth	r3, r3
 800b876:	f023 030f 	bic.w	r3, r3, #15
 800b87a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	085b      	lsrs	r3, r3, #1
 800b880:	b29b      	uxth	r3, r3
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	b29a      	uxth	r2, r3
 800b888:	89fb      	ldrh	r3, [r7, #14]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	89fa      	ldrh	r2, [r7, #14]
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	e04f      	b.n	800b938 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	77bb      	strb	r3, [r7, #30]
 800b89c:	e04c      	b.n	800b938 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b89e:	7ffb      	ldrb	r3, [r7, #31]
 800b8a0:	2b08      	cmp	r3, #8
 800b8a2:	d828      	bhi.n	800b8f6 <UART_SetConfig+0x45e>
 800b8a4:	a201      	add	r2, pc, #4	; (adr r2, 800b8ac <UART_SetConfig+0x414>)
 800b8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8aa:	bf00      	nop
 800b8ac:	0800b8d1 	.word	0x0800b8d1
 800b8b0:	0800b8d9 	.word	0x0800b8d9
 800b8b4:	0800b8e1 	.word	0x0800b8e1
 800b8b8:	0800b8f7 	.word	0x0800b8f7
 800b8bc:	0800b8e7 	.word	0x0800b8e7
 800b8c0:	0800b8f7 	.word	0x0800b8f7
 800b8c4:	0800b8f7 	.word	0x0800b8f7
 800b8c8:	0800b8f7 	.word	0x0800b8f7
 800b8cc:	0800b8ef 	.word	0x0800b8ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8d0:	f7fd fcbe 	bl	8009250 <HAL_RCC_GetPCLK1Freq>
 800b8d4:	61b8      	str	r0, [r7, #24]
        break;
 800b8d6:	e013      	b.n	800b900 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8d8:	f7fd fcce 	bl	8009278 <HAL_RCC_GetPCLK2Freq>
 800b8dc:	61b8      	str	r0, [r7, #24]
        break;
 800b8de:	e00f      	b.n	800b900 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8e0:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <UART_SetConfig+0x4c0>)
 800b8e2:	61bb      	str	r3, [r7, #24]
        break;
 800b8e4:	e00c      	b.n	800b900 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8e6:	f7fd fbf1 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 800b8ea:	61b8      	str	r0, [r7, #24]
        break;
 800b8ec:	e008      	b.n	800b900 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8f2:	61bb      	str	r3, [r7, #24]
        break;
 800b8f4:	e004      	b.n	800b900 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	77bb      	strb	r3, [r7, #30]
        break;
 800b8fe:	bf00      	nop
    }

    if (pclk != 0U)
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d018      	beq.n	800b938 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	085a      	lsrs	r2, r3, #1
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	441a      	add	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	fbb2 f3f3 	udiv	r3, r2, r3
 800b918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2b0f      	cmp	r3, #15
 800b91e:	d909      	bls.n	800b934 <UART_SetConfig+0x49c>
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b926:	d205      	bcs.n	800b934 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	60da      	str	r2, [r3, #12]
 800b932:	e001      	b.n	800b938 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b944:	7fbb      	ldrb	r3, [r7, #30]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3720      	adds	r7, #32
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	40007c00 	.word	0x40007c00
 800b954:	40023800 	.word	0x40023800
 800b958:	00f42400 	.word	0x00f42400

0800b95c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00a      	beq.n	800b986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00a      	beq.n	800b9a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	430a      	orrs	r2, r1
 800b9a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00a      	beq.n	800b9ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	f003 0308 	and.w	r3, r3, #8
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	f003 0310 	and.w	r3, r3, #16
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00a      	beq.n	800ba0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	f003 0320 	and.w	r3, r3, #32
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00a      	beq.n	800ba30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d01a      	beq.n	800ba72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba5a:	d10a      	bne.n	800ba72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00a      	beq.n	800ba94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	430a      	orrs	r2, r1
 800ba92:	605a      	str	r2, [r3, #4]
  }
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af02      	add	r7, sp, #8
 800baa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bab0:	f7f9 ff08 	bl	80058c4 <HAL_GetTick>
 800bab4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 0308 	and.w	r3, r3, #8
 800bac0:	2b08      	cmp	r3, #8
 800bac2:	d10e      	bne.n	800bae2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f817 	bl	800bb06 <UART_WaitOnFlagUntilTimeout>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e00d      	b.n	800bafe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2220      	movs	r2, #32
 800bae6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2220      	movs	r2, #32
 800baec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b09c      	sub	sp, #112	; 0x70
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	603b      	str	r3, [r7, #0]
 800bb12:	4613      	mov	r3, r2
 800bb14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb16:	e0a5      	b.n	800bc64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb1e:	f000 80a1 	beq.w	800bc64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb22:	f7f9 fecf 	bl	80058c4 <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d302      	bcc.n	800bb38 <UART_WaitOnFlagUntilTimeout+0x32>
 800bb32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d13e      	bne.n	800bbb6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb40:	e853 3f00 	ldrex	r3, [r3]
 800bb44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb4c:	667b      	str	r3, [r7, #100]	; 0x64
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb5e:	e841 2300 	strex	r3, r2, [r1]
 800bb62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1e6      	bne.n	800bb38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3308      	adds	r3, #8
 800bb70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	f023 0301 	bic.w	r3, r3, #1
 800bb80:	663b      	str	r3, [r7, #96]	; 0x60
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3308      	adds	r3, #8
 800bb88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb8a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e5      	bne.n	800bb6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2220      	movs	r2, #32
 800bba2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2220      	movs	r2, #32
 800bba8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	e067      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d04f      	beq.n	800bc64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbd2:	d147      	bne.n	800bc64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	e853 3f00 	ldrex	r3, [r3]
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc04:	e841 2300 	strex	r3, r2, [r1]
 800bc08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1e6      	bne.n	800bbde <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3308      	adds	r3, #8
 800bc16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	f023 0301 	bic.w	r3, r3, #1
 800bc26:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc30:	623a      	str	r2, [r7, #32]
 800bc32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc34:	69f9      	ldr	r1, [r7, #28]
 800bc36:	6a3a      	ldr	r2, [r7, #32]
 800bc38:	e841 2300 	strex	r3, r2, [r1]
 800bc3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1e5      	bne.n	800bc10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2220      	movs	r2, #32
 800bc48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2220      	movs	r2, #32
 800bc54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e010      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	69da      	ldr	r2, [r3, #28]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	bf0c      	ite	eq
 800bc74:	2301      	moveq	r3, #1
 800bc76:	2300      	movne	r3, #0
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	79fb      	ldrb	r3, [r7, #7]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	f43f af4a 	beq.w	800bb18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3770      	adds	r7, #112	; 0x70
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d121      	bne.n	800bce6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <FMC_SDRAM_Init+0xb4>)
 800bca8:	4013      	ands	r3, r2
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	6851      	ldr	r1, [r2, #4]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	6892      	ldr	r2, [r2, #8]
 800bcb2:	4311      	orrs	r1, r2
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	68d2      	ldr	r2, [r2, #12]
 800bcb8:	4311      	orrs	r1, r2
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	6912      	ldr	r2, [r2, #16]
 800bcbe:	4311      	orrs	r1, r2
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	6952      	ldr	r2, [r2, #20]
 800bcc4:	4311      	orrs	r1, r2
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	6992      	ldr	r2, [r2, #24]
 800bcca:	4311      	orrs	r1, r2
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	69d2      	ldr	r2, [r2, #28]
 800bcd0:	4311      	orrs	r1, r2
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	6a12      	ldr	r2, [r2, #32]
 800bcd6:	4311      	orrs	r1, r2
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bcdc:	430a      	orrs	r2, r1
 800bcde:	431a      	orrs	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	e026      	b.n	800bd34 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	69d9      	ldr	r1, [r3, #28]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	4319      	orrs	r1, r3
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	430b      	orrs	r3, r1
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	4b0e      	ldr	r3, [pc, #56]	; (800bd44 <FMC_SDRAM_Init+0xb4>)
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	6851      	ldr	r1, [r2, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	6892      	ldr	r2, [r2, #8]
 800bd14:	4311      	orrs	r1, r2
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	68d2      	ldr	r2, [r2, #12]
 800bd1a:	4311      	orrs	r1, r2
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	6912      	ldr	r2, [r2, #16]
 800bd20:	4311      	orrs	r1, r2
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	6952      	ldr	r2, [r2, #20]
 800bd26:	4311      	orrs	r1, r2
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	6992      	ldr	r2, [r2, #24]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	ffff8000 	.word	0xffff8000

0800bd48 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d128      	bne.n	800bdac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	1e59      	subs	r1, r3, #1
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	4319      	orrs	r1, r3
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	021b      	lsls	r3, r3, #8
 800bd7a:	4319      	orrs	r1, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	031b      	lsls	r3, r3, #12
 800bd84:	4319      	orrs	r1, r3
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	041b      	lsls	r3, r3, #16
 800bd8e:	4319      	orrs	r1, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	051b      	lsls	r3, r3, #20
 800bd98:	4319      	orrs	r1, r3
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	061b      	lsls	r3, r3, #24
 800bda2:	430b      	orrs	r3, r1
 800bda4:	431a      	orrs	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	609a      	str	r2, [r3, #8]
 800bdaa:	e02d      	b.n	800be08 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	4b19      	ldr	r3, [pc, #100]	; (800be18 <FMC_SDRAM_Timing_Init+0xd0>)
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	68d2      	ldr	r2, [r2, #12]
 800bdb8:	3a01      	subs	r2, #1
 800bdba:	0311      	lsls	r1, r2, #12
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	6952      	ldr	r2, [r2, #20]
 800bdc0:	3a01      	subs	r2, #1
 800bdc2:	0512      	lsls	r2, r2, #20
 800bdc4:	430a      	orrs	r2, r1
 800bdc6:	431a      	orrs	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	1e59      	subs	r1, r3, #1
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	011b      	lsls	r3, r3, #4
 800bde2:	4319      	orrs	r1, r3
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	021b      	lsls	r3, r3, #8
 800bdec:	4319      	orrs	r1, r3
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	041b      	lsls	r3, r3, #16
 800bdf6:	4319      	orrs	r1, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	061b      	lsls	r3, r3, #24
 800be00:	430b      	orrs	r3, r1
 800be02:	431a      	orrs	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	ff0f0fff 	.word	0xff0f0fff

0800be1c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	691a      	ldr	r2, [r3, #16]
 800be2c:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <FMC_SDRAM_SendCommand+0x44>)
 800be2e:	4013      	ands	r3, r2
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	6811      	ldr	r1, [r2, #0]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	6852      	ldr	r2, [r2, #4]
 800be38:	4311      	orrs	r1, r2
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	6892      	ldr	r2, [r2, #8]
 800be3e:	3a01      	subs	r2, #1
 800be40:	0152      	lsls	r2, r2, #5
 800be42:	4311      	orrs	r1, r2
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	68d2      	ldr	r2, [r2, #12]
 800be48:	0252      	lsls	r2, r2, #9
 800be4a:	430a      	orrs	r2, r1
 800be4c:	431a      	orrs	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	ffc00000 	.word	0xffc00000

0800be64 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	695a      	ldr	r2, [r3, #20]
 800be72:	4b07      	ldr	r3, [pc, #28]	; (800be90 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800be74:	4013      	ands	r3, r2
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	0052      	lsls	r2, r2, #1
 800be7a:	431a      	orrs	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	ffffc001 	.word	0xffffc001

0800be94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bea6:	2b84      	cmp	r3, #132	; 0x84
 800bea8:	d005      	beq.n	800beb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	4413      	add	r3, r2
 800beb2:	3303      	adds	r3, #3
 800beb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800beb6:	68fb      	ldr	r3, [r7, #12]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beca:	f3ef 8305 	mrs	r3, IPSR
 800bece:	607b      	str	r3, [r7, #4]
  return(result);
 800bed0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	bf14      	ite	ne
 800bed6:	2301      	movne	r3, #1
 800bed8:	2300      	moveq	r3, #0
 800beda:	b2db      	uxtb	r3, r3
}
 800bedc:	4618      	mov	r0, r3
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800beec:	f001 fb66 	bl	800d5bc <vTaskStartScheduler>
  
  return osOK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bef8:	b089      	sub	sp, #36	; 0x24
 800befa:	af04      	add	r7, sp, #16
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	695b      	ldr	r3, [r3, #20]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d020      	beq.n	800bf4a <osThreadCreate+0x54>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01c      	beq.n	800bf4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685c      	ldr	r4, [r3, #4]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681d      	ldr	r5, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	691e      	ldr	r6, [r3, #16]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff ffb6 	bl	800be94 <makeFreeRtosPriority>
 800bf28:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf32:	9202      	str	r2, [sp, #8]
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	9100      	str	r1, [sp, #0]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f001 f8c2 	bl	800d0c8 <xTaskCreateStatic>
 800bf44:	4603      	mov	r3, r0
 800bf46:	60fb      	str	r3, [r7, #12]
 800bf48:	e01c      	b.n	800bf84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685c      	ldr	r4, [r3, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf56:	b29e      	uxth	r6, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff ff98 	bl	800be94 <makeFreeRtosPriority>
 800bf64:	4602      	mov	r2, r0
 800bf66:	f107 030c 	add.w	r3, r7, #12
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	9200      	str	r2, [sp, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	4632      	mov	r2, r6
 800bf72:	4629      	mov	r1, r5
 800bf74:	4620      	mov	r0, r4
 800bf76:	f001 f90a 	bl	800d18e <xTaskCreate>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d001      	beq.n	800bf84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	e000      	b.n	800bf86 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf84:	68fb      	ldr	r3, [r7, #12]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf8e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <osDelay+0x16>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	e000      	b.n	800bfa6 <osDelay+0x18>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f001 fad2 	bl	800d550 <vTaskDelay>
  
  return osOK;
 800bfac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af02      	add	r7, sp, #8
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d013      	beq.n	800bff6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800bfce:	7afb      	ldrb	r3, [r7, #11]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d101      	bne.n	800bfd8 <osTimerCreate+0x20>
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	e000      	b.n	800bfda <osTimerCreate+0x22>
 800bfd8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800bfe2:	9201      	str	r2, [sp, #4]
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	460a      	mov	r2, r1
 800bfea:	2101      	movs	r1, #1
 800bfec:	480b      	ldr	r0, [pc, #44]	; (800c01c <osTimerCreate+0x64>)
 800bfee:	f002 f9fa 	bl	800e3e6 <xTimerCreateStatic>
 800bff2:	4603      	mov	r3, r0
 800bff4:	e00e      	b.n	800c014 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800bff6:	7afb      	ldrb	r3, [r7, #11]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d101      	bne.n	800c000 <osTimerCreate+0x48>
 800bffc:	2201      	movs	r2, #1
 800bffe:	e000      	b.n	800c002 <osTimerCreate+0x4a>
 800c000:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2101      	movs	r1, #1
 800c00c:	4803      	ldr	r0, [pc, #12]	; (800c01c <osTimerCreate+0x64>)
 800c00e:	f002 f9c9 	bl	800e3a4 <xTimerCreate>
 800c012:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	0800fe8c 	.word	0x0800fe8c

0800c020 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af02      	add	r7, sp, #8
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <osTimerStart+0x20>
    ticks = 1;
 800c03c:	2301      	movs	r3, #1
 800c03e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800c040:	f7ff ff40 	bl	800bec4 <inHandlerMode>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d01a      	beq.n	800c080 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800c04a:	f107 030c 	add.w	r3, r7, #12
 800c04e:	2200      	movs	r2, #0
 800c050:	9200      	str	r2, [sp, #0]
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	2109      	movs	r1, #9
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f002 fa44 	bl	800e4e4 <xTimerGenericCommand>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d002      	beq.n	800c068 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800c062:	23ff      	movs	r3, #255	; 0xff
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	e018      	b.n	800c09a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d015      	beq.n	800c09a <osTimerStart+0x7a>
 800c06e:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <osTimerStart+0x84>)
 800c070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	e00c      	b.n	800c09a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800c080:	2300      	movs	r3, #0
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	2300      	movs	r3, #0
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	2104      	movs	r1, #4
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f002 fa2a 	bl	800e4e4 <xTimerGenericCommand>
 800c090:	4603      	mov	r3, r0
 800c092:	2b01      	cmp	r3, #1
 800c094:	d001      	beq.n	800c09a <osTimerStart+0x7a>
      result = osErrorOS;
 800c096:	23ff      	movs	r3, #255	; 0xff
 800c098:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800c09a:	697b      	ldr	r3, [r7, #20]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800c0b8:	f7ff ff04 	bl	800bec4 <inHandlerMode>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d019      	beq.n	800c0f6 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800c0c2:	f107 0308 	add.w	r3, r7, #8
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	9200      	str	r2, [sp, #0]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	2108      	movs	r1, #8
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f002 fa08 	bl	800e4e4 <xTimerGenericCommand>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d001      	beq.n	800c0de <osTimerStop+0x36>
      return osErrorOS;
 800c0da:	23ff      	movs	r3, #255	; 0xff
 800c0dc:	e019      	b.n	800c112 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d015      	beq.n	800c110 <osTimerStop+0x68>
 800c0e4:	4b0d      	ldr	r3, [pc, #52]	; (800c11c <osTimerStop+0x74>)
 800c0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	e00c      	b.n	800c110 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2103      	movs	r1, #3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f002 f9ef 	bl	800e4e4 <xTimerGenericCommand>
 800c106:	4603      	mov	r3, r0
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d001      	beq.n	800c110 <osTimerStop+0x68>
      result = osErrorOS;
 800c10c:	23ff      	movs	r3, #255	; 0xff
 800c10e:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800c110:	68fb      	ldr	r3, [r7, #12]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	e000ed04 	.word	0xe000ed04

0800c120 <osTimerDelete>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerDelete (osTimerId timer_id)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af02      	add	r7, sp, #8
 800c126:	6078      	str	r0, [r7, #4]
osStatus result = osOK;
 800c128:	2300      	movs	r3, #0
 800c12a:	60fb      	str	r3, [r7, #12]

#if (configUSE_TIMERS == 1)

   if (inHandlerMode()) {
 800c12c:	f7ff feca 	bl	800bec4 <inHandlerMode>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <osTimerDelete+0x1a>
     return osErrorISR;
 800c136:	2382      	movs	r3, #130	; 0x82
 800c138:	e00e      	b.n	800c158 <osTimerDelete+0x38>
  }
  else { 
    if ((xTimerDelete(timer_id, osWaitForever )) != pdPASS) {
 800c13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	2300      	movs	r3, #0
 800c142:	2200      	movs	r2, #0
 800c144:	2105      	movs	r1, #5
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f002 f9cc 	bl	800e4e4 <xTimerGenericCommand>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d001      	beq.n	800c156 <osTimerDelete+0x36>
      result = osErrorOS;
 800c152:	23ff      	movs	r3, #255	; 0xff
 800c154:	60fb      	str	r3, [r7, #12]
    
#else 
  result = osErrorOS;
#endif 
 
  return result;
 800c156:	68fb      	ldr	r3, [r7, #12]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d007      	beq.n	800c180 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	4619      	mov	r1, r3
 800c176:	2001      	movs	r0, #1
 800c178:	f000 fa65 	bl	800c646 <xQueueCreateMutexStatic>
 800c17c:	4603      	mov	r3, r0
 800c17e:	e003      	b.n	800c188 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c180:	2001      	movs	r0, #1
 800c182:	f000 fa48 	bl	800c616 <xQueueCreateMutex>
 800c186:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c190:	b590      	push	{r4, r7, lr}
 800c192:	b085      	sub	sp, #20
 800c194:	af02      	add	r7, sp, #8
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d011      	beq.n	800c1c6 <osMessageCreate+0x36>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00d      	beq.n	800c1c6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6818      	ldr	r0, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6859      	ldr	r1, [r3, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	689a      	ldr	r2, [r3, #8]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	2400      	movs	r4, #0
 800c1bc:	9400      	str	r4, [sp, #0]
 800c1be:	f000 f92d 	bl	800c41c <xQueueGenericCreateStatic>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	e008      	b.n	800c1d8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6818      	ldr	r0, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	f000 f9a5 	bl	800c520 <xQueueGenericCreate>
 800c1d6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd90      	pop	{r4, r7, pc}

0800c1e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f103 0208 	add.w	r2, r3, #8
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f103 0208 	add.w	r2, r3, #8
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f103 0208 	add.w	r2, r3, #8
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c214:	bf00      	nop
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c22e:	bf00      	nop
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c23a:	b480      	push	{r7}
 800c23c:	b085      	sub	sp, #20
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	689a      	ldr	r2, [r3, #8]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
}
 800c276:	bf00      	nop
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c282:	b480      	push	{r7}
 800c284:	b085      	sub	sp, #20
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c298:	d103      	bne.n	800c2a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	e00c      	b.n	800c2bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	60fb      	str	r3, [r7, #12]
 800c2a8:	e002      	b.n	800c2b0 <vListInsert+0x2e>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d2f6      	bcs.n	800c2aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	1c5a      	adds	r2, r3, #1
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	601a      	str	r2, [r3, #0]
}
 800c2e8:	bf00      	nop
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	6892      	ldr	r2, [r2, #8]
 800c30a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	6852      	ldr	r2, [r2, #4]
 800c314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d103      	bne.n	800c328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	689a      	ldr	r2, [r3, #8]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	1e5a      	subs	r2, r3, #1
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3714      	adds	r7, #20
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10c      	bne.n	800c376 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	b672      	cpsid	i
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	b662      	cpsie	i
 800c370:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c372:	bf00      	nop
 800c374:	e7fe      	b.n	800c374 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c376:	f002 fcb9 	bl	800ecec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c382:	68f9      	ldr	r1, [r7, #12]
 800c384:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c386:	fb01 f303 	mul.w	r3, r1, r3
 800c38a:	441a      	add	r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	68f9      	ldr	r1, [r7, #12]
 800c3aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3ac:	fb01 f303 	mul.w	r3, r1, r3
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	22ff      	movs	r2, #255	; 0xff
 800c3ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	22ff      	movs	r2, #255	; 0xff
 800c3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d114      	bne.n	800c3f6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d01a      	beq.n	800c40a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3310      	adds	r3, #16
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f001 fb91 	bl	800db00 <xTaskRemoveFromEventList>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d012      	beq.n	800c40a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3e4:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <xQueueGenericReset+0xd0>)
 800c3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ea:	601a      	str	r2, [r3, #0]
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	e009      	b.n	800c40a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3310      	adds	r3, #16
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff fef0 	bl	800c1e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3324      	adds	r3, #36	; 0x24
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff feeb 	bl	800c1e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c40a:	f002 fca3 	bl	800ed54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c40e:	2301      	movs	r3, #1
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08e      	sub	sp, #56	; 0x38
 800c420:	af02      	add	r7, sp, #8
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10c      	bne.n	800c44a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	b672      	cpsid	i
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	b662      	cpsie	i
 800c444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c446:	bf00      	nop
 800c448:	e7fe      	b.n	800c448 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10c      	bne.n	800c46a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	b672      	cpsid	i
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	b662      	cpsie	i
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c466:	bf00      	nop
 800c468:	e7fe      	b.n	800c468 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <xQueueGenericCreateStatic+0x5a>
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d001      	beq.n	800c47a <xQueueGenericCreateStatic+0x5e>
 800c476:	2301      	movs	r3, #1
 800c478:	e000      	b.n	800c47c <xQueueGenericCreateStatic+0x60>
 800c47a:	2300      	movs	r3, #0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10c      	bne.n	800c49a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	b672      	cpsid	i
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	b662      	cpsie	i
 800c494:	623b      	str	r3, [r7, #32]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <xQueueGenericCreateStatic+0x8a>
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <xQueueGenericCreateStatic+0x8e>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e000      	b.n	800c4ac <xQueueGenericCreateStatic+0x90>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10c      	bne.n	800c4ca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	b672      	cpsid	i
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	b662      	cpsie	i
 800c4c4:	61fb      	str	r3, [r7, #28]
}
 800c4c6:	bf00      	nop
 800c4c8:	e7fe      	b.n	800c4c8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c4ca:	2348      	movs	r3, #72	; 0x48
 800c4cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b48      	cmp	r3, #72	; 0x48
 800c4d2:	d00c      	beq.n	800c4ee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	b672      	cpsid	i
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	b662      	cpsie	i
 800c4e8:	61bb      	str	r3, [r7, #24]
}
 800c4ea:	bf00      	nop
 800c4ec:	e7fe      	b.n	800c4ec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00d      	beq.n	800c516 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c502:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	4613      	mov	r3, r2
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 f847 	bl	800c5a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c518:	4618      	mov	r0, r3
 800c51a:	3730      	adds	r7, #48	; 0x30
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08a      	sub	sp, #40	; 0x28
 800c524:	af02      	add	r7, sp, #8
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	4613      	mov	r3, r2
 800c52c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10c      	bne.n	800c54e <xQueueGenericCreate+0x2e>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	b672      	cpsid	i
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	b662      	cpsie	i
 800c548:	613b      	str	r3, [r7, #16]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d102      	bne.n	800c55a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c554:	2300      	movs	r3, #0
 800c556:	61fb      	str	r3, [r7, #28]
 800c558:	e004      	b.n	800c564 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	fb02 f303 	mul.w	r3, r2, r3
 800c562:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	3348      	adds	r3, #72	; 0x48
 800c568:	4618      	mov	r0, r3
 800c56a:	f002 fceb 	bl	800ef44 <pvPortMalloc>
 800c56e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d011      	beq.n	800c59a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	3348      	adds	r3, #72	; 0x48
 800c57e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c588:	79fa      	ldrb	r2, [r7, #7]
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	4613      	mov	r3, r2
 800c590:	697a      	ldr	r2, [r7, #20]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 f805 	bl	800c5a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c59a:	69bb      	ldr	r3, [r7, #24]
	}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3720      	adds	r7, #32
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d103      	bne.n	800c5c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	69ba      	ldr	r2, [r7, #24]
 800c5bc:	601a      	str	r2, [r3, #0]
 800c5be:	e002      	b.n	800c5c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	69b8      	ldr	r0, [r7, #24]
 800c5d6:	f7ff feb7 	bl	800c348 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00e      	beq.n	800c60e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c602:	2300      	movs	r3, #0
 800c604:	2200      	movs	r2, #0
 800c606:	2100      	movs	r1, #0
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f837 	bl	800c67c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c616:	b580      	push	{r7, lr}
 800c618:	b086      	sub	sp, #24
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	4603      	mov	r3, r0
 800c61e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c620:	2301      	movs	r3, #1
 800c622:	617b      	str	r3, [r7, #20]
 800c624:	2300      	movs	r3, #0
 800c626:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	461a      	mov	r2, r3
 800c62c:	6939      	ldr	r1, [r7, #16]
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f7ff ff76 	bl	800c520 <xQueueGenericCreate>
 800c634:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f7ff ffd3 	bl	800c5e2 <prvInitialiseMutex>

		return xNewQueue;
 800c63c:	68fb      	ldr	r3, [r7, #12]
	}
 800c63e:	4618      	mov	r0, r3
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c646:	b580      	push	{r7, lr}
 800c648:	b088      	sub	sp, #32
 800c64a:	af02      	add	r7, sp, #8
 800c64c:	4603      	mov	r3, r0
 800c64e:	6039      	str	r1, [r7, #0]
 800c650:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c652:	2301      	movs	r3, #1
 800c654:	617b      	str	r3, [r7, #20]
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2200      	movs	r2, #0
 800c662:	6939      	ldr	r1, [r7, #16]
 800c664:	6978      	ldr	r0, [r7, #20]
 800c666:	f7ff fed9 	bl	800c41c <xQueueGenericCreateStatic>
 800c66a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff ffb8 	bl	800c5e2 <prvInitialiseMutex>

		return xNewQueue;
 800c672:	68fb      	ldr	r3, [r7, #12]
	}
 800c674:	4618      	mov	r0, r3
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08e      	sub	sp, #56	; 0x38
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
 800c688:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c68a:	2300      	movs	r3, #0
 800c68c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10c      	bne.n	800c6b2 <xQueueGenericSend+0x36>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	b672      	cpsid	i
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	b662      	cpsie	i
 800c6ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6ae:	bf00      	nop
 800c6b0:	e7fe      	b.n	800c6b0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <xQueueGenericSend+0x44>
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <xQueueGenericSend+0x48>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e000      	b.n	800c6c6 <xQueueGenericSend+0x4a>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10c      	bne.n	800c6e4 <xQueueGenericSend+0x68>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	b672      	cpsid	i
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	b662      	cpsie	i
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d103      	bne.n	800c6f2 <xQueueGenericSend+0x76>
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d101      	bne.n	800c6f6 <xQueueGenericSend+0x7a>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e000      	b.n	800c6f8 <xQueueGenericSend+0x7c>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10c      	bne.n	800c716 <xQueueGenericSend+0x9a>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	b672      	cpsid	i
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	b662      	cpsie	i
 800c710:	623b      	str	r3, [r7, #32]
}
 800c712:	bf00      	nop
 800c714:	e7fe      	b.n	800c714 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c716:	f001 fbbb 	bl	800de90 <xTaskGetSchedulerState>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d102      	bne.n	800c726 <xQueueGenericSend+0xaa>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <xQueueGenericSend+0xae>
 800c726:	2301      	movs	r3, #1
 800c728:	e000      	b.n	800c72c <xQueueGenericSend+0xb0>
 800c72a:	2300      	movs	r3, #0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10c      	bne.n	800c74a <xQueueGenericSend+0xce>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	b672      	cpsid	i
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	b662      	cpsie	i
 800c744:	61fb      	str	r3, [r7, #28]
}
 800c746:	bf00      	nop
 800c748:	e7fe      	b.n	800c748 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c74a:	f002 facf 	bl	800ecec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c756:	429a      	cmp	r2, r3
 800c758:	d302      	bcc.n	800c760 <xQueueGenericSend+0xe4>
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d129      	bne.n	800c7b4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c766:	f000 fb41 	bl	800cdec <prvCopyDataToQueue>
 800c76a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c770:	2b00      	cmp	r3, #0
 800c772:	d010      	beq.n	800c796 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	3324      	adds	r3, #36	; 0x24
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 f9c1 	bl	800db00 <xTaskRemoveFromEventList>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d013      	beq.n	800c7ac <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c784:	4b3f      	ldr	r3, [pc, #252]	; (800c884 <xQueueGenericSend+0x208>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	e00a      	b.n	800c7ac <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d007      	beq.n	800c7ac <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c79c:	4b39      	ldr	r3, [pc, #228]	; (800c884 <xQueueGenericSend+0x208>)
 800c79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7ac:	f002 fad2 	bl	800ed54 <vPortExitCritical>
				return pdPASS;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e063      	b.n	800c87c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d103      	bne.n	800c7c2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7ba:	f002 facb 	bl	800ed54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	e05c      	b.n	800c87c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d106      	bne.n	800c7d6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7c8:	f107 0314 	add.w	r3, r7, #20
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f001 f9fb 	bl	800dbc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7d6:	f002 fabd 	bl	800ed54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7da:	f000 ff63 	bl	800d6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7de:	f002 fa85 	bl	800ecec <vPortEnterCritical>
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7e8:	b25b      	sxtb	r3, r3
 800c7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7ee:	d103      	bne.n	800c7f8 <xQueueGenericSend+0x17c>
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7fe:	b25b      	sxtb	r3, r3
 800c800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c804:	d103      	bne.n	800c80e <xQueueGenericSend+0x192>
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c80e:	f002 faa1 	bl	800ed54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c812:	1d3a      	adds	r2, r7, #4
 800c814:	f107 0314 	add.w	r3, r7, #20
 800c818:	4611      	mov	r1, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f001 f9ea 	bl	800dbf4 <xTaskCheckForTimeOut>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d124      	bne.n	800c870 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c828:	f000 fbd8 	bl	800cfdc <prvIsQueueFull>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d018      	beq.n	800c864 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c834:	3310      	adds	r3, #16
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	4611      	mov	r1, r2
 800c83a:	4618      	mov	r0, r3
 800c83c:	f001 f90c 	bl	800da58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c842:	f000 fb63 	bl	800cf0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c846:	f000 ff3b 	bl	800d6c0 <xTaskResumeAll>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f47f af7c 	bne.w	800c74a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c852:	4b0c      	ldr	r3, [pc, #48]	; (800c884 <xQueueGenericSend+0x208>)
 800c854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	e772      	b.n	800c74a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c866:	f000 fb51 	bl	800cf0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c86a:	f000 ff29 	bl	800d6c0 <xTaskResumeAll>
 800c86e:	e76c      	b.n	800c74a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c872:	f000 fb4b 	bl	800cf0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c876:	f000 ff23 	bl	800d6c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c87a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3738      	adds	r7, #56	; 0x38
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	e000ed04 	.word	0xe000ed04

0800c888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08e      	sub	sp, #56	; 0x38
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10c      	bne.n	800c8ba <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	b672      	cpsid	i
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	b662      	cpsie	i
 800c8b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d103      	bne.n	800c8c8 <xQueueGenericSendFromISR+0x40>
 800c8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d101      	bne.n	800c8cc <xQueueGenericSendFromISR+0x44>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e000      	b.n	800c8ce <xQueueGenericSendFromISR+0x46>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10c      	bne.n	800c8ec <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d6:	b672      	cpsid	i
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	b662      	cpsie	i
 800c8e6:	623b      	str	r3, [r7, #32]
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d103      	bne.n	800c8fa <xQueueGenericSendFromISR+0x72>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d101      	bne.n	800c8fe <xQueueGenericSendFromISR+0x76>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e000      	b.n	800c900 <xQueueGenericSendFromISR+0x78>
 800c8fe:	2300      	movs	r3, #0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10c      	bne.n	800c91e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	b672      	cpsid	i
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	b662      	cpsie	i
 800c918:	61fb      	str	r3, [r7, #28]
}
 800c91a:	bf00      	nop
 800c91c:	e7fe      	b.n	800c91c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c91e:	f002 facd 	bl	800eebc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c922:	f3ef 8211 	mrs	r2, BASEPRI
 800c926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92a:	b672      	cpsid	i
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	b662      	cpsie	i
 800c93a:	61ba      	str	r2, [r7, #24]
 800c93c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c93e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c940:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d302      	bcc.n	800c954 <xQueueGenericSendFromISR+0xcc>
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d12c      	bne.n	800c9ae <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c95a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c964:	f000 fa42 	bl	800cdec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c968:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c96c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c970:	d112      	bne.n	800c998 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c976:	2b00      	cmp	r3, #0
 800c978:	d016      	beq.n	800c9a8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	3324      	adds	r3, #36	; 0x24
 800c97e:	4618      	mov	r0, r3
 800c980:	f001 f8be 	bl	800db00 <xTaskRemoveFromEventList>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00e      	beq.n	800c9a8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	e007      	b.n	800c9a8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c99c:	3301      	adds	r3, #1
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	b25a      	sxtb	r2, r3
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c9ac:	e001      	b.n	800c9b2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3738      	adds	r7, #56	; 0x38
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08c      	sub	sp, #48	; 0x30
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10c      	bne.n	800c9fc <xQueueReceive+0x34>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	b672      	cpsid	i
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	b662      	cpsie	i
 800c9f6:	623b      	str	r3, [r7, #32]
}
 800c9f8:	bf00      	nop
 800c9fa:	e7fe      	b.n	800c9fa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d103      	bne.n	800ca0a <xQueueReceive+0x42>
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <xQueueReceive+0x46>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e000      	b.n	800ca10 <xQueueReceive+0x48>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10c      	bne.n	800ca2e <xQueueReceive+0x66>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	b672      	cpsid	i
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	b662      	cpsie	i
 800ca28:	61fb      	str	r3, [r7, #28]
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca2e:	f001 fa2f 	bl	800de90 <xTaskGetSchedulerState>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d102      	bne.n	800ca3e <xQueueReceive+0x76>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <xQueueReceive+0x7a>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e000      	b.n	800ca44 <xQueueReceive+0x7c>
 800ca42:	2300      	movs	r3, #0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10c      	bne.n	800ca62 <xQueueReceive+0x9a>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	b672      	cpsid	i
 800ca4e:	f383 8811 	msr	BASEPRI, r3
 800ca52:	f3bf 8f6f 	isb	sy
 800ca56:	f3bf 8f4f 	dsb	sy
 800ca5a:	b662      	cpsie	i
 800ca5c:	61bb      	str	r3, [r7, #24]
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca62:	f002 f943 	bl	800ecec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d01f      	beq.n	800cab2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca72:	68b9      	ldr	r1, [r7, #8]
 800ca74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca76:	f000 fa23 	bl	800cec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	1e5a      	subs	r2, r3, #1
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00f      	beq.n	800caaa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	3310      	adds	r3, #16
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 f836 	bl	800db00 <xTaskRemoveFromEventList>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d007      	beq.n	800caaa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca9a:	4b3d      	ldr	r3, [pc, #244]	; (800cb90 <xQueueReceive+0x1c8>)
 800ca9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800caaa:	f002 f953 	bl	800ed54 <vPortExitCritical>
				return pdPASS;
 800caae:	2301      	movs	r3, #1
 800cab0:	e069      	b.n	800cb86 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d103      	bne.n	800cac0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cab8:	f002 f94c 	bl	800ed54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e062      	b.n	800cb86 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d106      	bne.n	800cad4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cac6:	f107 0310 	add.w	r3, r7, #16
 800caca:	4618      	mov	r0, r3
 800cacc:	f001 f87c 	bl	800dbc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cad0:	2301      	movs	r3, #1
 800cad2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cad4:	f002 f93e 	bl	800ed54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cad8:	f000 fde4 	bl	800d6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cadc:	f002 f906 	bl	800ecec <vPortEnterCritical>
 800cae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cae6:	b25b      	sxtb	r3, r3
 800cae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caec:	d103      	bne.n	800caf6 <xQueueReceive+0x12e>
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cafc:	b25b      	sxtb	r3, r3
 800cafe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb02:	d103      	bne.n	800cb0c <xQueueReceive+0x144>
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb0c:	f002 f922 	bl	800ed54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb10:	1d3a      	adds	r2, r7, #4
 800cb12:	f107 0310 	add.w	r3, r7, #16
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 f86b 	bl	800dbf4 <xTaskCheckForTimeOut>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d123      	bne.n	800cb6c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb26:	f000 fa43 	bl	800cfb0 <prvIsQueueEmpty>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d017      	beq.n	800cb60 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	3324      	adds	r3, #36	; 0x24
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 ff8d 	bl	800da58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb40:	f000 f9e4 	bl	800cf0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb44:	f000 fdbc 	bl	800d6c0 <xTaskResumeAll>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d189      	bne.n	800ca62 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800cb4e:	4b10      	ldr	r3, [pc, #64]	; (800cb90 <xQueueReceive+0x1c8>)
 800cb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	e780      	b.n	800ca62 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb62:	f000 f9d3 	bl	800cf0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb66:	f000 fdab 	bl	800d6c0 <xTaskResumeAll>
 800cb6a:	e77a      	b.n	800ca62 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb6e:	f000 f9cd 	bl	800cf0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb72:	f000 fda5 	bl	800d6c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb78:	f000 fa1a 	bl	800cfb0 <prvIsQueueEmpty>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f43f af6f 	beq.w	800ca62 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3730      	adds	r7, #48	; 0x30
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	e000ed04 	.word	0xe000ed04

0800cb94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08e      	sub	sp, #56	; 0x38
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cba6:	2300      	movs	r3, #0
 800cba8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10c      	bne.n	800cbca <xQueueSemaphoreTake+0x36>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	b672      	cpsid	i
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	b662      	cpsie	i
 800cbc4:	623b      	str	r3, [r7, #32]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00c      	beq.n	800cbec <xQueueSemaphoreTake+0x58>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	b672      	cpsid	i
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	b662      	cpsie	i
 800cbe6:	61fb      	str	r3, [r7, #28]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbec:	f001 f950 	bl	800de90 <xTaskGetSchedulerState>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d102      	bne.n	800cbfc <xQueueSemaphoreTake+0x68>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <xQueueSemaphoreTake+0x6c>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e000      	b.n	800cc02 <xQueueSemaphoreTake+0x6e>
 800cc00:	2300      	movs	r3, #0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10c      	bne.n	800cc20 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	b672      	cpsid	i
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	b662      	cpsie	i
 800cc1a:	61bb      	str	r3, [r7, #24]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc20:	f002 f864 	bl	800ecec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d024      	beq.n	800cc7a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	1e5a      	subs	r2, r3, #1
 800cc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d104      	bne.n	800cc4a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cc40:	f001 faec 	bl	800e21c <pvTaskIncrementMutexHeldCount>
 800cc44:	4602      	mov	r2, r0
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00f      	beq.n	800cc72 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc54:	3310      	adds	r3, #16
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 ff52 	bl	800db00 <xTaskRemoveFromEventList>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d007      	beq.n	800cc72 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc62:	4b55      	ldr	r3, [pc, #340]	; (800cdb8 <xQueueSemaphoreTake+0x224>)
 800cc64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc72:	f002 f86f 	bl	800ed54 <vPortExitCritical>
				return pdPASS;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e099      	b.n	800cdae <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d113      	bne.n	800cca8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00c      	beq.n	800cca0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	b672      	cpsid	i
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	b662      	cpsie	i
 800cc9a:	617b      	str	r3, [r7, #20]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cca0:	f002 f858 	bl	800ed54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cca4:	2300      	movs	r3, #0
 800cca6:	e082      	b.n	800cdae <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d106      	bne.n	800ccbc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccae:	f107 030c 	add.w	r3, r7, #12
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 ff88 	bl	800dbc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ccbc:	f002 f84a 	bl	800ed54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccc0:	f000 fcf0 	bl	800d6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccc4:	f002 f812 	bl	800ecec <vPortEnterCritical>
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccce:	b25b      	sxtb	r3, r3
 800ccd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccd4:	d103      	bne.n	800ccde <xQueueSemaphoreTake+0x14a>
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cce4:	b25b      	sxtb	r3, r3
 800cce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccea:	d103      	bne.n	800ccf4 <xQueueSemaphoreTake+0x160>
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccf4:	f002 f82e 	bl	800ed54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccf8:	463a      	mov	r2, r7
 800ccfa:	f107 030c 	add.w	r3, r7, #12
 800ccfe:	4611      	mov	r1, r2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 ff77 	bl	800dbf4 <xTaskCheckForTimeOut>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d132      	bne.n	800cd72 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd0e:	f000 f94f 	bl	800cfb0 <prvIsQueueEmpty>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d026      	beq.n	800cd66 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d109      	bne.n	800cd34 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800cd20:	f001 ffe4 	bl	800ecec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f001 f8cf 	bl	800decc <xTaskPriorityInherit>
 800cd2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cd30:	f002 f810 	bl	800ed54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd36:	3324      	adds	r3, #36	; 0x24
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 fe8b 	bl	800da58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd44:	f000 f8e2 	bl	800cf0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd48:	f000 fcba 	bl	800d6c0 <xTaskResumeAll>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f47f af66 	bne.w	800cc20 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800cd54:	4b18      	ldr	r3, [pc, #96]	; (800cdb8 <xQueueSemaphoreTake+0x224>)
 800cd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd5a:	601a      	str	r2, [r3, #0]
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	f3bf 8f6f 	isb	sy
 800cd64:	e75c      	b.n	800cc20 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd68:	f000 f8d0 	bl	800cf0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd6c:	f000 fca8 	bl	800d6c0 <xTaskResumeAll>
 800cd70:	e756      	b.n	800cc20 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd74:	f000 f8ca 	bl	800cf0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd78:	f000 fca2 	bl	800d6c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd7e:	f000 f917 	bl	800cfb0 <prvIsQueueEmpty>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f43f af4b 	beq.w	800cc20 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00d      	beq.n	800cdac <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800cd90:	f001 ffac 	bl	800ecec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd96:	f000 f811 	bl	800cdbc <prvGetDisinheritPriorityAfterTimeout>
 800cd9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cda2:	4618      	mov	r0, r3
 800cda4:	f001 f99c 	bl	800e0e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cda8:	f001 ffd4 	bl	800ed54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cdac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3738      	adds	r7, #56	; 0x38
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	e000ed04 	.word	0xe000ed04

0800cdbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d006      	beq.n	800cdda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f1c3 0307 	rsb	r3, r3, #7
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	e001      	b.n	800cdde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cdde:	68fb      	ldr	r3, [r7, #12]
	}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10d      	bne.n	800ce26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d14d      	bne.n	800ceae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f001 f8d8 	bl	800dfcc <xTaskPriorityDisinherit>
 800ce1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	609a      	str	r2, [r3, #8]
 800ce24:	e043      	b.n	800ceae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d119      	bne.n	800ce60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6858      	ldr	r0, [r3, #4]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce34:	461a      	mov	r2, r3
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	f002 fa94 	bl	800f364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce44:	441a      	add	r2, r3
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	685a      	ldr	r2, [r3, #4]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d32b      	bcc.n	800ceae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	e026      	b.n	800ceae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	68d8      	ldr	r0, [r3, #12]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce68:	461a      	mov	r2, r3
 800ce6a:	68b9      	ldr	r1, [r7, #8]
 800ce6c:	f002 fa7a 	bl	800f364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	68da      	ldr	r2, [r3, #12]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce78:	425b      	negs	r3, r3
 800ce7a:	441a      	add	r2, r3
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	68da      	ldr	r2, [r3, #12]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d207      	bcs.n	800ce9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	689a      	ldr	r2, [r3, #8]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce94:	425b      	negs	r3, r3
 800ce96:	441a      	add	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d105      	bne.n	800ceae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ceb6:	697b      	ldr	r3, [r7, #20]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3718      	adds	r7, #24
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d018      	beq.n	800cf04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68da      	ldr	r2, [r3, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceda:	441a      	add	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	68da      	ldr	r2, [r3, #12]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d303      	bcc.n	800cef4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68d9      	ldr	r1, [r3, #12]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	461a      	mov	r2, r3
 800cefe:	6838      	ldr	r0, [r7, #0]
 800cf00:	f002 fa30 	bl	800f364 <memcpy>
	}
}
 800cf04:	bf00      	nop
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf14:	f001 feea 	bl	800ecec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf20:	e011      	b.n	800cf46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d012      	beq.n	800cf50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3324      	adds	r3, #36	; 0x24
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 fde6 	bl	800db00 <xTaskRemoveFromEventList>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cf3a:	f000 fec1 	bl	800dcc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	3b01      	subs	r3, #1
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dce9      	bgt.n	800cf22 <prvUnlockQueue+0x16>
 800cf4e:	e000      	b.n	800cf52 <prvUnlockQueue+0x46>
					break;
 800cf50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	22ff      	movs	r2, #255	; 0xff
 800cf56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cf5a:	f001 fefb 	bl	800ed54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cf5e:	f001 fec5 	bl	800ecec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf6a:	e011      	b.n	800cf90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d012      	beq.n	800cf9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3310      	adds	r3, #16
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 fdc1 	bl	800db00 <xTaskRemoveFromEventList>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf84:	f000 fe9c 	bl	800dcc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf88:	7bbb      	ldrb	r3, [r7, #14]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	dce9      	bgt.n	800cf6c <prvUnlockQueue+0x60>
 800cf98:	e000      	b.n	800cf9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	22ff      	movs	r2, #255	; 0xff
 800cfa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cfa4:	f001 fed6 	bl	800ed54 <vPortExitCritical>
}
 800cfa8:	bf00      	nop
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfb8:	f001 fe98 	bl	800ecec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d102      	bne.n	800cfca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	e001      	b.n	800cfce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfce:	f001 fec1 	bl	800ed54 <vPortExitCritical>

	return xReturn;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfe4:	f001 fe82 	bl	800ecec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d102      	bne.n	800cffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cff4:	2301      	movs	r3, #1
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	e001      	b.n	800cffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cffa:	2300      	movs	r3, #0
 800cffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cffe:	f001 fea9 	bl	800ed54 <vPortExitCritical>

	return xReturn;
 800d002:	68fb      	ldr	r3, [r7, #12]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d016:	2300      	movs	r3, #0
 800d018:	60fb      	str	r3, [r7, #12]
 800d01a:	e014      	b.n	800d046 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d01c:	4a0f      	ldr	r2, [pc, #60]	; (800d05c <vQueueAddToRegistry+0x50>)
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10b      	bne.n	800d040 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d028:	490c      	ldr	r1, [pc, #48]	; (800d05c <vQueueAddToRegistry+0x50>)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d032:	4a0a      	ldr	r2, [pc, #40]	; (800d05c <vQueueAddToRegistry+0x50>)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	4413      	add	r3, r2
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d03e:	e006      	b.n	800d04e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	3301      	adds	r3, #1
 800d044:	60fb      	str	r3, [r7, #12]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b07      	cmp	r3, #7
 800d04a:	d9e7      	bls.n	800d01c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d04c:	bf00      	nop
 800d04e:	bf00      	nop
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	20008c3c 	.word	0x20008c3c

0800d060 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d070:	f001 fe3c 	bl	800ecec <vPortEnterCritical>
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d07a:	b25b      	sxtb	r3, r3
 800d07c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d080:	d103      	bne.n	800d08a <vQueueWaitForMessageRestricted+0x2a>
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d090:	b25b      	sxtb	r3, r3
 800d092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d096:	d103      	bne.n	800d0a0 <vQueueWaitForMessageRestricted+0x40>
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0a0:	f001 fe58 	bl	800ed54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	3324      	adds	r3, #36	; 0x24
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	68b9      	ldr	r1, [r7, #8]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 fcf5 	bl	800daa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d0ba:	6978      	ldr	r0, [r7, #20]
 800d0bc:	f7ff ff26 	bl	800cf0c <prvUnlockQueue>
	}
 800d0c0:	bf00      	nop
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08e      	sub	sp, #56	; 0x38
 800d0cc:	af04      	add	r7, sp, #16
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10c      	bne.n	800d0f6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	b672      	cpsid	i
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	b662      	cpsie	i
 800d0f0:	623b      	str	r3, [r7, #32]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d10c      	bne.n	800d116 <xTaskCreateStatic+0x4e>
	__asm volatile
 800d0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d100:	b672      	cpsid	i
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	b662      	cpsie	i
 800d110:	61fb      	str	r3, [r7, #28]
}
 800d112:	bf00      	nop
 800d114:	e7fe      	b.n	800d114 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d116:	23b4      	movs	r3, #180	; 0xb4
 800d118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	2bb4      	cmp	r3, #180	; 0xb4
 800d11e:	d00c      	beq.n	800d13a <xTaskCreateStatic+0x72>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	b672      	cpsid	i
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	b662      	cpsie	i
 800d134:	61bb      	str	r3, [r7, #24]
}
 800d136:	bf00      	nop
 800d138:	e7fe      	b.n	800d138 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d13a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d01e      	beq.n	800d180 <xTaskCreateStatic+0xb8>
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	2b00      	cmp	r3, #0
 800d146:	d01b      	beq.n	800d180 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d150:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	2202      	movs	r2, #2
 800d156:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d15a:	2300      	movs	r3, #0
 800d15c:	9303      	str	r3, [sp, #12]
 800d15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d160:	9302      	str	r3, [sp, #8]
 800d162:	f107 0314 	add.w	r3, r7, #20
 800d166:	9301      	str	r3, [sp, #4]
 800d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	68b9      	ldr	r1, [r7, #8]
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f000 f850 	bl	800d218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d17a:	f000 f8ed 	bl	800d358 <prvAddNewTaskToReadyList>
 800d17e:	e001      	b.n	800d184 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d180:	2300      	movs	r3, #0
 800d182:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d184:	697b      	ldr	r3, [r7, #20]
	}
 800d186:	4618      	mov	r0, r3
 800d188:	3728      	adds	r7, #40	; 0x28
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b08c      	sub	sp, #48	; 0x30
 800d192:	af04      	add	r7, sp, #16
 800d194:	60f8      	str	r0, [r7, #12]
 800d196:	60b9      	str	r1, [r7, #8]
 800d198:	603b      	str	r3, [r7, #0]
 800d19a:	4613      	mov	r3, r2
 800d19c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d19e:	88fb      	ldrh	r3, [r7, #6]
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f001 fece 	bl	800ef44 <pvPortMalloc>
 800d1a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00e      	beq.n	800d1ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d1b0:	20b4      	movs	r0, #180	; 0xb4
 800d1b2:	f001 fec7 	bl	800ef44 <pvPortMalloc>
 800d1b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	697a      	ldr	r2, [r7, #20]
 800d1c2:	631a      	str	r2, [r3, #48]	; 0x30
 800d1c4:	e005      	b.n	800d1d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d1c6:	6978      	ldr	r0, [r7, #20]
 800d1c8:	f001 ff86 	bl	800f0d8 <vPortFree>
 800d1cc:	e001      	b.n	800d1d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d017      	beq.n	800d208 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d1e0:	88fa      	ldrh	r2, [r7, #6]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	9302      	str	r3, [sp, #8]
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	9301      	str	r3, [sp, #4]
 800d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	68b9      	ldr	r1, [r7, #8]
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f000 f80e 	bl	800d218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1fc:	69f8      	ldr	r0, [r7, #28]
 800d1fe:	f000 f8ab 	bl	800d358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d202:	2301      	movs	r3, #1
 800d204:	61bb      	str	r3, [r7, #24]
 800d206:	e002      	b.n	800d20e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d20c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d20e:	69bb      	ldr	r3, [r7, #24]
	}
 800d210:	4618      	mov	r0, r3
 800d212:	3720      	adds	r7, #32
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d230:	440b      	add	r3, r1
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	f003 0307 	and.w	r3, r3, #7
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00c      	beq.n	800d264 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24e:	b672      	cpsid	i
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	b662      	cpsie	i
 800d25e:	617b      	str	r3, [r7, #20]
}
 800d260:	bf00      	nop
 800d262:	e7fe      	b.n	800d262 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d01f      	beq.n	800d2aa <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d26a:	2300      	movs	r3, #0
 800d26c:	61fb      	str	r3, [r7, #28]
 800d26e:	e012      	b.n	800d296 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	4413      	add	r3, r2
 800d276:	7819      	ldrb	r1, [r3, #0]
 800d278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	4413      	add	r3, r2
 800d27e:	3334      	adds	r3, #52	; 0x34
 800d280:	460a      	mov	r2, r1
 800d282:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	4413      	add	r3, r2
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d006      	beq.n	800d29e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	3301      	adds	r3, #1
 800d294:	61fb      	str	r3, [r7, #28]
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	2b0f      	cmp	r3, #15
 800d29a:	d9e9      	bls.n	800d270 <prvInitialiseNewTask+0x58>
 800d29c:	e000      	b.n	800d2a0 <prvInitialiseNewTask+0x88>
			{
				break;
 800d29e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d2a8:	e003      	b.n	800d2b2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b4:	2b06      	cmp	r3, #6
 800d2b6:	d901      	bls.n	800d2bc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d2b8:	2306      	movs	r3, #6
 800d2ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe ffa4 	bl	800c220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2da:	3318      	adds	r3, #24
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe ff9f 	bl	800c220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	f1c3 0207 	rsb	r2, r3, #7
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	2200      	movs	r2, #0
 800d304:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30a:	334c      	adds	r3, #76	; 0x4c
 800d30c:	2260      	movs	r2, #96	; 0x60
 800d30e:	2100      	movs	r1, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f002 f835 	bl	800f380 <memset>
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	4a0c      	ldr	r2, [pc, #48]	; (800d34c <prvInitialiseNewTask+0x134>)
 800d31a:	651a      	str	r2, [r3, #80]	; 0x50
 800d31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31e:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <prvInitialiseNewTask+0x138>)
 800d320:	655a      	str	r2, [r3, #84]	; 0x54
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	4a0b      	ldr	r2, [pc, #44]	; (800d354 <prvInitialiseNewTask+0x13c>)
 800d326:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	68f9      	ldr	r1, [r7, #12]
 800d32c:	69b8      	ldr	r0, [r7, #24]
 800d32e:	f001 fbcd 	bl	800eacc <pxPortInitialiseStack>
 800d332:	4602      	mov	r2, r0
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d002      	beq.n	800d344 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d344:	bf00      	nop
 800d346:	3720      	adds	r7, #32
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	080d2214 	.word	0x080d2214
 800d350:	080d2234 	.word	0x080d2234
 800d354:	080d21f4 	.word	0x080d21f4

0800d358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d360:	f001 fcc4 	bl	800ecec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d364:	4b2a      	ldr	r3, [pc, #168]	; (800d410 <prvAddNewTaskToReadyList+0xb8>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3301      	adds	r3, #1
 800d36a:	4a29      	ldr	r2, [pc, #164]	; (800d410 <prvAddNewTaskToReadyList+0xb8>)
 800d36c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d36e:	4b29      	ldr	r3, [pc, #164]	; (800d414 <prvAddNewTaskToReadyList+0xbc>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d109      	bne.n	800d38a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d376:	4a27      	ldr	r2, [pc, #156]	; (800d414 <prvAddNewTaskToReadyList+0xbc>)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d37c:	4b24      	ldr	r3, [pc, #144]	; (800d410 <prvAddNewTaskToReadyList+0xb8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d110      	bne.n	800d3a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d384:	f000 fcc0 	bl	800dd08 <prvInitialiseTaskLists>
 800d388:	e00d      	b.n	800d3a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d38a:	4b23      	ldr	r3, [pc, #140]	; (800d418 <prvAddNewTaskToReadyList+0xc0>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d109      	bne.n	800d3a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d392:	4b20      	ldr	r3, [pc, #128]	; (800d414 <prvAddNewTaskToReadyList+0xbc>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d802      	bhi.n	800d3a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d3a0:	4a1c      	ldr	r2, [pc, #112]	; (800d414 <prvAddNewTaskToReadyList+0xbc>)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d3a6:	4b1d      	ldr	r3, [pc, #116]	; (800d41c <prvAddNewTaskToReadyList+0xc4>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	4a1b      	ldr	r2, [pc, #108]	; (800d41c <prvAddNewTaskToReadyList+0xc4>)
 800d3ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	409a      	lsls	r2, r3
 800d3b8:	4b19      	ldr	r3, [pc, #100]	; (800d420 <prvAddNewTaskToReadyList+0xc8>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	4a18      	ldr	r2, [pc, #96]	; (800d420 <prvAddNewTaskToReadyList+0xc8>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4a15      	ldr	r2, [pc, #84]	; (800d424 <prvAddNewTaskToReadyList+0xcc>)
 800d3d0:	441a      	add	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7fe ff2e 	bl	800c23a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d3de:	f001 fcb9 	bl	800ed54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d3e2:	4b0d      	ldr	r3, [pc, #52]	; (800d418 <prvAddNewTaskToReadyList+0xc0>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00e      	beq.n	800d408 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3ea:	4b0a      	ldr	r3, [pc, #40]	; (800d414 <prvAddNewTaskToReadyList+0xbc>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d207      	bcs.n	800d408 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3f8:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <prvAddNewTaskToReadyList+0xd0>)
 800d3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20000b8c 	.word	0x20000b8c
 800d414:	20000a8c 	.word	0x20000a8c
 800d418:	20000b98 	.word	0x20000b98
 800d41c:	20000ba8 	.word	0x20000ba8
 800d420:	20000b94 	.word	0x20000b94
 800d424:	20000a90 	.word	0x20000a90
 800d428:	e000ed04 	.word	0xe000ed04

0800d42c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d434:	f001 fc5a 	bl	800ecec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d102      	bne.n	800d444 <vTaskDelete+0x18>
 800d43e:	4b3a      	ldr	r3, [pc, #232]	; (800d528 <vTaskDelete+0xfc>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	e000      	b.n	800d446 <vTaskDelete+0x1a>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	3304      	adds	r3, #4
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fe ff51 	bl	800c2f4 <uxListRemove>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d115      	bne.n	800d484 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45c:	4933      	ldr	r1, [pc, #204]	; (800d52c <vTaskDelete+0x100>)
 800d45e:	4613      	mov	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	4413      	add	r3, r2
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	440b      	add	r3, r1
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10a      	bne.n	800d484 <vTaskDelete+0x58>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d472:	2201      	movs	r2, #1
 800d474:	fa02 f303 	lsl.w	r3, r2, r3
 800d478:	43da      	mvns	r2, r3
 800d47a:	4b2d      	ldr	r3, [pc, #180]	; (800d530 <vTaskDelete+0x104>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4013      	ands	r3, r2
 800d480:	4a2b      	ldr	r2, [pc, #172]	; (800d530 <vTaskDelete+0x104>)
 800d482:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3318      	adds	r3, #24
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe ff2f 	bl	800c2f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d496:	4b27      	ldr	r3, [pc, #156]	; (800d534 <vTaskDelete+0x108>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	3301      	adds	r3, #1
 800d49c:	4a25      	ldr	r2, [pc, #148]	; (800d534 <vTaskDelete+0x108>)
 800d49e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d4a0:	4b21      	ldr	r3, [pc, #132]	; (800d528 <vTaskDelete+0xfc>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d10b      	bne.n	800d4c2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4821      	ldr	r0, [pc, #132]	; (800d538 <vTaskDelete+0x10c>)
 800d4b2:	f7fe fec2 	bl	800c23a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d4b6:	4b21      	ldr	r3, [pc, #132]	; (800d53c <vTaskDelete+0x110>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	4a1f      	ldr	r2, [pc, #124]	; (800d53c <vTaskDelete+0x110>)
 800d4be:	6013      	str	r3, [r2, #0]
 800d4c0:	e009      	b.n	800d4d6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d4c2:	4b1f      	ldr	r3, [pc, #124]	; (800d540 <vTaskDelete+0x114>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	4a1d      	ldr	r2, [pc, #116]	; (800d540 <vTaskDelete+0x114>)
 800d4ca:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f000 fc89 	bl	800dde4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d4d2:	f000 fcbd 	bl	800de50 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800d4d6:	f001 fc3d 	bl	800ed54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d4da:	4b1a      	ldr	r3, [pc, #104]	; (800d544 <vTaskDelete+0x118>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d01d      	beq.n	800d51e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800d4e2:	4b11      	ldr	r3, [pc, #68]	; (800d528 <vTaskDelete+0xfc>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d118      	bne.n	800d51e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d4ec:	4b16      	ldr	r3, [pc, #88]	; (800d548 <vTaskDelete+0x11c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00c      	beq.n	800d50e <vTaskDelete+0xe2>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	b672      	cpsid	i
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	b662      	cpsie	i
 800d508:	60bb      	str	r3, [r7, #8]
}
 800d50a:	bf00      	nop
 800d50c:	e7fe      	b.n	800d50c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800d50e:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <vTaskDelete+0x120>)
 800d510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	20000a8c 	.word	0x20000a8c
 800d52c:	20000a90 	.word	0x20000a90
 800d530:	20000b94 	.word	0x20000b94
 800d534:	20000ba8 	.word	0x20000ba8
 800d538:	20000b60 	.word	0x20000b60
 800d53c:	20000b74 	.word	0x20000b74
 800d540:	20000b8c 	.word	0x20000b8c
 800d544:	20000b98 	.word	0x20000b98
 800d548:	20000bb4 	.word	0x20000bb4
 800d54c:	e000ed04 	.word	0xe000ed04

0800d550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d558:	2300      	movs	r3, #0
 800d55a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d019      	beq.n	800d596 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d562:	4b14      	ldr	r3, [pc, #80]	; (800d5b4 <vTaskDelay+0x64>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00c      	beq.n	800d584 <vTaskDelay+0x34>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	b672      	cpsid	i
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	b662      	cpsie	i
 800d57e:	60bb      	str	r3, [r7, #8]
}
 800d580:	bf00      	nop
 800d582:	e7fe      	b.n	800d582 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d584:	f000 f88e 	bl	800d6a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d588:	2100      	movs	r1, #0
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fe5a 	bl	800e244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d590:	f000 f896 	bl	800d6c0 <xTaskResumeAll>
 800d594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d107      	bne.n	800d5ac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d59c:	4b06      	ldr	r3, [pc, #24]	; (800d5b8 <vTaskDelay+0x68>)
 800d59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5ac:	bf00      	nop
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	20000bb4 	.word	0x20000bb4
 800d5b8:	e000ed04 	.word	0xe000ed04

0800d5bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08a      	sub	sp, #40	; 0x28
 800d5c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d5ca:	463a      	mov	r2, r7
 800d5cc:	1d39      	adds	r1, r7, #4
 800d5ce:	f107 0308 	add.w	r3, r7, #8
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7f2 fff0 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	9202      	str	r2, [sp, #8]
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	460a      	mov	r2, r1
 800d5ea:	4926      	ldr	r1, [pc, #152]	; (800d684 <vTaskStartScheduler+0xc8>)
 800d5ec:	4826      	ldr	r0, [pc, #152]	; (800d688 <vTaskStartScheduler+0xcc>)
 800d5ee:	f7ff fd6b 	bl	800d0c8 <xTaskCreateStatic>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4a25      	ldr	r2, [pc, #148]	; (800d68c <vTaskStartScheduler+0xd0>)
 800d5f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d5f8:	4b24      	ldr	r3, [pc, #144]	; (800d68c <vTaskStartScheduler+0xd0>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d600:	2301      	movs	r3, #1
 800d602:	617b      	str	r3, [r7, #20]
 800d604:	e001      	b.n	800d60a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d606:	2300      	movs	r3, #0
 800d608:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d102      	bne.n	800d616 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d610:	f000 fe7e 	bl	800e310 <xTimerCreateTimerTask>
 800d614:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d11d      	bne.n	800d658 <vTaskStartScheduler+0x9c>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	b672      	cpsid	i
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	b662      	cpsie	i
 800d630:	613b      	str	r3, [r7, #16]
}
 800d632:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d634:	4b16      	ldr	r3, [pc, #88]	; (800d690 <vTaskStartScheduler+0xd4>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	334c      	adds	r3, #76	; 0x4c
 800d63a:	4a16      	ldr	r2, [pc, #88]	; (800d694 <vTaskStartScheduler+0xd8>)
 800d63c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d63e:	4b16      	ldr	r3, [pc, #88]	; (800d698 <vTaskStartScheduler+0xdc>)
 800d640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d644:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d646:	4b15      	ldr	r3, [pc, #84]	; (800d69c <vTaskStartScheduler+0xe0>)
 800d648:	2201      	movs	r2, #1
 800d64a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d64c:	4b14      	ldr	r3, [pc, #80]	; (800d6a0 <vTaskStartScheduler+0xe4>)
 800d64e:	2200      	movs	r2, #0
 800d650:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d652:	f001 facd 	bl	800ebf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d656:	e010      	b.n	800d67a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d65e:	d10c      	bne.n	800d67a <vTaskStartScheduler+0xbe>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	b672      	cpsid	i
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	b662      	cpsie	i
 800d674:	60fb      	str	r3, [r7, #12]
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <vTaskStartScheduler+0xbc>
}
 800d67a:	bf00      	nop
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	0800fe90 	.word	0x0800fe90
 800d688:	0800dcd9 	.word	0x0800dcd9
 800d68c:	20000bb0 	.word	0x20000bb0
 800d690:	20000a8c 	.word	0x20000a8c
 800d694:	20000050 	.word	0x20000050
 800d698:	20000bac 	.word	0x20000bac
 800d69c:	20000b98 	.word	0x20000b98
 800d6a0:	20000b90 	.word	0x20000b90

0800d6a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d6a8:	4b04      	ldr	r3, [pc, #16]	; (800d6bc <vTaskSuspendAll+0x18>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	4a03      	ldr	r2, [pc, #12]	; (800d6bc <vTaskSuspendAll+0x18>)
 800d6b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d6b2:	bf00      	nop
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	20000bb4 	.word	0x20000bb4

0800d6c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d6ce:	4b42      	ldr	r3, [pc, #264]	; (800d7d8 <xTaskResumeAll+0x118>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10c      	bne.n	800d6f0 <xTaskResumeAll+0x30>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	b672      	cpsid	i
 800d6dc:	f383 8811 	msr	BASEPRI, r3
 800d6e0:	f3bf 8f6f 	isb	sy
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	b662      	cpsie	i
 800d6ea:	603b      	str	r3, [r7, #0]
}
 800d6ec:	bf00      	nop
 800d6ee:	e7fe      	b.n	800d6ee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d6f0:	f001 fafc 	bl	800ecec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d6f4:	4b38      	ldr	r3, [pc, #224]	; (800d7d8 <xTaskResumeAll+0x118>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	4a37      	ldr	r2, [pc, #220]	; (800d7d8 <xTaskResumeAll+0x118>)
 800d6fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6fe:	4b36      	ldr	r3, [pc, #216]	; (800d7d8 <xTaskResumeAll+0x118>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d161      	bne.n	800d7ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d706:	4b35      	ldr	r3, [pc, #212]	; (800d7dc <xTaskResumeAll+0x11c>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d05d      	beq.n	800d7ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d70e:	e02e      	b.n	800d76e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d710:	4b33      	ldr	r3, [pc, #204]	; (800d7e0 <xTaskResumeAll+0x120>)
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	3318      	adds	r3, #24
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe fde9 	bl	800c2f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	3304      	adds	r3, #4
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe fde4 	bl	800c2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d730:	2201      	movs	r2, #1
 800d732:	409a      	lsls	r2, r3
 800d734:	4b2b      	ldr	r3, [pc, #172]	; (800d7e4 <xTaskResumeAll+0x124>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4313      	orrs	r3, r2
 800d73a:	4a2a      	ldr	r2, [pc, #168]	; (800d7e4 <xTaskResumeAll+0x124>)
 800d73c:	6013      	str	r3, [r2, #0]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4a27      	ldr	r2, [pc, #156]	; (800d7e8 <xTaskResumeAll+0x128>)
 800d74c:	441a      	add	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3304      	adds	r3, #4
 800d752:	4619      	mov	r1, r3
 800d754:	4610      	mov	r0, r2
 800d756:	f7fe fd70 	bl	800c23a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75e:	4b23      	ldr	r3, [pc, #140]	; (800d7ec <xTaskResumeAll+0x12c>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d764:	429a      	cmp	r2, r3
 800d766:	d302      	bcc.n	800d76e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d768:	4b21      	ldr	r3, [pc, #132]	; (800d7f0 <xTaskResumeAll+0x130>)
 800d76a:	2201      	movs	r2, #1
 800d76c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d76e:	4b1c      	ldr	r3, [pc, #112]	; (800d7e0 <xTaskResumeAll+0x120>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1cc      	bne.n	800d710 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d77c:	f000 fb68 	bl	800de50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d780:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <xTaskResumeAll+0x134>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d010      	beq.n	800d7ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d78c:	f000 f846 	bl	800d81c <xTaskIncrementTick>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d796:	4b16      	ldr	r3, [pc, #88]	; (800d7f0 <xTaskResumeAll+0x130>)
 800d798:	2201      	movs	r2, #1
 800d79a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	3b01      	subs	r3, #1
 800d7a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1f1      	bne.n	800d78c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800d7a8:	4b12      	ldr	r3, [pc, #72]	; (800d7f4 <xTaskResumeAll+0x134>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d7ae:	4b10      	ldr	r3, [pc, #64]	; (800d7f0 <xTaskResumeAll+0x130>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d009      	beq.n	800d7ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d7ba:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <xTaskResumeAll+0x138>)
 800d7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7c0:	601a      	str	r2, [r3, #0]
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7ca:	f001 fac3 	bl	800ed54 <vPortExitCritical>

	return xAlreadyYielded;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	20000bb4 	.word	0x20000bb4
 800d7dc:	20000b8c 	.word	0x20000b8c
 800d7e0:	20000b4c 	.word	0x20000b4c
 800d7e4:	20000b94 	.word	0x20000b94
 800d7e8:	20000a90 	.word	0x20000a90
 800d7ec:	20000a8c 	.word	0x20000a8c
 800d7f0:	20000ba0 	.word	0x20000ba0
 800d7f4:	20000b9c 	.word	0x20000b9c
 800d7f8:	e000ed04 	.word	0xe000ed04

0800d7fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d802:	4b05      	ldr	r3, [pc, #20]	; (800d818 <xTaskGetTickCount+0x1c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d808:	687b      	ldr	r3, [r7, #4]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	20000b90 	.word	0x20000b90

0800d81c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d822:	2300      	movs	r3, #0
 800d824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d826:	4b4f      	ldr	r3, [pc, #316]	; (800d964 <xTaskIncrementTick+0x148>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f040 808a 	bne.w	800d944 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d830:	4b4d      	ldr	r3, [pc, #308]	; (800d968 <xTaskIncrementTick+0x14c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	3301      	adds	r3, #1
 800d836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d838:	4a4b      	ldr	r2, [pc, #300]	; (800d968 <xTaskIncrementTick+0x14c>)
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d122      	bne.n	800d88a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d844:	4b49      	ldr	r3, [pc, #292]	; (800d96c <xTaskIncrementTick+0x150>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00c      	beq.n	800d868 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	b672      	cpsid	i
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	b662      	cpsie	i
 800d862:	603b      	str	r3, [r7, #0]
}
 800d864:	bf00      	nop
 800d866:	e7fe      	b.n	800d866 <xTaskIncrementTick+0x4a>
 800d868:	4b40      	ldr	r3, [pc, #256]	; (800d96c <xTaskIncrementTick+0x150>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	60fb      	str	r3, [r7, #12]
 800d86e:	4b40      	ldr	r3, [pc, #256]	; (800d970 <xTaskIncrementTick+0x154>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a3e      	ldr	r2, [pc, #248]	; (800d96c <xTaskIncrementTick+0x150>)
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	4a3e      	ldr	r2, [pc, #248]	; (800d970 <xTaskIncrementTick+0x154>)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6013      	str	r3, [r2, #0]
 800d87c:	4b3d      	ldr	r3, [pc, #244]	; (800d974 <xTaskIncrementTick+0x158>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	3301      	adds	r3, #1
 800d882:	4a3c      	ldr	r2, [pc, #240]	; (800d974 <xTaskIncrementTick+0x158>)
 800d884:	6013      	str	r3, [r2, #0]
 800d886:	f000 fae3 	bl	800de50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d88a:	4b3b      	ldr	r3, [pc, #236]	; (800d978 <xTaskIncrementTick+0x15c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	693a      	ldr	r2, [r7, #16]
 800d890:	429a      	cmp	r2, r3
 800d892:	d348      	bcc.n	800d926 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d894:	4b35      	ldr	r3, [pc, #212]	; (800d96c <xTaskIncrementTick+0x150>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d104      	bne.n	800d8a8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d89e:	4b36      	ldr	r3, [pc, #216]	; (800d978 <xTaskIncrementTick+0x15c>)
 800d8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8a4:	601a      	str	r2, [r3, #0]
					break;
 800d8a6:	e03e      	b.n	800d926 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a8:	4b30      	ldr	r3, [pc, #192]	; (800d96c <xTaskIncrementTick+0x150>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d8b8:	693a      	ldr	r2, [r7, #16]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d203      	bcs.n	800d8c8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d8c0:	4a2d      	ldr	r2, [pc, #180]	; (800d978 <xTaskIncrementTick+0x15c>)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d8c6:	e02e      	b.n	800d926 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fe fd11 	bl	800c2f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d004      	beq.n	800d8e4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	3318      	adds	r3, #24
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fe fd08 	bl	800c2f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	409a      	lsls	r2, r3
 800d8ec:	4b23      	ldr	r3, [pc, #140]	; (800d97c <xTaskIncrementTick+0x160>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	4a22      	ldr	r2, [pc, #136]	; (800d97c <xTaskIncrementTick+0x160>)
 800d8f4:	6013      	str	r3, [r2, #0]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4413      	add	r3, r2
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	4a1f      	ldr	r2, [pc, #124]	; (800d980 <xTaskIncrementTick+0x164>)
 800d904:	441a      	add	r2, r3
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	3304      	adds	r3, #4
 800d90a:	4619      	mov	r1, r3
 800d90c:	4610      	mov	r0, r2
 800d90e:	f7fe fc94 	bl	800c23a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d916:	4b1b      	ldr	r3, [pc, #108]	; (800d984 <xTaskIncrementTick+0x168>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d3b9      	bcc.n	800d894 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d920:	2301      	movs	r3, #1
 800d922:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d924:	e7b6      	b.n	800d894 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d926:	4b17      	ldr	r3, [pc, #92]	; (800d984 <xTaskIncrementTick+0x168>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92c:	4914      	ldr	r1, [pc, #80]	; (800d980 <xTaskIncrementTick+0x164>)
 800d92e:	4613      	mov	r3, r2
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	4413      	add	r3, r2
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	440b      	add	r3, r1
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d907      	bls.n	800d94e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800d93e:	2301      	movs	r3, #1
 800d940:	617b      	str	r3, [r7, #20]
 800d942:	e004      	b.n	800d94e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d944:	4b10      	ldr	r3, [pc, #64]	; (800d988 <xTaskIncrementTick+0x16c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	3301      	adds	r3, #1
 800d94a:	4a0f      	ldr	r2, [pc, #60]	; (800d988 <xTaskIncrementTick+0x16c>)
 800d94c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d94e:	4b0f      	ldr	r3, [pc, #60]	; (800d98c <xTaskIncrementTick+0x170>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d001      	beq.n	800d95a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800d956:	2301      	movs	r3, #1
 800d958:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d95a:	697b      	ldr	r3, [r7, #20]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3718      	adds	r7, #24
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20000bb4 	.word	0x20000bb4
 800d968:	20000b90 	.word	0x20000b90
 800d96c:	20000b44 	.word	0x20000b44
 800d970:	20000b48 	.word	0x20000b48
 800d974:	20000ba4 	.word	0x20000ba4
 800d978:	20000bac 	.word	0x20000bac
 800d97c:	20000b94 	.word	0x20000b94
 800d980:	20000a90 	.word	0x20000a90
 800d984:	20000a8c 	.word	0x20000a8c
 800d988:	20000b9c 	.word	0x20000b9c
 800d98c:	20000ba0 	.word	0x20000ba0

0800d990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d990:	b480      	push	{r7}
 800d992:	b087      	sub	sp, #28
 800d994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d996:	4b2a      	ldr	r3, [pc, #168]	; (800da40 <vTaskSwitchContext+0xb0>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d99e:	4b29      	ldr	r3, [pc, #164]	; (800da44 <vTaskSwitchContext+0xb4>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d9a4:	e046      	b.n	800da34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d9a6:	4b27      	ldr	r3, [pc, #156]	; (800da44 <vTaskSwitchContext+0xb4>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ac:	4b26      	ldr	r3, [pc, #152]	; (800da48 <vTaskSwitchContext+0xb8>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	fab3 f383 	clz	r3, r3
 800d9b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d9ba:	7afb      	ldrb	r3, [r7, #11]
 800d9bc:	f1c3 031f 	rsb	r3, r3, #31
 800d9c0:	617b      	str	r3, [r7, #20]
 800d9c2:	4922      	ldr	r1, [pc, #136]	; (800da4c <vTaskSwitchContext+0xbc>)
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4413      	add	r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	440b      	add	r3, r1
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10c      	bne.n	800d9f0 <vTaskSwitchContext+0x60>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	b672      	cpsid	i
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	b662      	cpsie	i
 800d9ea:	607b      	str	r3, [r7, #4]
}
 800d9ec:	bf00      	nop
 800d9ee:	e7fe      	b.n	800d9ee <vTaskSwitchContext+0x5e>
 800d9f0:	697a      	ldr	r2, [r7, #20]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4a14      	ldr	r2, [pc, #80]	; (800da4c <vTaskSwitchContext+0xbc>)
 800d9fc:	4413      	add	r3, r2
 800d9fe:	613b      	str	r3, [r7, #16]
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	685a      	ldr	r2, [r3, #4]
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	605a      	str	r2, [r3, #4]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	3308      	adds	r3, #8
 800da12:	429a      	cmp	r2, r3
 800da14:	d104      	bne.n	800da20 <vTaskSwitchContext+0x90>
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	605a      	str	r2, [r3, #4]
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	4a0a      	ldr	r2, [pc, #40]	; (800da50 <vTaskSwitchContext+0xc0>)
 800da28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da2a:	4b09      	ldr	r3, [pc, #36]	; (800da50 <vTaskSwitchContext+0xc0>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	334c      	adds	r3, #76	; 0x4c
 800da30:	4a08      	ldr	r2, [pc, #32]	; (800da54 <vTaskSwitchContext+0xc4>)
 800da32:	6013      	str	r3, [r2, #0]
}
 800da34:	bf00      	nop
 800da36:	371c      	adds	r7, #28
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	20000bb4 	.word	0x20000bb4
 800da44:	20000ba0 	.word	0x20000ba0
 800da48:	20000b94 	.word	0x20000b94
 800da4c:	20000a90 	.word	0x20000a90
 800da50:	20000a8c 	.word	0x20000a8c
 800da54:	20000050 	.word	0x20000050

0800da58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10c      	bne.n	800da82 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6c:	b672      	cpsid	i
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	b662      	cpsie	i
 800da7c:	60fb      	str	r3, [r7, #12]
}
 800da7e:	bf00      	nop
 800da80:	e7fe      	b.n	800da80 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da82:	4b07      	ldr	r3, [pc, #28]	; (800daa0 <vTaskPlaceOnEventList+0x48>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	3318      	adds	r3, #24
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7fe fbf9 	bl	800c282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da90:	2101      	movs	r1, #1
 800da92:	6838      	ldr	r0, [r7, #0]
 800da94:	f000 fbd6 	bl	800e244 <prvAddCurrentTaskToDelayedList>
}
 800da98:	bf00      	nop
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20000a8c 	.word	0x20000a8c

0800daa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10c      	bne.n	800dad0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	b672      	cpsid	i
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	b662      	cpsie	i
 800daca:	617b      	str	r3, [r7, #20]
}
 800dacc:	bf00      	nop
 800dace:	e7fe      	b.n	800dace <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dad0:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <vTaskPlaceOnEventListRestricted+0x58>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3318      	adds	r3, #24
 800dad6:	4619      	mov	r1, r3
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7fe fbae 	bl	800c23a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800dae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dae8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800daea:	6879      	ldr	r1, [r7, #4]
 800daec:	68b8      	ldr	r0, [r7, #8]
 800daee:	f000 fba9 	bl	800e244 <prvAddCurrentTaskToDelayedList>
	}
 800daf2:	bf00      	nop
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20000a8c 	.word	0x20000a8c

0800db00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10c      	bne.n	800db30 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800db16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1a:	b672      	cpsid	i
 800db1c:	f383 8811 	msr	BASEPRI, r3
 800db20:	f3bf 8f6f 	isb	sy
 800db24:	f3bf 8f4f 	dsb	sy
 800db28:	b662      	cpsie	i
 800db2a:	60fb      	str	r3, [r7, #12]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	3318      	adds	r3, #24
 800db34:	4618      	mov	r0, r3
 800db36:	f7fe fbdd 	bl	800c2f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db3a:	4b1d      	ldr	r3, [pc, #116]	; (800dbb0 <xTaskRemoveFromEventList+0xb0>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d11c      	bne.n	800db7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	3304      	adds	r3, #4
 800db46:	4618      	mov	r0, r3
 800db48:	f7fe fbd4 	bl	800c2f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db50:	2201      	movs	r2, #1
 800db52:	409a      	lsls	r2, r3
 800db54:	4b17      	ldr	r3, [pc, #92]	; (800dbb4 <xTaskRemoveFromEventList+0xb4>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4313      	orrs	r3, r2
 800db5a:	4a16      	ldr	r2, [pc, #88]	; (800dbb4 <xTaskRemoveFromEventList+0xb4>)
 800db5c:	6013      	str	r3, [r2, #0]
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db62:	4613      	mov	r3, r2
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	4413      	add	r3, r2
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	4a13      	ldr	r2, [pc, #76]	; (800dbb8 <xTaskRemoveFromEventList+0xb8>)
 800db6c:	441a      	add	r2, r3
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	3304      	adds	r3, #4
 800db72:	4619      	mov	r1, r3
 800db74:	4610      	mov	r0, r2
 800db76:	f7fe fb60 	bl	800c23a <vListInsertEnd>
 800db7a:	e005      	b.n	800db88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	3318      	adds	r3, #24
 800db80:	4619      	mov	r1, r3
 800db82:	480e      	ldr	r0, [pc, #56]	; (800dbbc <xTaskRemoveFromEventList+0xbc>)
 800db84:	f7fe fb59 	bl	800c23a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db8c:	4b0c      	ldr	r3, [pc, #48]	; (800dbc0 <xTaskRemoveFromEventList+0xc0>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	429a      	cmp	r2, r3
 800db94:	d905      	bls.n	800dba2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db96:	2301      	movs	r3, #1
 800db98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db9a:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <xTaskRemoveFromEventList+0xc4>)
 800db9c:	2201      	movs	r2, #1
 800db9e:	601a      	str	r2, [r3, #0]
 800dba0:	e001      	b.n	800dba6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dba6:	697b      	ldr	r3, [r7, #20]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3718      	adds	r7, #24
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	20000bb4 	.word	0x20000bb4
 800dbb4:	20000b94 	.word	0x20000b94
 800dbb8:	20000a90 	.word	0x20000a90
 800dbbc:	20000b4c 	.word	0x20000b4c
 800dbc0:	20000a8c 	.word	0x20000a8c
 800dbc4:	20000ba0 	.word	0x20000ba0

0800dbc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dbd0:	4b06      	ldr	r3, [pc, #24]	; (800dbec <vTaskInternalSetTimeOutState+0x24>)
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dbd8:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <vTaskInternalSetTimeOutState+0x28>)
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	605a      	str	r2, [r3, #4]
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	20000ba4 	.word	0x20000ba4
 800dbf0:	20000b90 	.word	0x20000b90

0800dbf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b088      	sub	sp, #32
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10c      	bne.n	800dc1e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc08:	b672      	cpsid	i
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	b662      	cpsie	i
 800dc18:	613b      	str	r3, [r7, #16]
}
 800dc1a:	bf00      	nop
 800dc1c:	e7fe      	b.n	800dc1c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10c      	bne.n	800dc3e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800dc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc28:	b672      	cpsid	i
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	b662      	cpsie	i
 800dc38:	60fb      	str	r3, [r7, #12]
}
 800dc3a:	bf00      	nop
 800dc3c:	e7fe      	b.n	800dc3c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800dc3e:	f001 f855 	bl	800ecec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc42:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <xTaskCheckForTimeOut+0xc4>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	69ba      	ldr	r2, [r7, #24]
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc5a:	d102      	bne.n	800dc62 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61fb      	str	r3, [r7, #28]
 800dc60:	e023      	b.n	800dcaa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	4b15      	ldr	r3, [pc, #84]	; (800dcbc <xTaskCheckForTimeOut+0xc8>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d007      	beq.n	800dc7e <xTaskCheckForTimeOut+0x8a>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	69ba      	ldr	r2, [r7, #24]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d302      	bcc.n	800dc7e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	61fb      	str	r3, [r7, #28]
 800dc7c:	e015      	b.n	800dcaa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d20b      	bcs.n	800dca0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	1ad2      	subs	r2, r2, r3
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7ff ff97 	bl	800dbc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	61fb      	str	r3, [r7, #28]
 800dc9e:	e004      	b.n	800dcaa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2200      	movs	r2, #0
 800dca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dca6:	2301      	movs	r3, #1
 800dca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dcaa:	f001 f853 	bl	800ed54 <vPortExitCritical>

	return xReturn;
 800dcae:	69fb      	ldr	r3, [r7, #28]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3720      	adds	r7, #32
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20000b90 	.word	0x20000b90
 800dcbc:	20000ba4 	.word	0x20000ba4

0800dcc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dcc4:	4b03      	ldr	r3, [pc, #12]	; (800dcd4 <vTaskMissedYield+0x14>)
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	601a      	str	r2, [r3, #0]
}
 800dcca:	bf00      	nop
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	20000ba0 	.word	0x20000ba0

0800dcd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dce0:	f000 f852 	bl	800dd88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dce4:	4b06      	ldr	r3, [pc, #24]	; (800dd00 <prvIdleTask+0x28>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d9f9      	bls.n	800dce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dcec:	4b05      	ldr	r3, [pc, #20]	; (800dd04 <prvIdleTask+0x2c>)
 800dcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dcfc:	e7f0      	b.n	800dce0 <prvIdleTask+0x8>
 800dcfe:	bf00      	nop
 800dd00:	20000a90 	.word	0x20000a90
 800dd04:	e000ed04 	.word	0xe000ed04

0800dd08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd0e:	2300      	movs	r3, #0
 800dd10:	607b      	str	r3, [r7, #4]
 800dd12:	e00c      	b.n	800dd2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	4613      	mov	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	4a12      	ldr	r2, [pc, #72]	; (800dd68 <prvInitialiseTaskLists+0x60>)
 800dd20:	4413      	add	r3, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fe fa5c 	bl	800c1e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	607b      	str	r3, [r7, #4]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b06      	cmp	r3, #6
 800dd32:	d9ef      	bls.n	800dd14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd34:	480d      	ldr	r0, [pc, #52]	; (800dd6c <prvInitialiseTaskLists+0x64>)
 800dd36:	f7fe fa53 	bl	800c1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd3a:	480d      	ldr	r0, [pc, #52]	; (800dd70 <prvInitialiseTaskLists+0x68>)
 800dd3c:	f7fe fa50 	bl	800c1e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd40:	480c      	ldr	r0, [pc, #48]	; (800dd74 <prvInitialiseTaskLists+0x6c>)
 800dd42:	f7fe fa4d 	bl	800c1e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd46:	480c      	ldr	r0, [pc, #48]	; (800dd78 <prvInitialiseTaskLists+0x70>)
 800dd48:	f7fe fa4a 	bl	800c1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd4c:	480b      	ldr	r0, [pc, #44]	; (800dd7c <prvInitialiseTaskLists+0x74>)
 800dd4e:	f7fe fa47 	bl	800c1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd52:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <prvInitialiseTaskLists+0x78>)
 800dd54:	4a05      	ldr	r2, [pc, #20]	; (800dd6c <prvInitialiseTaskLists+0x64>)
 800dd56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd58:	4b0a      	ldr	r3, [pc, #40]	; (800dd84 <prvInitialiseTaskLists+0x7c>)
 800dd5a:	4a05      	ldr	r2, [pc, #20]	; (800dd70 <prvInitialiseTaskLists+0x68>)
 800dd5c:	601a      	str	r2, [r3, #0]
}
 800dd5e:	bf00      	nop
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	20000a90 	.word	0x20000a90
 800dd6c:	20000b1c 	.word	0x20000b1c
 800dd70:	20000b30 	.word	0x20000b30
 800dd74:	20000b4c 	.word	0x20000b4c
 800dd78:	20000b60 	.word	0x20000b60
 800dd7c:	20000b78 	.word	0x20000b78
 800dd80:	20000b44 	.word	0x20000b44
 800dd84:	20000b48 	.word	0x20000b48

0800dd88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd8e:	e019      	b.n	800ddc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd90:	f000 ffac 	bl	800ecec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd94:	4b10      	ldr	r3, [pc, #64]	; (800ddd8 <prvCheckTasksWaitingTermination+0x50>)
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe faa7 	bl	800c2f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dda6:	4b0d      	ldr	r3, [pc, #52]	; (800dddc <prvCheckTasksWaitingTermination+0x54>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	4a0b      	ldr	r2, [pc, #44]	; (800dddc <prvCheckTasksWaitingTermination+0x54>)
 800ddae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ddb0:	4b0b      	ldr	r3, [pc, #44]	; (800dde0 <prvCheckTasksWaitingTermination+0x58>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	4a0a      	ldr	r2, [pc, #40]	; (800dde0 <prvCheckTasksWaitingTermination+0x58>)
 800ddb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ddba:	f000 ffcb 	bl	800ed54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f810 	bl	800dde4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddc4:	4b06      	ldr	r3, [pc, #24]	; (800dde0 <prvCheckTasksWaitingTermination+0x58>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1e1      	bne.n	800dd90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ddcc:	bf00      	nop
 800ddce:	bf00      	nop
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20000b60 	.word	0x20000b60
 800dddc:	20000b8c 	.word	0x20000b8c
 800dde0:	20000b74 	.word	0x20000b74

0800dde4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	334c      	adds	r3, #76	; 0x4c
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f001 fb35 	bl	800f460 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d108      	bne.n	800de12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de04:	4618      	mov	r0, r3
 800de06:	f001 f967 	bl	800f0d8 <vPortFree>
				vPortFree( pxTCB );
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f001 f964 	bl	800f0d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de10:	e01a      	b.n	800de48 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d103      	bne.n	800de24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f001 f95b 	bl	800f0d8 <vPortFree>
	}
 800de22:	e011      	b.n	800de48 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d00c      	beq.n	800de48 <prvDeleteTCB+0x64>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	b672      	cpsid	i
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	b662      	cpsie	i
 800de42:	60fb      	str	r3, [r7, #12]
}
 800de44:	bf00      	nop
 800de46:	e7fe      	b.n	800de46 <prvDeleteTCB+0x62>
	}
 800de48:	bf00      	nop
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de56:	4b0c      	ldr	r3, [pc, #48]	; (800de88 <prvResetNextTaskUnblockTime+0x38>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d104      	bne.n	800de6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de60:	4b0a      	ldr	r3, [pc, #40]	; (800de8c <prvResetNextTaskUnblockTime+0x3c>)
 800de62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de68:	e008      	b.n	800de7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de6a:	4b07      	ldr	r3, [pc, #28]	; (800de88 <prvResetNextTaskUnblockTime+0x38>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	4a04      	ldr	r2, [pc, #16]	; (800de8c <prvResetNextTaskUnblockTime+0x3c>)
 800de7a:	6013      	str	r3, [r2, #0]
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	20000b44 	.word	0x20000b44
 800de8c:	20000bac 	.word	0x20000bac

0800de90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de96:	4b0b      	ldr	r3, [pc, #44]	; (800dec4 <xTaskGetSchedulerState+0x34>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d102      	bne.n	800dea4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de9e:	2301      	movs	r3, #1
 800dea0:	607b      	str	r3, [r7, #4]
 800dea2:	e008      	b.n	800deb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dea4:	4b08      	ldr	r3, [pc, #32]	; (800dec8 <xTaskGetSchedulerState+0x38>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d102      	bne.n	800deb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800deac:	2302      	movs	r3, #2
 800deae:	607b      	str	r3, [r7, #4]
 800deb0:	e001      	b.n	800deb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800deb2:	2300      	movs	r3, #0
 800deb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800deb6:	687b      	ldr	r3, [r7, #4]
	}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	20000b98 	.word	0x20000b98
 800dec8:	20000bb4 	.word	0x20000bb4

0800decc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ded8:	2300      	movs	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d069      	beq.n	800dfb6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee6:	4b36      	ldr	r3, [pc, #216]	; (800dfc0 <xTaskPriorityInherit+0xf4>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deec:	429a      	cmp	r2, r3
 800deee:	d259      	bcs.n	800dfa4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	2b00      	cmp	r3, #0
 800def6:	db06      	blt.n	800df06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800def8:	4b31      	ldr	r3, [pc, #196]	; (800dfc0 <xTaskPriorityInherit+0xf4>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defe:	f1c3 0207 	rsb	r2, r3, #7
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	6959      	ldr	r1, [r3, #20]
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0e:	4613      	mov	r3, r2
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4a2b      	ldr	r2, [pc, #172]	; (800dfc4 <xTaskPriorityInherit+0xf8>)
 800df18:	4413      	add	r3, r2
 800df1a:	4299      	cmp	r1, r3
 800df1c:	d13a      	bne.n	800df94 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	3304      	adds	r3, #4
 800df22:	4618      	mov	r0, r3
 800df24:	f7fe f9e6 	bl	800c2f4 <uxListRemove>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d115      	bne.n	800df5a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df32:	4924      	ldr	r1, [pc, #144]	; (800dfc4 <xTaskPriorityInherit+0xf8>)
 800df34:	4613      	mov	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	440b      	add	r3, r1
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10a      	bne.n	800df5a <xTaskPriorityInherit+0x8e>
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	2201      	movs	r2, #1
 800df4a:	fa02 f303 	lsl.w	r3, r2, r3
 800df4e:	43da      	mvns	r2, r3
 800df50:	4b1d      	ldr	r3, [pc, #116]	; (800dfc8 <xTaskPriorityInherit+0xfc>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4013      	ands	r3, r2
 800df56:	4a1c      	ldr	r2, [pc, #112]	; (800dfc8 <xTaskPriorityInherit+0xfc>)
 800df58:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df5a:	4b19      	ldr	r3, [pc, #100]	; (800dfc0 <xTaskPriorityInherit+0xf4>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df68:	2201      	movs	r2, #1
 800df6a:	409a      	lsls	r2, r3
 800df6c:	4b16      	ldr	r3, [pc, #88]	; (800dfc8 <xTaskPriorityInherit+0xfc>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4313      	orrs	r3, r2
 800df72:	4a15      	ldr	r2, [pc, #84]	; (800dfc8 <xTaskPriorityInherit+0xfc>)
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df7a:	4613      	mov	r3, r2
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4413      	add	r3, r2
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4a10      	ldr	r2, [pc, #64]	; (800dfc4 <xTaskPriorityInherit+0xf8>)
 800df84:	441a      	add	r2, r3
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	3304      	adds	r3, #4
 800df8a:	4619      	mov	r1, r3
 800df8c:	4610      	mov	r0, r2
 800df8e:	f7fe f954 	bl	800c23a <vListInsertEnd>
 800df92:	e004      	b.n	800df9e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df94:	4b0a      	ldr	r3, [pc, #40]	; (800dfc0 <xTaskPriorityInherit+0xf4>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	60fb      	str	r3, [r7, #12]
 800dfa2:	e008      	b.n	800dfb6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfa8:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <xTaskPriorityInherit+0xf4>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d201      	bcs.n	800dfb6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
	}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	20000a8c 	.word	0x20000a8c
 800dfc4:	20000a90 	.word	0x20000a90
 800dfc8:	20000b94 	.word	0x20000b94

0800dfcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b086      	sub	sp, #24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d072      	beq.n	800e0c8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dfe2:	4b3c      	ldr	r3, [pc, #240]	; (800e0d4 <xTaskPriorityDisinherit+0x108>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	693a      	ldr	r2, [r7, #16]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d00c      	beq.n	800e006 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff0:	b672      	cpsid	i
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	b662      	cpsie	i
 800e000:	60fb      	str	r3, [r7, #12]
}
 800e002:	bf00      	nop
 800e004:	e7fe      	b.n	800e004 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10c      	bne.n	800e028 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	b672      	cpsid	i
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	b662      	cpsie	i
 800e022:	60bb      	str	r3, [r7, #8]
}
 800e024:	bf00      	nop
 800e026:	e7fe      	b.n	800e026 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e02c:	1e5a      	subs	r2, r3, #1
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d044      	beq.n	800e0c8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e042:	2b00      	cmp	r3, #0
 800e044:	d140      	bne.n	800e0c8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	3304      	adds	r3, #4
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fe f952 	bl	800c2f4 <uxListRemove>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d115      	bne.n	800e082 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05a:	491f      	ldr	r1, [pc, #124]	; (800e0d8 <xTaskPriorityDisinherit+0x10c>)
 800e05c:	4613      	mov	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	440b      	add	r3, r1
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10a      	bne.n	800e082 <xTaskPriorityDisinherit+0xb6>
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e070:	2201      	movs	r2, #1
 800e072:	fa02 f303 	lsl.w	r3, r2, r3
 800e076:	43da      	mvns	r2, r3
 800e078:	4b18      	ldr	r3, [pc, #96]	; (800e0dc <xTaskPriorityDisinherit+0x110>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4013      	ands	r3, r2
 800e07e:	4a17      	ldr	r2, [pc, #92]	; (800e0dc <xTaskPriorityDisinherit+0x110>)
 800e080:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08e:	f1c3 0207 	rsb	r2, r3, #7
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09a:	2201      	movs	r2, #1
 800e09c:	409a      	lsls	r2, r3
 800e09e:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <xTaskPriorityDisinherit+0x110>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	4a0d      	ldr	r2, [pc, #52]	; (800e0dc <xTaskPriorityDisinherit+0x110>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4a08      	ldr	r2, [pc, #32]	; (800e0d8 <xTaskPriorityDisinherit+0x10c>)
 800e0b6:	441a      	add	r2, r3
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4610      	mov	r0, r2
 800e0c0:	f7fe f8bb 	bl	800c23a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0c8:	697b      	ldr	r3, [r7, #20]
	}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3718      	adds	r7, #24
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20000a8c 	.word	0x20000a8c
 800e0d8:	20000a90 	.word	0x20000a90
 800e0dc:	20000b94 	.word	0x20000b94

0800e0e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 8087 	beq.w	800e208 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10c      	bne.n	800e11c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e106:	b672      	cpsid	i
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	b662      	cpsie	i
 800e116:	60fb      	str	r3, [r7, #12]
}
 800e118:	bf00      	nop
 800e11a:	e7fe      	b.n	800e11a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d902      	bls.n	800e12c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	61fb      	str	r3, [r7, #28]
 800e12a:	e002      	b.n	800e132 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e130:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e136:	69fa      	ldr	r2, [r7, #28]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d065      	beq.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e140:	697a      	ldr	r2, [r7, #20]
 800e142:	429a      	cmp	r2, r3
 800e144:	d160      	bne.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e146:	4b32      	ldr	r3, [pc, #200]	; (800e210 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	69ba      	ldr	r2, [r7, #24]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d10c      	bne.n	800e16a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	b672      	cpsid	i
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	b662      	cpsie	i
 800e164:	60bb      	str	r3, [r7, #8]
}
 800e166:	bf00      	nop
 800e168:	e7fe      	b.n	800e168 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	69fa      	ldr	r2, [r7, #28]
 800e174:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	699b      	ldr	r3, [r3, #24]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	db04      	blt.n	800e188 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	f1c3 0207 	rsb	r2, r3, #7
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	6959      	ldr	r1, [r3, #20]
 800e18c:	693a      	ldr	r2, [r7, #16]
 800e18e:	4613      	mov	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4a1f      	ldr	r2, [pc, #124]	; (800e214 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e198:	4413      	add	r3, r2
 800e19a:	4299      	cmp	r1, r3
 800e19c:	d134      	bne.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe f8a6 	bl	800c2f4 <uxListRemove>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d115      	bne.n	800e1da <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b2:	4918      	ldr	r1, [pc, #96]	; (800e214 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	440b      	add	r3, r1
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10a      	bne.n	800e1da <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ce:	43da      	mvns	r2, r3
 800e1d0:	4b11      	ldr	r3, [pc, #68]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	4a10      	ldr	r2, [pc, #64]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e1d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1de:	2201      	movs	r2, #1
 800e1e0:	409a      	lsls	r2, r3
 800e1e2:	4b0d      	ldr	r3, [pc, #52]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	4a0b      	ldr	r2, [pc, #44]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4a06      	ldr	r2, [pc, #24]	; (800e214 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e1fa:	441a      	add	r2, r3
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7fe f819 	bl	800c23a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e208:	bf00      	nop
 800e20a:	3720      	adds	r7, #32
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	20000a8c 	.word	0x20000a8c
 800e214:	20000a90 	.word	0x20000a90
 800e218:	20000b94 	.word	0x20000b94

0800e21c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e21c:	b480      	push	{r7}
 800e21e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e220:	4b07      	ldr	r3, [pc, #28]	; (800e240 <pvTaskIncrementMutexHeldCount+0x24>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d004      	beq.n	800e232 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e228:	4b05      	ldr	r3, [pc, #20]	; (800e240 <pvTaskIncrementMutexHeldCount+0x24>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e22e:	3201      	adds	r2, #1
 800e230:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e232:	4b03      	ldr	r3, [pc, #12]	; (800e240 <pvTaskIncrementMutexHeldCount+0x24>)
 800e234:	681b      	ldr	r3, [r3, #0]
	}
 800e236:	4618      	mov	r0, r3
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr
 800e240:	20000a8c 	.word	0x20000a8c

0800e244 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e24e:	4b29      	ldr	r3, [pc, #164]	; (800e2f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e254:	4b28      	ldr	r3, [pc, #160]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe f84a 	bl	800c2f4 <uxListRemove>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10b      	bne.n	800e27e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e266:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26c:	2201      	movs	r2, #1
 800e26e:	fa02 f303 	lsl.w	r3, r2, r3
 800e272:	43da      	mvns	r2, r3
 800e274:	4b21      	ldr	r3, [pc, #132]	; (800e2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4013      	ands	r3, r2
 800e27a:	4a20      	ldr	r2, [pc, #128]	; (800e2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e27c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e284:	d10a      	bne.n	800e29c <prvAddCurrentTaskToDelayedList+0x58>
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d007      	beq.n	800e29c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e28c:	4b1a      	ldr	r3, [pc, #104]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	3304      	adds	r3, #4
 800e292:	4619      	mov	r1, r3
 800e294:	481a      	ldr	r0, [pc, #104]	; (800e300 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e296:	f7fd ffd0 	bl	800c23a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e29a:	e026      	b.n	800e2ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2a4:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d209      	bcs.n	800e2c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2b4:	4b13      	ldr	r3, [pc, #76]	; (800e304 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	4b0f      	ldr	r3, [pc, #60]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	f7fd ffde 	bl	800c282 <vListInsert>
}
 800e2c6:	e010      	b.n	800e2ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	4b0a      	ldr	r3, [pc, #40]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	f7fd ffd4 	bl	800c282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2da:	4b0c      	ldr	r3, [pc, #48]	; (800e30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d202      	bcs.n	800e2ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e2e4:	4a09      	ldr	r2, [pc, #36]	; (800e30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	6013      	str	r3, [r2, #0]
}
 800e2ea:	bf00      	nop
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	20000b90 	.word	0x20000b90
 800e2f8:	20000a8c 	.word	0x20000a8c
 800e2fc:	20000b94 	.word	0x20000b94
 800e300:	20000b78 	.word	0x20000b78
 800e304:	20000b48 	.word	0x20000b48
 800e308:	20000b44 	.word	0x20000b44
 800e30c:	20000bac 	.word	0x20000bac

0800e310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08a      	sub	sp, #40	; 0x28
 800e314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e316:	2300      	movs	r3, #0
 800e318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e31a:	f000 fb97 	bl	800ea4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e31e:	4b1d      	ldr	r3, [pc, #116]	; (800e394 <xTimerCreateTimerTask+0x84>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d021      	beq.n	800e36a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e326:	2300      	movs	r3, #0
 800e328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e32e:	1d3a      	adds	r2, r7, #4
 800e330:	f107 0108 	add.w	r1, r7, #8
 800e334:	f107 030c 	add.w	r3, r7, #12
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f2 f957 	bl	80005ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e33e:	6879      	ldr	r1, [r7, #4]
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	9202      	str	r2, [sp, #8]
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	2302      	movs	r3, #2
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	2300      	movs	r3, #0
 800e34e:	460a      	mov	r2, r1
 800e350:	4911      	ldr	r1, [pc, #68]	; (800e398 <xTimerCreateTimerTask+0x88>)
 800e352:	4812      	ldr	r0, [pc, #72]	; (800e39c <xTimerCreateTimerTask+0x8c>)
 800e354:	f7fe feb8 	bl	800d0c8 <xTaskCreateStatic>
 800e358:	4603      	mov	r3, r0
 800e35a:	4a11      	ldr	r2, [pc, #68]	; (800e3a0 <xTimerCreateTimerTask+0x90>)
 800e35c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e35e:	4b10      	ldr	r3, [pc, #64]	; (800e3a0 <xTimerCreateTimerTask+0x90>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d001      	beq.n	800e36a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e366:	2301      	movs	r3, #1
 800e368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d10c      	bne.n	800e38a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800e370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e374:	b672      	cpsid	i
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	b662      	cpsie	i
 800e384:	613b      	str	r3, [r7, #16]
}
 800e386:	bf00      	nop
 800e388:	e7fe      	b.n	800e388 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800e38a:	697b      	ldr	r3, [r7, #20]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	20000be8 	.word	0x20000be8
 800e398:	0800fe98 	.word	0x0800fe98
 800e39c:	0800e621 	.word	0x0800e621
 800e3a0:	20000bec 	.word	0x20000bec

0800e3a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b088      	sub	sp, #32
 800e3a8:	af02      	add	r7, sp, #8
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e3b2:	2028      	movs	r0, #40	; 0x28
 800e3b4:	f000 fdc6 	bl	800ef44 <pvPortMalloc>
 800e3b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00d      	beq.n	800e3dc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	9301      	str	r3, [sp, #4]
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	68b9      	ldr	r1, [r7, #8]
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 f847 	bl	800e46a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e3dc:	697b      	ldr	r3, [r7, #20]
	}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3718      	adds	r7, #24
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b08a      	sub	sp, #40	; 0x28
 800e3ea:	af02      	add	r7, sp, #8
 800e3ec:	60f8      	str	r0, [r7, #12]
 800e3ee:	60b9      	str	r1, [r7, #8]
 800e3f0:	607a      	str	r2, [r7, #4]
 800e3f2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e3f4:	2328      	movs	r3, #40	; 0x28
 800e3f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b28      	cmp	r3, #40	; 0x28
 800e3fc:	d00c      	beq.n	800e418 <xTimerCreateStatic+0x32>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	b672      	cpsid	i
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	b662      	cpsie	i
 800e412:	61bb      	str	r3, [r7, #24]
}
 800e414:	bf00      	nop
 800e416:	e7fe      	b.n	800e416 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e418:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10c      	bne.n	800e43a <xTimerCreateStatic+0x54>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	b672      	cpsid	i
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	b662      	cpsie	i
 800e434:	617b      	str	r3, [r7, #20]
}
 800e436:	bf00      	nop
 800e438:	e7fe      	b.n	800e438 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00d      	beq.n	800e460 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	2202      	movs	r2, #2
 800e448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	9301      	str	r3, [sp, #4]
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f000 f805 	bl	800e46a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e460:	69fb      	ldr	r3, [r7, #28]
	}
 800e462:	4618      	mov	r0, r3
 800e464:	3720      	adds	r7, #32
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b086      	sub	sp, #24
 800e46e:	af00      	add	r7, sp, #0
 800e470:	60f8      	str	r0, [r7, #12]
 800e472:	60b9      	str	r1, [r7, #8]
 800e474:	607a      	str	r2, [r7, #4]
 800e476:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10c      	bne.n	800e498 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e482:	b672      	cpsid	i
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	b662      	cpsie	i
 800e492:	617b      	str	r3, [r7, #20]
}
 800e494:	bf00      	nop
 800e496:	e7fe      	b.n	800e496 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d01e      	beq.n	800e4dc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e49e:	f000 fad5 	bl	800ea4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	683a      	ldr	r2, [r7, #0]
 800e4b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	6a3a      	ldr	r2, [r7, #32]
 800e4b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	3304      	adds	r3, #4
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fd feae 	bl	800c220 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d008      	beq.n	800e4dc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e4d0:	f043 0304 	orr.w	r3, r3, #4
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e4dc:	bf00      	nop
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b08a      	sub	sp, #40	; 0x28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10c      	bne.n	800e516 <xTimerGenericCommand+0x32>
	__asm volatile
 800e4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e500:	b672      	cpsid	i
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	b662      	cpsie	i
 800e510:	623b      	str	r3, [r7, #32]
}
 800e512:	bf00      	nop
 800e514:	e7fe      	b.n	800e514 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e516:	4b1a      	ldr	r3, [pc, #104]	; (800e580 <xTimerGenericCommand+0x9c>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d02a      	beq.n	800e574 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b05      	cmp	r3, #5
 800e52e:	dc18      	bgt.n	800e562 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e530:	f7ff fcae 	bl	800de90 <xTaskGetSchedulerState>
 800e534:	4603      	mov	r3, r0
 800e536:	2b02      	cmp	r3, #2
 800e538:	d109      	bne.n	800e54e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e53a:	4b11      	ldr	r3, [pc, #68]	; (800e580 <xTimerGenericCommand+0x9c>)
 800e53c:	6818      	ldr	r0, [r3, #0]
 800e53e:	f107 0114 	add.w	r1, r7, #20
 800e542:	2300      	movs	r3, #0
 800e544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e546:	f7fe f899 	bl	800c67c <xQueueGenericSend>
 800e54a:	6278      	str	r0, [r7, #36]	; 0x24
 800e54c:	e012      	b.n	800e574 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e54e:	4b0c      	ldr	r3, [pc, #48]	; (800e580 <xTimerGenericCommand+0x9c>)
 800e550:	6818      	ldr	r0, [r3, #0]
 800e552:	f107 0114 	add.w	r1, r7, #20
 800e556:	2300      	movs	r3, #0
 800e558:	2200      	movs	r2, #0
 800e55a:	f7fe f88f 	bl	800c67c <xQueueGenericSend>
 800e55e:	6278      	str	r0, [r7, #36]	; 0x24
 800e560:	e008      	b.n	800e574 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e562:	4b07      	ldr	r3, [pc, #28]	; (800e580 <xTimerGenericCommand+0x9c>)
 800e564:	6818      	ldr	r0, [r3, #0]
 800e566:	f107 0114 	add.w	r1, r7, #20
 800e56a:	2300      	movs	r3, #0
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	f7fe f98b 	bl	800c888 <xQueueGenericSendFromISR>
 800e572:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e576:	4618      	mov	r0, r3
 800e578:	3728      	adds	r7, #40	; 0x28
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	20000be8 	.word	0x20000be8

0800e584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b088      	sub	sp, #32
 800e588:	af02      	add	r7, sp, #8
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e58e:	4b23      	ldr	r3, [pc, #140]	; (800e61c <prvProcessExpiredTimer+0x98>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	3304      	adds	r3, #4
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fd fea9 	bl	800c2f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5a8:	f003 0304 	and.w	r3, r3, #4
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d024      	beq.n	800e5fa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	699a      	ldr	r2, [r3, #24]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	18d1      	adds	r1, r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	6978      	ldr	r0, [r7, #20]
 800e5be:	f000 f8d3 	bl	800e768 <prvInsertTimerInActiveList>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d021      	beq.n	800e60c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	6978      	ldr	r0, [r7, #20]
 800e5d4:	f7ff ff86 	bl	800e4e4 <xTimerGenericCommand>
 800e5d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d115      	bne.n	800e60c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	b672      	cpsid	i
 800e5e6:	f383 8811 	msr	BASEPRI, r3
 800e5ea:	f3bf 8f6f 	isb	sy
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	b662      	cpsie	i
 800e5f4:	60fb      	str	r3, [r7, #12]
}
 800e5f6:	bf00      	nop
 800e5f8:	e7fe      	b.n	800e5f8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e600:	f023 0301 	bic.w	r3, r3, #1
 800e604:	b2da      	uxtb	r2, r3
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	6a1b      	ldr	r3, [r3, #32]
 800e610:	6978      	ldr	r0, [r7, #20]
 800e612:	4798      	blx	r3
}
 800e614:	bf00      	nop
 800e616:	3718      	adds	r7, #24
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	20000be0 	.word	0x20000be0

0800e620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e628:	f107 0308 	add.w	r3, r7, #8
 800e62c:	4618      	mov	r0, r3
 800e62e:	f000 f857 	bl	800e6e0 <prvGetNextExpireTime>
 800e632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	4619      	mov	r1, r3
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f000 f803 	bl	800e644 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e63e:	f000 f8d5 	bl	800e7ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e642:	e7f1      	b.n	800e628 <prvTimerTask+0x8>

0800e644 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e64e:	f7ff f829 	bl	800d6a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e652:	f107 0308 	add.w	r3, r7, #8
 800e656:	4618      	mov	r0, r3
 800e658:	f000 f866 	bl	800e728 <prvSampleTimeNow>
 800e65c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d130      	bne.n	800e6c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10a      	bne.n	800e680 <prvProcessTimerOrBlockTask+0x3c>
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d806      	bhi.n	800e680 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e672:	f7ff f825 	bl	800d6c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e676:	68f9      	ldr	r1, [r7, #12]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff ff83 	bl	800e584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e67e:	e024      	b.n	800e6ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d008      	beq.n	800e698 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e686:	4b13      	ldr	r3, [pc, #76]	; (800e6d4 <prvProcessTimerOrBlockTask+0x90>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d101      	bne.n	800e694 <prvProcessTimerOrBlockTask+0x50>
 800e690:	2301      	movs	r3, #1
 800e692:	e000      	b.n	800e696 <prvProcessTimerOrBlockTask+0x52>
 800e694:	2300      	movs	r3, #0
 800e696:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e698:	4b0f      	ldr	r3, [pc, #60]	; (800e6d8 <prvProcessTimerOrBlockTask+0x94>)
 800e69a:	6818      	ldr	r0, [r3, #0]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	f7fe fcdb 	bl	800d060 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e6aa:	f7ff f809 	bl	800d6c0 <xTaskResumeAll>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10a      	bne.n	800e6ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e6b4:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <prvProcessTimerOrBlockTask+0x98>)
 800e6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ba:	601a      	str	r2, [r3, #0]
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	f3bf 8f6f 	isb	sy
}
 800e6c4:	e001      	b.n	800e6ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e6c6:	f7fe fffb 	bl	800d6c0 <xTaskResumeAll>
}
 800e6ca:	bf00      	nop
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20000be4 	.word	0x20000be4
 800e6d8:	20000be8 	.word	0x20000be8
 800e6dc:	e000ed04 	.word	0xe000ed04

0800e6e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e6e8:	4b0e      	ldr	r3, [pc, #56]	; (800e724 <prvGetNextExpireTime+0x44>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d101      	bne.n	800e6f6 <prvGetNextExpireTime+0x16>
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	e000      	b.n	800e6f8 <prvGetNextExpireTime+0x18>
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d105      	bne.n	800e710 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e704:	4b07      	ldr	r3, [pc, #28]	; (800e724 <prvGetNextExpireTime+0x44>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	60fb      	str	r3, [r7, #12]
 800e70e:	e001      	b.n	800e714 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e710:	2300      	movs	r3, #0
 800e712:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e714:	68fb      	ldr	r3, [r7, #12]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	20000be0 	.word	0x20000be0

0800e728 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e730:	f7ff f864 	bl	800d7fc <xTaskGetTickCount>
 800e734:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e736:	4b0b      	ldr	r3, [pc, #44]	; (800e764 <prvSampleTimeNow+0x3c>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d205      	bcs.n	800e74c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e740:	f000 f91e 	bl	800e980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	e002      	b.n	800e752 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2200      	movs	r2, #0
 800e750:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e752:	4a04      	ldr	r2, [pc, #16]	; (800e764 <prvSampleTimeNow+0x3c>)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e758:	68fb      	ldr	r3, [r7, #12]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	20000bf0 	.word	0x20000bf0

0800e768 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e776:	2300      	movs	r3, #0
 800e778:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e786:	68ba      	ldr	r2, [r7, #8]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d812      	bhi.n	800e7b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	1ad2      	subs	r2, r2, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d302      	bcc.n	800e7a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e79c:	2301      	movs	r3, #1
 800e79e:	617b      	str	r3, [r7, #20]
 800e7a0:	e01b      	b.n	800e7da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e7a2:	4b10      	ldr	r3, [pc, #64]	; (800e7e4 <prvInsertTimerInActiveList+0x7c>)
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	f7fd fd68 	bl	800c282 <vListInsert>
 800e7b2:	e012      	b.n	800e7da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d206      	bcs.n	800e7ca <prvInsertTimerInActiveList+0x62>
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d302      	bcc.n	800e7ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	617b      	str	r3, [r7, #20]
 800e7c8:	e007      	b.n	800e7da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e7ca:	4b07      	ldr	r3, [pc, #28]	; (800e7e8 <prvInsertTimerInActiveList+0x80>)
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3304      	adds	r3, #4
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	f7fd fd54 	bl	800c282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e7da:	697b      	ldr	r3, [r7, #20]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3718      	adds	r7, #24
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	20000be4 	.word	0x20000be4
 800e7e8:	20000be0 	.word	0x20000be0

0800e7ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08c      	sub	sp, #48	; 0x30
 800e7f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7f2:	e0b2      	b.n	800e95a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f2c0 80ae 	blt.w	800e958 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	695b      	ldr	r3, [r3, #20]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d004      	beq.n	800e812 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80a:	3304      	adds	r3, #4
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fd fd71 	bl	800c2f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e812:	1d3b      	adds	r3, r7, #4
 800e814:	4618      	mov	r0, r3
 800e816:	f7ff ff87 	bl	800e728 <prvSampleTimeNow>
 800e81a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	2b09      	cmp	r3, #9
 800e820:	f200 809b 	bhi.w	800e95a <prvProcessReceivedCommands+0x16e>
 800e824:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <prvProcessReceivedCommands+0x40>)
 800e826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82a:	bf00      	nop
 800e82c:	0800e855 	.word	0x0800e855
 800e830:	0800e855 	.word	0x0800e855
 800e834:	0800e855 	.word	0x0800e855
 800e838:	0800e8cd 	.word	0x0800e8cd
 800e83c:	0800e8e1 	.word	0x0800e8e1
 800e840:	0800e92f 	.word	0x0800e92f
 800e844:	0800e855 	.word	0x0800e855
 800e848:	0800e855 	.word	0x0800e855
 800e84c:	0800e8cd 	.word	0x0800e8cd
 800e850:	0800e8e1 	.word	0x0800e8e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e85a:	f043 0301 	orr.w	r3, r3, #1
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	699b      	ldr	r3, [r3, #24]
 800e86c:	18d1      	adds	r1, r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6a3a      	ldr	r2, [r7, #32]
 800e872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e874:	f7ff ff78 	bl	800e768 <prvInsertTimerInActiveList>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d06d      	beq.n	800e95a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e884:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e88c:	f003 0304 	and.w	r3, r3, #4
 800e890:	2b00      	cmp	r3, #0
 800e892:	d062      	beq.n	800e95a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	441a      	add	r2, r3
 800e89c:	2300      	movs	r3, #0
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8a6:	f7ff fe1d 	bl	800e4e4 <xTimerGenericCommand>
 800e8aa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d153      	bne.n	800e95a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b6:	b672      	cpsid	i
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	b662      	cpsie	i
 800e8c6:	61bb      	str	r3, [r7, #24]
}
 800e8c8:	bf00      	nop
 800e8ca:	e7fe      	b.n	800e8ca <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e8d2:	f023 0301 	bic.w	r3, r3, #1
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e8de:	e03c      	b.n	800e95a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e8e6:	f043 0301 	orr.w	r3, r3, #1
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10c      	bne.n	800e91a <prvProcessReceivedCommands+0x12e>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	b672      	cpsid	i
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	b662      	cpsie	i
 800e914:	617b      	str	r3, [r7, #20]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91c:	699a      	ldr	r2, [r3, #24]
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	18d1      	adds	r1, r2, r3
 800e922:	6a3b      	ldr	r3, [r7, #32]
 800e924:	6a3a      	ldr	r2, [r7, #32]
 800e926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e928:	f7ff ff1e 	bl	800e768 <prvInsertTimerInActiveList>
					break;
 800e92c:	e015      	b.n	800e95a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e934:	f003 0302 	and.w	r3, r3, #2
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d103      	bne.n	800e944 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800e93c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e93e:	f000 fbcb 	bl	800f0d8 <vPortFree>
 800e942:	e00a      	b.n	800e95a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e94a:	f023 0301 	bic.w	r3, r3, #1
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e956:	e000      	b.n	800e95a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e95a:	4b08      	ldr	r3, [pc, #32]	; (800e97c <prvProcessReceivedCommands+0x190>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f107 0108 	add.w	r1, r7, #8
 800e962:	2200      	movs	r2, #0
 800e964:	4618      	mov	r0, r3
 800e966:	f7fe f82f 	bl	800c9c8 <xQueueReceive>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f47f af41 	bne.w	800e7f4 <prvProcessReceivedCommands+0x8>
	}
}
 800e972:	bf00      	nop
 800e974:	bf00      	nop
 800e976:	3728      	adds	r7, #40	; 0x28
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	20000be8 	.word	0x20000be8

0800e980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e986:	e04a      	b.n	800ea1e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e988:	4b2e      	ldr	r3, [pc, #184]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e992:	4b2c      	ldr	r3, [pc, #176]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	3304      	adds	r3, #4
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fd fca7 	bl	800c2f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e9b4:	f003 0304 	and.w	r3, r3, #4
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d030      	beq.n	800ea1e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	693a      	ldr	r2, [r7, #16]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d90e      	bls.n	800e9ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9da:	4b1a      	ldr	r3, [pc, #104]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3304      	adds	r3, #4
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f7fd fc4c 	bl	800c282 <vListInsert>
 800e9ea:	e018      	b.n	800ea1e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f7ff fd74 	bl	800e4e4 <xTimerGenericCommand>
 800e9fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10c      	bne.n	800ea1e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	b672      	cpsid	i
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	b662      	cpsie	i
 800ea18:	603b      	str	r3, [r7, #0]
}
 800ea1a:	bf00      	nop
 800ea1c:	e7fe      	b.n	800ea1c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea1e:	4b09      	ldr	r3, [pc, #36]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1af      	bne.n	800e988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ea28:	4b06      	ldr	r3, [pc, #24]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ea2e:	4b06      	ldr	r3, [pc, #24]	; (800ea48 <prvSwitchTimerLists+0xc8>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a04      	ldr	r2, [pc, #16]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800ea34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ea36:	4a04      	ldr	r2, [pc, #16]	; (800ea48 <prvSwitchTimerLists+0xc8>)
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	6013      	str	r3, [r2, #0]
}
 800ea3c:	bf00      	nop
 800ea3e:	3718      	adds	r7, #24
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	20000be0 	.word	0x20000be0
 800ea48:	20000be4 	.word	0x20000be4

0800ea4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea52:	f000 f94b 	bl	800ecec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea56:	4b15      	ldr	r3, [pc, #84]	; (800eaac <prvCheckForValidListAndQueue+0x60>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d120      	bne.n	800eaa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea5e:	4814      	ldr	r0, [pc, #80]	; (800eab0 <prvCheckForValidListAndQueue+0x64>)
 800ea60:	f7fd fbbe 	bl	800c1e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea64:	4813      	ldr	r0, [pc, #76]	; (800eab4 <prvCheckForValidListAndQueue+0x68>)
 800ea66:	f7fd fbbb 	bl	800c1e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea6a:	4b13      	ldr	r3, [pc, #76]	; (800eab8 <prvCheckForValidListAndQueue+0x6c>)
 800ea6c:	4a10      	ldr	r2, [pc, #64]	; (800eab0 <prvCheckForValidListAndQueue+0x64>)
 800ea6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea70:	4b12      	ldr	r3, [pc, #72]	; (800eabc <prvCheckForValidListAndQueue+0x70>)
 800ea72:	4a10      	ldr	r2, [pc, #64]	; (800eab4 <prvCheckForValidListAndQueue+0x68>)
 800ea74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea76:	2300      	movs	r3, #0
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	4b11      	ldr	r3, [pc, #68]	; (800eac0 <prvCheckForValidListAndQueue+0x74>)
 800ea7c:	4a11      	ldr	r2, [pc, #68]	; (800eac4 <prvCheckForValidListAndQueue+0x78>)
 800ea7e:	210c      	movs	r1, #12
 800ea80:	200a      	movs	r0, #10
 800ea82:	f7fd fccb 	bl	800c41c <xQueueGenericCreateStatic>
 800ea86:	4603      	mov	r3, r0
 800ea88:	4a08      	ldr	r2, [pc, #32]	; (800eaac <prvCheckForValidListAndQueue+0x60>)
 800ea8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea8c:	4b07      	ldr	r3, [pc, #28]	; (800eaac <prvCheckForValidListAndQueue+0x60>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d005      	beq.n	800eaa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea94:	4b05      	ldr	r3, [pc, #20]	; (800eaac <prvCheckForValidListAndQueue+0x60>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	490b      	ldr	r1, [pc, #44]	; (800eac8 <prvCheckForValidListAndQueue+0x7c>)
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fe fab6 	bl	800d00c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eaa0:	f000 f958 	bl	800ed54 <vPortExitCritical>
}
 800eaa4:	bf00      	nop
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20000be8 	.word	0x20000be8
 800eab0:	20000bb8 	.word	0x20000bb8
 800eab4:	20000bcc 	.word	0x20000bcc
 800eab8:	20000be0 	.word	0x20000be0
 800eabc:	20000be4 	.word	0x20000be4
 800eac0:	20000c6c 	.word	0x20000c6c
 800eac4:	20000bf4 	.word	0x20000bf4
 800eac8:	0800fea0 	.word	0x0800fea0

0800eacc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eacc:	b480      	push	{r7}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	3b04      	subs	r3, #4
 800eadc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	3b04      	subs	r3, #4
 800eaea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	f023 0201 	bic.w	r2, r3, #1
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3b04      	subs	r3, #4
 800eafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eafc:	4a0c      	ldr	r2, [pc, #48]	; (800eb30 <pxPortInitialiseStack+0x64>)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	3b14      	subs	r3, #20
 800eb06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3b04      	subs	r3, #4
 800eb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f06f 0202 	mvn.w	r2, #2
 800eb1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3b20      	subs	r3, #32
 800eb20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eb22:	68fb      	ldr	r3, [r7, #12]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3714      	adds	r7, #20
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	0800eb35 	.word	0x0800eb35

0800eb34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb34:	b480      	push	{r7}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eb3e:	4b14      	ldr	r3, [pc, #80]	; (800eb90 <prvTaskExitError+0x5c>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb46:	d00c      	beq.n	800eb62 <prvTaskExitError+0x2e>
	__asm volatile
 800eb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4c:	b672      	cpsid	i
 800eb4e:	f383 8811 	msr	BASEPRI, r3
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	b662      	cpsie	i
 800eb5c:	60fb      	str	r3, [r7, #12]
}
 800eb5e:	bf00      	nop
 800eb60:	e7fe      	b.n	800eb60 <prvTaskExitError+0x2c>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb66:	b672      	cpsid	i
 800eb68:	f383 8811 	msr	BASEPRI, r3
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	b662      	cpsie	i
 800eb76:	60bb      	str	r3, [r7, #8]
}
 800eb78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb7a:	bf00      	nop
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d0fc      	beq.n	800eb7c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb82:	bf00      	nop
 800eb84:	bf00      	nop
 800eb86:	3714      	adds	r7, #20
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	2000004c 	.word	0x2000004c
	...

0800eba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eba0:	4b07      	ldr	r3, [pc, #28]	; (800ebc0 <pxCurrentTCBConst2>)
 800eba2:	6819      	ldr	r1, [r3, #0]
 800eba4:	6808      	ldr	r0, [r1, #0]
 800eba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebaa:	f380 8809 	msr	PSP, r0
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f04f 0000 	mov.w	r0, #0
 800ebb6:	f380 8811 	msr	BASEPRI, r0
 800ebba:	4770      	bx	lr
 800ebbc:	f3af 8000 	nop.w

0800ebc0 <pxCurrentTCBConst2>:
 800ebc0:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ebc4:	bf00      	nop
 800ebc6:	bf00      	nop

0800ebc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ebc8:	4808      	ldr	r0, [pc, #32]	; (800ebec <prvPortStartFirstTask+0x24>)
 800ebca:	6800      	ldr	r0, [r0, #0]
 800ebcc:	6800      	ldr	r0, [r0, #0]
 800ebce:	f380 8808 	msr	MSP, r0
 800ebd2:	f04f 0000 	mov.w	r0, #0
 800ebd6:	f380 8814 	msr	CONTROL, r0
 800ebda:	b662      	cpsie	i
 800ebdc:	b661      	cpsie	f
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	df00      	svc	0
 800ebe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ebea:	bf00      	nop
 800ebec:	e000ed08 	.word	0xe000ed08

0800ebf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ebf6:	4b37      	ldr	r3, [pc, #220]	; (800ecd4 <xPortStartScheduler+0xe4>)
 800ebf8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	22ff      	movs	r2, #255	; 0xff
 800ec06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec10:	78fb      	ldrb	r3, [r7, #3]
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	4b2f      	ldr	r3, [pc, #188]	; (800ecd8 <xPortStartScheduler+0xe8>)
 800ec1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec1e:	4b2f      	ldr	r3, [pc, #188]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec20:	2207      	movs	r2, #7
 800ec22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec24:	e009      	b.n	800ec3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ec26:	4b2d      	ldr	r3, [pc, #180]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	4a2b      	ldr	r2, [pc, #172]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec30:	78fb      	ldrb	r3, [r7, #3]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec3a:	78fb      	ldrb	r3, [r7, #3]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec42:	2b80      	cmp	r3, #128	; 0x80
 800ec44:	d0ef      	beq.n	800ec26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec46:	4b25      	ldr	r3, [pc, #148]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f1c3 0307 	rsb	r3, r3, #7
 800ec4e:	2b04      	cmp	r3, #4
 800ec50:	d00c      	beq.n	800ec6c <xPortStartScheduler+0x7c>
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec56:	b672      	cpsid	i
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	b662      	cpsie	i
 800ec66:	60bb      	str	r3, [r7, #8]
}
 800ec68:	bf00      	nop
 800ec6a:	e7fe      	b.n	800ec6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec6c:	4b1b      	ldr	r3, [pc, #108]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	021b      	lsls	r3, r3, #8
 800ec72:	4a1a      	ldr	r2, [pc, #104]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec76:	4b19      	ldr	r3, [pc, #100]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec7e:	4a17      	ldr	r2, [pc, #92]	; (800ecdc <xPortStartScheduler+0xec>)
 800ec80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec8a:	4b15      	ldr	r3, [pc, #84]	; (800ece0 <xPortStartScheduler+0xf0>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a14      	ldr	r2, [pc, #80]	; (800ece0 <xPortStartScheduler+0xf0>)
 800ec90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec96:	4b12      	ldr	r3, [pc, #72]	; (800ece0 <xPortStartScheduler+0xf0>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a11      	ldr	r2, [pc, #68]	; (800ece0 <xPortStartScheduler+0xf0>)
 800ec9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eca0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eca2:	f000 f8dd 	bl	800ee60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eca6:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <xPortStartScheduler+0xf4>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ecac:	f000 f8fc 	bl	800eea8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ecb0:	4b0d      	ldr	r3, [pc, #52]	; (800ece8 <xPortStartScheduler+0xf8>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a0c      	ldr	r2, [pc, #48]	; (800ece8 <xPortStartScheduler+0xf8>)
 800ecb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ecba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ecbc:	f7ff ff84 	bl	800ebc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ecc0:	f7fe fe66 	bl	800d990 <vTaskSwitchContext>
	prvTaskExitError();
 800ecc4:	f7ff ff36 	bl	800eb34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	e000e400 	.word	0xe000e400
 800ecd8:	20000cb4 	.word	0x20000cb4
 800ecdc:	20000cb8 	.word	0x20000cb8
 800ece0:	e000ed20 	.word	0xe000ed20
 800ece4:	2000004c 	.word	0x2000004c
 800ece8:	e000ef34 	.word	0xe000ef34

0800ecec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	b672      	cpsid	i
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	b662      	cpsie	i
 800ed06:	607b      	str	r3, [r7, #4]
}
 800ed08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed0a:	4b10      	ldr	r3, [pc, #64]	; (800ed4c <vPortEnterCritical+0x60>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	4a0e      	ldr	r2, [pc, #56]	; (800ed4c <vPortEnterCritical+0x60>)
 800ed12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ed14:	4b0d      	ldr	r3, [pc, #52]	; (800ed4c <vPortEnterCritical+0x60>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d111      	bne.n	800ed40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ed1c:	4b0c      	ldr	r3, [pc, #48]	; (800ed50 <vPortEnterCritical+0x64>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00c      	beq.n	800ed40 <vPortEnterCritical+0x54>
	__asm volatile
 800ed26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2a:	b672      	cpsid	i
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	b662      	cpsie	i
 800ed3a:	603b      	str	r3, [r7, #0]
}
 800ed3c:	bf00      	nop
 800ed3e:	e7fe      	b.n	800ed3e <vPortEnterCritical+0x52>
	}
}
 800ed40:	bf00      	nop
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr
 800ed4c:	2000004c 	.word	0x2000004c
 800ed50:	e000ed04 	.word	0xe000ed04

0800ed54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed54:	b480      	push	{r7}
 800ed56:	b083      	sub	sp, #12
 800ed58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed5a:	4b13      	ldr	r3, [pc, #76]	; (800eda8 <vPortExitCritical+0x54>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d10c      	bne.n	800ed7c <vPortExitCritical+0x28>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed66:	b672      	cpsid	i
 800ed68:	f383 8811 	msr	BASEPRI, r3
 800ed6c:	f3bf 8f6f 	isb	sy
 800ed70:	f3bf 8f4f 	dsb	sy
 800ed74:	b662      	cpsie	i
 800ed76:	607b      	str	r3, [r7, #4]
}
 800ed78:	bf00      	nop
 800ed7a:	e7fe      	b.n	800ed7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ed7c:	4b0a      	ldr	r3, [pc, #40]	; (800eda8 <vPortExitCritical+0x54>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	3b01      	subs	r3, #1
 800ed82:	4a09      	ldr	r2, [pc, #36]	; (800eda8 <vPortExitCritical+0x54>)
 800ed84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed86:	4b08      	ldr	r3, [pc, #32]	; (800eda8 <vPortExitCritical+0x54>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d105      	bne.n	800ed9a <vPortExitCritical+0x46>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	f383 8811 	msr	BASEPRI, r3
}
 800ed98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed9a:	bf00      	nop
 800ed9c:	370c      	adds	r7, #12
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	2000004c 	.word	0x2000004c
 800edac:	00000000 	.word	0x00000000

0800edb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800edb0:	f3ef 8009 	mrs	r0, PSP
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	4b15      	ldr	r3, [pc, #84]	; (800ee10 <pxCurrentTCBConst>)
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	f01e 0f10 	tst.w	lr, #16
 800edc0:	bf08      	it	eq
 800edc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800edc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edca:	6010      	str	r0, [r2, #0]
 800edcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800edd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800edd4:	b672      	cpsid	i
 800edd6:	f380 8811 	msr	BASEPRI, r0
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	f3bf 8f6f 	isb	sy
 800ede2:	b662      	cpsie	i
 800ede4:	f7fe fdd4 	bl	800d990 <vTaskSwitchContext>
 800ede8:	f04f 0000 	mov.w	r0, #0
 800edec:	f380 8811 	msr	BASEPRI, r0
 800edf0:	bc09      	pop	{r0, r3}
 800edf2:	6819      	ldr	r1, [r3, #0]
 800edf4:	6808      	ldr	r0, [r1, #0]
 800edf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfa:	f01e 0f10 	tst.w	lr, #16
 800edfe:	bf08      	it	eq
 800ee00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee04:	f380 8809 	msr	PSP, r0
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop

0800ee10 <pxCurrentTCBConst>:
 800ee10:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop

0800ee18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee22:	b672      	cpsid	i
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	b662      	cpsie	i
 800ee32:	607b      	str	r3, [r7, #4]
}
 800ee34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ee36:	f7fe fcf1 	bl	800d81c <xTaskIncrementTick>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee40:	4b06      	ldr	r3, [pc, #24]	; (800ee5c <SysTick_Handler+0x44>)
 800ee42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee46:	601a      	str	r2, [r3, #0]
 800ee48:	2300      	movs	r3, #0
 800ee4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	f383 8811 	msr	BASEPRI, r3
}
 800ee52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee54:	bf00      	nop
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	e000ed04 	.word	0xe000ed04

0800ee60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee60:	b480      	push	{r7}
 800ee62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee64:	4b0b      	ldr	r3, [pc, #44]	; (800ee94 <vPortSetupTimerInterrupt+0x34>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee6a:	4b0b      	ldr	r3, [pc, #44]	; (800ee98 <vPortSetupTimerInterrupt+0x38>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee70:	4b0a      	ldr	r3, [pc, #40]	; (800ee9c <vPortSetupTimerInterrupt+0x3c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a0a      	ldr	r2, [pc, #40]	; (800eea0 <vPortSetupTimerInterrupt+0x40>)
 800ee76:	fba2 2303 	umull	r2, r3, r2, r3
 800ee7a:	099b      	lsrs	r3, r3, #6
 800ee7c:	4a09      	ldr	r2, [pc, #36]	; (800eea4 <vPortSetupTimerInterrupt+0x44>)
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee82:	4b04      	ldr	r3, [pc, #16]	; (800ee94 <vPortSetupTimerInterrupt+0x34>)
 800ee84:	2207      	movs	r2, #7
 800ee86:	601a      	str	r2, [r3, #0]
}
 800ee88:	bf00      	nop
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	e000e010 	.word	0xe000e010
 800ee98:	e000e018 	.word	0xe000e018
 800ee9c:	20000040 	.word	0x20000040
 800eea0:	10624dd3 	.word	0x10624dd3
 800eea4:	e000e014 	.word	0xe000e014

0800eea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eea8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eeb8 <vPortEnableVFP+0x10>
 800eeac:	6801      	ldr	r1, [r0, #0]
 800eeae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eeb2:	6001      	str	r1, [r0, #0]
 800eeb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eeb6:	bf00      	nop
 800eeb8:	e000ed88 	.word	0xe000ed88

0800eebc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eec2:	f3ef 8305 	mrs	r3, IPSR
 800eec6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b0f      	cmp	r3, #15
 800eecc:	d916      	bls.n	800eefc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eece:	4a19      	ldr	r2, [pc, #100]	; (800ef34 <vPortValidateInterruptPriority+0x78>)
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	4413      	add	r3, r2
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eed8:	4b17      	ldr	r3, [pc, #92]	; (800ef38 <vPortValidateInterruptPriority+0x7c>)
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	7afa      	ldrb	r2, [r7, #11]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d20c      	bcs.n	800eefc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	b672      	cpsid	i
 800eee8:	f383 8811 	msr	BASEPRI, r3
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f3bf 8f4f 	dsb	sy
 800eef4:	b662      	cpsie	i
 800eef6:	607b      	str	r3, [r7, #4]
}
 800eef8:	bf00      	nop
 800eefa:	e7fe      	b.n	800eefa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eefc:	4b0f      	ldr	r3, [pc, #60]	; (800ef3c <vPortValidateInterruptPriority+0x80>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ef04:	4b0e      	ldr	r3, [pc, #56]	; (800ef40 <vPortValidateInterruptPriority+0x84>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d90c      	bls.n	800ef26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ef0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef10:	b672      	cpsid	i
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	b662      	cpsie	i
 800ef20:	603b      	str	r3, [r7, #0]
}
 800ef22:	bf00      	nop
 800ef24:	e7fe      	b.n	800ef24 <vPortValidateInterruptPriority+0x68>
	}
 800ef26:	bf00      	nop
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	e000e3f0 	.word	0xe000e3f0
 800ef38:	20000cb4 	.word	0x20000cb4
 800ef3c:	e000ed0c 	.word	0xe000ed0c
 800ef40:	20000cb8 	.word	0x20000cb8

0800ef44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b08a      	sub	sp, #40	; 0x28
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef50:	f7fe fba8 	bl	800d6a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef54:	4b5b      	ldr	r3, [pc, #364]	; (800f0c4 <pvPortMalloc+0x180>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d101      	bne.n	800ef60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef5c:	f000 f91a 	bl	800f194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef60:	4b59      	ldr	r3, [pc, #356]	; (800f0c8 <pvPortMalloc+0x184>)
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	4013      	ands	r3, r2
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f040 8092 	bne.w	800f092 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d01f      	beq.n	800efb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ef74:	2208      	movs	r2, #8
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4413      	add	r3, r2
 800ef7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f003 0307 	and.w	r3, r3, #7
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d016      	beq.n	800efb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f023 0307 	bic.w	r3, r3, #7
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f003 0307 	and.w	r3, r3, #7
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00c      	beq.n	800efb4 <pvPortMalloc+0x70>
	__asm volatile
 800ef9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef9e:	b672      	cpsid	i
 800efa0:	f383 8811 	msr	BASEPRI, r3
 800efa4:	f3bf 8f6f 	isb	sy
 800efa8:	f3bf 8f4f 	dsb	sy
 800efac:	b662      	cpsie	i
 800efae:	617b      	str	r3, [r7, #20]
}
 800efb0:	bf00      	nop
 800efb2:	e7fe      	b.n	800efb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d06b      	beq.n	800f092 <pvPortMalloc+0x14e>
 800efba:	4b44      	ldr	r3, [pc, #272]	; (800f0cc <pvPortMalloc+0x188>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d866      	bhi.n	800f092 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800efc4:	4b42      	ldr	r3, [pc, #264]	; (800f0d0 <pvPortMalloc+0x18c>)
 800efc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800efc8:	4b41      	ldr	r3, [pc, #260]	; (800f0d0 <pvPortMalloc+0x18c>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efce:	e004      	b.n	800efda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d903      	bls.n	800efec <pvPortMalloc+0xa8>
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1f1      	bne.n	800efd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800efec:	4b35      	ldr	r3, [pc, #212]	; (800f0c4 <pvPortMalloc+0x180>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d04d      	beq.n	800f092 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2208      	movs	r2, #8
 800effc:	4413      	add	r3, r2
 800effe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	1ad2      	subs	r2, r2, r3
 800f010:	2308      	movs	r3, #8
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	429a      	cmp	r2, r3
 800f016:	d921      	bls.n	800f05c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4413      	add	r3, r2
 800f01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	f003 0307 	and.w	r3, r3, #7
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00c      	beq.n	800f044 <pvPortMalloc+0x100>
	__asm volatile
 800f02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02e:	b672      	cpsid	i
 800f030:	f383 8811 	msr	BASEPRI, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	b662      	cpsie	i
 800f03e:	613b      	str	r3, [r7, #16]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	1ad2      	subs	r2, r2, r3
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f056:	69b8      	ldr	r0, [r7, #24]
 800f058:	f000 f8fe 	bl	800f258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f05c:	4b1b      	ldr	r3, [pc, #108]	; (800f0cc <pvPortMalloc+0x188>)
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	4a19      	ldr	r2, [pc, #100]	; (800f0cc <pvPortMalloc+0x188>)
 800f068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f06a:	4b18      	ldr	r3, [pc, #96]	; (800f0cc <pvPortMalloc+0x188>)
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	4b19      	ldr	r3, [pc, #100]	; (800f0d4 <pvPortMalloc+0x190>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	429a      	cmp	r2, r3
 800f074:	d203      	bcs.n	800f07e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f076:	4b15      	ldr	r3, [pc, #84]	; (800f0cc <pvPortMalloc+0x188>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a16      	ldr	r2, [pc, #88]	; (800f0d4 <pvPortMalloc+0x190>)
 800f07c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f080:	685a      	ldr	r2, [r3, #4]
 800f082:	4b11      	ldr	r3, [pc, #68]	; (800f0c8 <pvPortMalloc+0x184>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	431a      	orrs	r2, r3
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08e:	2200      	movs	r2, #0
 800f090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f092:	f7fe fb15 	bl	800d6c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	f003 0307 	and.w	r3, r3, #7
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00c      	beq.n	800f0ba <pvPortMalloc+0x176>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	b672      	cpsid	i
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	b662      	cpsie	i
 800f0b4:	60fb      	str	r3, [r7, #12]
}
 800f0b6:	bf00      	nop
 800f0b8:	e7fe      	b.n	800f0b8 <pvPortMalloc+0x174>
	return pvReturn;
 800f0ba:	69fb      	ldr	r3, [r7, #28]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3728      	adds	r7, #40	; 0x28
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	200084c4 	.word	0x200084c4
 800f0c8:	200084d0 	.word	0x200084d0
 800f0cc:	200084c8 	.word	0x200084c8
 800f0d0:	200084bc 	.word	0x200084bc
 800f0d4:	200084cc 	.word	0x200084cc

0800f0d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d04c      	beq.n	800f184 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f0ea:	2308      	movs	r3, #8
 800f0ec:	425b      	negs	r3, r3
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	4b23      	ldr	r3, [pc, #140]	; (800f18c <vPortFree+0xb4>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4013      	ands	r3, r2
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10c      	bne.n	800f120 <vPortFree+0x48>
	__asm volatile
 800f106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10a:	b672      	cpsid	i
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	b662      	cpsie	i
 800f11a:	60fb      	str	r3, [r7, #12]
}
 800f11c:	bf00      	nop
 800f11e:	e7fe      	b.n	800f11e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00c      	beq.n	800f142 <vPortFree+0x6a>
	__asm volatile
 800f128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12c:	b672      	cpsid	i
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	b662      	cpsie	i
 800f13c:	60bb      	str	r3, [r7, #8]
}
 800f13e:	bf00      	nop
 800f140:	e7fe      	b.n	800f140 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	685a      	ldr	r2, [r3, #4]
 800f146:	4b11      	ldr	r3, [pc, #68]	; (800f18c <vPortFree+0xb4>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4013      	ands	r3, r2
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d019      	beq.n	800f184 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d115      	bne.n	800f184 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	685a      	ldr	r2, [r3, #4]
 800f15c:	4b0b      	ldr	r3, [pc, #44]	; (800f18c <vPortFree+0xb4>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	43db      	mvns	r3, r3
 800f162:	401a      	ands	r2, r3
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f168:	f7fe fa9c 	bl	800d6a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	685a      	ldr	r2, [r3, #4]
 800f170:	4b07      	ldr	r3, [pc, #28]	; (800f190 <vPortFree+0xb8>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4413      	add	r3, r2
 800f176:	4a06      	ldr	r2, [pc, #24]	; (800f190 <vPortFree+0xb8>)
 800f178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f17a:	6938      	ldr	r0, [r7, #16]
 800f17c:	f000 f86c 	bl	800f258 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f180:	f7fe fa9e 	bl	800d6c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f184:	bf00      	nop
 800f186:	3718      	adds	r7, #24
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	200084d0 	.word	0x200084d0
 800f190:	200084c8 	.word	0x200084c8

0800f194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f194:	b480      	push	{r7}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f19a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800f19e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1a0:	4b27      	ldr	r3, [pc, #156]	; (800f240 <prvHeapInit+0xac>)
 800f1a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f003 0307 	and.w	r3, r3, #7
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00c      	beq.n	800f1c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3307      	adds	r3, #7
 800f1b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f023 0307 	bic.w	r3, r3, #7
 800f1ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	4a1f      	ldr	r2, [pc, #124]	; (800f240 <prvHeapInit+0xac>)
 800f1c4:	4413      	add	r3, r2
 800f1c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f1cc:	4a1d      	ldr	r2, [pc, #116]	; (800f244 <prvHeapInit+0xb0>)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f1d2:	4b1c      	ldr	r3, [pc, #112]	; (800f244 <prvHeapInit+0xb0>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	68ba      	ldr	r2, [r7, #8]
 800f1dc:	4413      	add	r3, r2
 800f1de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f1e0:	2208      	movs	r2, #8
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	1a9b      	subs	r3, r3, r2
 800f1e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0307 	bic.w	r3, r3, #7
 800f1ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	4a15      	ldr	r2, [pc, #84]	; (800f248 <prvHeapInit+0xb4>)
 800f1f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f1f6:	4b14      	ldr	r3, [pc, #80]	; (800f248 <prvHeapInit+0xb4>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f1fe:	4b12      	ldr	r3, [pc, #72]	; (800f248 <prvHeapInit+0xb4>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	1ad2      	subs	r2, r2, r3
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f214:	4b0c      	ldr	r3, [pc, #48]	; (800f248 <prvHeapInit+0xb4>)
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	4a0a      	ldr	r2, [pc, #40]	; (800f24c <prvHeapInit+0xb8>)
 800f222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	4a09      	ldr	r2, [pc, #36]	; (800f250 <prvHeapInit+0xbc>)
 800f22a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f22c:	4b09      	ldr	r3, [pc, #36]	; (800f254 <prvHeapInit+0xc0>)
 800f22e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f232:	601a      	str	r2, [r3, #0]
}
 800f234:	bf00      	nop
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	20000cbc 	.word	0x20000cbc
 800f244:	200084bc 	.word	0x200084bc
 800f248:	200084c4 	.word	0x200084c4
 800f24c:	200084cc 	.word	0x200084cc
 800f250:	200084c8 	.word	0x200084c8
 800f254:	200084d0 	.word	0x200084d0

0800f258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f260:	4b28      	ldr	r3, [pc, #160]	; (800f304 <prvInsertBlockIntoFreeList+0xac>)
 800f262:	60fb      	str	r3, [r7, #12]
 800f264:	e002      	b.n	800f26c <prvInsertBlockIntoFreeList+0x14>
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	60fb      	str	r3, [r7, #12]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	429a      	cmp	r2, r3
 800f274:	d8f7      	bhi.n	800f266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	4413      	add	r3, r2
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	429a      	cmp	r2, r3
 800f286:	d108      	bne.n	800f29a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	441a      	add	r2, r3
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	441a      	add	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d118      	bne.n	800f2e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	4b15      	ldr	r3, [pc, #84]	; (800f308 <prvInsertBlockIntoFreeList+0xb0>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d00d      	beq.n	800f2d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	685a      	ldr	r2, [r3, #4]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	441a      	add	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	601a      	str	r2, [r3, #0]
 800f2d4:	e008      	b.n	800f2e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f2d6:	4b0c      	ldr	r3, [pc, #48]	; (800f308 <prvInsertBlockIntoFreeList+0xb0>)
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	e003      	b.n	800f2e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d002      	beq.n	800f2f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2f6:	bf00      	nop
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	200084bc 	.word	0x200084bc
 800f308:	200084c4 	.word	0x200084c4

0800f30c <__errno>:
 800f30c:	4b01      	ldr	r3, [pc, #4]	; (800f314 <__errno+0x8>)
 800f30e:	6818      	ldr	r0, [r3, #0]
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	20000050 	.word	0x20000050

0800f318 <__libc_init_array>:
 800f318:	b570      	push	{r4, r5, r6, lr}
 800f31a:	4d0d      	ldr	r5, [pc, #52]	; (800f350 <__libc_init_array+0x38>)
 800f31c:	4c0d      	ldr	r4, [pc, #52]	; (800f354 <__libc_init_array+0x3c>)
 800f31e:	1b64      	subs	r4, r4, r5
 800f320:	10a4      	asrs	r4, r4, #2
 800f322:	2600      	movs	r6, #0
 800f324:	42a6      	cmp	r6, r4
 800f326:	d109      	bne.n	800f33c <__libc_init_array+0x24>
 800f328:	4d0b      	ldr	r5, [pc, #44]	; (800f358 <__libc_init_array+0x40>)
 800f32a:	4c0c      	ldr	r4, [pc, #48]	; (800f35c <__libc_init_array+0x44>)
 800f32c:	f000 fcb8 	bl	800fca0 <_init>
 800f330:	1b64      	subs	r4, r4, r5
 800f332:	10a4      	asrs	r4, r4, #2
 800f334:	2600      	movs	r6, #0
 800f336:	42a6      	cmp	r6, r4
 800f338:	d105      	bne.n	800f346 <__libc_init_array+0x2e>
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
 800f33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f340:	4798      	blx	r3
 800f342:	3601      	adds	r6, #1
 800f344:	e7ee      	b.n	800f324 <__libc_init_array+0xc>
 800f346:	f855 3b04 	ldr.w	r3, [r5], #4
 800f34a:	4798      	blx	r3
 800f34c:	3601      	adds	r6, #1
 800f34e:	e7f2      	b.n	800f336 <__libc_init_array+0x1e>
 800f350:	080d2290 	.word	0x080d2290
 800f354:	080d2290 	.word	0x080d2290
 800f358:	080d2290 	.word	0x080d2290
 800f35c:	080d2294 	.word	0x080d2294

0800f360 <__retarget_lock_acquire_recursive>:
 800f360:	4770      	bx	lr

0800f362 <__retarget_lock_release_recursive>:
 800f362:	4770      	bx	lr

0800f364 <memcpy>:
 800f364:	440a      	add	r2, r1
 800f366:	4291      	cmp	r1, r2
 800f368:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f36c:	d100      	bne.n	800f370 <memcpy+0xc>
 800f36e:	4770      	bx	lr
 800f370:	b510      	push	{r4, lr}
 800f372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f37a:	4291      	cmp	r1, r2
 800f37c:	d1f9      	bne.n	800f372 <memcpy+0xe>
 800f37e:	bd10      	pop	{r4, pc}

0800f380 <memset>:
 800f380:	4402      	add	r2, r0
 800f382:	4603      	mov	r3, r0
 800f384:	4293      	cmp	r3, r2
 800f386:	d100      	bne.n	800f38a <memset+0xa>
 800f388:	4770      	bx	lr
 800f38a:	f803 1b01 	strb.w	r1, [r3], #1
 800f38e:	e7f9      	b.n	800f384 <memset+0x4>

0800f390 <_malloc_r>:
 800f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f392:	1ccd      	adds	r5, r1, #3
 800f394:	f025 0503 	bic.w	r5, r5, #3
 800f398:	3508      	adds	r5, #8
 800f39a:	2d0c      	cmp	r5, #12
 800f39c:	bf38      	it	cc
 800f39e:	250c      	movcc	r5, #12
 800f3a0:	2d00      	cmp	r5, #0
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	db01      	blt.n	800f3aa <_malloc_r+0x1a>
 800f3a6:	42a9      	cmp	r1, r5
 800f3a8:	d903      	bls.n	800f3b2 <_malloc_r+0x22>
 800f3aa:	230c      	movs	r3, #12
 800f3ac:	6033      	str	r3, [r6, #0]
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3b2:	f000 f8e1 	bl	800f578 <__malloc_lock>
 800f3b6:	4921      	ldr	r1, [pc, #132]	; (800f43c <_malloc_r+0xac>)
 800f3b8:	680a      	ldr	r2, [r1, #0]
 800f3ba:	4614      	mov	r4, r2
 800f3bc:	b99c      	cbnz	r4, 800f3e6 <_malloc_r+0x56>
 800f3be:	4f20      	ldr	r7, [pc, #128]	; (800f440 <_malloc_r+0xb0>)
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	b923      	cbnz	r3, 800f3ce <_malloc_r+0x3e>
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	f000 f8a6 	bl	800f518 <_sbrk_r>
 800f3cc:	6038      	str	r0, [r7, #0]
 800f3ce:	4629      	mov	r1, r5
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f000 f8a1 	bl	800f518 <_sbrk_r>
 800f3d6:	1c43      	adds	r3, r0, #1
 800f3d8:	d123      	bne.n	800f422 <_malloc_r+0x92>
 800f3da:	230c      	movs	r3, #12
 800f3dc:	6033      	str	r3, [r6, #0]
 800f3de:	4630      	mov	r0, r6
 800f3e0:	f000 f8d0 	bl	800f584 <__malloc_unlock>
 800f3e4:	e7e3      	b.n	800f3ae <_malloc_r+0x1e>
 800f3e6:	6823      	ldr	r3, [r4, #0]
 800f3e8:	1b5b      	subs	r3, r3, r5
 800f3ea:	d417      	bmi.n	800f41c <_malloc_r+0x8c>
 800f3ec:	2b0b      	cmp	r3, #11
 800f3ee:	d903      	bls.n	800f3f8 <_malloc_r+0x68>
 800f3f0:	6023      	str	r3, [r4, #0]
 800f3f2:	441c      	add	r4, r3
 800f3f4:	6025      	str	r5, [r4, #0]
 800f3f6:	e004      	b.n	800f402 <_malloc_r+0x72>
 800f3f8:	6863      	ldr	r3, [r4, #4]
 800f3fa:	42a2      	cmp	r2, r4
 800f3fc:	bf0c      	ite	eq
 800f3fe:	600b      	streq	r3, [r1, #0]
 800f400:	6053      	strne	r3, [r2, #4]
 800f402:	4630      	mov	r0, r6
 800f404:	f000 f8be 	bl	800f584 <__malloc_unlock>
 800f408:	f104 000b 	add.w	r0, r4, #11
 800f40c:	1d23      	adds	r3, r4, #4
 800f40e:	f020 0007 	bic.w	r0, r0, #7
 800f412:	1ac2      	subs	r2, r0, r3
 800f414:	d0cc      	beq.n	800f3b0 <_malloc_r+0x20>
 800f416:	1a1b      	subs	r3, r3, r0
 800f418:	50a3      	str	r3, [r4, r2]
 800f41a:	e7c9      	b.n	800f3b0 <_malloc_r+0x20>
 800f41c:	4622      	mov	r2, r4
 800f41e:	6864      	ldr	r4, [r4, #4]
 800f420:	e7cc      	b.n	800f3bc <_malloc_r+0x2c>
 800f422:	1cc4      	adds	r4, r0, #3
 800f424:	f024 0403 	bic.w	r4, r4, #3
 800f428:	42a0      	cmp	r0, r4
 800f42a:	d0e3      	beq.n	800f3f4 <_malloc_r+0x64>
 800f42c:	1a21      	subs	r1, r4, r0
 800f42e:	4630      	mov	r0, r6
 800f430:	f000 f872 	bl	800f518 <_sbrk_r>
 800f434:	3001      	adds	r0, #1
 800f436:	d1dd      	bne.n	800f3f4 <_malloc_r+0x64>
 800f438:	e7cf      	b.n	800f3da <_malloc_r+0x4a>
 800f43a:	bf00      	nop
 800f43c:	200084d4 	.word	0x200084d4
 800f440:	200084d8 	.word	0x200084d8

0800f444 <cleanup_glue>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	460c      	mov	r4, r1
 800f448:	6809      	ldr	r1, [r1, #0]
 800f44a:	4605      	mov	r5, r0
 800f44c:	b109      	cbz	r1, 800f452 <cleanup_glue+0xe>
 800f44e:	f7ff fff9 	bl	800f444 <cleanup_glue>
 800f452:	4621      	mov	r1, r4
 800f454:	4628      	mov	r0, r5
 800f456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f45a:	f000 b899 	b.w	800f590 <_free_r>
	...

0800f460 <_reclaim_reent>:
 800f460:	4b2c      	ldr	r3, [pc, #176]	; (800f514 <_reclaim_reent+0xb4>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4283      	cmp	r3, r0
 800f466:	b570      	push	{r4, r5, r6, lr}
 800f468:	4604      	mov	r4, r0
 800f46a:	d051      	beq.n	800f510 <_reclaim_reent+0xb0>
 800f46c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f46e:	b143      	cbz	r3, 800f482 <_reclaim_reent+0x22>
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d14a      	bne.n	800f50c <_reclaim_reent+0xac>
 800f476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f478:	6819      	ldr	r1, [r3, #0]
 800f47a:	b111      	cbz	r1, 800f482 <_reclaim_reent+0x22>
 800f47c:	4620      	mov	r0, r4
 800f47e:	f000 f887 	bl	800f590 <_free_r>
 800f482:	6961      	ldr	r1, [r4, #20]
 800f484:	b111      	cbz	r1, 800f48c <_reclaim_reent+0x2c>
 800f486:	4620      	mov	r0, r4
 800f488:	f000 f882 	bl	800f590 <_free_r>
 800f48c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f48e:	b111      	cbz	r1, 800f496 <_reclaim_reent+0x36>
 800f490:	4620      	mov	r0, r4
 800f492:	f000 f87d 	bl	800f590 <_free_r>
 800f496:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f498:	b111      	cbz	r1, 800f4a0 <_reclaim_reent+0x40>
 800f49a:	4620      	mov	r0, r4
 800f49c:	f000 f878 	bl	800f590 <_free_r>
 800f4a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f4a2:	b111      	cbz	r1, 800f4aa <_reclaim_reent+0x4a>
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	f000 f873 	bl	800f590 <_free_r>
 800f4aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f4ac:	b111      	cbz	r1, 800f4b4 <_reclaim_reent+0x54>
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f000 f86e 	bl	800f590 <_free_r>
 800f4b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f4b6:	b111      	cbz	r1, 800f4be <_reclaim_reent+0x5e>
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f000 f869 	bl	800f590 <_free_r>
 800f4be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f4c0:	b111      	cbz	r1, 800f4c8 <_reclaim_reent+0x68>
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 f864 	bl	800f590 <_free_r>
 800f4c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4ca:	b111      	cbz	r1, 800f4d2 <_reclaim_reent+0x72>
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f000 f85f 	bl	800f590 <_free_r>
 800f4d2:	69a3      	ldr	r3, [r4, #24]
 800f4d4:	b1e3      	cbz	r3, 800f510 <_reclaim_reent+0xb0>
 800f4d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f4d8:	4620      	mov	r0, r4
 800f4da:	4798      	blx	r3
 800f4dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f4de:	b1b9      	cbz	r1, 800f510 <_reclaim_reent+0xb0>
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4e6:	f7ff bfad 	b.w	800f444 <cleanup_glue>
 800f4ea:	5949      	ldr	r1, [r1, r5]
 800f4ec:	b941      	cbnz	r1, 800f500 <_reclaim_reent+0xa0>
 800f4ee:	3504      	adds	r5, #4
 800f4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4f2:	2d80      	cmp	r5, #128	; 0x80
 800f4f4:	68d9      	ldr	r1, [r3, #12]
 800f4f6:	d1f8      	bne.n	800f4ea <_reclaim_reent+0x8a>
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f000 f849 	bl	800f590 <_free_r>
 800f4fe:	e7ba      	b.n	800f476 <_reclaim_reent+0x16>
 800f500:	680e      	ldr	r6, [r1, #0]
 800f502:	4620      	mov	r0, r4
 800f504:	f000 f844 	bl	800f590 <_free_r>
 800f508:	4631      	mov	r1, r6
 800f50a:	e7ef      	b.n	800f4ec <_reclaim_reent+0x8c>
 800f50c:	2500      	movs	r5, #0
 800f50e:	e7ef      	b.n	800f4f0 <_reclaim_reent+0x90>
 800f510:	bd70      	pop	{r4, r5, r6, pc}
 800f512:	bf00      	nop
 800f514:	20000050 	.word	0x20000050

0800f518 <_sbrk_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4d06      	ldr	r5, [pc, #24]	; (800f534 <_sbrk_r+0x1c>)
 800f51c:	2300      	movs	r3, #0
 800f51e:	4604      	mov	r4, r0
 800f520:	4608      	mov	r0, r1
 800f522:	602b      	str	r3, [r5, #0]
 800f524:	f7f6 f93c 	bl	80057a0 <_sbrk>
 800f528:	1c43      	adds	r3, r0, #1
 800f52a:	d102      	bne.n	800f532 <_sbrk_r+0x1a>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	b103      	cbz	r3, 800f532 <_sbrk_r+0x1a>
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	bd38      	pop	{r3, r4, r5, pc}
 800f534:	20008c88 	.word	0x20008c88

0800f538 <siprintf>:
 800f538:	b40e      	push	{r1, r2, r3}
 800f53a:	b500      	push	{lr}
 800f53c:	b09c      	sub	sp, #112	; 0x70
 800f53e:	ab1d      	add	r3, sp, #116	; 0x74
 800f540:	9002      	str	r0, [sp, #8]
 800f542:	9006      	str	r0, [sp, #24]
 800f544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f548:	4809      	ldr	r0, [pc, #36]	; (800f570 <siprintf+0x38>)
 800f54a:	9107      	str	r1, [sp, #28]
 800f54c:	9104      	str	r1, [sp, #16]
 800f54e:	4909      	ldr	r1, [pc, #36]	; (800f574 <siprintf+0x3c>)
 800f550:	f853 2b04 	ldr.w	r2, [r3], #4
 800f554:	9105      	str	r1, [sp, #20]
 800f556:	6800      	ldr	r0, [r0, #0]
 800f558:	9301      	str	r3, [sp, #4]
 800f55a:	a902      	add	r1, sp, #8
 800f55c:	f000 f8c4 	bl	800f6e8 <_svfiprintf_r>
 800f560:	9b02      	ldr	r3, [sp, #8]
 800f562:	2200      	movs	r2, #0
 800f564:	701a      	strb	r2, [r3, #0]
 800f566:	b01c      	add	sp, #112	; 0x70
 800f568:	f85d eb04 	ldr.w	lr, [sp], #4
 800f56c:	b003      	add	sp, #12
 800f56e:	4770      	bx	lr
 800f570:	20000050 	.word	0x20000050
 800f574:	ffff0208 	.word	0xffff0208

0800f578 <__malloc_lock>:
 800f578:	4801      	ldr	r0, [pc, #4]	; (800f580 <__malloc_lock+0x8>)
 800f57a:	f7ff bef1 	b.w	800f360 <__retarget_lock_acquire_recursive>
 800f57e:	bf00      	nop
 800f580:	20008c80 	.word	0x20008c80

0800f584 <__malloc_unlock>:
 800f584:	4801      	ldr	r0, [pc, #4]	; (800f58c <__malloc_unlock+0x8>)
 800f586:	f7ff beec 	b.w	800f362 <__retarget_lock_release_recursive>
 800f58a:	bf00      	nop
 800f58c:	20008c80 	.word	0x20008c80

0800f590 <_free_r>:
 800f590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f592:	2900      	cmp	r1, #0
 800f594:	d048      	beq.n	800f628 <_free_r+0x98>
 800f596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f59a:	9001      	str	r0, [sp, #4]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f1a1 0404 	sub.w	r4, r1, #4
 800f5a2:	bfb8      	it	lt
 800f5a4:	18e4      	addlt	r4, r4, r3
 800f5a6:	f7ff ffe7 	bl	800f578 <__malloc_lock>
 800f5aa:	4a20      	ldr	r2, [pc, #128]	; (800f62c <_free_r+0x9c>)
 800f5ac:	9801      	ldr	r0, [sp, #4]
 800f5ae:	6813      	ldr	r3, [r2, #0]
 800f5b0:	4615      	mov	r5, r2
 800f5b2:	b933      	cbnz	r3, 800f5c2 <_free_r+0x32>
 800f5b4:	6063      	str	r3, [r4, #4]
 800f5b6:	6014      	str	r4, [r2, #0]
 800f5b8:	b003      	add	sp, #12
 800f5ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5be:	f7ff bfe1 	b.w	800f584 <__malloc_unlock>
 800f5c2:	42a3      	cmp	r3, r4
 800f5c4:	d90b      	bls.n	800f5de <_free_r+0x4e>
 800f5c6:	6821      	ldr	r1, [r4, #0]
 800f5c8:	1862      	adds	r2, r4, r1
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	bf04      	itt	eq
 800f5ce:	681a      	ldreq	r2, [r3, #0]
 800f5d0:	685b      	ldreq	r3, [r3, #4]
 800f5d2:	6063      	str	r3, [r4, #4]
 800f5d4:	bf04      	itt	eq
 800f5d6:	1852      	addeq	r2, r2, r1
 800f5d8:	6022      	streq	r2, [r4, #0]
 800f5da:	602c      	str	r4, [r5, #0]
 800f5dc:	e7ec      	b.n	800f5b8 <_free_r+0x28>
 800f5de:	461a      	mov	r2, r3
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	b10b      	cbz	r3, 800f5e8 <_free_r+0x58>
 800f5e4:	42a3      	cmp	r3, r4
 800f5e6:	d9fa      	bls.n	800f5de <_free_r+0x4e>
 800f5e8:	6811      	ldr	r1, [r2, #0]
 800f5ea:	1855      	adds	r5, r2, r1
 800f5ec:	42a5      	cmp	r5, r4
 800f5ee:	d10b      	bne.n	800f608 <_free_r+0x78>
 800f5f0:	6824      	ldr	r4, [r4, #0]
 800f5f2:	4421      	add	r1, r4
 800f5f4:	1854      	adds	r4, r2, r1
 800f5f6:	42a3      	cmp	r3, r4
 800f5f8:	6011      	str	r1, [r2, #0]
 800f5fa:	d1dd      	bne.n	800f5b8 <_free_r+0x28>
 800f5fc:	681c      	ldr	r4, [r3, #0]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	6053      	str	r3, [r2, #4]
 800f602:	4421      	add	r1, r4
 800f604:	6011      	str	r1, [r2, #0]
 800f606:	e7d7      	b.n	800f5b8 <_free_r+0x28>
 800f608:	d902      	bls.n	800f610 <_free_r+0x80>
 800f60a:	230c      	movs	r3, #12
 800f60c:	6003      	str	r3, [r0, #0]
 800f60e:	e7d3      	b.n	800f5b8 <_free_r+0x28>
 800f610:	6825      	ldr	r5, [r4, #0]
 800f612:	1961      	adds	r1, r4, r5
 800f614:	428b      	cmp	r3, r1
 800f616:	bf04      	itt	eq
 800f618:	6819      	ldreq	r1, [r3, #0]
 800f61a:	685b      	ldreq	r3, [r3, #4]
 800f61c:	6063      	str	r3, [r4, #4]
 800f61e:	bf04      	itt	eq
 800f620:	1949      	addeq	r1, r1, r5
 800f622:	6021      	streq	r1, [r4, #0]
 800f624:	6054      	str	r4, [r2, #4]
 800f626:	e7c7      	b.n	800f5b8 <_free_r+0x28>
 800f628:	b003      	add	sp, #12
 800f62a:	bd30      	pop	{r4, r5, pc}
 800f62c:	200084d4 	.word	0x200084d4

0800f630 <__ssputs_r>:
 800f630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f634:	688e      	ldr	r6, [r1, #8]
 800f636:	429e      	cmp	r6, r3
 800f638:	4682      	mov	sl, r0
 800f63a:	460c      	mov	r4, r1
 800f63c:	4690      	mov	r8, r2
 800f63e:	461f      	mov	r7, r3
 800f640:	d838      	bhi.n	800f6b4 <__ssputs_r+0x84>
 800f642:	898a      	ldrh	r2, [r1, #12]
 800f644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f648:	d032      	beq.n	800f6b0 <__ssputs_r+0x80>
 800f64a:	6825      	ldr	r5, [r4, #0]
 800f64c:	6909      	ldr	r1, [r1, #16]
 800f64e:	eba5 0901 	sub.w	r9, r5, r1
 800f652:	6965      	ldr	r5, [r4, #20]
 800f654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f65c:	3301      	adds	r3, #1
 800f65e:	444b      	add	r3, r9
 800f660:	106d      	asrs	r5, r5, #1
 800f662:	429d      	cmp	r5, r3
 800f664:	bf38      	it	cc
 800f666:	461d      	movcc	r5, r3
 800f668:	0553      	lsls	r3, r2, #21
 800f66a:	d531      	bpl.n	800f6d0 <__ssputs_r+0xa0>
 800f66c:	4629      	mov	r1, r5
 800f66e:	f7ff fe8f 	bl	800f390 <_malloc_r>
 800f672:	4606      	mov	r6, r0
 800f674:	b950      	cbnz	r0, 800f68c <__ssputs_r+0x5c>
 800f676:	230c      	movs	r3, #12
 800f678:	f8ca 3000 	str.w	r3, [sl]
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68c:	6921      	ldr	r1, [r4, #16]
 800f68e:	464a      	mov	r2, r9
 800f690:	f7ff fe68 	bl	800f364 <memcpy>
 800f694:	89a3      	ldrh	r3, [r4, #12]
 800f696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f69e:	81a3      	strh	r3, [r4, #12]
 800f6a0:	6126      	str	r6, [r4, #16]
 800f6a2:	6165      	str	r5, [r4, #20]
 800f6a4:	444e      	add	r6, r9
 800f6a6:	eba5 0509 	sub.w	r5, r5, r9
 800f6aa:	6026      	str	r6, [r4, #0]
 800f6ac:	60a5      	str	r5, [r4, #8]
 800f6ae:	463e      	mov	r6, r7
 800f6b0:	42be      	cmp	r6, r7
 800f6b2:	d900      	bls.n	800f6b6 <__ssputs_r+0x86>
 800f6b4:	463e      	mov	r6, r7
 800f6b6:	4632      	mov	r2, r6
 800f6b8:	6820      	ldr	r0, [r4, #0]
 800f6ba:	4641      	mov	r1, r8
 800f6bc:	f000 faa8 	bl	800fc10 <memmove>
 800f6c0:	68a3      	ldr	r3, [r4, #8]
 800f6c2:	6822      	ldr	r2, [r4, #0]
 800f6c4:	1b9b      	subs	r3, r3, r6
 800f6c6:	4432      	add	r2, r6
 800f6c8:	60a3      	str	r3, [r4, #8]
 800f6ca:	6022      	str	r2, [r4, #0]
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	e7db      	b.n	800f688 <__ssputs_r+0x58>
 800f6d0:	462a      	mov	r2, r5
 800f6d2:	f000 fab7 	bl	800fc44 <_realloc_r>
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d1e1      	bne.n	800f6a0 <__ssputs_r+0x70>
 800f6dc:	6921      	ldr	r1, [r4, #16]
 800f6de:	4650      	mov	r0, sl
 800f6e0:	f7ff ff56 	bl	800f590 <_free_r>
 800f6e4:	e7c7      	b.n	800f676 <__ssputs_r+0x46>
	...

0800f6e8 <_svfiprintf_r>:
 800f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	4698      	mov	r8, r3
 800f6ee:	898b      	ldrh	r3, [r1, #12]
 800f6f0:	061b      	lsls	r3, r3, #24
 800f6f2:	b09d      	sub	sp, #116	; 0x74
 800f6f4:	4607      	mov	r7, r0
 800f6f6:	460d      	mov	r5, r1
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	d50e      	bpl.n	800f71a <_svfiprintf_r+0x32>
 800f6fc:	690b      	ldr	r3, [r1, #16]
 800f6fe:	b963      	cbnz	r3, 800f71a <_svfiprintf_r+0x32>
 800f700:	2140      	movs	r1, #64	; 0x40
 800f702:	f7ff fe45 	bl	800f390 <_malloc_r>
 800f706:	6028      	str	r0, [r5, #0]
 800f708:	6128      	str	r0, [r5, #16]
 800f70a:	b920      	cbnz	r0, 800f716 <_svfiprintf_r+0x2e>
 800f70c:	230c      	movs	r3, #12
 800f70e:	603b      	str	r3, [r7, #0]
 800f710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f714:	e0d1      	b.n	800f8ba <_svfiprintf_r+0x1d2>
 800f716:	2340      	movs	r3, #64	; 0x40
 800f718:	616b      	str	r3, [r5, #20]
 800f71a:	2300      	movs	r3, #0
 800f71c:	9309      	str	r3, [sp, #36]	; 0x24
 800f71e:	2320      	movs	r3, #32
 800f720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f724:	f8cd 800c 	str.w	r8, [sp, #12]
 800f728:	2330      	movs	r3, #48	; 0x30
 800f72a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f8d4 <_svfiprintf_r+0x1ec>
 800f72e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f732:	f04f 0901 	mov.w	r9, #1
 800f736:	4623      	mov	r3, r4
 800f738:	469a      	mov	sl, r3
 800f73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f73e:	b10a      	cbz	r2, 800f744 <_svfiprintf_r+0x5c>
 800f740:	2a25      	cmp	r2, #37	; 0x25
 800f742:	d1f9      	bne.n	800f738 <_svfiprintf_r+0x50>
 800f744:	ebba 0b04 	subs.w	fp, sl, r4
 800f748:	d00b      	beq.n	800f762 <_svfiprintf_r+0x7a>
 800f74a:	465b      	mov	r3, fp
 800f74c:	4622      	mov	r2, r4
 800f74e:	4629      	mov	r1, r5
 800f750:	4638      	mov	r0, r7
 800f752:	f7ff ff6d 	bl	800f630 <__ssputs_r>
 800f756:	3001      	adds	r0, #1
 800f758:	f000 80aa 	beq.w	800f8b0 <_svfiprintf_r+0x1c8>
 800f75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f75e:	445a      	add	r2, fp
 800f760:	9209      	str	r2, [sp, #36]	; 0x24
 800f762:	f89a 3000 	ldrb.w	r3, [sl]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f000 80a2 	beq.w	800f8b0 <_svfiprintf_r+0x1c8>
 800f76c:	2300      	movs	r3, #0
 800f76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f776:	f10a 0a01 	add.w	sl, sl, #1
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	9307      	str	r3, [sp, #28]
 800f77e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f782:	931a      	str	r3, [sp, #104]	; 0x68
 800f784:	4654      	mov	r4, sl
 800f786:	2205      	movs	r2, #5
 800f788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f78c:	4851      	ldr	r0, [pc, #324]	; (800f8d4 <_svfiprintf_r+0x1ec>)
 800f78e:	f7f0 fd47 	bl	8000220 <memchr>
 800f792:	9a04      	ldr	r2, [sp, #16]
 800f794:	b9d8      	cbnz	r0, 800f7ce <_svfiprintf_r+0xe6>
 800f796:	06d0      	lsls	r0, r2, #27
 800f798:	bf44      	itt	mi
 800f79a:	2320      	movmi	r3, #32
 800f79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7a0:	0711      	lsls	r1, r2, #28
 800f7a2:	bf44      	itt	mi
 800f7a4:	232b      	movmi	r3, #43	; 0x2b
 800f7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800f7b0:	d015      	beq.n	800f7de <_svfiprintf_r+0xf6>
 800f7b2:	9a07      	ldr	r2, [sp, #28]
 800f7b4:	4654      	mov	r4, sl
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	f04f 0c0a 	mov.w	ip, #10
 800f7bc:	4621      	mov	r1, r4
 800f7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7c2:	3b30      	subs	r3, #48	; 0x30
 800f7c4:	2b09      	cmp	r3, #9
 800f7c6:	d94e      	bls.n	800f866 <_svfiprintf_r+0x17e>
 800f7c8:	b1b0      	cbz	r0, 800f7f8 <_svfiprintf_r+0x110>
 800f7ca:	9207      	str	r2, [sp, #28]
 800f7cc:	e014      	b.n	800f7f8 <_svfiprintf_r+0x110>
 800f7ce:	eba0 0308 	sub.w	r3, r0, r8
 800f7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	9304      	str	r3, [sp, #16]
 800f7da:	46a2      	mov	sl, r4
 800f7dc:	e7d2      	b.n	800f784 <_svfiprintf_r+0x9c>
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	1d19      	adds	r1, r3, #4
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	9103      	str	r1, [sp, #12]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	bfbb      	ittet	lt
 800f7ea:	425b      	neglt	r3, r3
 800f7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800f7f0:	9307      	strge	r3, [sp, #28]
 800f7f2:	9307      	strlt	r3, [sp, #28]
 800f7f4:	bfb8      	it	lt
 800f7f6:	9204      	strlt	r2, [sp, #16]
 800f7f8:	7823      	ldrb	r3, [r4, #0]
 800f7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800f7fc:	d10c      	bne.n	800f818 <_svfiprintf_r+0x130>
 800f7fe:	7863      	ldrb	r3, [r4, #1]
 800f800:	2b2a      	cmp	r3, #42	; 0x2a
 800f802:	d135      	bne.n	800f870 <_svfiprintf_r+0x188>
 800f804:	9b03      	ldr	r3, [sp, #12]
 800f806:	1d1a      	adds	r2, r3, #4
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	9203      	str	r2, [sp, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bfb8      	it	lt
 800f810:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f814:	3402      	adds	r4, #2
 800f816:	9305      	str	r3, [sp, #20]
 800f818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f8e4 <_svfiprintf_r+0x1fc>
 800f81c:	7821      	ldrb	r1, [r4, #0]
 800f81e:	2203      	movs	r2, #3
 800f820:	4650      	mov	r0, sl
 800f822:	f7f0 fcfd 	bl	8000220 <memchr>
 800f826:	b140      	cbz	r0, 800f83a <_svfiprintf_r+0x152>
 800f828:	2340      	movs	r3, #64	; 0x40
 800f82a:	eba0 000a 	sub.w	r0, r0, sl
 800f82e:	fa03 f000 	lsl.w	r0, r3, r0
 800f832:	9b04      	ldr	r3, [sp, #16]
 800f834:	4303      	orrs	r3, r0
 800f836:	3401      	adds	r4, #1
 800f838:	9304      	str	r3, [sp, #16]
 800f83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f83e:	4826      	ldr	r0, [pc, #152]	; (800f8d8 <_svfiprintf_r+0x1f0>)
 800f840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f844:	2206      	movs	r2, #6
 800f846:	f7f0 fceb 	bl	8000220 <memchr>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d038      	beq.n	800f8c0 <_svfiprintf_r+0x1d8>
 800f84e:	4b23      	ldr	r3, [pc, #140]	; (800f8dc <_svfiprintf_r+0x1f4>)
 800f850:	bb1b      	cbnz	r3, 800f89a <_svfiprintf_r+0x1b2>
 800f852:	9b03      	ldr	r3, [sp, #12]
 800f854:	3307      	adds	r3, #7
 800f856:	f023 0307 	bic.w	r3, r3, #7
 800f85a:	3308      	adds	r3, #8
 800f85c:	9303      	str	r3, [sp, #12]
 800f85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f860:	4433      	add	r3, r6
 800f862:	9309      	str	r3, [sp, #36]	; 0x24
 800f864:	e767      	b.n	800f736 <_svfiprintf_r+0x4e>
 800f866:	fb0c 3202 	mla	r2, ip, r2, r3
 800f86a:	460c      	mov	r4, r1
 800f86c:	2001      	movs	r0, #1
 800f86e:	e7a5      	b.n	800f7bc <_svfiprintf_r+0xd4>
 800f870:	2300      	movs	r3, #0
 800f872:	3401      	adds	r4, #1
 800f874:	9305      	str	r3, [sp, #20]
 800f876:	4619      	mov	r1, r3
 800f878:	f04f 0c0a 	mov.w	ip, #10
 800f87c:	4620      	mov	r0, r4
 800f87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f882:	3a30      	subs	r2, #48	; 0x30
 800f884:	2a09      	cmp	r2, #9
 800f886:	d903      	bls.n	800f890 <_svfiprintf_r+0x1a8>
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d0c5      	beq.n	800f818 <_svfiprintf_r+0x130>
 800f88c:	9105      	str	r1, [sp, #20]
 800f88e:	e7c3      	b.n	800f818 <_svfiprintf_r+0x130>
 800f890:	fb0c 2101 	mla	r1, ip, r1, r2
 800f894:	4604      	mov	r4, r0
 800f896:	2301      	movs	r3, #1
 800f898:	e7f0      	b.n	800f87c <_svfiprintf_r+0x194>
 800f89a:	ab03      	add	r3, sp, #12
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	462a      	mov	r2, r5
 800f8a0:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <_svfiprintf_r+0x1f8>)
 800f8a2:	a904      	add	r1, sp, #16
 800f8a4:	4638      	mov	r0, r7
 800f8a6:	f3af 8000 	nop.w
 800f8aa:	1c42      	adds	r2, r0, #1
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	d1d6      	bne.n	800f85e <_svfiprintf_r+0x176>
 800f8b0:	89ab      	ldrh	r3, [r5, #12]
 800f8b2:	065b      	lsls	r3, r3, #25
 800f8b4:	f53f af2c 	bmi.w	800f710 <_svfiprintf_r+0x28>
 800f8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8ba:	b01d      	add	sp, #116	; 0x74
 800f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c0:	ab03      	add	r3, sp, #12
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	462a      	mov	r2, r5
 800f8c6:	4b06      	ldr	r3, [pc, #24]	; (800f8e0 <_svfiprintf_r+0x1f8>)
 800f8c8:	a904      	add	r1, sp, #16
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	f000 f87a 	bl	800f9c4 <_printf_i>
 800f8d0:	e7eb      	b.n	800f8aa <_svfiprintf_r+0x1c2>
 800f8d2:	bf00      	nop
 800f8d4:	080d2254 	.word	0x080d2254
 800f8d8:	080d225e 	.word	0x080d225e
 800f8dc:	00000000 	.word	0x00000000
 800f8e0:	0800f631 	.word	0x0800f631
 800f8e4:	080d225a 	.word	0x080d225a

0800f8e8 <_printf_common>:
 800f8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ec:	4616      	mov	r6, r2
 800f8ee:	4699      	mov	r9, r3
 800f8f0:	688a      	ldr	r2, [r1, #8]
 800f8f2:	690b      	ldr	r3, [r1, #16]
 800f8f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	bfb8      	it	lt
 800f8fc:	4613      	movlt	r3, r2
 800f8fe:	6033      	str	r3, [r6, #0]
 800f900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f904:	4607      	mov	r7, r0
 800f906:	460c      	mov	r4, r1
 800f908:	b10a      	cbz	r2, 800f90e <_printf_common+0x26>
 800f90a:	3301      	adds	r3, #1
 800f90c:	6033      	str	r3, [r6, #0]
 800f90e:	6823      	ldr	r3, [r4, #0]
 800f910:	0699      	lsls	r1, r3, #26
 800f912:	bf42      	ittt	mi
 800f914:	6833      	ldrmi	r3, [r6, #0]
 800f916:	3302      	addmi	r3, #2
 800f918:	6033      	strmi	r3, [r6, #0]
 800f91a:	6825      	ldr	r5, [r4, #0]
 800f91c:	f015 0506 	ands.w	r5, r5, #6
 800f920:	d106      	bne.n	800f930 <_printf_common+0x48>
 800f922:	f104 0a19 	add.w	sl, r4, #25
 800f926:	68e3      	ldr	r3, [r4, #12]
 800f928:	6832      	ldr	r2, [r6, #0]
 800f92a:	1a9b      	subs	r3, r3, r2
 800f92c:	42ab      	cmp	r3, r5
 800f92e:	dc26      	bgt.n	800f97e <_printf_common+0x96>
 800f930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f934:	1e13      	subs	r3, r2, #0
 800f936:	6822      	ldr	r2, [r4, #0]
 800f938:	bf18      	it	ne
 800f93a:	2301      	movne	r3, #1
 800f93c:	0692      	lsls	r2, r2, #26
 800f93e:	d42b      	bmi.n	800f998 <_printf_common+0xb0>
 800f940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f944:	4649      	mov	r1, r9
 800f946:	4638      	mov	r0, r7
 800f948:	47c0      	blx	r8
 800f94a:	3001      	adds	r0, #1
 800f94c:	d01e      	beq.n	800f98c <_printf_common+0xa4>
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	68e5      	ldr	r5, [r4, #12]
 800f952:	6832      	ldr	r2, [r6, #0]
 800f954:	f003 0306 	and.w	r3, r3, #6
 800f958:	2b04      	cmp	r3, #4
 800f95a:	bf08      	it	eq
 800f95c:	1aad      	subeq	r5, r5, r2
 800f95e:	68a3      	ldr	r3, [r4, #8]
 800f960:	6922      	ldr	r2, [r4, #16]
 800f962:	bf0c      	ite	eq
 800f964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f968:	2500      	movne	r5, #0
 800f96a:	4293      	cmp	r3, r2
 800f96c:	bfc4      	itt	gt
 800f96e:	1a9b      	subgt	r3, r3, r2
 800f970:	18ed      	addgt	r5, r5, r3
 800f972:	2600      	movs	r6, #0
 800f974:	341a      	adds	r4, #26
 800f976:	42b5      	cmp	r5, r6
 800f978:	d11a      	bne.n	800f9b0 <_printf_common+0xc8>
 800f97a:	2000      	movs	r0, #0
 800f97c:	e008      	b.n	800f990 <_printf_common+0xa8>
 800f97e:	2301      	movs	r3, #1
 800f980:	4652      	mov	r2, sl
 800f982:	4649      	mov	r1, r9
 800f984:	4638      	mov	r0, r7
 800f986:	47c0      	blx	r8
 800f988:	3001      	adds	r0, #1
 800f98a:	d103      	bne.n	800f994 <_printf_common+0xac>
 800f98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f994:	3501      	adds	r5, #1
 800f996:	e7c6      	b.n	800f926 <_printf_common+0x3e>
 800f998:	18e1      	adds	r1, r4, r3
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	2030      	movs	r0, #48	; 0x30
 800f99e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9a2:	4422      	add	r2, r4
 800f9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9ac:	3302      	adds	r3, #2
 800f9ae:	e7c7      	b.n	800f940 <_printf_common+0x58>
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	4622      	mov	r2, r4
 800f9b4:	4649      	mov	r1, r9
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	47c0      	blx	r8
 800f9ba:	3001      	adds	r0, #1
 800f9bc:	d0e6      	beq.n	800f98c <_printf_common+0xa4>
 800f9be:	3601      	adds	r6, #1
 800f9c0:	e7d9      	b.n	800f976 <_printf_common+0x8e>
	...

0800f9c4 <_printf_i>:
 800f9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c8:	460c      	mov	r4, r1
 800f9ca:	4691      	mov	r9, r2
 800f9cc:	7e27      	ldrb	r7, [r4, #24]
 800f9ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f9d0:	2f78      	cmp	r7, #120	; 0x78
 800f9d2:	4680      	mov	r8, r0
 800f9d4:	469a      	mov	sl, r3
 800f9d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9da:	d807      	bhi.n	800f9ec <_printf_i+0x28>
 800f9dc:	2f62      	cmp	r7, #98	; 0x62
 800f9de:	d80a      	bhi.n	800f9f6 <_printf_i+0x32>
 800f9e0:	2f00      	cmp	r7, #0
 800f9e2:	f000 80d8 	beq.w	800fb96 <_printf_i+0x1d2>
 800f9e6:	2f58      	cmp	r7, #88	; 0x58
 800f9e8:	f000 80a3 	beq.w	800fb32 <_printf_i+0x16e>
 800f9ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9f4:	e03a      	b.n	800fa6c <_printf_i+0xa8>
 800f9f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9fa:	2b15      	cmp	r3, #21
 800f9fc:	d8f6      	bhi.n	800f9ec <_printf_i+0x28>
 800f9fe:	a001      	add	r0, pc, #4	; (adr r0, 800fa04 <_printf_i+0x40>)
 800fa00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fa04:	0800fa5d 	.word	0x0800fa5d
 800fa08:	0800fa71 	.word	0x0800fa71
 800fa0c:	0800f9ed 	.word	0x0800f9ed
 800fa10:	0800f9ed 	.word	0x0800f9ed
 800fa14:	0800f9ed 	.word	0x0800f9ed
 800fa18:	0800f9ed 	.word	0x0800f9ed
 800fa1c:	0800fa71 	.word	0x0800fa71
 800fa20:	0800f9ed 	.word	0x0800f9ed
 800fa24:	0800f9ed 	.word	0x0800f9ed
 800fa28:	0800f9ed 	.word	0x0800f9ed
 800fa2c:	0800f9ed 	.word	0x0800f9ed
 800fa30:	0800fb7d 	.word	0x0800fb7d
 800fa34:	0800faa1 	.word	0x0800faa1
 800fa38:	0800fb5f 	.word	0x0800fb5f
 800fa3c:	0800f9ed 	.word	0x0800f9ed
 800fa40:	0800f9ed 	.word	0x0800f9ed
 800fa44:	0800fb9f 	.word	0x0800fb9f
 800fa48:	0800f9ed 	.word	0x0800f9ed
 800fa4c:	0800faa1 	.word	0x0800faa1
 800fa50:	0800f9ed 	.word	0x0800f9ed
 800fa54:	0800f9ed 	.word	0x0800f9ed
 800fa58:	0800fb67 	.word	0x0800fb67
 800fa5c:	680b      	ldr	r3, [r1, #0]
 800fa5e:	1d1a      	adds	r2, r3, #4
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	600a      	str	r2, [r1, #0]
 800fa64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fa68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e0a3      	b.n	800fbb8 <_printf_i+0x1f4>
 800fa70:	6825      	ldr	r5, [r4, #0]
 800fa72:	6808      	ldr	r0, [r1, #0]
 800fa74:	062e      	lsls	r6, r5, #24
 800fa76:	f100 0304 	add.w	r3, r0, #4
 800fa7a:	d50a      	bpl.n	800fa92 <_printf_i+0xce>
 800fa7c:	6805      	ldr	r5, [r0, #0]
 800fa7e:	600b      	str	r3, [r1, #0]
 800fa80:	2d00      	cmp	r5, #0
 800fa82:	da03      	bge.n	800fa8c <_printf_i+0xc8>
 800fa84:	232d      	movs	r3, #45	; 0x2d
 800fa86:	426d      	negs	r5, r5
 800fa88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa8c:	485e      	ldr	r0, [pc, #376]	; (800fc08 <_printf_i+0x244>)
 800fa8e:	230a      	movs	r3, #10
 800fa90:	e019      	b.n	800fac6 <_printf_i+0x102>
 800fa92:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fa96:	6805      	ldr	r5, [r0, #0]
 800fa98:	600b      	str	r3, [r1, #0]
 800fa9a:	bf18      	it	ne
 800fa9c:	b22d      	sxthne	r5, r5
 800fa9e:	e7ef      	b.n	800fa80 <_printf_i+0xbc>
 800faa0:	680b      	ldr	r3, [r1, #0]
 800faa2:	6825      	ldr	r5, [r4, #0]
 800faa4:	1d18      	adds	r0, r3, #4
 800faa6:	6008      	str	r0, [r1, #0]
 800faa8:	0628      	lsls	r0, r5, #24
 800faaa:	d501      	bpl.n	800fab0 <_printf_i+0xec>
 800faac:	681d      	ldr	r5, [r3, #0]
 800faae:	e002      	b.n	800fab6 <_printf_i+0xf2>
 800fab0:	0669      	lsls	r1, r5, #25
 800fab2:	d5fb      	bpl.n	800faac <_printf_i+0xe8>
 800fab4:	881d      	ldrh	r5, [r3, #0]
 800fab6:	4854      	ldr	r0, [pc, #336]	; (800fc08 <_printf_i+0x244>)
 800fab8:	2f6f      	cmp	r7, #111	; 0x6f
 800faba:	bf0c      	ite	eq
 800fabc:	2308      	moveq	r3, #8
 800fabe:	230a      	movne	r3, #10
 800fac0:	2100      	movs	r1, #0
 800fac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fac6:	6866      	ldr	r6, [r4, #4]
 800fac8:	60a6      	str	r6, [r4, #8]
 800faca:	2e00      	cmp	r6, #0
 800facc:	bfa2      	ittt	ge
 800face:	6821      	ldrge	r1, [r4, #0]
 800fad0:	f021 0104 	bicge.w	r1, r1, #4
 800fad4:	6021      	strge	r1, [r4, #0]
 800fad6:	b90d      	cbnz	r5, 800fadc <_printf_i+0x118>
 800fad8:	2e00      	cmp	r6, #0
 800fada:	d04d      	beq.n	800fb78 <_printf_i+0x1b4>
 800fadc:	4616      	mov	r6, r2
 800fade:	fbb5 f1f3 	udiv	r1, r5, r3
 800fae2:	fb03 5711 	mls	r7, r3, r1, r5
 800fae6:	5dc7      	ldrb	r7, [r0, r7]
 800fae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800faec:	462f      	mov	r7, r5
 800faee:	42bb      	cmp	r3, r7
 800faf0:	460d      	mov	r5, r1
 800faf2:	d9f4      	bls.n	800fade <_printf_i+0x11a>
 800faf4:	2b08      	cmp	r3, #8
 800faf6:	d10b      	bne.n	800fb10 <_printf_i+0x14c>
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	07df      	lsls	r7, r3, #31
 800fafc:	d508      	bpl.n	800fb10 <_printf_i+0x14c>
 800fafe:	6923      	ldr	r3, [r4, #16]
 800fb00:	6861      	ldr	r1, [r4, #4]
 800fb02:	4299      	cmp	r1, r3
 800fb04:	bfde      	ittt	le
 800fb06:	2330      	movle	r3, #48	; 0x30
 800fb08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fb0c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800fb10:	1b92      	subs	r2, r2, r6
 800fb12:	6122      	str	r2, [r4, #16]
 800fb14:	f8cd a000 	str.w	sl, [sp]
 800fb18:	464b      	mov	r3, r9
 800fb1a:	aa03      	add	r2, sp, #12
 800fb1c:	4621      	mov	r1, r4
 800fb1e:	4640      	mov	r0, r8
 800fb20:	f7ff fee2 	bl	800f8e8 <_printf_common>
 800fb24:	3001      	adds	r0, #1
 800fb26:	d14c      	bne.n	800fbc2 <_printf_i+0x1fe>
 800fb28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb2c:	b004      	add	sp, #16
 800fb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb32:	4835      	ldr	r0, [pc, #212]	; (800fc08 <_printf_i+0x244>)
 800fb34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb38:	6823      	ldr	r3, [r4, #0]
 800fb3a:	680e      	ldr	r6, [r1, #0]
 800fb3c:	061f      	lsls	r7, r3, #24
 800fb3e:	f856 5b04 	ldr.w	r5, [r6], #4
 800fb42:	600e      	str	r6, [r1, #0]
 800fb44:	d514      	bpl.n	800fb70 <_printf_i+0x1ac>
 800fb46:	07d9      	lsls	r1, r3, #31
 800fb48:	bf44      	itt	mi
 800fb4a:	f043 0320 	orrmi.w	r3, r3, #32
 800fb4e:	6023      	strmi	r3, [r4, #0]
 800fb50:	b91d      	cbnz	r5, 800fb5a <_printf_i+0x196>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	f023 0320 	bic.w	r3, r3, #32
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	2310      	movs	r3, #16
 800fb5c:	e7b0      	b.n	800fac0 <_printf_i+0xfc>
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	f043 0320 	orr.w	r3, r3, #32
 800fb64:	6023      	str	r3, [r4, #0]
 800fb66:	2378      	movs	r3, #120	; 0x78
 800fb68:	4828      	ldr	r0, [pc, #160]	; (800fc0c <_printf_i+0x248>)
 800fb6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb6e:	e7e3      	b.n	800fb38 <_printf_i+0x174>
 800fb70:	065e      	lsls	r6, r3, #25
 800fb72:	bf48      	it	mi
 800fb74:	b2ad      	uxthmi	r5, r5
 800fb76:	e7e6      	b.n	800fb46 <_printf_i+0x182>
 800fb78:	4616      	mov	r6, r2
 800fb7a:	e7bb      	b.n	800faf4 <_printf_i+0x130>
 800fb7c:	680b      	ldr	r3, [r1, #0]
 800fb7e:	6826      	ldr	r6, [r4, #0]
 800fb80:	6960      	ldr	r0, [r4, #20]
 800fb82:	1d1d      	adds	r5, r3, #4
 800fb84:	600d      	str	r5, [r1, #0]
 800fb86:	0635      	lsls	r5, r6, #24
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	d501      	bpl.n	800fb90 <_printf_i+0x1cc>
 800fb8c:	6018      	str	r0, [r3, #0]
 800fb8e:	e002      	b.n	800fb96 <_printf_i+0x1d2>
 800fb90:	0671      	lsls	r1, r6, #25
 800fb92:	d5fb      	bpl.n	800fb8c <_printf_i+0x1c8>
 800fb94:	8018      	strh	r0, [r3, #0]
 800fb96:	2300      	movs	r3, #0
 800fb98:	6123      	str	r3, [r4, #16]
 800fb9a:	4616      	mov	r6, r2
 800fb9c:	e7ba      	b.n	800fb14 <_printf_i+0x150>
 800fb9e:	680b      	ldr	r3, [r1, #0]
 800fba0:	1d1a      	adds	r2, r3, #4
 800fba2:	600a      	str	r2, [r1, #0]
 800fba4:	681e      	ldr	r6, [r3, #0]
 800fba6:	6862      	ldr	r2, [r4, #4]
 800fba8:	2100      	movs	r1, #0
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f7f0 fb38 	bl	8000220 <memchr>
 800fbb0:	b108      	cbz	r0, 800fbb6 <_printf_i+0x1f2>
 800fbb2:	1b80      	subs	r0, r0, r6
 800fbb4:	6060      	str	r0, [r4, #4]
 800fbb6:	6863      	ldr	r3, [r4, #4]
 800fbb8:	6123      	str	r3, [r4, #16]
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbc0:	e7a8      	b.n	800fb14 <_printf_i+0x150>
 800fbc2:	6923      	ldr	r3, [r4, #16]
 800fbc4:	4632      	mov	r2, r6
 800fbc6:	4649      	mov	r1, r9
 800fbc8:	4640      	mov	r0, r8
 800fbca:	47d0      	blx	sl
 800fbcc:	3001      	adds	r0, #1
 800fbce:	d0ab      	beq.n	800fb28 <_printf_i+0x164>
 800fbd0:	6823      	ldr	r3, [r4, #0]
 800fbd2:	079b      	lsls	r3, r3, #30
 800fbd4:	d413      	bmi.n	800fbfe <_printf_i+0x23a>
 800fbd6:	68e0      	ldr	r0, [r4, #12]
 800fbd8:	9b03      	ldr	r3, [sp, #12]
 800fbda:	4298      	cmp	r0, r3
 800fbdc:	bfb8      	it	lt
 800fbde:	4618      	movlt	r0, r3
 800fbe0:	e7a4      	b.n	800fb2c <_printf_i+0x168>
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	4632      	mov	r2, r6
 800fbe6:	4649      	mov	r1, r9
 800fbe8:	4640      	mov	r0, r8
 800fbea:	47d0      	blx	sl
 800fbec:	3001      	adds	r0, #1
 800fbee:	d09b      	beq.n	800fb28 <_printf_i+0x164>
 800fbf0:	3501      	adds	r5, #1
 800fbf2:	68e3      	ldr	r3, [r4, #12]
 800fbf4:	9903      	ldr	r1, [sp, #12]
 800fbf6:	1a5b      	subs	r3, r3, r1
 800fbf8:	42ab      	cmp	r3, r5
 800fbfa:	dcf2      	bgt.n	800fbe2 <_printf_i+0x21e>
 800fbfc:	e7eb      	b.n	800fbd6 <_printf_i+0x212>
 800fbfe:	2500      	movs	r5, #0
 800fc00:	f104 0619 	add.w	r6, r4, #25
 800fc04:	e7f5      	b.n	800fbf2 <_printf_i+0x22e>
 800fc06:	bf00      	nop
 800fc08:	080d2265 	.word	0x080d2265
 800fc0c:	080d2276 	.word	0x080d2276

0800fc10 <memmove>:
 800fc10:	4288      	cmp	r0, r1
 800fc12:	b510      	push	{r4, lr}
 800fc14:	eb01 0402 	add.w	r4, r1, r2
 800fc18:	d902      	bls.n	800fc20 <memmove+0x10>
 800fc1a:	4284      	cmp	r4, r0
 800fc1c:	4623      	mov	r3, r4
 800fc1e:	d807      	bhi.n	800fc30 <memmove+0x20>
 800fc20:	1e43      	subs	r3, r0, #1
 800fc22:	42a1      	cmp	r1, r4
 800fc24:	d008      	beq.n	800fc38 <memmove+0x28>
 800fc26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc2e:	e7f8      	b.n	800fc22 <memmove+0x12>
 800fc30:	4402      	add	r2, r0
 800fc32:	4601      	mov	r1, r0
 800fc34:	428a      	cmp	r2, r1
 800fc36:	d100      	bne.n	800fc3a <memmove+0x2a>
 800fc38:	bd10      	pop	{r4, pc}
 800fc3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc42:	e7f7      	b.n	800fc34 <memmove+0x24>

0800fc44 <_realloc_r>:
 800fc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc46:	4607      	mov	r7, r0
 800fc48:	4614      	mov	r4, r2
 800fc4a:	460e      	mov	r6, r1
 800fc4c:	b921      	cbnz	r1, 800fc58 <_realloc_r+0x14>
 800fc4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc52:	4611      	mov	r1, r2
 800fc54:	f7ff bb9c 	b.w	800f390 <_malloc_r>
 800fc58:	b922      	cbnz	r2, 800fc64 <_realloc_r+0x20>
 800fc5a:	f7ff fc99 	bl	800f590 <_free_r>
 800fc5e:	4625      	mov	r5, r4
 800fc60:	4628      	mov	r0, r5
 800fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc64:	f000 f814 	bl	800fc90 <_malloc_usable_size_r>
 800fc68:	42a0      	cmp	r0, r4
 800fc6a:	d20f      	bcs.n	800fc8c <_realloc_r+0x48>
 800fc6c:	4621      	mov	r1, r4
 800fc6e:	4638      	mov	r0, r7
 800fc70:	f7ff fb8e 	bl	800f390 <_malloc_r>
 800fc74:	4605      	mov	r5, r0
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d0f2      	beq.n	800fc60 <_realloc_r+0x1c>
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	4622      	mov	r2, r4
 800fc7e:	f7ff fb71 	bl	800f364 <memcpy>
 800fc82:	4631      	mov	r1, r6
 800fc84:	4638      	mov	r0, r7
 800fc86:	f7ff fc83 	bl	800f590 <_free_r>
 800fc8a:	e7e9      	b.n	800fc60 <_realloc_r+0x1c>
 800fc8c:	4635      	mov	r5, r6
 800fc8e:	e7e7      	b.n	800fc60 <_realloc_r+0x1c>

0800fc90 <_malloc_usable_size_r>:
 800fc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc94:	1f18      	subs	r0, r3, #4
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	bfbc      	itt	lt
 800fc9a:	580b      	ldrlt	r3, [r1, r0]
 800fc9c:	18c0      	addlt	r0, r0, r3
 800fc9e:	4770      	bx	lr

0800fca0 <_init>:
 800fca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca2:	bf00      	nop
 800fca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fca6:	bc08      	pop	{r3}
 800fca8:	469e      	mov	lr, r3
 800fcaa:	4770      	bx	lr

0800fcac <_fini>:
 800fcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcae:	bf00      	nop
 800fcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcb2:	bc08      	pop	{r3}
 800fcb4:	469e      	mov	lr, r3
 800fcb6:	4770      	bx	lr
